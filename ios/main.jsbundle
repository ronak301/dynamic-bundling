(function(global) {

global.__DEV__ = true;

global.__BUNDLE_START_TIME__ = global.nativePerformanceNow ? global.nativePerformanceNow() : Date.now();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

'use strict';
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

global.require = _require;
global.__d = define;

var modules = Object.create(null);
if (__DEV__) {
  var verboseNamesToModuleIds = Object.create(null);
}

function define(factory, moduleId, dependencyMap) {
  if (moduleId in modules) {
    return;
  }
  modules[moduleId] = {
    dependencyMap: dependencyMap,
    exports: undefined,
    factory: factory,
    hasError: false,
    isInitialized: false };

  if (__DEV__) {
    modules[moduleId].hot = createHotReloadingObject();

    var verboseName = arguments[3];
    if (verboseName) {
      modules[moduleId].verboseName = verboseName;
      verboseNamesToModuleIds[verboseName] = moduleId;
    }
  }
}

function _require(moduleId) {
  if (__DEV__ && typeof moduleId === 'string') {
    var verboseName = moduleId;
    moduleId = verboseNamesToModuleIds[moduleId];
    if (moduleId == null) {
      throw new Error('Unknown named module: \'' + verboseName + '\'');
    } else {
      console.warn('Requiring module \'' + verboseName + '\' by name is only supported for ' + 'debugging purposes and will BREAK IN PRODUCTION!');
    }
  }

  var moduleIdReallyIsNumber = moduleId;
  var module = modules[moduleIdReallyIsNumber];
  return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
}

var inGuard = false;
function guardedLoadModule(moduleId, module) {
  if (!inGuard && global.ErrorUtils) {
    inGuard = true;
    var returnValue = void 0;
    try {
      returnValue = loadModuleImplementation(moduleId, module);
    } catch (e) {
      global.ErrorUtils.reportFatalError(e);
    }
    inGuard = false;
    return returnValue;
  } else {
    return loadModuleImplementation(moduleId, module);
  }
}

function loadModuleImplementation(moduleId, module) {
  var nativeRequire = global.nativeRequire;
  if (!module && nativeRequire) {
    nativeRequire(moduleId);
    module = modules[moduleId];
  }

  if (!module) {
    throw unknownModuleError(moduleId);
  }

  if (module.hasError) {
    throw moduleThrewError(moduleId, module.error);
  }

  if (__DEV__) {
    var Systrace = _require.Systrace;
  }

  module.isInitialized = true;
  var exports = module.exports = {};var _module = module;var factory = _module.factory,
      dependencyMap = _module.dependencyMap;
  try {
    if (__DEV__) {
      Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
    }

    var moduleObject = { exports: exports };
    if (__DEV__ && module.hot) {
      moduleObject.hot = module.hot;
    }

    factory(global, _require, moduleObject, exports, dependencyMap);

    if (!__DEV__) {
      module.factory = undefined;
      module.dependencyMap = undefined;
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
    return module.exports = moduleObject.exports;
  } catch (e) {
    module.hasError = true;
    module.error = e;
    module.isInitialized = false;
    module.exports = undefined;
    throw e;
  }
}

function unknownModuleError(id) {
  var message = 'Requiring unknown module "' + id + '".';
  if (__DEV__) {
    message += 'If you are sure the module is there, try restarting the packager. ' + 'You may also want to run `npm install`, or `yarn` (depending on your environment).';
  }
  return Error(message);
}

function moduleThrewError(id, error) {
  var displayName = __DEV__ && modules[id] && modules[id].verboseName || id;
  return Error('Requiring module "' + displayName + '", which threw an exception: ' + error);
}

if (__DEV__) {
  _require.Systrace = { beginEvent: function beginEvent() {}, endEvent: function endEvent() {} };

  var createHotReloadingObject = function createHotReloadingObject() {
    var hot = {
      acceptCallback: null,
      accept: function accept(callback) {
        hot.acceptCallback = callback;
      } };

    return hot;
  };

  var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
    if (!dependentModules || dependentModules.length === 0) {
      return true;
    }

    var notAccepted = dependentModules.filter(function (module) {
      return !accept(module, undefined, inverseDependencies);
    });

    var parents = [];
    for (var i = 0; i < notAccepted.length; i++) {
      if (inverseDependencies[notAccepted[i]].length === 0) {
        return false;
      }

      parents.push.apply(parents, _toConsumableArray(inverseDependencies[notAccepted[i]]));
    }

    return acceptAll(parents, inverseDependencies);
  };

  var accept = function accept(id, factory, inverseDependencies) {
    var mod = modules[id];

    if (!mod && factory) {
      define(factory, id);
      return true;
    }var hot = mod.hot;
    if (!hot) {
      console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');

      return false;
    }

    if (factory) {
      mod.factory = factory;
    }
    mod.hasError = false;
    mod.isInitialized = false;
    _require(id);

    if (hot.acceptCallback) {
      hot.acceptCallback();
      return true;
    } else {
      if (!inverseDependencies) {
        throw new Error('Undefined `inverseDependencies`');
      }

      return acceptAll(inverseDependencies[id], inverseDependencies);
    }
  };

  global.__accept = accept;
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

Object.assign = function (target, sources) {
  if (__DEV__) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
    if (typeof target !== 'object' && typeof target !== 'function') {
      throw new TypeError('In this environment the target of assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
    }
  }

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    if (__DEV__) {
      if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
        throw new TypeError('In this environment the sources for assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var key in nextSource) {
      if (__DEV__) {
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        if (!hasOwnProperty.call(nextSource, key)) {
          throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }
      target[key] = nextSource[key];
    }
  }

  return target;
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
var inspect = function () {

  function inspect(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    return formatValue(ctx, obj, opts.depth);
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};

    array.forEach(function (val, idx) {
      hash[val] = true;
    });

    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}'];

    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function (prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  return inspect;
}();

var OBJECT_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
  trace: 0,
  info: 1,
  warn: 2,
  error: 3
};
var INSPECTOR_LEVELS = [];
INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

if (global.nativeLoggingHook) {
  function getNativeLogFunction(level) {
    return function () {
      var str = void 0;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, { depth: 10 });
        }).join(', ');
      }

      var logLevel = level;
      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  };

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    };

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var originalConsole = global.console;
  global.console = {
    error: getNativeLogFunction(LOG_LEVELS.error),
    info: getNativeLogFunction(LOG_LEVELS.info),
    log: getNativeLogFunction(LOG_LEVELS.info),
    warn: getNativeLogFunction(LOG_LEVELS.warn),
    trace: getNativeLogFunction(LOG_LEVELS.trace),
    debug: getNativeLogFunction(LOG_LEVELS.trace),
    table: consoleTablePolyfill
  };

  if (__DEV__ && originalConsole) {
    var descriptor = Object.getOwnPropertyDescriptor(global, 'console');
    if (descriptor) {
      Object.defineProperty(global, 'originalConsole', descriptor);
    }

    Object.keys(console).forEach(function (methodName) {
      var reactNativeMethod = console[methodName];
      if (originalConsole[methodName]) {
        console[methodName] = function () {
          originalConsole[methodName].apply(originalConsole, arguments);
          reactNativeMethod.apply(console, arguments);
        };
      }
    });
  }
} else if (!global.console) {
  function consoleLoggingStub() {};
  global.console = {
    error: consoleLoggingStub,
    info: consoleLoggingStub,
    log: consoleLoggingStub,
    warn: consoleLoggingStub,
    trace: consoleLoggingStub,
    debug: consoleLoggingStub,
    table: consoleLoggingStub
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }
    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }
    return null;
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }
    name = name || fun.name || '<generated guard>';
    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};

global.ErrorUtils = ErrorUtils;
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (Number.EPSILON === undefined) {
  Object.defineProperty(Number, 'EPSILON', {
    value: Math.pow(2, -52)
  });
}
if (Number.MAX_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
    value: Math.pow(2, 53) - 1
  });
}
if (Number.MIN_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
    value: -(Math.pow(2, 53) - 1)
  });
}
if (!Number.isNaN) {
  var globalIsNaN = global.isNaN;
  Object.defineProperty(Number, 'isNaN', {
    configurable: true,
    enumerable: false,
    value: function isNaN(value) {
      return typeof value === 'number' && globalIsNaN(value);
    },
    writable: true
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
    var start = Math.min(Math.max(pos, 0), string.length);
    return string.indexOf(String(search), pos) === start;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var stringLength = string.length;
    var searchString = String(search);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchString.length;
    if (start < 0) {
      return false;
    }
    return string.lastIndexOf(searchString, start) === start;
  };
}

if (!String.prototype.repeat) {
  String.prototype.repeat = function (count) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    count = Number(count) || 0;
    if (count < 0 || count === Infinity) {
      throw RangeError();
    }
    if (count === 1) {
      return string;
    }
    var result = '';
    while (count) {
      if (count & 1) {
        result += string;
      }
      if (count >>= 1) {
        string += string;
      }
    }
    return result;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function (search, start) {
    'use strict';

    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
function findIndex(predicate, context) {
  if (this == null) {
    throw new TypeError('Array.prototype.findIndex called on null or undefined');
  }
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate must be a function');
  }
  var list = Object(this);
  var length = list.length >>> 0;
  for (var i = 0; i < length; i++) {
    if (predicate.call(context, list[i], i, list)) {
      return i;
    }
  }
  return -1;
}

if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: findIndex
  });
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(predicate, context) {
      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      var index = findIndex.call(this, predicate, context);
      return index === -1 ? undefined : this[index];
    }
  });
}

if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(searchElement) {
      var O = Object(this);
      var len = parseInt(O.length) || 0;
      if (len === 0) {
        return false;
      }
      var n = parseInt(arguments[1]) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
          return true;
        }
        k++;
      }
      return false;
    }
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
if (!Array.from) {
  Array.from = function (arrayLike) {
    if (arrayLike == null) {
      throw new TypeError('Object is null or undefined');
    }

    var mapFn = arguments[1];
    var thisArg = arguments[2];

    var C = this;
    var items = Object(arrayLike);
    var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';
    var mapping = typeof mapFn === 'function';
    var usingIterator = typeof items[symbolIterator] === 'function';
    var key = 0;
    var ret;
    var value;

    if (usingIterator) {
      ret = typeof C === 'function' ? new C() : [];
      var it = items[symbolIterator]();
      var next;

      while (!(next = it.next()).done) {
        value = next.value;

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    }

    var len = items.length;
    if (isNaN(len) || len < 0) {
      len = 0;
    }

    ret = typeof C === 'function' ? new C(len) : new Array(len);

    while (key < len) {
      value = items[key];

      if (mapping) {
        value = mapFn.call(thisArg, value, key);
      }

      ret[key] = value;

      key += 1;
    }

    ret.length = key;
    return ret;
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

(function () {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  if (typeof Object.entries !== 'function') {
    Object.entries = function (object) {
      if (object == null) {
        throw new TypeError('Object.entries called on non-object');
      }

      var entries = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          entries.push([key, object[key]]);
        }
      }
      return entries;
    };
  }

  if (typeof Object.values !== 'function') {
    Object.values = function (object) {
      if (object == null) {
        throw new TypeError('Object.values called on non-object');
      }

      var values = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          values.push(object[key]);
        }
      }
      return values;
    };
  }
})();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var babelHelpers = global.babelHelpers = {};

babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

babelHelpers.createRawReactElement = function () {
  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
  return function createRawReactElement(type, key, props) {
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: null,
      props: props,
      _owner: null
    };
  };
}();

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.defineEnumerableProperties = function (obj, descs) {
  for (var key in descs) {
    var desc = descs[key];
    desc.configurable = desc.enumerable = true;
    if ('value' in desc) desc.writable = true;
    Object.defineProperty(obj, key, desc);
  }
  return obj;
};

babelHelpers.defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

babelHelpers.get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.interopRequireDefault = function (obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
};

babelHelpers.interopRequireWildcard = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
};

babelHelpers.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers.slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

babelHelpers.taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

babelHelpers.toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

babelHelpers.toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
__d(/* poctest/index.ios.js */function(global, require, module, exports) {var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/index.ios.js';

require(12              ); // 12 = ./SPRPolyFills

var _react = require(13     ); // 13 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(27            ); // 27 = react-native

var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

var _Dimensions = require(162         ); // 162 = Dimensions

var _Dimensions2 = babelHelpers.interopRequireDefault(_Dimensions);

var _reactNativeCodePush = require(317                     ); // 317 = react-native-code-push

var _reactNativeCodePush2 = babelHelpers.interopRequireDefault(_reactNativeCodePush);

var _code = require(325     ); // 325 = ./code

var _code2 = babelHelpers.interopRequireDefault(_code);

var codePushOptions = { checkFrequency: _reactNativeCodePush2.default.CheckFrequency.ON_APP_RESUME };

var babelStandalone = require(328                 ); // 328 = ./babel-standalone

var _Dimensions$get = _Dimensions2.default.get('window'),
    height = _Dimensions$get.height,
    width = _Dimensions$get.width;

global['$$$___1C_Modules___$$$'] = {
  react: require(13     ), // 13 = react
  'react-native': require(27            ) // 27 = react-native
};

function wrapScript(code) {
  return '\n     global[\'$$$___1C_Result___$$$\'] = (function (require, module, exports) {\n       exports = {};\n       module = {exports: exports};\n       ' + code + '\n       ;\n       return module;\n     })(function (moduleName) { // require implementation\n       return global[\'$$$___1C_Modules___$$$\'][moduleName];\n     });\n   ';
}

var App = function (_React$Component) {
  babelHelpers.inherits(App, _React$Component);

  function App(props, context) {
    babelHelpers.classCallCheck(this, App);

    var _this = babelHelpers.possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props, context));

    _this.state = {
      code: _code2.default,
      url: 'http://ccheever.com/Exponent/OneComponent.jsx'
    };
    return _this;
  }

  babelHelpers.createClass(App, [{
    key: 'render',
    value: function render() {
      debugger;
      var MyComponent1 = this.state.code.bundle1;
      var MyComponent2 = this.state.code.bundle2;
      return _react2.default.createElement(
        _reactNative.View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 62
          }
        },
        _react2.default.createElement(MyComponent1, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        }),
        _react2.default.createElement(MyComponent2, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64
          }
        })
      );

      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        },
        _react2.default.createElement(_reactNative.View, {
          style: {
            height: 30,
            width: 1
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        }),
        MyComponent && _react2.default.createElement(MyComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        })
      );
    }
  }]);
  return App;
}(_react2.default.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

_reactNative.AppRegistry.registerComponent('poctest', function () {
  return (0, _reactNativeCodePush2.default)(codePushOptions)(App);
});
}, 0, null, "poctest/index.ios.js");
__d(/* poctest/SPRPolyFills.js */function(global, require, module, exports) {global['React'] = require(13     ); // 13 = react
global['ReactNative'] = require(27            ); // 27 = react-native
}, 12, null, "poctest/SPRPolyFills.js");
__d(/* react/index.js */function(global, require, module, exports) {'use strict';

if (process.env.NODE_ENV === 'production') {
  module.exports = require(14                             ); // 14 = ./cjs/react.production.min.js
} else {
  module.exports = require(26                          ); // 26 = ./cjs/react.development.js
}
}, 13, null, "react/index.js");
__d(/* react/cjs/react.production.min.js */function(global, require, module, exports) {"use strict";
function e(e) {
  for (var t = arguments.length - 1, r = "Minified React error #" + e + "; visit http://facebook.github.io/react/docs/error-decoder.html?invariant=" + e, n = 0; n < t; n++) {
    r += "&args[]=" + encodeURIComponent(arguments[n + 1]);
  }r += " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var o = new Error(r);throw o.name = "Invariant Violation", o.framesToPop = 1, o;
}function t(e, t) {}function r(e, t, r) {
  this.props = e, this.context = t, this.refs = A, this.updater = r || T;
}function n(e, t, r) {
  this.props = e, this.context = t, this.refs = A, this.updater = r || T;
}function o() {}function i(e) {
  return void 0 !== e.ref;
}function a(e) {
  return void 0 !== e.key;
}function l(e) {
  var t = e && (Z && e[Z] || e[ee]);if ("function" == typeof t) return t;
}function u(e) {
  var t = { "=": "=0", ":": "=2" };return "$" + ("" + e).replace(/[=:]/g, function (e) {
    return t[e];
  });
}function c(e) {
  var t = { "=0": "=", "=2": ":" };return ("" + ("." === e[0] && "$" === e[1] ? e.substring(2) : e.substring(1))).replace(/(=0|=2)/g, function (e) {
    return t[e];
  });
}function s(e, t) {
  return "object" == typeof e && null !== e && null != e.key ? ne.escape(e.key) : t.toString(36);
}function p(e, t, r, n) {
  var o = typeof e;if ("undefined" !== o && "boolean" !== o || (e = null), null === e || "string" === o || "number" === o || "object" === o && e.$$typeof === Y) return r(n, e, "" === t ? oe + s(e, 0) : t), 1;var i,
      a,
      l = 0,
      u = "" === t ? oe : t + ie;if (Array.isArray(e)) for (var c = 0; c < e.length; c++) {
    i = e[c], a = u + s(i, c), l += p(i, a, r, n);
  } else {
    var f = te(e);if (f) for (var d, h = f.call(e), y = 0; !(d = h.next()).done;) {
      i = d.value, a = u + s(i, y++), l += p(i, a, r, n);
    } else if ("object" === o) {
      var m = "" + e;R("31", "[object Object]" === m ? "object with keys {" + Object.keys(e).join(", ") + "}" : m, "");
    }
  }return l;
}function f(e, t, r) {
  return null == e ? 0 : p(e, "", t, r);
}function d(e) {
  return ("" + e).replace(ce, "$&/");
}function h(e, t) {
  this.func = e, this.context = t, this.count = 0;
}function y(e, t, r) {
  var n = e.func,
      o = e.context;n.call(o, t, e.count++);
}function m(e, t, r) {
  if (null == e) return e;var n = h.getPooled(t, r);ae(e, y, n), h.release(n);
}function b(e, t, r, n) {
  this.result = e, this.keyPrefix = t, this.func = r, this.context = n, this.count = 0;
}function v(e, t, r) {
  var n = e.result,
      o = e.keyPrefix,
      i = e.func,
      a = e.context,
      l = i.call(a, t, e.count++);Array.isArray(l) ? g(l, n, r, j.thatReturnsArgument) : null != l && (X.isValidElement(l) && (l = X.cloneAndReplaceKey(l, o + (!l.key || t && t.key === l.key ? "" : d(l.key) + "/") + r)), n.push(l));
}function g(e, t, r, n, o) {
  var i = "";null != r && (i = d(r) + "/");var a = b.getPooled(t, i, n, o);ae(e, v, a), b.release(a);
}function P(e, t, r) {
  if (null == e) return e;var n = [];return g(e, n, null, t, r), n;
}function k(e, t, r) {
  return null;
}function _(e, t) {
  return ae(e, k, null);
}function E(e) {
  var t = [];return g(e, t, null, j.thatReturnsArgument), t;
}function w(e) {
  return X.isValidElement(e) || R("143"), e;
}var S = require(15             );require(16                );var A = require(18                    );require(19                  );var j = require(17                      ), // 17 = fbjs/lib/emptyFunction // 19 = fbjs/lib/invariant // 18 = fbjs/lib/emptyObject // 16 = fbjs/lib/warning // 15 = object-assign
    x = require(20          ), // 20 = prop-types
    q = require(23                         ), // 23 = prop-types/checkPropTypes
    C = require(25                          ), // 25 = create-react-class/factory
    R = e,
    O = { isMounted: function isMounted(e) {
    return !1;
  }, enqueueForceUpdate: function enqueueForceUpdate(e, r, n) {
    t(e, "forceUpdate");
  }, enqueueReplaceState: function enqueueReplaceState(e, r, n, o) {
    t(e, "replaceState");
  }, enqueueSetState: function enqueueSetState(e, r, n, o) {
    t(e, "setState");
  } },
    T = O;r.prototype.isReactComponent = {}, r.prototype.setState = function (e, t) {
  "object" != typeof e && "function" != typeof e && null != e && R("85"), this.updater.enqueueSetState(this, e, t, "setState");
}, r.prototype.forceUpdate = function (e) {
  this.updater.enqueueForceUpdate(this, e, "forceUpdate");
}, o.prototype = r.prototype, n.prototype = new o(), n.prototype.constructor = n, S(n.prototype, r.prototype), n.prototype.isPureReactComponent = !0;var $ = { Component: r, PureComponent: n },
    F = function F(e) {
  var t = this;if (t.instancePool.length) {
    var r = t.instancePool.pop();return t.call(r, e), r;
  }return new t(e);
},
    U = function U(e, t) {
  var r = this;if (r.instancePool.length) {
    var n = r.instancePool.pop();return r.call(n, e, t), n;
  }return new r(e, t);
},
    I = function I(e, t, r) {
  var n = this;if (n.instancePool.length) {
    var o = n.instancePool.pop();return n.call(o, e, t, r), o;
  }return new n(e, t, r);
},
    V = function V(e, t, r, n) {
  var o = this;if (o.instancePool.length) {
    var i = o.instancePool.pop();return o.call(i, e, t, r, n), i;
  }return new o(e, t, r, n);
},
    G = function G(e) {
  var t = this;e instanceof t || R("25"), e.destructor(), t.instancePool.length < t.poolSize && t.instancePool.push(e);
},
    M = 10,
    z = F,
    D = function D(e, t) {
  var r = e;return r.instancePool = [], r.getPooled = t || z, r.poolSize || (r.poolSize = M), r.release = G, r;
},
    K = { addPoolingTo: D, oneArgumentPooler: F, twoArgumentPooler: U, threeArgumentPooler: I, fourArgumentPooler: V },
    L = K,
    N = { current: null },
    W = N,
    B = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    Y = B,
    H = Object.prototype.hasOwnProperty,
    J = { key: !0, ref: !0, __self: !0, __source: !0 },
    Q = function Q(e, t, r, n, o, i, a) {
  return { $$typeof: Y, type: e, key: t, ref: r, props: a, _owner: i };
};Q.createElement = function (e, t, r) {
  var n,
      o = {},
      l = null,
      u = null,
      c = null,
      s = null;if (null != t) {
    i(t) && (u = t.ref), a(t) && (l = "" + t.key), c = void 0 === t.__self ? null : t.__self, s = void 0 === t.__source ? null : t.__source;for (n in t) {
      H.call(t, n) && !J.hasOwnProperty(n) && (o[n] = t[n]);
    }
  }var p = arguments.length - 2;if (1 === p) o.children = r;else if (p > 1) {
    for (var f = Array(p), d = 0; d < p; d++) {
      f[d] = arguments[d + 2];
    }o.children = f;
  }if (e && e.defaultProps) {
    var h = e.defaultProps;for (n in h) {
      void 0 === o[n] && (o[n] = h[n]);
    }
  }return Q(e, l, u, c, s, W.current, o);
}, Q.createFactory = function (e) {
  var t = Q.createElement.bind(null, e);return t.type = e, t;
}, Q.cloneAndReplaceKey = function (e, t) {
  return Q(e.type, t, e.ref, e._self, e._source, e._owner, e.props);
}, Q.cloneElement = function (e, t, r) {
  var n,
      o = S({}, e.props),
      l = e.key,
      u = e.ref,
      c = e._self,
      s = e._source,
      p = e._owner;if (null != t) {
    i(t) && (u = t.ref, p = W.current), a(t) && (l = "" + t.key);var f;e.type && e.type.defaultProps && (f = e.type.defaultProps);for (n in t) {
      H.call(t, n) && !J.hasOwnProperty(n) && (void 0 === t[n] && void 0 !== f ? o[n] = f[n] : o[n] = t[n]);
    }
  }var d = arguments.length - 2;if (1 === d) o.children = r;else if (d > 1) {
    for (var h = Array(d), y = 0; y < d; y++) {
      h[y] = arguments[y + 2];
    }o.children = h;
  }return Q(e.type, l, u, c, s, p, o);
}, Q.isValidElement = function (e) {
  return "object" == typeof e && null !== e && e.$$typeof === Y;
};var X = Q,
    Z = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    ee = "@@iterator",
    te = l,
    re = { escape: u, unescape: c },
    ne = re,
    oe = ".",
    ie = ":",
    ae = f,
    le = L.twoArgumentPooler,
    ue = L.fourArgumentPooler,
    ce = /\/+/g;h.prototype.destructor = function () {
  this.func = null, this.context = null, this.count = 0;
}, L.addPoolingTo(h, le), b.prototype.destructor = function () {
  this.result = null, this.keyPrefix = null, this.func = null, this.context = null, this.count = 0;
}, L.addPoolingTo(b, ue);var se = { forEach: m, map: P, mapIntoWithKeyPrefixInternal: g, count: _, toArray: E },
    pe = se,
    fe = X.createFactory,
    de = { a: fe("a"), abbr: fe("abbr"), address: fe("address"), area: fe("area"), article: fe("article"), aside: fe("aside"), audio: fe("audio"), b: fe("b"), base: fe("base"), bdi: fe("bdi"), bdo: fe("bdo"), big: fe("big"), blockquote: fe("blockquote"), body: fe("body"), br: fe("br"), button: fe("button"), canvas: fe("canvas"), caption: fe("caption"), cite: fe("cite"), code: fe("code"), col: fe("col"), colgroup: fe("colgroup"), data: fe("data"), datalist: fe("datalist"), dd: fe("dd"), del: fe("del"), details: fe("details"), dfn: fe("dfn"), dialog: fe("dialog"), div: fe("div"), dl: fe("dl"), dt: fe("dt"), em: fe("em"), embed: fe("embed"), fieldset: fe("fieldset"), figcaption: fe("figcaption"), figure: fe("figure"), footer: fe("footer"), form: fe("form"), h1: fe("h1"), h2: fe("h2"), h3: fe("h3"), h4: fe("h4"), h5: fe("h5"), h6: fe("h6"), head: fe("head"), header: fe("header"), hgroup: fe("hgroup"), hr: fe("hr"), html: fe("html"), i: fe("i"), iframe: fe("iframe"), img: fe("img"), input: fe("input"), ins: fe("ins"), kbd: fe("kbd"), keygen: fe("keygen"), label: fe("label"), legend: fe("legend"), li: fe("li"), link: fe("link"), main: fe("main"), map: fe("map"), mark: fe("mark"), menu: fe("menu"), menuitem: fe("menuitem"), meta: fe("meta"), meter: fe("meter"), nav: fe("nav"), noscript: fe("noscript"), object: fe("object"), ol: fe("ol"), optgroup: fe("optgroup"), option: fe("option"), output: fe("output"), p: fe("p"), param: fe("param"), picture: fe("picture"), pre: fe("pre"), progress: fe("progress"), q: fe("q"), rp: fe("rp"), rt: fe("rt"), ruby: fe("ruby"), s: fe("s"), samp: fe("samp"), script: fe("script"), section: fe("section"), select: fe("select"), small: fe("small"), source: fe("source"), span: fe("span"), strong: fe("strong"), style: fe("style"), sub: fe("sub"), summary: fe("summary"), sup: fe("sup"), table: fe("table"), tbody: fe("tbody"), td: fe("td"), textarea: fe("textarea"), tfoot: fe("tfoot"), th: fe("th"), thead: fe("thead"), time: fe("time"), title: fe("title"), tr: fe("tr"), track: fe("track"), u: fe("u"), ul: fe("ul"), var: fe("var"), video: fe("video"), wbr: fe("wbr"), circle: fe("circle"), clipPath: fe("clipPath"), defs: fe("defs"), ellipse: fe("ellipse"), g: fe("g"), image: fe("image"), line: fe("line"), linearGradient: fe("linearGradient"), mask: fe("mask"), path: fe("path"), pattern: fe("pattern"), polygon: fe("polygon"), polyline: fe("polyline"), radialGradient: fe("radialGradient"), rect: fe("rect"), stop: fe("stop"), svg: fe("svg"), text: fe("text"), tspan: fe("tspan") },
    he = de,
    ye = x,
    me = "16.0.0-alpha.12",
    be = w,
    ve = $.Component,
    ge = X.isValidElement,
    Pe = C(ve, ge, T),
    ke = X.createElement,
    _e = X.createFactory,
    Ee = X.cloneElement,
    we = function we(e) {
  return e;
},
    Se = { Children: { map: pe.map, forEach: pe.forEach, count: pe.count, toArray: pe.toArray, only: be }, Component: $.Component, PureComponent: $.PureComponent, createElement: ke, cloneElement: Ee, isValidElement: X.isValidElement, PropTypes: ye, checkPropTypes: q, createClass: Pe, createFactory: _e, createMixin: we, DOM: he, version: me, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: { ReactCurrentOwner: W } },
    Ae = Se;module.exports = Ae;
}, 14, null, "react/cjs/react.production.min.js");
__d(/* object-assign/index.js */function(global, require, module, exports) {/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		var test1 = new String('abc');
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};
}, 15, null, "object-assign/index.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17               ); // 17 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  var printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {}
  };

  warning = function warning(condition, format) {
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.indexOf('Failed Composite propType: ') === 0) {
      return;
    }

    if (!condition) {
      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      printWarning.apply(undefined, [format].concat(args));
    }
  };
}

module.exports = warning;
}, 16, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 17, null, "fbjs/lib/emptyFunction.js");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 18, null, "fbjs/lib/emptyObject.js");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 19, null, "fbjs/lib/invariant.js");
__d(/* prop-types/index.js */function(global, require, module, exports) {

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.for : '@@for') && (typeof Symbol === 'function' ? Symbol.for : '@@for')('react.element') || 0xeac7;

  var isValidElement = function isValidElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };

  var throwOnDirectAccess = true;
  module.exports = require(21                         )(isValidElement, throwOnDirectAccess); // 21 = ./factoryWithTypeCheckers
} else {
  module.exports = require(24                          )(); // 24 = ./factoryWithThrowingShims
}
}, 20, null, "prop-types/index.js");
__d(/* prop-types/factoryWithTypeCheckers.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var warning = require(16                ); // 16 = fbjs/lib/warning

var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret
var checkPropTypes = require(23                ); // 23 = ./checkPropTypes

module.exports = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  var ANONYMOUS = '<<anonymous>>';

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }

  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }

    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 21, null, "prop-types/factoryWithTypeCheckers.js");
__d(/* prop-types/lib/ReactPropTypesSecret.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 22, null, "prop-types/lib/ReactPropTypesSecret.js");
__d(/* prop-types/checkPropTypes.js */function(global, require, module, exports) {

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require(19                  ); // 19 = fbjs/lib/invariant
  var warning = require(16                ); // 16 = fbjs/lib/warning
  var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret
  var loggedTypeFailures = {};
}

function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;

        try {
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
}, 23, null, "prop-types/checkPropTypes.js");
__d(/* prop-types/factoryWithThrowingShims.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var ReactPropTypesSecret = require(22                          ); // 22 = ./lib/ReactPropTypesSecret

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      return;
    }
    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 24, null, "prop-types/factoryWithThrowingShims.js");
__d(/* create-react-class/factory.js */function(global, require, module, exports) {

'use strict';

var _assign = require(15             ); // 15 = object-assign

var emptyObject = require(18                    ); // 18 = fbjs/lib/emptyObject
var _invariant = require(19                  ); // 19 = fbjs/lib/invariant

if (process.env.NODE_ENV !== 'production') {
  var warning = require(16                ); // 16 = fbjs/lib/warning
}

var MIXINS_KEY = 'mixins';

function identity(fn) {
  return fn;
}

var ReactPropTypeLocationNames;
if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
} else {
  ReactPropTypeLocationNames = {};
}

function factory(ReactComponent, isValidElement, ReactNoopUpdateQueue) {

  var injectedMixins = [];

  var ReactClassInterface = {
    mixins: 'DEFINE_MANY',

    statics: 'DEFINE_MANY',

    propTypes: 'DEFINE_MANY',

    contextTypes: 'DEFINE_MANY',

    childContextTypes: 'DEFINE_MANY',

    getDefaultProps: 'DEFINE_MANY_MERGED',

    getInitialState: 'DEFINE_MANY_MERGED',

    getChildContext: 'DEFINE_MANY_MERGED',

    render: 'DEFINE_ONCE',

    componentWillMount: 'DEFINE_MANY',

    componentDidMount: 'DEFINE_MANY',

    componentWillReceiveProps: 'DEFINE_MANY',

    shouldComponentUpdate: 'DEFINE_ONCE',

    componentWillUpdate: 'DEFINE_MANY',

    componentDidUpdate: 'DEFINE_MANY',

    componentWillUnmount: 'DEFINE_MANY',

    updateComponent: 'OVERRIDE_BASE'
  };

  var RESERVED_SPEC_KEYS = {
    displayName: function displayName(Constructor, _displayName) {
      Constructor.displayName = _displayName;
    },
    mixins: function mixins(Constructor, _mixins) {
      if (_mixins) {
        for (var i = 0; i < _mixins.length; i++) {
          mixSpecIntoComponent(Constructor, _mixins[i]);
        }
      }
    },
    childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _childContextTypes, 'childContext');
      }
      Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
    },
    contextTypes: function contextTypes(Constructor, _contextTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _contextTypes, 'context');
      }
      Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
    },

    getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
      } else {
        Constructor.getDefaultProps = _getDefaultProps;
      }
    },
    propTypes: function propTypes(Constructor, _propTypes) {
      if (process.env.NODE_ENV !== 'production') {
        validateTypeDef(Constructor, _propTypes, 'prop');
      }
      Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
    },
    statics: function statics(Constructor, _statics) {
      mixStaticSpecIntoComponent(Constructor, _statics);
    },
    autobind: function autobind() {}
  };

  function validateTypeDef(Constructor, typeDef, location) {
    for (var propName in typeDef) {
      if (typeDef.hasOwnProperty(propName)) {
        if (process.env.NODE_ENV !== 'production') {
          warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName);
        }
      }
    }
  }

  function validateMethodOverride(isAlreadyDefined, name) {
    var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

    if (ReactClassMixin.hasOwnProperty(name)) {
      _invariant(specPolicy === 'OVERRIDE_BASE', 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name);
    }

    if (isAlreadyDefined) {
      _invariant(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED', 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name);
    }
  }

  function mixSpecIntoComponent(Constructor, spec) {
    if (!spec) {
      if (process.env.NODE_ENV !== 'production') {
        var typeofSpec = typeof spec;
        var isMixinValid = typeofSpec === 'object' && spec !== null;

        if (process.env.NODE_ENV !== 'production') {
          warning(isMixinValid, "%s: You're attempting to include a mixin that is either null " + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec);
        }
      }

      return;
    }

    _invariant(typeof spec !== 'function', "ReactClass: You're attempting to " + 'use a component class or function as a mixin. Instead, just use a ' + 'regular object.');
    _invariant(!isValidElement(spec), "ReactClass: You're attempting to " + 'use a component as a mixin. Instead, just use a regular object.');

    var proto = Constructor.prototype;
    var autoBindPairs = proto.__reactAutoBindPairs;

    if (spec.hasOwnProperty(MIXINS_KEY)) {
      RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
    }

    for (var name in spec) {
      if (!spec.hasOwnProperty(name)) {
        continue;
      }

      if (name === MIXINS_KEY) {
        continue;
      }

      var property = spec[name];
      var isAlreadyDefined = proto.hasOwnProperty(name);
      validateMethodOverride(isAlreadyDefined, name);

      if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
        RESERVED_SPEC_KEYS[name](Constructor, property);
      } else {
        var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
        var isFunction = typeof property === 'function';
        var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

        if (shouldAutoBind) {
          autoBindPairs.push(name, property);
          proto[name] = property;
        } else {
          if (isAlreadyDefined) {
            var specPolicy = ReactClassInterface[name];

            _invariant(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY'), 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name);

            if (specPolicy === 'DEFINE_MANY_MERGED') {
              proto[name] = createMergedResultFunction(proto[name], property);
            } else if (specPolicy === 'DEFINE_MANY') {
              proto[name] = createChainedFunction(proto[name], property);
            }
          } else {
            proto[name] = property;
            if (process.env.NODE_ENV !== 'production') {
              if (typeof property === 'function' && spec.displayName) {
                proto[name].displayName = spec.displayName + '_' + name;
              }
            }
          }
        }
      }
    }
  }

  function mixStaticSpecIntoComponent(Constructor, statics) {
    if (!statics) {
      return;
    }
    for (var name in statics) {
      var property = statics[name];
      if (!statics.hasOwnProperty(name)) {
        continue;
      }

      var isReserved = name in RESERVED_SPEC_KEYS;
      _invariant(!isReserved, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name);

      var isInherited = name in Constructor;
      _invariant(!isInherited, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name);
      Constructor[name] = property;
    }
  }

  function mergeIntoWithNoDuplicateKeys(one, two) {
    _invariant(one && two && typeof one === 'object' && typeof two === 'object', 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.');

    for (var key in two) {
      if (two.hasOwnProperty(key)) {
        _invariant(one[key] === undefined, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key);
        one[key] = two[key];
      }
    }
    return one;
  }

  function createMergedResultFunction(one, two) {
    return function mergedResult() {
      var a = one.apply(this, arguments);
      var b = two.apply(this, arguments);
      if (a == null) {
        return b;
      } else if (b == null) {
        return a;
      }
      var c = {};
      mergeIntoWithNoDuplicateKeys(c, a);
      mergeIntoWithNoDuplicateKeys(c, b);
      return c;
    };
  }

  function createChainedFunction(one, two) {
    return function chainedFunction() {
      one.apply(this, arguments);
      two.apply(this, arguments);
    };
  }

  function bindAutoBindMethod(component, method) {
    var boundMethod = method.bind(component);
    if (process.env.NODE_ENV !== 'production') {
      boundMethod.__reactBoundContext = component;
      boundMethod.__reactBoundMethod = method;
      boundMethod.__reactBoundArguments = null;
      var componentName = component.constructor.displayName;
      var _bind = boundMethod.bind;
      boundMethod.bind = function (newThis) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        if (newThis !== component && newThis !== null) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName);
          }
        } else if (!args.length) {
          if (process.env.NODE_ENV !== 'production') {
            warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName);
          }
          return boundMethod;
        }
        var reboundMethod = _bind.apply(boundMethod, arguments);
        reboundMethod.__reactBoundContext = component;
        reboundMethod.__reactBoundMethod = method;
        reboundMethod.__reactBoundArguments = args;
        return reboundMethod;
      };
    }
    return boundMethod;
  }

  function bindAutoBindMethods(component) {
    var pairs = component.__reactAutoBindPairs;
    for (var i = 0; i < pairs.length; i += 2) {
      var autoBindKey = pairs[i];
      var method = pairs[i + 1];
      component[autoBindKey] = bindAutoBindMethod(component, method);
    }
  }

  var IsMountedPreMixin = {
    componentDidMount: function componentDidMount() {
      this.__isMounted = true;
    }
  };

  var IsMountedPostMixin = {
    componentWillUnmount: function componentWillUnmount() {
      this.__isMounted = false;
    }
  };

  var ReactClassMixin = {
    replaceState: function replaceState(newState, callback) {
      this.updater.enqueueReplaceState(this, newState, callback);
    },

    isMounted: function isMounted() {
      if (process.env.NODE_ENV !== 'production') {
        warning(this.__didWarnIsMounted, '%s: isMounted is deprecated. Instead, make sure to clean up ' + 'subscriptions and pending requests in componentWillUnmount to ' + 'prevent memory leaks.', this.constructor && this.constructor.displayName || this.name || 'Component');
        this.__didWarnIsMounted = true;
      }
      return !!this.__isMounted;
    }
  };

  var ReactClassComponent = function ReactClassComponent() {};
  _assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

  function createClass(spec) {
    var Constructor = identity(function (props, context, updater) {

      if (process.env.NODE_ENV !== 'production') {
        warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory');
      }

      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          initialState = null;
        }
      }
      _invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent');

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, IsMountedPreMixin);
    mixSpecIntoComponent(Constructor, spec);
    mixSpecIntoComponent(Constructor, IsMountedPostMixin);

    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    _invariant(Constructor.prototype.render, 'createClass(...): Class specification must implement a `render` method.');

    if (process.env.NODE_ENV !== 'production') {
      warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component');
      warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component');
    }

    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  }

  return createClass;
}

module.exports = factory;
}, 25, null, "create-react-class/factory.js");
__d(/* react/cjs/react.development.js */function(global, require, module, exports) {'use strict';

var objectAssign$1 = require(15             ); // 15 = object-assign
var warning = require(16                ); // 16 = fbjs/lib/warning
var emptyObject = require(18                    ); // 18 = fbjs/lib/emptyObject
var invariant = require(19                  ); // 19 = fbjs/lib/invariant
var emptyFunction = require(17                      ); // 17 = fbjs/lib/emptyFunction
var checkPropTypes = require(23                         ); // 23 = prop-types/checkPropTypes
var propTypes = require(20          ); // 20 = prop-types
var factory = require(25                          ); // 25 = create-react-class/factory

function warnNoop(publicInstance, callerName) {
  {
    var constructor = publicInstance.constructor;
    warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op.\n\nPlease check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass');
  }
}

var ReactNoopUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var ReactNoopUpdateQueue_1 = ReactNoopUpdateQueue;

var canDefineProperty$1 = false;
{
  try {
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty$1 = true;
  } catch (x) {}
}

var canDefineProperty_1 = canDefineProperty$1;

function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue_1;
}

ReactComponent.prototype.isReactComponent = {};

ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};

ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};

{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty_1) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ReactPureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue_1;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;

objectAssign$1(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

var ReactBaseClasses = {
  Component: ReactComponent,
  PureComponent: ReactPureComponent
};

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler$1 = function twoArgumentPooler$1(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler$1 = function fourArgumentPooler$1(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? invariant(false, 'Trying to release an instance into a pool of a different type.') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler$1,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler$1
};

var PooledClass_1 = PooledClass;

var ReactCurrentOwner = {
  current: null
};

var ReactCurrentOwner_1 = ReactCurrentOwner;

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

var ReactElementSymbol = REACT_ELEMENT_TYPE;

var hasOwnProperty = Object.prototype.hasOwnProperty;

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown;
var specialPropRefWarningShown;

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    $$typeof: ReactElementSymbol,

    type: type,
    key: key,
    ref: ref,
    props: props,

    _owner: owner
  };

  {
    element._store = {};

    if (canDefineProperty_1) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });

      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });

      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== ReactElementSymbol) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner_1.current, props);
};

ReactElement.createFactory = function (type) {
  var factory$$1 = ReactElement.createElement.bind(null, type);

  factory$$1.type = type;
  return factory$$1;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  var props = objectAssign$1({}, element.props);

  var key = element.key;
  var ref = element.ref;

  var self = element._self;

  var source = element._source;

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
      owner = ReactCurrentOwner_1.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === ReactElementSymbol;
};

var ReactElement_1 = ReactElement;

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

var getIteratorFn_1 = getIteratorFn;

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

var KeyEscapeUtils_1 = KeyEscapeUtils;

var ReactTypeOfWork = {
  IndeterminateComponent: 0,
  FunctionalComponent: 1,
  ClassComponent: 2,
  HostRoot: 3,
  HostPortal: 4,
  HostComponent: 5,
  HostText: 6,
  CoroutineComponent: 7,
  CoroutineHandlerPhase: 8,
  YieldComponent: 9,
  Fragment: 10
};

function getComponentName(instanceOrFiber) {
  if (typeof instanceOrFiber.getName === 'function') {
    var instance = instanceOrFiber;
    return instance.getName();
  }
  if (typeof instanceOrFiber.tag === 'number') {
    var fiber = instanceOrFiber;
    var type = fiber.type;

    if (typeof type === 'string') {
      return type;
    }
    if (typeof type === 'function') {
      return type.displayName || type.name;
    }
  }
  return null;
}

var getComponentName_1 = getComponentName;

var IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent;
var FunctionalComponent = ReactTypeOfWork.FunctionalComponent;
var ClassComponent = ReactTypeOfWork.ClassComponent;
var HostComponent = ReactTypeOfWork.HostComponent;

function describeComponentFrame$1(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function describeFiber(fiber) {
  switch (fiber.tag) {
    case IndeterminateComponent:
    case FunctionalComponent:
    case ClassComponent:
    case HostComponent:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName_1(fiber);
      var ownerName = null;
      if (owner) {
        ownerName = getComponentName_1(owner);
      }
      return describeComponentFrame$1(name, source, ownerName);
    default:
      return '';
  }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
  var info = '';
  var node = workInProgress;
  do {
    info += describeFiber(node);

    node = node['return'];
  } while (node);
  return info;
}

var ReactFiberComponentTreeHook = {
  getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
  describeComponentFrame: describeComponentFrame$1
};

var getStackAddendumByWorkInProgressFiber = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber;
var describeComponentFrame = ReactFiberComponentTreeHook.describeComponentFrame;

function isNative(fn) {
  var funcToString = Function.prototype.toString;
  var reIsNative = RegExp('^' + funcToString.call(Object.prototype.hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections = typeof Array.from === 'function' && typeof Map === 'function' && isNative(Map) && Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) && typeof Set === 'function' && isNative(Set) && Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName = void 0;

  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id);
  return describeComponentFrame(name || '', element && element._source, ownerName || '');
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    invariant(item, 'Item must have been set');
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : void 0;
      !nextChild.isMounted ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
      }
      !(nextChild.parentID === id) ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    invariant(item, 'Item must have been set');
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && getComponentName_1(owner));
    }

    var currentOwner = ReactCurrentOwner_1.current;
    if (currentOwner) {
      if (typeof currentOwner.tag === 'number') {
        var workInProgress = currentOwner;

        info += getStackAddendumByWorkInProgressFiber(workInProgress);
      } else if (typeof currentOwner._debugID === 'number') {
        info += ReactComponentTreeHook.getStackAddendumByID(currentOwner._debugID);
      }
    }
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

var ReactComponentTreeHook_1 = ReactComponentTreeHook;

{
  var _require = ReactComponentTreeHook_1,
      getCurrentStackAddendum = _require.getCurrentStackAddendum;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (typeof component === 'object' && component !== null && component.key != null) {
    return KeyEscapeUtils_1.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === ReactElementSymbol) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn_1(children);
    if (iteratorFn) {
      {
        if (iteratorFn === children.entries) {
          warning(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentStackAddendum());
          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;
      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';
      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentStackAddendum();
      }
      var childrenString = '' + children;
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

var traverseAllChildren_1 = traverseAllChildren;

var twoArgumentPooler = PooledClass_1.twoArgumentPooler;
var fourArgumentPooler = PooledClass_1.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass_1.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren_1(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass_1.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement_1.isValidElement(mappedChild)) {
      mappedChild = ReactElement_1.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren_1(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

function countChildren(children, context) {
  return traverseAllChildren_1(children, forEachSingleChildDummy, null);
}

function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

var ReactChildren_1 = ReactChildren;

var ReactDebugCurrentFrame$1 = {};

{
  var _require$2 = ReactComponentTreeHook_1,
      getStackAddendumByID = _require$2.getStackAddendumByID,
      getCurrentStackAddendum$2 = _require$2.getCurrentStackAddendum;

  var _require2$1 = ReactFiberComponentTreeHook,
      getStackAddendumByWorkInProgressFiber$2 = _require2$1.getStackAddendumByWorkInProgressFiber;

  ReactDebugCurrentFrame$1.current = null;

  ReactDebugCurrentFrame$1.element = null;

  ReactDebugCurrentFrame$1.getStackAddendum = function () {
    var stack = null;
    var current = ReactDebugCurrentFrame$1.current;
    var element = ReactDebugCurrentFrame$1.element;
    if (current !== null) {
      if (typeof current === 'number') {
        var debugID = current;
        stack = getStackAddendumByID(debugID);
      } else if (typeof current.tag === 'number') {
        var workInProgress = current;
        stack = getStackAddendumByWorkInProgressFiber$2(workInProgress);
      }
    } else if (element !== null) {
      stack = getCurrentStackAddendum$2(element);
    }
    return stack;
  };
}

var ReactDebugCurrentFrame_1 = ReactDebugCurrentFrame$1;

{
  var checkPropTypes$1 = checkPropTypes;
  var warning$2 = warning;
  var ReactDebugCurrentFrame = ReactDebugCurrentFrame_1;

  var _require$1 = ReactComponentTreeHook_1,
      getCurrentStackAddendum$1 = _require$1.getCurrentStackAddendum;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner_1.current) {
    var name = getComponentName_1(ReactCurrentOwner_1.current);
    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = '\n\nCheck the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }
  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner_1.current) {
    childOwner = ' It was passed a child from ' + getComponentName_1(element._owner) + '.';
  }

  warning$2(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getCurrentStackAddendum$1(element));
}

function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement_1.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement_1.isValidElement(node)) {
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn_1(node);

    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement_1.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;

  var propTypes$$1 = typeof componentClass.__propTypesSecretDontUseThesePlease === 'object' ? componentClass.__propTypesSecretDontUseThesePlease : componentClass.propTypes;

  if (propTypes$$1) {
    checkPropTypes$1(propTypes$$1, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    warning$2(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
  }
}

var ReactElementValidator$2 = {
  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';

    if (!validType) {
      var info = '';
      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(props);
      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      info += getCurrentStackAddendum$1();

      warning$2(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info);
    }

    var element = ReactElement_1.createElement.apply(this, arguments);

    if (element == null) {
      return element;
    }

    {
      ReactDebugCurrentFrame.element = element;
    }

    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    {
      ReactDebugCurrentFrame.element = null;
    }

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator$2.createElement.bind(null, type);

    validatedFactory.type = type;

    {
      if (canDefineProperty_1) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            warning$2(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement_1.cloneElement.apply(this, arguments);
    {
      ReactDebugCurrentFrame.element = newElement;
    }
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    {
      ReactDebugCurrentFrame.element = null;
    }
    return newElement;
  }
};

var ReactElementValidator_1 = ReactElementValidator$2;

var createDOMFactory = ReactElement_1.createFactory;
{
  var ReactElementValidator$1 = ReactElementValidator_1;
  createDOMFactory = ReactElementValidator$1.createFactory;
}

var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

var ReactDOMFactories_1 = ReactDOMFactories;

var ReactPropTypes = propTypes;

var ReactVersion = '16.0.0-alpha.12';

function onlyChild(children) {
  !ReactElement_1.isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
  return children;
}

var onlyChild_1 = onlyChild;

var Component = ReactBaseClasses.Component;

var isValidElement = ReactElement_1.isValidElement;

var createClass = factory(Component, isValidElement, ReactNoopUpdateQueue_1);

var createElement = ReactElement_1.createElement;
var createFactory = ReactElement_1.createFactory;
var cloneElement = ReactElement_1.cloneElement;

{
  var warning$1 = warning;
  var canDefineProperty = canDefineProperty_1;
  var ReactElementValidator = ReactElementValidator_1;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var createMixin = function createMixin(mixin) {
  return mixin;
};

var React = {

  Children: {
    map: ReactChildren_1.map,
    forEach: ReactChildren_1.forEach,
    count: ReactChildren_1.count,
    toArray: ReactChildren_1.toArray,
    only: onlyChild_1
  },

  Component: ReactBaseClasses.Component,
  PureComponent: ReactBaseClasses.PureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement_1.isValidElement,

  PropTypes: ReactPropTypes,
  checkPropTypes: checkPropTypes,
  createClass: createClass,

  createFactory: createFactory,
  createMixin: createMixin,

  DOM: ReactDOMFactories_1,

  version: ReactVersion,

  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
    ReactCurrentOwner: ReactCurrentOwner_1
  }
};

{
  objectAssign$1(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactComponentTreeHook: ReactComponentTreeHook_1,
    ReactDebugCurrentFrame: ReactDebugCurrentFrame_1
  });

  var warnedForCheckPropTypes = false;
  var warnedForCreateMixin = false;
  var warnedForCreateClass = false;
  var warnedForPropTypes = false;

  React.createMixin = function (mixin) {
    warning$1(warnedForCreateMixin, 'React.createMixin is deprecated and should not be used. You ' + 'can use this mixin directly instead.');
    warnedForCreateMixin = true;
    return mixin;
  };

  if (canDefineProperty) {
    Object.defineProperty(React, 'checkPropTypes', {
      get: function get() {
        warning$1(warnedForCheckPropTypes, 'checkPropTypes has been moved to a separate package. ' + 'Accessing React.checkPropTypes is no longer supported ' + 'and will be removed completely in React 16. ' + 'Use the prop-types package on npm instead. ' + '(https://fb.me/migrating-from-react-proptypes)');
        warnedForCheckPropTypes = true;
        return checkPropTypes;
      }
    });

    Object.defineProperty(React, 'createClass', {
      get: function get() {
        warning$1(warnedForCreateClass, 'React.createClass is no longer supported. Use a plain JavaScript ' + "class instead. If you're not yet ready to migrate, " + 'create-react-class is available on npm as a drop-in replacement. ' + '(https://fb.me/migrating-from-react-create-class)');
        warnedForCreateClass = true;
        return createClass;
      }
    });

    Object.defineProperty(React, 'PropTypes', {
      get: function get() {
        warning$1(warnedForPropTypes, 'PropTypes has been moved to a separate package. ' + 'Accessing React.PropTypes is no longer supported ' + 'and will be removed completely in React 16. ' + 'Use the prop-types package on npm instead. ' + '(https://fb.me/migrating-from-react-proptypes)');
        warnedForPropTypes = true;
        return ReactPropTypes;
      }
    });
  }

  React.DOM = {};
  var warnedForFactories = false;
  Object.keys(ReactDOMFactories_1).forEach(function (factory$$1) {
    React.DOM[factory$$1] = function () {
      if (!warnedForFactories) {
        warning$1(false, 'Accessing factories like React.DOM.%s has been deprecated ' + 'and will be removed in the future. Use the ' + 'react-addons-dom-factories package instead.', factory$$1);
        warnedForFactories = true;
      }
      return ReactDOMFactories_1[factory$$1].apply(ReactDOMFactories_1, arguments);
    };
  });
}

var React_1 = React;

module.exports = React_1;
}, 26, null, "react/cjs/react.development.js");
__d(/* react-native-implementation */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var ReactNative = {
  get AccessibilityInfo() {
    return require(29                 ); // 29 = AccessibilityInfo
  },
  get ActivityIndicator() {
    return require(61                 ); // 61 = ActivityIndicator
  },
  get ART() {
    return require(176             ); // 176 = ReactNativeART
  },
  get Button() {
    return require(182     ); // 182 = Button
  },
  get DatePickerIOS() {
    return require(220            ); // 220 = DatePickerIOS
  },
  get DrawerLayoutAndroid() {
    return require(221                  ); // 221 = DrawerLayoutAndroid
  },
  get FlatList() {
    return require(222       ); // 222 = FlatList
  },
  get Image() {
    return require(204    ); // 204 = Image
  },
  get ImageBackground() {
    return require(235              ); // 235 = ImageBackground
  },
  get ImageEditor() {
    return require(237          ); // 237 = ImageEditor
  },
  get ImageStore() {
    return require(238         ); // 238 = ImageStore
  },
  get KeyboardAvoidingView() {
    return require(239                   ); // 239 = KeyboardAvoidingView
  },
  get ListView() {
    return require(224       ); // 224 = ListView
  },
  get MaskedViewIOS() {
    return require(241            ); // 241 = MaskedViewIOS
  },
  get Modal() {
    return require(242    ); // 242 = Modal
  },
  get NavigatorIOS() {
    return require(263           ); // 263 = NavigatorIOS
  },
  get Picker() {
    return require(265     ); // 265 = Picker
  },
  get PickerIOS() {
    return require(266        ); // 266 = PickerIOS
  },
  get ProgressBarAndroid() {
    return require(268                 ); // 268 = ProgressBarAndroid
  },
  get ProgressViewIOS() {
    return require(269              ); // 269 = ProgressViewIOS
  },
  get ScrollView() {
    return require(206         ); // 206 = ScrollView
  },
  get SectionList() {
    return require(270          ); // 270 = SectionList
  },
  get SegmentedControlIOS() {
    return require(272                  ); // 272 = SegmentedControlIOS
  },
  get Slider() {
    return require(273     ); // 273 = Slider
  },
  get SnapshotViewIOS() {
    return require(274              ); // 274 = SnapshotViewIOS
  },
  get Switch() {
    return require(275     ); // 275 = Switch
  },
  get RefreshControl() {
    return require(229             ); // 229 = RefreshControl
  },
  get StatusBar() {
    return require(276        ); // 276 = StatusBar
  },
  get SwipeableListView() {
    return require(277                ); // 277 = SwipeableListView
  },
  get TabBarIOS() {
    return require(282        ); // 282 = TabBarIOS
  },
  get Text() {
    return require(183   ); // 183 = Text
  },
  get TextInput() {
    return require(284        ); // 284 = TextInput
  },
  get ToastAndroid() {
    return require(290           ); // 290 = ToastAndroid
  },
  get ToolbarAndroid() {
    return require(291             ); // 291 = ToolbarAndroid
  },
  get Touchable() {
    return require(184        ); // 184 = Touchable
  },
  get TouchableHighlight() {
    return require(253                 ); // 253 = TouchableHighlight
  },
  get TouchableNativeFeedback() {
    return require(191                      ); // 191 = TouchableNativeFeedback
  },
  get TouchableOpacity() {
    return require(192               ); // 192 = TouchableOpacity
  },
  get TouchableWithoutFeedback() {
    return require(218                       ); // 218 = TouchableWithoutFeedback
  },
  get View() {
    return require(131   ); // 131 = View
  },
  get ViewPagerAndroid() {
    return require(292               ); // 292 = ViewPagerAndroid
  },
  get VirtualizedList() {
    return require(230              ); // 230 = VirtualizedList
  },
  get WebView() {
    return require(293      ); // 293 = WebView
  },

  get ActionSheetIOS() {
    return require(294             ); // 294 = ActionSheetIOS
  },
  get Alert() {
    return require(102    ); // 102 = Alert
  },
  get AlertIOS() {
    return require(103       ); // 103 = AlertIOS
  },
  get Animated() {
    return require(193       ); // 193 = Animated
  },
  get AppRegistry() {
    return require(295          ); // 295 = AppRegistry
  },
  get AppState() {
    return require(117       ); // 117 = AppState
  },
  get AsyncStorage() {
    return require(301           ); // 301 = AsyncStorage
  },
  get BackAndroid() {
    return require(302          ); // 302 = BackAndroid
  },
  get BackHandler() {
    return require(300          ); // 300 = BackHandler
  },
  get CameraRoll() {
    return require(303         ); // 303 = CameraRoll
  },
  get Clipboard() {
    return require(304        ); // 304 = Clipboard
  },
  get DatePickerAndroid() {
    return require(305                ); // 305 = DatePickerAndroid
  },
  get DeviceInfo() {
    return require(163         ); // 163 = DeviceInfo
  },
  get Dimensions() {
    return require(162         ); // 162 = Dimensions
  },
  get Easing() {
    return require(202     ); // 202 = Easing
  },
  get findNodeHandle() {
    return require(65           ).findNodeHandle; // 65 = ReactNative
  },
  get I18nManager() {
    return require(262          ); // 262 = I18nManager
  },
  get ImagePickerIOS() {
    return require(306             ); // 306 = ImagePickerIOS
  },
  get InteractionManager() {
    return require(195                 ); // 195 = InteractionManager
  },
  get Keyboard() {
    return require(210       ); // 210 = Keyboard
  },
  get LayoutAnimation() {
    return require(240              ); // 240 = LayoutAnimation
  },
  get Linking() {
    return require(307      ); // 307 = Linking
  },
  get NativeEventEmitter() {
    return require(88                  ); // 88 = NativeEventEmitter
  },
  get NetInfo() {
    return require(308      ); // 308 = NetInfo
  },
  get PanResponder() {
    return require(280           ); // 280 = PanResponder
  },
  get PermissionsAndroid() {
    return require(106                 ); // 106 = PermissionsAndroid
  },
  get PixelRatio() {
    return require(161         ); // 161 = PixelRatio
  },
  get PushNotificationIOS() {
    return require(309                  ); // 309 = PushNotificationIOS
  },
  get Settings() {
    return require(310       ); // 310 = Settings
  },
  get Share() {
    return require(311    ); // 311 = Share
  },
  get StatusBarIOS() {
    return require(312           ); // 312 = StatusBarIOS
  },
  get StyleSheet() {
    return require(160         ); // 160 = StyleSheet
  },
  get Systrace() {
    return require(34        ); // 34 = Systrace
  },
  get TimePickerAndroid() {
    return require(313                ); // 313 = TimePickerAndroid
  },
  get TVEventHandler() {
    return require(188             ); // 188 = TVEventHandler
  },
  get UIManager() {
    return require(125        ); // 125 = UIManager
  },
  get unstable_batchedUpdates() {
    return require(65           ).unstable_batchedUpdates; // 65 = ReactNative
  },
  get Vibration() {
    return require(314        ); // 314 = Vibration
  },
  get VibrationIOS() {
    return require(315           ); // 315 = VibrationIOS
  },

  get DeviceEventEmitter() {
    return require(56                     ); // 56 = RCTDeviceEventEmitter
  },
  get NativeAppEventEmitter() {
    return require(110                       ); // 110 = RCTNativeAppEventEmitter
  },
  get NativeModules() {
    return require(30             ); // 30 = NativeModules
  },
  get Platform() {
    return require(38        ); // 38 = Platform
  },
  get processColor() {
    return require(115           ); // 115 = processColor
  },
  get requireNativeComponent() {
    return require(158                     ); // 158 = requireNativeComponent
  },
  get takeSnapshot() {
    return require(316           ); // 316 = takeSnapshot
  },

  get ColorPropType() {
    return require(62             ); // 62 = ColorPropType
  },
  get EdgeInsetsPropType() {
    return require(148                 ); // 148 = EdgeInsetsPropType
  },
  get PointPropType() {
    return require(207            ); // 207 = PointPropType
  },
  get ViewPropTypes() {
    return require(147            ); // 147 = ViewPropTypes
  },

  get Navigator() {
    invariant(false, 'Navigator is deprecated and has been removed from this package. It can now be installed ' + 'and imported from `react-native-deprecated-custom-components` instead of `react-native`. ' + 'Learn about alternative navigation solutions at http://facebook.github.io/react-native/docs/navigation.html');
  }
};

module.exports = ReactNative;
}, 27, null, "react-native-implementation");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 28, null, "fbjs/lib/invariant.js");
__d(/* AccessibilityInfo */function(global, require, module, exports) {
'use strict';

var NativeModules = require(30             ); // 30 = NativeModules
var Promise = require(48       ); // 48 = Promise
var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter

var AccessibilityManager = NativeModules.AccessibilityManager;

var VOICE_OVER_EVENT = 'voiceOverDidChange';
var ANNOUNCEMENT_DID_FINISH_EVENT = 'announcementDidFinish';

var _subscriptions = new Map();

var AccessibilityInfo = {
  fetch: function fetch() {
    return new Promise(function (resolve, reject) {
      AccessibilityManager.getCurrentVoiceOverState(resolve, reject);
    });
  },

  addEventListener: function addEventListener(eventName, handler) {
    var listener;

    if (eventName === 'change') {
      listener = RCTDeviceEventEmitter.addListener(VOICE_OVER_EVENT, handler);
    } else if (eventName === 'announcementFinished') {
      listener = RCTDeviceEventEmitter.addListener(ANNOUNCEMENT_DID_FINISH_EVENT, handler);
    }

    _subscriptions.set(handler, listener);
    return {
      remove: AccessibilityInfo.removeEventListener.bind(null, eventName, handler)
    };
  },

  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {
    AccessibilityManager.setAccessibilityFocus(reactTag);
  },

  announceForAccessibility: function announceForAccessibility(announcement) {
    AccessibilityManager.announceForAccessibility(announcement);
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  }

};

module.exports = AccessibilityInfo;
}, 29, null, "AccessibilityInfo");
__d(/* NativeModules */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(31             ); // 31 = BatchedBridge

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

function genModule(config, moduleID) {
  if (!config) {
    return null;
  }

  var _config = babelHelpers.slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];

  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

  if (!constants && !methods) {
    return { name: moduleName };
  }

  var module = {};
  methods && methods.forEach(function (methodName, methodID) {
    var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
    var isSync = syncMethods && arrayContains(syncMethods, methodID);
    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
    var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
    module[methodName] = genMethod(moduleID, methodID, methodType);
  });
  babelHelpers.extends(module, constants);

  if (__DEV__) {
    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
  }

  return { name: moduleName, module: module };
}

global.__fbGenNativeModule = genModule;

function loadModule(name, moduleID) {
  invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
  var config = global.nativeRequireModuleConfig(name);
  var info = genModule(config, moduleID);
  return info && info.module;
}

function genMethod(moduleID, methodID, type) {
  var fn = null;
  if (type === 'promise') {
    fn = function fn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
          return resolve(data);
        }, function (errorData) {
          return reject(createErrorFromErrorData(errorData));
        });
      });
    };
  } else if (type === 'sync') {
    fn = function fn() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return BatchedBridge.callSyncHook(moduleID, methodID, args);
    };
  } else {
    fn = function fn() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var lastArg = args.length > 0 ? args[args.length - 1] : null;
      var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
      var hasSuccessCallback = typeof lastArg === 'function';
      var hasErrorCallback = typeof secondLastArg === 'function';
      hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
      var onSuccess = hasSuccessCallback ? lastArg : null;
      var onFail = hasErrorCallback ? secondLastArg : null;
      var callbackCount = hasSuccessCallback + hasErrorCallback;
      args = args.slice(0, args.length - callbackCount);
      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
    };
  }
  fn.type = type;
  return fn;
}

function arrayContains(array, value) {
  return array.indexOf(value) !== -1;
}

function createErrorFromErrorData(errorData) {
  var _ref = errorData || {},
      message = _ref.message,
      extraErrorInfo = babelHelpers.objectWithoutProperties(_ref, ['message']);

  var error = new Error(message);
  error.framesToPop = 1;
  return babelHelpers.extends(error, extraErrorInfo);
}

var NativeModules = {};
if (global.nativeModuleProxy) {
  NativeModules = global.nativeModuleProxy;
} else {
  var bridgeConfig = global.__fbBatchedBridgeConfig;
  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

  var defineLazyObjectProperty = require(47                        ); // 47 = defineLazyObjectProperty
  (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
    var info = genModule(config, moduleID);
    if (!info) {
      return;
    }

    if (info.module) {
      NativeModules[info.name] = info.module;
    } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
  });
}

module.exports = NativeModules;
}, 30, null, "NativeModules");
__d(/* BatchedBridge */function(global, require, module, exports) {
'use strict';

var MessageQueue = require(32            ); // 32 = MessageQueue

var BatchedBridge = new MessageQueue();

Object.defineProperty(global, '__fbBatchedBridge', {
  configurable: true,
  value: BatchedBridge
});

module.exports = BatchedBridge;
}, 31, null, "BatchedBridge");
__d(/* MessageQueue */function(global, require, module, exports) {

'use strict';

var ErrorUtils = require(33          ); // 33 = ErrorUtils
var Systrace = require(34        ); // 34 = Systrace

var deepFreezeAndThrowOnMutationInDev = require(35                                 ); // 35 = deepFreezeAndThrowOnMutationInDev
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var stringifySafe = require(36             ); // 36 = stringifySafe

var TO_JS = 0;
var TO_NATIVE = 1;

var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;

var TRACE_TAG_REACT_APPS = 1 << 17;

var DEBUG_INFO_LIMIT = 64;

var JSTimers = null;

var MessageQueue = function () {
  function MessageQueue() {
    var _this = this;

    babelHelpers.classCallCheck(this, MessageQueue);

    this.callFunctionReturnFlushedQueue = function (module, method, args) {
      _this.__guard(function () {
        _this.__callFunction(module, method, args);
      });

      return _this.flushedQueue();
    };

    this.callFunctionReturnResultAndFlushedQueue = function (module, method, args) {
      var result = void 0;
      _this.__guard(function () {
        result = _this.__callFunction(module, method, args);
      });

      return [result, _this.flushedQueue()];
    };

    this.invokeCallbackAndReturnFlushedQueue = function (cbID, args) {
      _this.__guard(function () {
        _this.__invokeCallback(cbID, args);
      });

      return _this.flushedQueue();
    };

    this.flushedQueue = function () {
      _this.__guard(function () {
        _this.__callImmediates();
      });

      var queue = _this._queue;
      _this._queue = [[], [], [], _this._callID];
      return queue[0].length ? queue : null;
    };

    this._lazyCallableModules = {};
    this._queue = [[], [], [], 0];
    this._successCallbacks = [];
    this._failureCallbacks = [];
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = new Date().getTime();

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }
  }

  babelHelpers.createClass(MessageQueue, [{
    key: 'getEventLoopRunningTime',
    value: function getEventLoopRunningTime() {
      return new Date().getTime() - this._eventLoopStartTime;
    }
  }, {
    key: 'registerCallableModule',
    value: function registerCallableModule(name, module) {
      this._lazyCallableModules[name] = function () {
        return module;
      };
    }
  }, {
    key: 'registerLazyCallableModule',
    value: function registerLazyCallableModule(name, factory) {
      var module = void 0;
      var getValue = factory;
      this._lazyCallableModules[name] = function () {
        if (getValue) {
          module = getValue();
          getValue = null;
        }
        return module;
      };
    }
  }, {
    key: 'getCallableModule',
    value: function getCallableModule(name) {
      var getValue = this._lazyCallableModules[name];
      return getValue ? getValue() : null;
    }
  }, {
    key: 'enqueueNativeCall',
    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
      if (onFail || onSucc) {
        if (__DEV__) {
          this._debugInfo[this._callID] = [moduleID, methodID];
          if (this._callID > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
          }
        }

        onFail && params.push(this._callID << 1);
        onSucc && params.push(this._callID << 1 | 1);
        this._successCallbacks[this._callID] = onSucc;
        this._failureCallbacks[this._callID] = onFail;
      }

      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
      }
      this._callID++;

      this._queue[MODULE_IDS].push(moduleID);
      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {
        JSON.stringify(params);

        deepFreezeAndThrowOnMutationInDev(params);
      }
      this._queue[PARAMS].push(params);

      var now = new Date().getTime();
      if (global.nativeFlushQueueImmediate && (now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS || this._inCall === 0)) {
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
        global.nativeFlushQueueImmediate(queue);
      }
      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

      if (this.__spy) {
        this.__spyNativeCall(moduleID, methodID, params, {
          failCbId: onFail ? params[params.length - 2] : -1,
          successCbId: onSucc ? params[params.length - 1] : -1
        });
      }
    }
  }, {
    key: 'callSyncHook',
    value: function callSyncHook(moduleID, methodID, args) {
      if (__DEV__) {
        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
      }
      var returnValue = global.nativeCallSyncHook(moduleID, methodID, args);
      if (this.__spy) {
        this.__spyNativeCall(moduleID, methodID, args, {
          isSync: true,
          returnValue: returnValue
        });
      }
      return returnValue;
    }
  }, {
    key: 'createDebugLookup',
    value: function createDebugLookup(moduleID, name, methods) {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods;
      }
    }
  }, {
    key: '__guard',
    value: function __guard(fn) {
      this._inCall++;
      try {
        fn();
      } catch (error) {
        ErrorUtils.reportFatalError(error);
      } finally {
        this._inCall--;
      }
    }
  }, {
    key: '__callImmediates',
    value: function __callImmediates() {
      Systrace.beginEvent('JSTimers.callImmediates()');
      if (!JSTimers) {
        JSTimers = require(37        ); // 37 = JSTimers
      }
      JSTimers.callImmediates();
      Systrace.endEvent();
    }
  }, {
    key: '__callFunction',
    value: function __callFunction(module, method, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      Systrace.beginEvent(module + '.' + method + '()');
      if (this.__spy) {
        this.__spyJSCall(module, method, args);
      }
      var moduleMethods = this.getCallableModule(module);
      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
      var result = moduleMethods[method].apply(moduleMethods, args);
      Systrace.endEvent();
      return result;
    }
  }, {
    key: '__invokeCallback',
    value: function __invokeCallback(cbID, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;

      var callID = cbID >>> 1;
      var isSuccess = cbID & 1;
      var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

      if (__DEV__) {
        var debug = this._debugInfo[callID];
        var _module = debug && this._remoteModuleTable[debug[0]];
        var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        if (!callback) {
          var errorMessage = 'Callback with id ' + cbID + ': ' + _module + '.' + _method + '() not found';
          if (_method) {
            errorMessage = 'The callback ' + _method + '() exists in module ' + _module + ', ' + 'but only one callback may be registered to a function in a native module.';
          }
          invariant(callback, errorMessage);
        }
        var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID + '';
        if (this.__spy) {
          this.__spyJSCall(null, profileName, args, {
            failCbId: isSuccess ? -1 : cbID,
            successCbId: isSuccess ? cbID : -1
          });
        }
        Systrace.beginEvent('MessageQueue.invokeCallback(' + profileName + ', ' + stringifySafe(args) + ')');
      }

      if (!callback) {
        return;
      }

      this._successCallbacks[callID] = this._failureCallbacks[callID] = null;
      callback.apply(null, args);

      if (__DEV__) {
        Systrace.endEvent();
      }
    }
  }, {
    key: '__spyJSCall',
    value: function __spyJSCall(module, method, methodArgs, params) {
      if (!this.__spy) {
        return;
      }
      this.__spy(babelHelpers.extends({
        type: TO_JS,
        isSync: false,
        module: module,
        method: method,
        failCbId: -1,
        successCbId: -1,
        args: methodArgs
      }, params));
    }
  }, {
    key: '__spyNativeCall',
    value: function __spyNativeCall(moduleID, methodID, methodArgs, params) {
      var spy = this.__spy;
      if (!spy) {
        return;
      }

      var moduleName = moduleID + '';
      var methodName = methodID;
      if (__DEV__ && isFinite(moduleID)) {
        moduleName = this._remoteModuleTable[moduleID];
        methodName = this._remoteMethodTable[moduleID][methodID];
      }

      spy(babelHelpers.extends({
        type: TO_NATIVE,
        isSync: false,
        module: moduleName,
        method: methodName,
        failCbId: -1,
        successCbId: -1,
        args: methodArgs
      }, params));
    }
  }], [{
    key: 'spy',
    value: function spy(spyOrToggle) {
      if (spyOrToggle === true) {
        MessageQueue.prototype.__spy = function (info) {
          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + ' : ' + ('' + (info.module ? info.module + '.' : '') + info.method) + ('(' + JSON.stringify(info.args) + ')'));
        };
      } else if (spyOrToggle === false) {
        MessageQueue.prototype.__spy = null;
      } else {
        MessageQueue.prototype.__spy = spyOrToggle;
      }
    }
  }]);
  return MessageQueue;
}();

module.exports = MessageQueue;
}, 32, null, "MessageQueue");
__d(/* ErrorUtils */function(global, require, module, exports) {
module.exports = global.ErrorUtils;
}, 33, null, "ErrorUtils");
__d(/* Systrace */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JSC_CALLS = 1 << 27;

var _enabled = false;
var _asyncCookie = 0;
var _markStack = [];
var _markStackIndex = -1;

var REACT_MARKER = '\u269B';
var userTimingPolyfill = {
  mark: function mark(markName) {
    if (__DEV__) {
      if (_enabled) {
        _markStackIndex++;
        _markStack[_markStackIndex] = markName;
        var systraceLabel = markName;

        if (markName[0] === REACT_MARKER) {
          var indexOfId = markName.lastIndexOf(' (#');
          var cutoffIndex = indexOfId !== -1 ? indexOfId : markName.length;

          systraceLabel = markName.slice(2, cutoffIndex);
        }
        Systrace.beginEvent(systraceLabel);
      }
    }
  },
  measure: function measure(measureName, startMark, endMark) {
    if (__DEV__) {
      if (_enabled) {
        invariant(typeof measureName === 'string' && typeof startMark === 'string' && typeof endMark === 'undefined', 'Only performance.measure(string, string) overload is supported.');
        var topMark = _markStack[_markStackIndex];
        invariant(startMark === topMark, 'There was a mismatching performance.measure() call. ' + 'Expected "%s" but got "%s."', topMark, startMark);
        _markStackIndex--;

        Systrace.endEvent();
      }
    }
  },
  clearMarks: function clearMarks(markName) {
    if (__DEV__) {
      if (_enabled) {
        if (_markStackIndex === -1) {
          return;
        }
        if (markName === _markStack[_markStackIndex]) {
          userTimingPolyfill.measure(markName, markName);
        }
      }
    }
  },
  clearMeasures: function clearMeasures() {}
};

var Systrace = {
  getUserTimingPolyfill: function getUserTimingPolyfill() {
    return userTimingPolyfill;
  },
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);
        }
      }
      _enabled = enabled;
    }
  },
  isEnabled: function isEnabled() {
    return _enabled;
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;
    if (_enabled) {
      _asyncCookie++;
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
    }
  },
  attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
    relayProfiler.attachProfileHandler('*', function (name) {
      var cookie = Systrace.beginAsyncEvent(name);
      return function () {
        Systrace.endAsyncEvent(name, cookie);
      };
    });

    relayProfiler.attachAggregateHandler('*', function (name, callback) {
      Systrace.beginEvent(name);
      callback();
      Systrace.endEvent();
    });
  },
  swizzleJSON: function swizzleJSON() {
    Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
  },
  measureMethods: function measureMethods(object, objectName, methodNames) {
    if (!__DEV__) {
      return;
    }

    methodNames.forEach(function (methodName) {
      object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
    });
  },
  measure: function measure(objName, fnName, func) {
    if (!__DEV__) {
      return func;
    }

    var profileName = objName + '.' + fnName;
    return function () {
      if (!_enabled) {
        return func.apply(this, arguments);
      }

      Systrace.beginEvent(profileName);
      var ret = func.apply(this, arguments);
      Systrace.endEvent();
      return ret;
    };
  }
};

if (__DEV__) {
  require.Systrace = Systrace;
}

module.exports = Systrace;
}, 34, null, "Systrace");
__d(/* deepFreezeAndThrowOnMutationInDev */function(global, require, module, exports) {

'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return;
    }

    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        object.__defineGetter__(key, identity.bind(null, object[key]));
        object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
}, 35, null, "deepFreezeAndThrowOnMutationInDev");
__d(/* stringifySafe */function(global, require, module, exports) {
'use strict';

function stringifySafe(arg) {
  var ret;
  var type = typeof arg;
  if (arg === undefined) {
    ret = 'undefined';
  } else if (arg === null) {
    ret = 'null';
  } else if (type === 'string') {
    ret = '"' + arg + '"';
  } else if (type === 'function') {
    try {
      ret = arg.toString();
    } catch (e) {
      ret = '[function unknown]';
    }
  } else {
    try {
      ret = JSON.stringify(arg);
    } catch (e) {
      if (typeof arg.toString === 'function') {
        try {
          ret = arg.toString();
        } catch (E) {}
      }
    }
  }
  return ret || '["' + type + '" failed to stringify]';
}

module.exports = stringifySafe;
}, 36, null, "stringifySafe");
__d(/* JSTimers */function(global, require, module, exports) {
'use strict';

var Platform = require(38        ); // 38 = Platform
var Systrace = require(34        ); // 34 = Systrace

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var _require = require(30             ), // 30 = NativeModules
    Timing = _require.Timing;

var _performanceNow = null;
function performanceNow() {
  if (!_performanceNow) {
    _performanceNow = require(39                       ); // 39 = fbjs/lib/performanceNow
  }
  return _performanceNow();
}

var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;

var MAX_TIMER_DURATION_MS = 60 * 1000;
var IS_ANDROID = Platform.OS === 'android';
var ANDROID_LONG_TIMER_MESSAGE = 'Setting a timer for a long period of time, i.e. multiple minutes, is a ' + 'performance and correctness issue on Android as it keeps the timer ' + 'module awake, and timers can only be called when the app is in the foreground. ' + 'See https://github.com/facebook/react-native/issues/12981 for more info.';

var callbacks = [];
var types = [];
var timerIDs = [];
var immediates = [];
var requestIdleCallbacks = [];
var requestIdleCallbackTimeouts = {};
var identifiers = [];

var GUID = 1;
var errors = null;

var hasEmittedTimeDriftWarning = false;

function _getFreeIndex() {
  var freeIndex = timerIDs.indexOf(null);
  if (freeIndex === -1) {
    freeIndex = timerIDs.length;
  }
  return freeIndex;
}

function _allocateCallback(func, type) {
  var id = GUID++;
  var freeIndex = _getFreeIndex();
  timerIDs[freeIndex] = id;
  callbacks[freeIndex] = func;
  types[freeIndex] = type;
  if (__DEV__) {
    var parseErrorStack = require(42               ); // 42 = parseErrorStack
    var error = new Error();
    error.framesToPop = 1;
    var stack = parseErrorStack(error);
    if (stack) {
      identifiers[freeIndex] = stack.shift();
    }
  }
  return id;
}

function _callTimer(timerID, frameTime, didTimeout) {
  require(45                )(timerID <= GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID); // 45 = fbjs/lib/warning

  var timerIndex = timerIDs.indexOf(timerID);
  if (timerIndex === -1) {
    return;
  }

  var type = types[timerIndex];
  var callback = callbacks[timerIndex];
  if (!callback || !type) {
    console.error('No callback found for timerID ' + timerID);
    return;
  }

  if (__DEV__) {
    var identifier = identifiers[timerIndex] || {};
    Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
  }

  if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
    _clearIndex(timerIndex);
  }

  try {
    if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
      callback();
    } else if (type === 'requestAnimationFrame') {
      callback(performanceNow());
    } else if (type === 'requestIdleCallback') {
      callback({
        timeRemaining: function timeRemaining() {
          return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
        },
        didTimeout: !!didTimeout
      });
    } else {
      console.error('Tried to call a callback with invalid type: ' + type);
    }
  } catch (e) {
    if (!errors) {
      errors = [e];
    } else {
      errors.push(e);
    }
  }

  if (__DEV__) {
    Systrace.endEvent();
  }
}

function _callImmediatesPass() {
  if (__DEV__) {
    Systrace.beginEvent('callImmediatesPass()');
  }

  if (immediates.length > 0) {
    var passImmediates = immediates.slice();
    immediates = [];

    for (var i = 0; i < passImmediates.length; ++i) {
      _callTimer(passImmediates[i], 0);
    }
  }

  if (__DEV__) {
    Systrace.endEvent();
  }
  return immediates.length > 0;
}

function _clearIndex(i) {
  timerIDs[i] = null;
  callbacks[i] = null;
  types[i] = null;
  identifiers[i] = null;
}

function _freeCallback(timerID) {
  if (timerID == null) {
    return;
  }

  var index = timerIDs.indexOf(timerID);

  if (index !== -1) {
    _clearIndex(index);
    var type = types[index];
    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
      Timing.deleteTimer(timerID);
    }
  }
}

var JSTimers = {
  setTimeout: function setTimeout(func, duration) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setTimeout with duration ' + duration + 'ms)');
    }
    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setTimeout');
    Timing.createTimer(id, duration || 0, Date.now(), false);
    return id;
  },

  setInterval: function setInterval(func, duration) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    if (__DEV__ && IS_ANDROID && duration > MAX_TIMER_DURATION_MS) {
      console.warn(ANDROID_LONG_TIMER_MESSAGE + '\n' + '(Saw setInterval with duration ' + duration + 'ms)');
    }
    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setInterval');
    Timing.createTimer(id, duration || 0, Date.now(), true);
    return id;
  },

  setImmediate: function setImmediate(func) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setImmediate');
    immediates.push(id);
    return id;
  },

  requestAnimationFrame: function requestAnimationFrame(func) {
    var id = _allocateCallback(func, 'requestAnimationFrame');
    Timing.createTimer(id, 1, Date.now(), false);
    return id;
  },

  requestIdleCallback: function requestIdleCallback(func, options) {
    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(true);
    }

    var timeout = options && options.timeout;
    var id = _allocateCallback(timeout != null ? function (deadline) {
      var timeoutId = requestIdleCallbackTimeouts[id];
      if (timeoutId) {
        JSTimers.clearTimeout(timeoutId);
        requestIdleCallbackTimeouts[id];
      }
      return func(deadline);
    } : func, 'requestIdleCallback');
    requestIdleCallbacks.push(id);

    if (timeout != null) {
      var timeoutId = JSTimers.setTimeout(function () {
        var index = requestIdleCallbacks.indexOf(id);
        if (index > -1) {
          requestIdleCallbacks.splice(index, 1);
          _callTimer(id, performanceNow(), true);
        }
        delete requestIdleCallbackTimeouts[id];
        if (requestIdleCallbacks.length === 0) {
          Timing.setSendIdleEvents(false);
        }
      }, timeout);
      requestIdleCallbackTimeouts[id] = timeoutId;
    }
    return id;
  },

  cancelIdleCallback: function cancelIdleCallback(timerID) {
    _freeCallback(timerID);
    var index = requestIdleCallbacks.indexOf(timerID);
    if (index !== -1) {
      requestIdleCallbacks.splice(index, 1);
    }

    var timeoutId = requestIdleCallbackTimeouts[timerID];
    if (timeoutId) {
      JSTimers.clearTimeout(timeoutId);
      delete requestIdleCallbackTimeouts[timerID];
    }

    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(false);
    }
  },

  clearTimeout: function clearTimeout(timerID) {
    _freeCallback(timerID);
  },

  clearInterval: function clearInterval(timerID) {
    _freeCallback(timerID);
  },

  clearImmediate: function clearImmediate(timerID) {
    _freeCallback(timerID);
    var index = immediates.indexOf(timerID);
    if (index !== -1) {
      immediates.splice(index, 1);
    }
  },

  cancelAnimationFrame: function cancelAnimationFrame(timerID) {
    _freeCallback(timerID);
  },

  callTimers: function callTimers(timersToCall) {
    invariant(timersToCall.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');

    errors = null;
    for (var i = 0; i < timersToCall.length; i++) {
      _callTimer(timersToCall[i], 0);
    }

    if (errors) {
      var errorCount = errors.length;
      if (errorCount > 1) {
        for (var ii = 1; ii < errorCount; ii++) {
          JSTimers.setTimeout(function (error) {
            throw error;
          }.bind(null, errors[ii]), 0);
        }
      }
      throw errors[0];
    }
  },

  callIdleCallbacks: function callIdleCallbacks(frameTime) {
    if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
      return;
    }

    errors = null;
    if (requestIdleCallbacks.length > 0) {
      var passIdleCallbacks = requestIdleCallbacks.slice();
      requestIdleCallbacks = [];

      for (var i = 0; i < passIdleCallbacks.length; ++i) {
        _callTimer(passIdleCallbacks[i], frameTime);
      }
    }

    if (requestIdleCallbacks.length === 0) {
      Timing.setSendIdleEvents(false);
    }

    if (errors) {
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    }
  },

  callImmediates: function callImmediates() {
    errors = null;
    while (_callImmediatesPass()) {}
    if (errors) {
      errors.forEach(function (error) {
        return JSTimers.setTimeout(function () {
          throw error;
        }, 0);
      });
    }
  },
  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
    if (hasEmittedTimeDriftWarning) {
      return;
    }
    hasEmittedTimeDriftWarning = true;
    console.warn(warningMessage);
  }
};

if (!Timing) {
  console.warn("Timing native module is not available, can't set timers.");

  module.exports = {
    callImmediates: JSTimers.callImmediates,
    setImmediate: JSTimers.setImmediate
  };
} else {
  module.exports = JSTimers;
}
}, 37, null, "JSTimers");
__d(/* Platform */function(global, require, module, exports) {

'use strict';

var NativeModules = require(30             ); // 30 = NativeModules

var Platform = {
  OS: 'ios',
  get Version() {
    var constants = NativeModules.PlatformConstants;
    return constants && constants.osVersion;
  },
  get isPad() {
    var constants = NativeModules.PlatformConstants;
    return constants ? constants.interfaceIdiom === 'pad' : false;
  },
  get isTVOS() {
    var constants = NativeModules.PlatformConstants;
    return constants ? constants.interfaceIdiom === 'tv' : false;
  },
  get isTesting() {
    var constants = NativeModules.PlatformConstants;
    return constants && constants.isTesting;
  },
  select: function select(obj) {
    return 'ios' in obj ? obj.ios : obj.default;
  }
};

module.exports = Platform;
}, 38, null, "Platform");
__d(/* fbjs/lib/performanceNow.js */function(global, require, module, exports) {'use strict';

var performance = require(40             ); // 40 = ./performance

var performanceNow;

if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
}, 39, null, "fbjs/lib/performanceNow.js");
__d(/* fbjs/lib/performance.js */function(global, require, module, exports) {

'use strict';

var ExecutionEnvironment = require(41                      ); // 41 = ./ExecutionEnvironment

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
}, 40, null, "fbjs/lib/performance.js");
__d(/* fbjs/lib/ExecutionEnvironment.js */function(global, require, module, exports) {

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM };

module.exports = ExecutionEnvironment;
}, 41, null, "fbjs/lib/ExecutionEnvironment.js");
__d(/* parseErrorStack */function(global, require, module, exports) {
'use strict';

function parseErrorStack(e) {
  if (!e || !e.stack) {
    return [];
  }

  var stacktraceParser = require(43                 ); // 43 = stacktrace-parser
  var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);

  var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;
  while (framesToPop--) {
    stack.shift();
  }
  return stack;
}

module.exports = parseErrorStack;
}, 42, null, "parseErrorStack");
__d(/* stacktrace-parser/index.js */function(global, require, module, exports) {module.exports = require(44                          ); // 44 = ./lib/stacktrace-parser.js
}, 43, null, "stacktrace-parser/index.js");
__d(/* stacktrace-parser/lib/stacktrace-parser.js */function(global, require, module, exports) {

var UNKNOWN_FUNCTION = '<unknown>';

var StackTraceParser = {
    parse: function parse(stackString) {
        var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
            node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            lines = stackString.split('\n'),
            stack = [],
            parts,
            element;

        for (var i = 0, j = lines.length; i < j; ++i) {
            if (parts = gecko.exec(lines[i])) {
                element = {
                    'file': parts[3],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[4],
                    'column': parts[5] ? +parts[5] : null
                };
            } else if (parts = chrome.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if (parts = node.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else {
                continue;
            }

            stack.push(element);
        }

        return stack;
    }
};

module.exports = StackTraceParser;
}, 44, null, "stacktrace-parser/lib/stacktrace-parser.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(46               ); // 46 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
}, 45, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 46, null, "fbjs/lib/emptyFunction.js");
__d(/* defineLazyObjectProperty */function(global, require, module, exports) {

'use strict';

function defineLazyObjectProperty(object, name, descriptor) {
  var get = descriptor.get;

  var enumerable = descriptor.enumerable !== false;
  var writable = descriptor.writable !== false;

  var value = void 0;
  var valueSet = false;
  function getValue() {
    if (!valueSet) {
      valueSet = true;
      setValue(get());
    }
    return value;
  }
  function setValue(newValue) {
    value = newValue;
    valueSet = true;
    Object.defineProperty(object, name, {
      value: newValue,
      configurable: true,
      enumerable: enumerable,
      writable: writable
    });
  }

  Object.defineProperty(object, name, {
    get: getValue,
    set: setValue,
    configurable: true,
    enumerable: enumerable
  });
}

module.exports = defineLazyObjectProperty;
}, 47, null, "defineLazyObjectProperty");
__d(/* Promise */function(global, require, module, exports) {
'use strict';

var Promise = require(49                       ); // 49 = fbjs/lib/Promise.native

if (__DEV__) {
  require(53                                       ).enable({ // 53 = promise/setimmediate/rejection-tracking
    allRejections: true,
    onUnhandled: function onUnhandled(id) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      var message = void 0;
      var stack = void 0;

      var stringValue = Object.prototype.toString.call(error);
      if (stringValue === '[object Error]') {
        message = Error.prototype.toString.call(error);
        stack = error.stack;
      } else {
        message = require(54             )(error); // 54 = pretty-format
      }

      var warning = 'Possible Unhandled Promise Rejection (id: ' + id + '):\n' + (message + '\n') + (stack == null ? '' : stack);
      console.warn(warning);
    },
    onHandled: function onHandled(id) {
      var warning = 'Promise Rejection Handled (id: ' + id + ')\n' + 'This means you can ignore any previous messages of the form ' + ('"Possible Unhandled Promise Rejection (id: ' + id + '):"');
      console.warn(warning);
    }
  });
}

module.exports = Promise;
}, 48, null, "Promise");
__d(/* fbjs/lib/Promise.native.js */function(global, require, module, exports) {

'use strict';

var Promise = require(50                                   ); // 50 = promise/setimmediate/es6-extensions
require(52                         ); // 52 = promise/setimmediate/done

Promise.prototype['finally'] = function (onSettled) {
  return this.then(onSettled, onSettled);
};

module.exports = Promise;
}, 49, null, "fbjs/lib/Promise.native.js");
__d(/* promise/setimmediate/es6-extensions.js */function(global, require, module, exports) {'use strict';

var Promise = require(51         ); // 51 = ./core.js

module.exports = Promise;

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._65 = 1;
  p._55 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._65 === 3) {
            val = val._55;
          }
          if (val._65 === 1) return res(i, val._55);
          if (val._65 === 2) reject(val._55);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function (value) {
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};
}, 50, null, "promise/setimmediate/es6-extensions.js");
__d(/* promise/setimmediate/core.js */function(global, require, module, exports) {'use strict';

function noop() {}

var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('Promise constructor\'s argument is not a function');
  }
  this._40 = 0;
  this._65 = 0;
  this._55 = null;
  this._72 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._37 = null;
Promise._87 = null;
Promise._61 = noop;

Promise.prototype.then = function (onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
}
function handle(self, deferred) {
  while (self._65 === 3) {
    self = self._55;
  }
  if (Promise._37) {
    Promise._37(self);
  }
  if (self._65 === 0) {
    if (self._40 === 0) {
      self._40 = 1;
      self._72 = deferred;
      return;
    }
    if (self._40 === 1) {
      self._40 = 2;
      self._72 = [self._72, deferred];
      return;
    }
    self._72.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  setImmediate(function () {
    var cb = self._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._65 === 1) {
        resolve(deferred.promise, self._55);
      } else {
        reject(deferred.promise, self._55);
      }
      return;
    }
    var ret = tryCallOne(cb, self._55);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }
  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (then === self.then && newValue instanceof Promise) {
      self._65 = 3;
      self._55 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._65 = 1;
  self._55 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._65 = 2;
  self._55 = newValue;
  if (Promise._87) {
    Promise._87(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._40 === 1) {
    handle(self, self._72);
    self._72 = null;
  }
  if (self._40 === 2) {
    for (var i = 0; i < self._72.length; i++) {
      handle(self, self._72[i]);
    }
    self._72 = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}
}, 51, null, "promise/setimmediate/core.js");
__d(/* promise/setimmediate/done.js */function(global, require, module, exports) {'use strict';

var Promise = require(51         ); // 51 = ./core.js

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};
}, 52, null, "promise/setimmediate/done.js");
__d(/* promise/setimmediate/rejection-tracking.js */function(global, require, module, exports) {'use strict';

var Promise = require(51      ); // 51 = ./core

var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];

var enabled = false;
exports.disable = disable;
function disable() {
  enabled = false;
  Promise._37 = null;
  Promise._87 = null;
}

exports.enable = enable;
function enable(options) {
  options = options || {};
  if (enabled) disable();
  enabled = true;
  var id = 0;
  var displayId = 0;
  var rejections = {};
  Promise._37 = function (promise) {
    if (promise._65 === 2 && rejections[promise._51]) {
      if (rejections[promise._51].logged) {
        onHandled(promise._51);
      } else {
        clearTimeout(rejections[promise._51].timeout);
      }
      delete rejections[promise._51];
    }
  };
  Promise._87 = function (promise, err) {
    if (promise._40 === 0) {
      promise._51 = id++;
      rejections[promise._51] = {
        displayId: null,
        error: err,
        timeout: setTimeout(onUnhandled.bind(null, promise._51), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
        logged: false
      };
    }
  };
  function onUnhandled(id) {
    if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
      rejections[id].displayId = displayId++;
      if (options.onUnhandled) {
        rejections[id].logged = true;
        options.onUnhandled(rejections[id].displayId, rejections[id].error);
      } else {
        rejections[id].logged = true;
        logError(rejections[id].displayId, rejections[id].error);
      }
    }
  }
  function onHandled(id) {
    if (rejections[id].logged) {
      if (options.onHandled) {
        options.onHandled(rejections[id].displayId, rejections[id].error);
      } else if (!rejections[id].onUnhandled) {
        console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
        console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
      }
    }
  }
}

function logError(id, error) {
  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
  var errStr = (error && (error.stack || error)) + '';
  errStr.split('\n').forEach(function (line) {
    console.warn('  ' + line);
  });
}

function matchWhitelist(error, list) {
  return list.some(function (cls) {
    return error instanceof cls;
  });
}
}, 53, null, "promise/setimmediate/rejection-tracking.js");
__d(/* pretty-format/index.js */function(global, require, module, exports) {'use strict';

var printString = require(55             ); // 55 = ./printString

var toString = Object.prototype.toString;
var toISOString = Date.prototype.toISOString;
var errorToString = Error.prototype.toString;
var regExpToString = RegExp.prototype.toString;
var symbolToString = (typeof Symbol === 'function' ? Symbol.prototype : '@@prototype').toString;

var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
var NEWLINE_REGEXP = /\n/ig;

var getSymbols = Object.getOwnPropertySymbols || function (obj) {
  return [];
};

function isToStringedArrayType(toStringed) {
  return toStringed === '[object Array]' || toStringed === '[object ArrayBuffer]' || toStringed === '[object DataView]' || toStringed === '[object Float32Array]' || toStringed === '[object Float64Array]' || toStringed === '[object Int8Array]' || toStringed === '[object Int16Array]' || toStringed === '[object Int32Array]' || toStringed === '[object Uint8Array]' || toStringed === '[object Uint8ClampedArray]' || toStringed === '[object Uint16Array]' || toStringed === '[object Uint32Array]';
}

function printNumber(val) {
  if (val != +val) return 'NaN';
  var isNegativeZero = val === 0 && 1 / val < 0;
  return isNegativeZero ? '-0' : '' + val;
}

function printFunction(val, printFunctionName) {
  if (!printFunctionName) {
    return '[Function]';
  } else if (val.name === '') {
    return '[Function anonymous]';
  } else {
    return '[Function ' + val.name + ']';
  }
}

function printSymbol(val) {
  return symbolToString.call(val).replace(SYMBOL_REGEXP, 'Symbol($1)');
}

function printError(val) {
  return '[' + errorToString.call(val) + ']';
}

function printBasicValue(val, printFunctionName, escapeRegex) {
  if (val === true || val === false) return '' + val;
  if (val === undefined) return 'undefined';
  if (val === null) return 'null';

  var typeOf = typeof val;

  if (typeOf === 'number') return printNumber(val);
  if (typeOf === 'string') return '"' + printString(val) + '"';
  if (typeOf === 'function') return printFunction(val, printFunctionName);
  if (typeOf === 'symbol') return printSymbol(val);

  var toStringed = toString.call(val);

  if (toStringed === '[object WeakMap]') return 'WeakMap {}';
  if (toStringed === '[object WeakSet]') return 'WeakSet {}';
  if (toStringed === '[object Function]' || toStringed === '[object GeneratorFunction]') return printFunction(val, printFunctionName);
  if (toStringed === '[object Symbol]') return printSymbol(val);
  if (toStringed === '[object Date]') return toISOString.call(val);
  if (toStringed === '[object Error]') return printError(val);
  if (toStringed === '[object RegExp]') {
    if (escapeRegex) {
      return printString(regExpToString.call(val));
    }
    return regExpToString.call(val);
  };
  if (toStringed === '[object Arguments]' && val.length === 0) return 'Arguments []';
  if (isToStringedArrayType(toStringed) && val.length === 0) return val.constructor.name + ' []';

  if (val instanceof Error) return printError(val);

  return false;
}

function printList(list, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var body = '';

  if (list.length) {
    body += edgeSpacing;

    var innerIndent = prevIndent + indent;

    for (var i = 0; i < list.length; i++) {
      body += innerIndent + print(list[i], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      if (i < list.length - 1) {
        body += ',' + spacing;
      }
    }

    body += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return '[' + body + ']';
}

function printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  return (min ? '' : 'Arguments ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

function printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  return (min ? '' : val.constructor.name + ' ') + printList(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

function printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var result = 'Map {';
  var iterator = val.entries();
  var current = iterator.next();

  if (!current.done) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    while (!current.done) {
      var key = print(current.value[0], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
      var value = print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      result += innerIndent + key + ' => ' + value;

      current = iterator.next();

      if (!current.done) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var constructor = min ? '' : val.constructor ? val.constructor.name + ' ' : 'Object ';
  var result = constructor + '{';
  var keys = Object.keys(val).sort();
  var symbols = getSymbols(val);

  if (symbols.length) {
    keys = keys.filter(function (key) {
      return !(typeof key === 'symbol' || toString.call(key) === '[object Symbol]');
    }).concat(symbols);
  }

  if (keys.length) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var name = print(key, indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
      var value = print(val[key], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      result += innerIndent + name + ': ' + value;

      if (i < keys.length - 1) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var result = 'Set {';
  var iterator = val.entries();
  var current = iterator.next();

  if (!current.done) {
    result += edgeSpacing;

    var innerIndent = prevIndent + indent;

    while (!current.done) {
      result += innerIndent + print(current.value[1], indent, innerIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);

      current = iterator.next();

      if (!current.done) {
        result += ',' + spacing;
      }
    }

    result += (min ? '' : ',') + edgeSpacing + prevIndent;
  }

  return result + '}';
}

function printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  refs = refs.slice();
  if (refs.indexOf(val) > -1) {
    return '[Circular]';
  } else {
    refs.push(val);
  }

  currentDepth++;

  var hitMaxDepth = currentDepth > maxDepth;

  if (callToJSON && !hitMaxDepth && val.toJSON && typeof val.toJSON === 'function') {
    return print(val.toJSON(), indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  var toStringed = toString.call(val);
  if (toStringed === '[object Arguments]') {
    return hitMaxDepth ? '[Arguments]' : printArguments(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (isToStringedArrayType(toStringed)) {
    return hitMaxDepth ? '[Array]' : printArray(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (toStringed === '[object Map]') {
    return hitMaxDepth ? '[Map]' : printMap(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (toStringed === '[object Set]') {
    return hitMaxDepth ? '[Set]' : printSet(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  } else if (typeof val === 'object') {
    return hitMaxDepth ? '[Object]' : printObject(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }
}

function printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var match = false;
  var plugin = void 0;

  for (var p = 0; p < plugins.length; p++) {
    plugin = plugins[p];

    if (plugin.test(val)) {
      match = true;
      break;
    }
  }

  if (!match) {
    return false;
  }

  function boundPrint(val) {
    return print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  }

  function boundIndent(str) {
    var indentation = prevIndent + indent;
    return indentation + str.replace(NEWLINE_REGEXP, '\n' + indentation);
  }

  return plugin.print(val, boundPrint, boundIndent, {
    edgeSpacing: edgeSpacing,
    spacing: spacing
  });
}

function print(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex) {
  var basic = printBasicValue(val, printFunctionName, escapeRegex);
  if (basic) return basic;

  var plugin = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
  if (plugin) return plugin;

  return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, maxDepth, currentDepth, plugins, min, callToJSON, printFunctionName, escapeRegex);
}

var DEFAULTS = {
  callToJSON: true,
  indent: 2,
  maxDepth: Infinity,
  min: false,
  plugins: [],
  printFunctionName: true,
  escapeRegex: false
};

function validateOptions(opts) {
  Object.keys(opts).forEach(function (key) {
    if (!DEFAULTS.hasOwnProperty(key)) {
      throw new Error('prettyFormat: Invalid option: ' + key);
    }
  });

  if (opts.min && opts.indent !== undefined && opts.indent !== 0) {
    throw new Error('prettyFormat: Cannot run with min option and indent');
  }
}

function normalizeOptions(opts) {
  var result = {};

  Object.keys(DEFAULTS).forEach(function (key) {
    return result[key] = opts.hasOwnProperty(key) ? opts[key] : DEFAULTS[key];
  });

  if (result.min) {
    result.indent = 0;
  }

  return result;
}

function createIndent(indent) {
  return new Array(indent + 1).join(' ');
}

function prettyFormat(val, opts) {
  if (!opts) {
    opts = DEFAULTS;
  } else {
    validateOptions(opts);
    opts = normalizeOptions(opts);
  }

  var indent = void 0;
  var refs = void 0;
  var prevIndent = '';
  var currentDepth = 0;
  var spacing = opts.min ? ' ' : '\n';
  var edgeSpacing = opts.min ? '' : '\n';

  if (opts && opts.plugins.length) {
    indent = createIndent(opts.indent);
    refs = [];
    var pluginsResult = printPlugin(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
    if (pluginsResult) return pluginsResult;
  }

  var basicResult = printBasicValue(val, opts.printFunctionName, opts.escapeRegex);
  if (basicResult) return basicResult;

  if (!indent) indent = createIndent(opts.indent);
  if (!refs) refs = [];
  return printComplexValue(val, indent, prevIndent, spacing, edgeSpacing, refs, opts.maxDepth, currentDepth, opts.plugins, opts.min, opts.callToJSON, opts.printFunctionName, opts.escapeRegex);
}

module.exports = prettyFormat;
}, 54, null, "pretty-format/index.js");
__d(/* pretty-format/printString.js */function(global, require, module, exports) {'use strict';

var ESCAPED_CHARACTERS = /(\\|\"|\')/g;

module.exports = function printString(val) {
  return val.replace(ESCAPED_CHARACTERS, '\\$1');
};
}, 55, null, "pretty-format/printString.js");
__d(/* RCTDeviceEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(57            ); // 57 = EventEmitter
var EventSubscriptionVendor = require(60                       ); // 60 = EventSubscriptionVendor

function checkNativeEventModule(eventType) {
  if (eventType) {
    if (eventType.lastIndexOf('statusBar', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');
    }
    if (eventType.lastIndexOf('keyboard', 0) === 0) {
      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');
    }
    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
      throw new Error('`' + eventType + '` event should be registered via the AppState module');
    }
  }
}

var RCTDeviceEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

  function RCTDeviceEventEmitter() {
    babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);

    var sharedSubscriber = new EventSubscriptionVendor();

    var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  babelHelpers.createClass(RCTDeviceEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      return babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      if (__DEV__) {
        checkNativeEventModule(eventType);
      }
      babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    }
  }]);
  return RCTDeviceEventEmitter;
}(EventEmitter);

module.exports = new RCTDeviceEventEmitter();
}, 56, null, "RCTDeviceEventEmitter");
__d(/* EventEmitter */function(global, require, module, exports) {
'use strict';

var EmitterSubscription = require(58                   ); // 58 = EmitterSubscription
var EventSubscriptionVendor = require(60                       ); // 60 = EventSubscriptionVendor

var emptyFunction = require(46                      ); // 46 = fbjs/lib/emptyFunction
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var EventEmitter = function () {
  function EventEmitter(subscriber) {
    babelHelpers.classCallCheck(this, EventEmitter);

    this._subscriber = subscriber || new EventSubscriptionVendor();
  }

  babelHelpers.createClass(EventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {

      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      var _this = this;

      return this.addListener(eventType, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.removeCurrentListener();
        listener.apply(context, args);
      });
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
      this.removeSubscription(this._currentSubscription);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');
      this._subscriber.removeSubscription(subscription);
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription) {
            this._currentSubscription = subscription;
            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
          }
        }
        this._currentSubscription = null;
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventType, listener) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    }
  }]);
  return EventEmitter;
}();

module.exports = EventEmitter;
}, 57, null, "EventEmitter");
__d(/* EmitterSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = require(59                 ); // 59 = EventSubscription

var EmitterSubscription = function (_EventSubscription) {
  babelHelpers.inherits(EmitterSubscription, _EventSubscription);

  function EmitterSubscription(emitter, subscriber, listener, context) {
    babelHelpers.classCallCheck(this, EmitterSubscription);

    var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }

  babelHelpers.createClass(EmitterSubscription, [{
    key: 'remove',
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(EventSubscription);

module.exports = EmitterSubscription;
}, 58, null, "EmitterSubscription");
__d(/* EventSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = function () {
  function EventSubscription(subscriber) {
    babelHelpers.classCallCheck(this, EventSubscription);

    this.subscriber = subscriber;
  }

  babelHelpers.createClass(EventSubscription, [{
    key: 'remove',
    value: function remove() {
      this.subscriber.removeSubscription(this);
    }
  }]);
  return EventSubscription;
}();

module.exports = EventSubscription;
}, 59, null, "EventSubscription");
__d(/* EventSubscriptionVendor */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    babelHelpers.classCallCheck(this, EventSubscriptionVendor);

    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  babelHelpers.createClass(EventSubscriptionVendor, [{
    key: 'addSubscription',
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: 'removeAllSubscriptions',
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: 'getSubscriptionsForType',
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
}, 60, null, "EventSubscriptionVendor");
__d(/* ActivityIndicator */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var GRAY = '#999999';

var ActivityIndicator = createReactClass({
  displayName: 'ActivityIndicator',
  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    animating: PropTypes.bool,

    color: ColorPropType,

    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),

    hidesWhenStopped: PropTypes.bool
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      animating: true,
      color: Platform.OS === 'ios' ? GRAY : undefined,
      hidesWhenStopped: true,
      size: 'small'
    };
  },
  render: function render() {
    var _props = this.props,
        onLayout = _props.onLayout,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['onLayout', 'style']);

    var sizeStyle = void 0;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        break;
      default:
        sizeStyle = { height: props.size, width: props.size };
        break;
    }

    return React.createElement(
      View,
      {
        onLayout: onLayout,
        style: [styles.container, style], __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      },
      React.createElement(RCTActivityIndicator, babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 99
        }
      }))
    );
  }
});

var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});

if (Platform.OS === 'ios') {
  var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, { nativeOnly: { activityIndicatorViewStyle: true } });
} else if (Platform.OS === 'android') {
  var RCTActivityIndicator = requireNativeComponent('AndroidProgressBar', ActivityIndicator, { nativeOnly: {
      indeterminate: true,
      progress: true,
      styleAttr: true
    } });
}

module.exports = ActivityIndicator;
}, 61, null, "ActivityIndicator");
__d(/* ColorPropType */function(global, require, module, exports) {
'use strict';

var normalizeColor = require(63              ); // 63 = normalizeColor

var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
  var color = props[propName];
  if (color === undefined || color === null) {
    if (isRequired) {
      return new Error('Required ' + location + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
    }
    return;
  }

  if (typeof color === 'number') {
    return;
  }

  if (normalizeColor(color) === null) {
    return new Error('Invalid ' + location + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + 'Valid color formats are\n  - \'#f0f\' (#rgb)\n  - \'#f0fc\' (#rgba)\n  - \'#ff00ff\' (#rrggbb)\n  - \'#ff00ff00\' (#rrggbbaa)\n  - \'rgb(255, 255, 255)\'\n  - \'rgba(255, 255, 255, 1.0)\'\n  - \'hsl(360, 100%, 100%)\'\n  - \'hsla(360, 100%, 100%, 1.0)\'\n  - \'transparent\'\n  - \'red\'\n  - 0xff00ff00 (0xrrggbbaa)\n');
  }
};

var ColorPropType = colorPropType.bind(null, false);
ColorPropType.isRequired = colorPropType.bind(null, true);

module.exports = ColorPropType;
}, 62, null, "ColorPropType");
__d(/* normalizeColor */function(global, require, module, exports) {
'use strict';

function normalizeColor(color) {
  var match;

  if (typeof color === 'number') {
    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
      return color;
    }
    return null;
  }

  if (match = matchers.hex6.exec(color)) {
    return parseInt(match[1] + 'ff', 16) >>> 0;
  }

  if (names.hasOwnProperty(color)) {
    return names[color];
  }

  if (match = matchers.rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
  }

  if (match = matchers.rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }

  if (match = matchers.hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
  }

  if (match = matchers.hex8.exec(color)) {
    return parseInt(match[1], 16) >>> 0;
  }

  if (match = matchers.hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }

  if (match = matchers.hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
  }

  if (match = matchers.hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }

  return null;
}

function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}

function hslToRgb(h, s, l) {
  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  var p = 2 * l - q;
  var r = hue2rgb(p, q, h + 1 / 3);
  var g = hue2rgb(p, q, h);
  var b = hue2rgb(p, q, h - 1 / 3);

  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}

var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';

function call() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
}

var matchers = {
  rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
  rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
  hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
  hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
  hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#([0-9a-fA-F]{6})$/,
  hex8: /^#([0-9a-fA-F]{8})$/
};

function parse255(str) {
  var int = parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}

function parse360(str) {
  var int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}

function parse1(str) {
  var num = parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}

function parsePercentage(str) {
  var int = parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}

var names = {
  transparent: 0x00000000,

  aliceblue: 0xf0f8ffff,
  antiquewhite: 0xfaebd7ff,
  aqua: 0x00ffffff,
  aquamarine: 0x7fffd4ff,
  azure: 0xf0ffffff,
  beige: 0xf5f5dcff,
  bisque: 0xffe4c4ff,
  black: 0x000000ff,
  blanchedalmond: 0xffebcdff,
  blue: 0x0000ffff,
  blueviolet: 0x8a2be2ff,
  brown: 0xa52a2aff,
  burlywood: 0xdeb887ff,
  burntsienna: 0xea7e5dff,
  cadetblue: 0x5f9ea0ff,
  chartreuse: 0x7fff00ff,
  chocolate: 0xd2691eff,
  coral: 0xff7f50ff,
  cornflowerblue: 0x6495edff,
  cornsilk: 0xfff8dcff,
  crimson: 0xdc143cff,
  cyan: 0x00ffffff,
  darkblue: 0x00008bff,
  darkcyan: 0x008b8bff,
  darkgoldenrod: 0xb8860bff,
  darkgray: 0xa9a9a9ff,
  darkgreen: 0x006400ff,
  darkgrey: 0xa9a9a9ff,
  darkkhaki: 0xbdb76bff,
  darkmagenta: 0x8b008bff,
  darkolivegreen: 0x556b2fff,
  darkorange: 0xff8c00ff,
  darkorchid: 0x9932ccff,
  darkred: 0x8b0000ff,
  darksalmon: 0xe9967aff,
  darkseagreen: 0x8fbc8fff,
  darkslateblue: 0x483d8bff,
  darkslategray: 0x2f4f4fff,
  darkslategrey: 0x2f4f4fff,
  darkturquoise: 0x00ced1ff,
  darkviolet: 0x9400d3ff,
  deeppink: 0xff1493ff,
  deepskyblue: 0x00bfffff,
  dimgray: 0x696969ff,
  dimgrey: 0x696969ff,
  dodgerblue: 0x1e90ffff,
  firebrick: 0xb22222ff,
  floralwhite: 0xfffaf0ff,
  forestgreen: 0x228b22ff,
  fuchsia: 0xff00ffff,
  gainsboro: 0xdcdcdcff,
  ghostwhite: 0xf8f8ffff,
  gold: 0xffd700ff,
  goldenrod: 0xdaa520ff,
  gray: 0x808080ff,
  green: 0x008000ff,
  greenyellow: 0xadff2fff,
  grey: 0x808080ff,
  honeydew: 0xf0fff0ff,
  hotpink: 0xff69b4ff,
  indianred: 0xcd5c5cff,
  indigo: 0x4b0082ff,
  ivory: 0xfffff0ff,
  khaki: 0xf0e68cff,
  lavender: 0xe6e6faff,
  lavenderblush: 0xfff0f5ff,
  lawngreen: 0x7cfc00ff,
  lemonchiffon: 0xfffacdff,
  lightblue: 0xadd8e6ff,
  lightcoral: 0xf08080ff,
  lightcyan: 0xe0ffffff,
  lightgoldenrodyellow: 0xfafad2ff,
  lightgray: 0xd3d3d3ff,
  lightgreen: 0x90ee90ff,
  lightgrey: 0xd3d3d3ff,
  lightpink: 0xffb6c1ff,
  lightsalmon: 0xffa07aff,
  lightseagreen: 0x20b2aaff,
  lightskyblue: 0x87cefaff,
  lightslategray: 0x778899ff,
  lightslategrey: 0x778899ff,
  lightsteelblue: 0xb0c4deff,
  lightyellow: 0xffffe0ff,
  lime: 0x00ff00ff,
  limegreen: 0x32cd32ff,
  linen: 0xfaf0e6ff,
  magenta: 0xff00ffff,
  maroon: 0x800000ff,
  mediumaquamarine: 0x66cdaaff,
  mediumblue: 0x0000cdff,
  mediumorchid: 0xba55d3ff,
  mediumpurple: 0x9370dbff,
  mediumseagreen: 0x3cb371ff,
  mediumslateblue: 0x7b68eeff,
  mediumspringgreen: 0x00fa9aff,
  mediumturquoise: 0x48d1ccff,
  mediumvioletred: 0xc71585ff,
  midnightblue: 0x191970ff,
  mintcream: 0xf5fffaff,
  mistyrose: 0xffe4e1ff,
  moccasin: 0xffe4b5ff,
  navajowhite: 0xffdeadff,
  navy: 0x000080ff,
  oldlace: 0xfdf5e6ff,
  olive: 0x808000ff,
  olivedrab: 0x6b8e23ff,
  orange: 0xffa500ff,
  orangered: 0xff4500ff,
  orchid: 0xda70d6ff,
  palegoldenrod: 0xeee8aaff,
  palegreen: 0x98fb98ff,
  paleturquoise: 0xafeeeeff,
  palevioletred: 0xdb7093ff,
  papayawhip: 0xffefd5ff,
  peachpuff: 0xffdab9ff,
  peru: 0xcd853fff,
  pink: 0xffc0cbff,
  plum: 0xdda0ddff,
  powderblue: 0xb0e0e6ff,
  purple: 0x800080ff,
  rebeccapurple: 0x663399ff,
  red: 0xff0000ff,
  rosybrown: 0xbc8f8fff,
  royalblue: 0x4169e1ff,
  saddlebrown: 0x8b4513ff,
  salmon: 0xfa8072ff,
  sandybrown: 0xf4a460ff,
  seagreen: 0x2e8b57ff,
  seashell: 0xfff5eeff,
  sienna: 0xa0522dff,
  silver: 0xc0c0c0ff,
  skyblue: 0x87ceebff,
  slateblue: 0x6a5acdff,
  slategray: 0x708090ff,
  slategrey: 0x708090ff,
  snow: 0xfffafaff,
  springgreen: 0x00ff7fff,
  steelblue: 0x4682b4ff,
  tan: 0xd2b48cff,
  teal: 0x008080ff,
  thistle: 0xd8bfd8ff,
  tomato: 0xff6347ff,
  turquoise: 0x40e0d0ff,
  violet: 0xee82eeff,
  wheat: 0xf5deb3ff,
  white: 0xffffffff,
  whitesmoke: 0xf5f5f5ff,
  yellow: 0xffff00ff,
  yellowgreen: 0x9acd32ff
};

module.exports = normalizeColor;
}, 63, null, "normalizeColor");
__d(/* NativeMethodsMixin */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

var NativeMethodsMixin = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;


module.exports = NativeMethodsMixin;
}, 64, null, "NativeMethodsMixin");
__d(/* ReactNative */function(global, require, module, exports) {
'use strict';

var ReactNativeFeatureFlags = require(66                       ); // 66 = ReactNativeFeatureFlags

var ReactNative = void 0;

if (__DEV__) {
  ReactNative = ReactNativeFeatureFlags.useFiber ? require(67                    ) : require(130                   ); // 130 = ReactNativeStack-dev // 67 = ReactNativeFiber-dev
} else {
  ReactNative = ReactNativeFeatureFlags.useFiber ? require(174                    ) : require(175                    ); // 175 = ReactNativeStack-prod // 174 = ReactNativeFiber-prod
}

module.exports = ReactNative;
}, 65, null, "ReactNative");
__d(/* ReactNativeFeatureFlags */function(global, require, module, exports) {

'use strict';

var ReactNativeFeatureFlags = {
  useFiber: false
};

module.exports = ReactNativeFeatureFlags;
}, 66, null, "ReactNativeFeatureFlags");
__d(/* ReactNativeFiber-dev */function(global, require, module, exports) {
"use strict";

var invariant = require(28                  ), // 28 = fbjs/lib/invariant
    warning = require(45                ), // 45 = fbjs/lib/warning
    ExceptionsManager = require(68                 ); // 68 = ExceptionsManager

require(73              ); // 73 = InitializeCore

var RCTEventEmitter = require(124              ), // 124 = RCTEventEmitter
    emptyFunction = require(46                      ), // 46 = fbjs/lib/emptyFunction
    UIManager = require(125        ), // 125 = UIManager
    checkPropTypes = require(23                         ), // 23 = prop-types/checkPropTypes
    emptyObject = require(126                   ), // 126 = fbjs/lib/emptyObject
    react = require(13     ), // 13 = react
    shallowEqual = require(127                    ), // 127 = fbjs/lib/shallowEqual
    deepDiffer = require(128         ), // 128 = deepDiffer
    flattenStyle = require(119           ), // 119 = flattenStyle
    TextInputState = require(129             ), // 129 = TextInputState
    deepFreezeAndThrowOnMutationInDev = require(35                                 ), // 35 = deepFreezeAndThrowOnMutationInDev
    ExecutionEnvironment = require(41                             ), // 41 = fbjs/lib/ExecutionEnvironment
    performanceNow = require(39                       ), // 39 = fbjs/lib/performanceNow
    defaultShowDialog = function defaultShowDialog(capturedError) {
    return !0;
},
    showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
    if (!1 !== showDialog(capturedError)) {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            error = capturedError.error,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry,
            message = error.message,
            name = error.name,
            stack = error.stack,
            errorSummary = message ? name + ": " + message : name,
            componentNameMessage = componentName ? "React caught an error thrown by " + componentName + "." : "React caught an error thrown by one of your components.",
            formattedCallStack = stack.slice(0, errorSummary.length) === errorSummary ? stack.slice(errorSummary.length) : stack;
        formattedCallStack = formattedCallStack.trim().split("\n").map(function (line) {
            return "\n    " + line.trim();
        }).join();
        var errorBoundaryMessage = void 0;
        errorBoundaryMessage = errorBoundaryFound && errorBoundaryName ? willRetry ? "React will try to recreate this component tree from scratch " + "using the error boundary you provided, " + errorBoundaryName + "." : "This error was initially handled by the error boundary " + errorBoundaryName + ". " + "Recreating the tree from scratch failed so React will unmount the tree." : "Consider adding an error boundary to your tree to customize error handling behavior.", console.error(componentNameMessage + " You should fix this error in your code. " + errorBoundaryMessage + "\n\n" + errorSummary + "\n\n" + "The error is located at: " + componentStack + "\n\n" + "The error was thrown at: " + formattedCallStack);
    }
}

var injection = {
    injectDialog: function injectDialog(fn) {
        invariant(showDialog === defaultShowDialog, "The custom dialog was already injected."), invariant("function" == typeof fn, "Injected showDialog() must be a function."), showDialog = fn;
    }
},
    logCapturedError_1 = logCapturedError,
    ReactFiberErrorLogger = {
    injection: injection,
    logCapturedError: logCapturedError_1
},
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
};

if ("undefined" != typeof window && "function" == typeof window.dispatchEvent && "undefined" != typeof document && "function" == typeof document.createEvent) {
    var fakeNode = document.createElement("react"),
        depth = 0;
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        depth++;
        var thisDepth = depth,
            funcArgs = Array.prototype.slice.call(arguments, 3),
            boundFunc = function boundFunc() {
            func.apply(context, funcArgs);
        },
            fakeEventError = null,
            onFakeEventError = function onFakeEventError(event) {
            depth === thisDepth && (fakeEventError = event.error);
        },
            evtType = "react-" + (name || "invokeguardedcallback") + "-" + depth;
        window.addEventListener("error", onFakeEventError), fakeNode.addEventListener(evtType, boundFunc, !1);
        var evt = document.createEvent("Event");
        return evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), fakeNode.removeEventListener(evtType, boundFunc, !1), window.removeEventListener("error", onFakeEventError), depth--, fakeEventError;
    };
}

var _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection$1 = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected, warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

var validateEventDispatches;

validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances,
        listenersIsArr = Array.isArray(dispatchListeners),
        listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0,
        instancesIsArr = Array.isArray(dispatchInstances),
        instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
};

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    validateEventDispatches(event);
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection$1
},
    EventPluginUtils_1 = EventPluginUtils,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching;

function ReactNativeFiberErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error,
        errorToHandle = void 0;
    if (error instanceof Error) {
        var message = error.message,
            name = error.name,
            summary = message ? name + ": " + message : name;
        errorToHandle = error;
        try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
        } catch (e) {}
    } else errorToHandle = "string" == typeof error ? new Error(error + "\n\nThis error is located at:" + componentStack) : new Error("Unspecified error at:" + componentStack);
    return ExceptionsManager.handleException(errorToHandle, !1), !1;
}

var showDialog$1 = ReactNativeFiberErrorDialog,
    ReactNativeFiberErrorDialog_1 = {
    showDialog: showDialog$1
},
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName, "onDoubleClick" === registrationName && (EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName);
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: {},
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    warning(inst, "Dispatching inst must not be null");
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    didWarnForAddedNewProperty = !1,
    isProxySupported = "function" == typeof Proxy,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    delete this.nativeEvent, delete this.preventDefault, delete this.stopPropagation, this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            delete this[propName];
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null)), Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction)), Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = babelHelpers.extends({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, isProxySupported && (SyntheticEvent = new Proxy(SyntheticEvent, {
    construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
    },
    apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
            set: function set(target, prop, value) {
                return "isPersistent" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information."), didWarnForAddedNewProperty = !0), target[prop] = value, !0;
            }
        });
    }
})), PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = "function" == typeof getVal;
    return {
        configurable: !0,
        set: set,
        get: get
    };
    function set(val) {
        return warn(isFunction ? "setting the method" : "setting the property", "This is effectively a no-op"), val;
    }
    function get() {
        return warn(isFunction ? "accessing the method" : "accessing the property", isFunction ? "This is a no-op function" : "This is set to null"), getVal;
    }
    function warn(action, result) {
        warning(!1, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
    }
}

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin,
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning(!1, "A view is reporting that a touch occurred on tag zero.") : rootNodeID = target), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) {
            for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];
                if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = i;
                    break;
                }
            }
            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
            warning(null != activeRecord && activeRecord.touchActive, "Cannot find single active touch.");
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    REACT_PORTAL_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") || 60106,
    createPortal = function createPortal(children, containerInfo, implementation) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
},
    isPortal = function isPortal(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_PORTAL_TYPE;
},
    REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE,
    ReactPortal = {
    createPortal: createPortal,
    isPortal: isPortal,
    REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
},
    commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {},
    ReactFeatureFlags = {
    disableNewFiberFeatures: !1,
    enableAsyncSubtreeAPI: !1
},
    ReactFeatureFlags_1 = ReactFeatureFlags,
    ReactTypeOfSideEffect = {
    NoEffect: 0,
    PerformedWork: 1,
    Placement: 2,
    Update: 4,
    PlacementAndUpdate: 6,
    Deletion: 8,
    ContentReset: 16,
    Callback: 32,
    Err: 64,
    Ref: 128
},
    ReactPriorityLevel = {
    NoWork: 0,
    SynchronousPriority: 1,
    TaskPriority: 2,
    HighPriority: 3,
    LowPriority: 4,
    OffscreenPriority: 5
},
    CallbackEffect = ReactTypeOfSideEffect.Callback,
    NoWork = ReactPriorityLevel.NoWork,
    SynchronousPriority = ReactPriorityLevel.SynchronousPriority,
    TaskPriority = ReactPriorityLevel.TaskPriority,
    ClassComponent = ReactTypeOfWork.ClassComponent,
    HostRoot = ReactTypeOfWork.HostRoot,
    warning$3 = warning;

function comparePriority(a, b) {
    return a !== TaskPriority && a !== SynchronousPriority || b !== TaskPriority && b !== SynchronousPriority ? a === NoWork && b !== NoWork ? -255 : a !== NoWork && b === NoWork ? 255 : a - b : 0;
}

function createUpdateQueue() {
    var queue = {
        first: null,
        last: null,
        hasForceUpdate: !1,
        callbackList: null
    };
    return queue.isProcessing = !1, queue;
}

function cloneUpdate(update) {
    return {
        priorityLevel: update.priorityLevel,
        partialState: update.partialState,
        callback: update.callback,
        isReplace: update.isReplace,
        isForced: update.isForced,
        isTopLevelUnmount: update.isTopLevelUnmount,
        next: null
    };
}

function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
    null !== insertAfter ? insertAfter.next = update : (update.next = queue.first, queue.first = update), null !== insertBefore ? update.next = insertBefore : queue.last = update;
}

function findInsertionPosition(queue, update) {
    var priorityLevel = update.priorityLevel,
        insertAfter = null,
        insertBefore = null;
    if (null !== queue.last && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) insertAfter = queue.last;else for (insertBefore = queue.first; null !== insertBefore && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0;) {
        insertAfter = insertBefore, insertBefore = insertBefore.next;
    }return insertAfter;
}

function ensureUpdateQueues(fiber) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue());
    var queue2 = void 0;
    return null !== alternateFiber ? null === (queue2 = alternateFiber.updateQueue) && (queue2 = alternateFiber.updateQueue = createUpdateQueue()) : queue2 = null, [queue1, queue2 !== queue1 ? queue2 : null];
}

function insertUpdate(fiber, update) {
    var _ensureUpdateQueues = ensureUpdateQueues(fiber),
        queue1 = _ensureUpdateQueues[0],
        queue2 = _ensureUpdateQueues[1];
    (queue1.isProcessing || null !== queue2 && queue2.isProcessing) && warning$3(!1, "An update (setState, replaceState, or forceUpdate) was scheduled " + "from inside an update function. Update functions should be pure, " + "with zero side-effects. Consider using componentDidUpdate or a " + "callback.");
    var insertAfter1 = findInsertionPosition(queue1, update),
        insertBefore1 = null !== insertAfter1 ? insertAfter1.next : queue1.first;
    if (null === queue2) return insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), null;
    var insertAfter2 = findInsertionPosition(queue2, update),
        insertBefore2 = null !== insertAfter2 ? insertAfter2.next : queue2.first;
    if (insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), insertBefore1 === insertBefore2 && null !== insertBefore1 || insertAfter1 === insertAfter2 && null !== insertAfter1) return null === insertAfter2 && (queue2.first = update), null === insertBefore2 && (queue2.last = null), null;
    var update2 = cloneUpdate(update);
    return insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2), update2;
}

function addUpdate(fiber, partialState, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addUpdate_1 = addUpdate;

function addReplaceUpdate(fiber, state, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: state,
        callback: callback,
        isReplace: !0,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addReplaceUpdate_1 = addReplaceUpdate;

function addForceUpdate(fiber, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: null,
        callback: callback,
        isReplace: !1,
        isForced: !0,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addForceUpdate_1 = addForceUpdate;

function getUpdatePriority(fiber) {
    var updateQueue = fiber.updateQueue;
    return null === updateQueue ? NoWork : fiber.tag !== ClassComponent && fiber.tag !== HostRoot ? NoWork : null !== updateQueue.first ? updateQueue.first.priorityLevel : NoWork;
}

var getUpdatePriority_1 = getUpdatePriority;

function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
    var isTopLevelUnmount = null === partialState.element,
        update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: isTopLevelUnmount,
        next: null
    },
        update2 = insertUpdate(fiber, update);
    if (isTopLevelUnmount) {
        var _ensureUpdateQueues2 = ensureUpdateQueues(fiber),
            queue1 = _ensureUpdateQueues2[0],
            queue2 = _ensureUpdateQueues2[1];
        null !== queue1 && null !== update.next && (update.next = null, queue1.last = update), null !== queue2 && null !== update2 && null !== update2.next && (update2.next = null, queue2.last = update);
    }
}

var addTopLevelUpdate_1 = addTopLevelUpdate$1;

function getStateFromUpdate(update, instance, prevState, props) {
    var partialState = update.partialState;
    if ("function" == typeof partialState) {
        return partialState.call(instance, prevState, props);
    }
    return partialState;
}

function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
    if (null !== current && current.updateQueue === queue) {
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
            first: currentQueue.first,
            last: currentQueue.last,
            callbackList: null,
            hasForceUpdate: !1
        };
    }
    queue.isProcessing = !0;
    for (var callbackList = queue.callbackList, hasForceUpdate = queue.hasForceUpdate, state = prevState, dontMutatePrevState = !0, update = queue.first; null !== update && comparePriority(update.priorityLevel, priorityLevel) <= 0;) {
        queue.first = update.next, null === queue.first && (queue.last = null);
        var _partialState = void 0;
        update.isReplace ? (state = getStateFromUpdate(update, instance, state, props), dontMutatePrevState = !0) : (_partialState = getStateFromUpdate(update, instance, state, props)) && (state = dontMutatePrevState ? babelHelpers.extends({}, state, _partialState) : babelHelpers.extends(state, _partialState), dontMutatePrevState = !1), update.isForced && (hasForceUpdate = !0), null === update.callback || update.isTopLevelUnmount && null !== update.next || (callbackList = null !== callbackList ? callbackList : [], callbackList.push(update.callback), workInProgress.effectTag |= CallbackEffect), update = update.next;
    }
    return queue.callbackList = callbackList, queue.hasForceUpdate = hasForceUpdate, null !== queue.first || null !== callbackList || hasForceUpdate || (workInProgress.updateQueue = null), queue.isProcessing = !1, state;
}

var beginUpdateQueue_1 = beginUpdateQueue;

function commitCallbacks(finishedWork, queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) {
        queue.callbackList = null;
        for (var i = 0; i < callbackList.length; i++) {
            var _callback = callbackList[i];
            invariant("function" == typeof _callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback), _callback.call(context);
        }
    }
}

var commitCallbacks_1 = commitCallbacks,
    ReactFiberUpdateQueue = {
    addUpdate: addUpdate_1,
    addReplaceUpdate: addReplaceUpdate_1,
    addForceUpdate: addForceUpdate_1,
    getUpdatePriority: getUpdatePriority_1,
    addTopLevelUpdate: addTopLevelUpdate_1,
    beginUpdateQueue: beginUpdateQueue_1,
    commitCallbacks: commitCallbacks_1
};

function getComponentName$1(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName$1,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
};

babelHelpers.extends(ReactGlobalSharedState, {
    ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
    ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
});

var ReactGlobalSharedState_1 = ReactGlobalSharedState,
    ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner,
    warning$4 = warning,
    HostRoot$2 = ReactTypeOfWork.HostRoot,
    HostComponent$2 = ReactTypeOfWork.HostComponent,
    HostText = ReactTypeOfWork.HostText,
    ClassComponent$2 = ReactTypeOfWork.ClassComponent,
    NoEffect = ReactTypeOfSideEffect.NoEffect,
    Placement = ReactTypeOfSideEffect.Placement,
    MOUNTING = 1,
    MOUNTED = 2,
    UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
        node = node.return;
    } else {
        if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
        for (; node.return;) {
            if (node = node.return, (node.effectTag & Placement) !== NoEffect) return MOUNTING;
        }
    }
    return node.tag === HostRoot$2 ? MOUNTED : UNMOUNTED;
}

var isFiberMounted$1 = function isFiberMounted$1(fiber) {
    return isFiberMountedImpl(fiber) === MOUNTED;
},
    isMounted = function isMounted(component) {
    var owner = ReactCurrentOwner.current;
    if (null !== owner && owner.tag === ClassComponent$2) {
        var ownerFiber = owner,
            instance = ownerFiber.stateNode;
        warning$4(instance._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", getComponentName_1(ownerFiber) || "A component"), instance._warnedAboutRefsInRender = !0;
    }
    var fiber = ReactInstanceMap_1.get(component);
    return !!fiber && isFiberMountedImpl(fiber) === MOUNTED;
};

function assertIsMounted(fiber) {
    invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
}

function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        var state = isFiberMountedImpl(fiber);
        return invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component."), state === MOUNTING ? null : fiber;
    }
    for (var a = fiber, b = alternate; !0;) {
        var parentA = a.return,
            parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) break;
        if (parentA.child === parentB.child) {
            for (var child = parentA.child; child;) {
                if (child === a) return assertIsMounted(parentA), fiber;
                if (child === b) return assertIsMounted(parentA), alternate;
                child = child.sibling;
            }
            invariant(!1, "Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;else {
            for (var didFindChild = !1, _child = parentA.child; _child;) {
                if (_child === a) {
                    didFindChild = !0, a = parentA, b = parentB;
                    break;
                }
                if (_child === b) {
                    didFindChild = !0, b = parentA, a = parentB;
                    break;
                }
                _child = _child.sibling;
            }
            if (!didFindChild) {
                for (_child = parentB.child; _child;) {
                    if (_child === a) {
                        didFindChild = !0, a = parentB, b = parentA;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = !0, b = parentB, a = parentA;
                        break;
                    }
                    _child = _child.sibling;
                }
                invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "related to the return pointer.");
            }
        }
        invariant(a.alternate === b, "Return fibers should always be each others' alternates.");
    }
    return invariant(a.tag === HostRoot$2, "Unable to find node on an unmounted component."), a.stateNode.current === a ? fiber : alternate;
}

var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath,
    findCurrentHostFiber$1 = function findCurrentHostFiber$1(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) return null;
    for (var node = currentParent; !0;) {
        if (node.tag === HostComponent$2 || node.tag === HostText) return node;
        if (node.child) node.child.return = node, node = node.child;else {
            if (node === currentParent) return null;
            for (; !node.sibling;) {
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    return null;
},
    ReactFiberTreeReflection = {
    isFiberMounted: isFiberMounted$1,
    isMounted: isMounted,
    findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
    findCurrentHostFiber: findCurrentHostFiber$1
},
    valueStack = [],
    fiberStack = [],
    index = -1,
    createCursor$1 = function createCursor$1(defaultValue) {
    return {
        current: defaultValue
    };
},
    isEmpty = function isEmpty() {
    return -1 === index;
},
    pop$1 = function pop$1(cursor, fiber) {
    if (index < 0) return void warning(!1, "Unexpected pop.");
    fiber !== fiberStack[index] && warning(!1, "Unexpected Fiber popped."), cursor.current = valueStack[index], valueStack[index] = null, fiberStack[index] = null, index--;
},
    push$1 = function push$1(cursor, value, fiber) {
    index++, valueStack[index] = cursor.current, fiberStack[index] = fiber, cursor.current = value;
},
    reset = function reset() {
    for (; index > -1;) {
        valueStack[index] = null, fiberStack[index] = null, index--;
    }
},
    ReactFiberStack = {
    createCursor: createCursor$1,
    isEmpty: isEmpty,
    pop: pop$1,
    push: push$1,
    reset: reset
},
    IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$3 = ReactTypeOfWork.ClassComponent,
    HostComponent$3 = ReactTypeOfWork.HostComponent;

function describeComponentFrame(name, source, ownerName) {
    return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
}

function describeFiber(fiber) {
    switch (fiber.tag) {
        case IndeterminateComponent:
        case FunctionalComponent:
        case ClassComponent$3:
        case HostComponent$3:
            var owner = fiber._debugOwner,
                source = fiber._debugSource,
                name = getComponentName_1(fiber),
                ownerName = null;
            return owner && (ownerName = getComponentName_1(owner)), describeComponentFrame(name, source, ownerName);

        default:
            return "";
    }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
    var info = "",
        node = workInProgress;
    do {
        info += describeFiber(node), node = node.return;
    } while (node);
    return info;
}

var ReactFiberComponentTreeHook = {
    getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
    describeComponentFrame: describeComponentFrame
},
    getComponentName$3 = getComponentName_1,
    _require$1 = ReactFiberComponentTreeHook,
    getStackAddendumByWorkInProgressFiber = _require$1.getStackAddendumByWorkInProgressFiber;

function getCurrentFiberOwnerName() {
    var fiber = ReactDebugCurrentFiber$2.current;
    return null === fiber ? null : null != fiber._debugOwner ? getComponentName$3(fiber._debugOwner) : null;
}

function getCurrentFiberStackAddendum() {
    var fiber = ReactDebugCurrentFiber$2.current;
    return null === fiber ? null : getStackAddendumByWorkInProgressFiber(fiber);
}

var ReactDebugCurrentFiber$2 = {
    current: null,
    phase: null,
    getCurrentFiberOwnerName: getCurrentFiberOwnerName,
    getCurrentFiberStackAddendum: getCurrentFiberStackAddendum
},
    ReactDebugCurrentFiber_1 = ReactDebugCurrentFiber$2,
    ReactDebugFiberPerf = null,
    _require$2 = ReactTypeOfWork,
    HostRoot$3 = _require$2.HostRoot,
    HostComponent$4 = _require$2.HostComponent,
    HostText$1 = _require$2.HostText,
    HostPortal = _require$2.HostPortal,
    YieldComponent = _require$2.YieldComponent,
    Fragment = _require$2.Fragment,
    getComponentName$4 = getComponentName_1,
    reactEmoji = "⚛",
    warningEmoji = "⛔",
    supportsUserTiming = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    currentFiber = null,
    currentPhase = null,
    currentPhaseFiber = null,
    isCommitting = !1,
    hasScheduledUpdateInCurrentCommit = !1,
    hasScheduledUpdateInCurrentPhase = !1,
    commitCountInCurrentWorkLoop = 0,
    effectCountInCurrentCommit = 0,
    labelsInCurrentCommit = new Set(),
    formatMarkName = function formatMarkName(markName) {
    return reactEmoji + " " + markName;
},
    formatLabel = function formatLabel(label, warning$$1) {
    return (warning$$1 ? warningEmoji + " " : reactEmoji + " ") + label + (warning$$1 ? " Warning: " + warning$$1 : "");
},
    beginMark = function beginMark(markName) {
    performance.mark(formatMarkName(markName));
},
    clearMark = function clearMark(markName) {
    performance.clearMarks(formatMarkName(markName));
},
    endMark = function endMark(label, markName, warning$$1) {
    var formattedMarkName = formatMarkName(markName),
        formattedLabel = formatLabel(label, warning$$1);
    try {
        performance.measure(formattedLabel, formattedMarkName);
    } catch (err) {}
    performance.clearMarks(formattedMarkName), performance.clearMeasures(formattedLabel);
},
    getFiberMarkName = function getFiberMarkName(label, debugID) {
    return label + " (#" + debugID + ")";
},
    getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {
    return null === phase ? componentName + " [" + (isMounted ? "update" : "mount") + "]" : componentName + "." + phase;
},
    beginFiberMark = function beginFiberMark(fiber, phase) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase);
    if (isCommitting && labelsInCurrentCommit.has(label)) return !1;
    labelsInCurrentCommit.add(label);
    var markName = getFiberMarkName(label, debugID);
    return beginMark(markName), !0;
},
    clearFiberMark = function clearFiberMark(fiber, phase) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase),
        markName = getFiberMarkName(label, debugID);
    clearMark(markName);
},
    endFiberMark = function endFiberMark(fiber, phase, warning$$1) {
    var componentName = getComponentName$4(fiber) || "Unknown",
        debugID = fiber._debugID,
        isMounted = null !== fiber.alternate,
        label = getFiberLabel(componentName, isMounted, phase),
        markName = getFiberMarkName(label, debugID);
    endMark(label, markName, warning$$1);
},
    shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {
    switch (fiber.tag) {
        case HostRoot$3:
        case HostComponent$4:
        case HostText$1:
        case HostPortal:
        case YieldComponent:
        case Fragment:
            return !0;

        default:
            return !1;
    }
},
    clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {
    null !== currentPhase && null !== currentPhaseFiber && clearFiberMark(currentPhaseFiber, currentPhase), currentPhaseFiber = null, currentPhase = null, hasScheduledUpdateInCurrentPhase = !1;
},
    pauseTimers = function pauseTimers() {
    for (var fiber = currentFiber; fiber;) {
        fiber._debugIsCurrentlyTiming && endFiberMark(fiber, null, null), fiber = fiber.return;
    }
},
    resumeTimersRecursively = function resumeTimersRecursively(fiber) {
    null !== fiber.return && resumeTimersRecursively(fiber.return), fiber._debugIsCurrentlyTiming && beginFiberMark(fiber, null);
},
    resumeTimers = function resumeTimers() {
    null !== currentFiber && resumeTimersRecursively(currentFiber);
};

ReactDebugFiberPerf = {
    recordEffect: function recordEffect() {
        effectCountInCurrentCommit++;
    },
    recordScheduleUpdate: function recordScheduleUpdate() {
        isCommitting && (hasScheduledUpdateInCurrentCommit = !0), null !== currentPhase && "componentWillMount" !== currentPhase && "componentWillReceiveProps" !== currentPhase && (hasScheduledUpdateInCurrentPhase = !0);
    },
    startWorkTimer: function startWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (currentFiber = fiber, beginFiberMark(fiber, null) && (fiber._debugIsCurrentlyTiming = !0));
    },
    cancelWorkTimer: function cancelWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (fiber._debugIsCurrentlyTiming = !1, clearFiberMark(fiber, null));
    },
    stopWorkTimer: function stopWorkTimer(fiber) {
        supportsUserTiming && !shouldIgnoreFiber(fiber) && (currentFiber = fiber.return, fiber._debugIsCurrentlyTiming && (fiber._debugIsCurrentlyTiming = !1, endFiberMark(fiber, null, null)));
    },
    startPhaseTimer: function startPhaseTimer(fiber, phase) {
        supportsUserTiming && (clearPendingPhaseMeasurement(), beginFiberMark(fiber, phase) && (currentPhaseFiber = fiber, currentPhase = phase));
    },
    stopPhaseTimer: function stopPhaseTimer() {
        if (supportsUserTiming) {
            if (null !== currentPhase && null !== currentPhaseFiber) {
                endFiberMark(currentPhaseFiber, currentPhase, hasScheduledUpdateInCurrentPhase ? "Scheduled a cascading update" : null);
            }
            currentPhase = null, currentPhaseFiber = null;
        }
    },
    startWorkLoopTimer: function startWorkLoopTimer() {
        supportsUserTiming && (commitCountInCurrentWorkLoop = 0, beginMark("(React Tree Reconciliation)"), resumeTimers());
    },
    stopWorkLoopTimer: function stopWorkLoopTimer() {
        if (supportsUserTiming) {
            var warning$$1 = commitCountInCurrentWorkLoop > 1 ? "There were cascading updates" : null;
            commitCountInCurrentWorkLoop = 0, pauseTimers(), endMark("(React Tree Reconciliation)", "(React Tree Reconciliation)", warning$$1);
        }
    },
    startCommitTimer: function startCommitTimer() {
        supportsUserTiming && (isCommitting = !0, hasScheduledUpdateInCurrentCommit = !1, labelsInCurrentCommit.clear(), beginMark("(Committing Changes)"));
    },
    stopCommitTimer: function stopCommitTimer() {
        if (supportsUserTiming) {
            var warning$$1 = null;
            hasScheduledUpdateInCurrentCommit ? warning$$1 = "Lifecycle hook scheduled a cascading update" : commitCountInCurrentWorkLoop > 0 && (warning$$1 = "Caused by a cascading update in earlier commit"), hasScheduledUpdateInCurrentCommit = !1, commitCountInCurrentWorkLoop++, isCommitting = !1, labelsInCurrentCommit.clear(), endMark("(Committing Changes)", "(Committing Changes)", warning$$1);
        }
    },
    startCommitHostEffectsTimer: function startCommitHostEffectsTimer() {
        supportsUserTiming && (effectCountInCurrentCommit = 0, beginMark("(Committing Host Effects)"));
    },
    stopCommitHostEffectsTimer: function stopCommitHostEffectsTimer() {
        if (supportsUserTiming) {
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0, endMark("(Committing Host Effects: " + count + " Total)", "(Committing Host Effects)", null);
        }
    },
    startCommitLifeCyclesTimer: function startCommitLifeCyclesTimer() {
        supportsUserTiming && (effectCountInCurrentCommit = 0, beginMark("(Calling Lifecycle Methods)"));
    },
    stopCommitLifeCyclesTimer: function stopCommitLifeCyclesTimer() {
        if (supportsUserTiming) {
            var count = effectCountInCurrentCommit;
            effectCountInCurrentCommit = 0, endMark("(Calling Lifecycle Methods: " + count + " Total)", "(Calling Lifecycle Methods)", null);
        }
    }
};

var ReactDebugFiberPerf_1 = ReactDebugFiberPerf,
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    isFiberMounted = ReactFiberTreeReflection.isFiberMounted,
    ClassComponent$1 = ReactTypeOfWork.ClassComponent,
    HostRoot$1 = ReactTypeOfWork.HostRoot,
    createCursor = ReactFiberStack.createCursor,
    pop = ReactFiberStack.pop,
    push = ReactFiberStack.push,
    ReactDebugCurrentFiber$1 = ReactDebugCurrentFiber_1,
    _require4 = ReactGlobalSharedState_1,
    ReactDebugCurrentFrame = _require4.ReactDebugCurrentFrame,
    _require5 = ReactDebugFiberPerf_1,
    startPhaseTimer = _require5.startPhaseTimer,
    stopPhaseTimer = _require5.stopPhaseTimer,
    warnedAboutMissingGetChildContext = {},
    contextStackCursor = createCursor(emptyObject),
    didPerformWorkStackCursor = createCursor(!1),
    previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
    return isContextProvider$1(workInProgress) ? previousContext : contextStackCursor.current;
}

var getUnmaskedContext_1 = getUnmaskedContext;

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

var cacheContext_1 = cacheContext,
    getMaskedContext = function getMaskedContext(workInProgress, unmaskedContext) {
    var type = workInProgress.type,
        contextTypes = type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {};
    for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
    }var name = getComponentName_1(workInProgress) || "Unknown";
    return ReactDebugCurrentFrame.current = workInProgress, checkPropTypes(contextTypes, context, "context", name, ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null, instance && cacheContext(workInProgress, unmaskedContext, context), context;
},
    hasContextChanged = function hasContextChanged() {
    return didPerformWorkStackCursor.current;
};

function isContextConsumer(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.contextTypes;
}

var isContextConsumer_1 = isContextConsumer;

function isContextProvider$1(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.childContextTypes;
}

var isContextProvider_1 = isContextProvider$1;

function popContextProvider(fiber) {
    isContextProvider$1(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
}

var popContextProvider_1 = popContextProvider,
    pushTopLevelContextObject = function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack"), push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
};

function processChildContext$1(fiber, parentContext, isReconciling) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" != typeof instance.getChildContext) {
        var componentName = getComponentName_1(fiber) || "Unknown";
        return warnedAboutMissingGetChildContext[componentName] || (warnedAboutMissingGetChildContext[componentName] = !0, warning(!1, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName)), parentContext;
    }
    var childContext = void 0;
    ReactDebugCurrentFiber$1.phase = "getChildContext", startPhaseTimer(fiber, "getChildContext"), childContext = instance.getChildContext(), stopPhaseTimer(), ReactDebugCurrentFiber$1.phase = null;
    for (var contextKey in childContext) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || "Unknown", contextKey);
    }var name = getComponentName_1(fiber) || "Unknown",
        workInProgress = isReconciling ? fiber : null;
    return ReactDebugCurrentFrame.current = workInProgress, checkPropTypes(childContextTypes, childContext, "child context", name, ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null, _extends$2({}, parentContext, childContext);
}

var processChildContext_1 = processChildContext$1,
    pushContextProvider = function pushContextProvider(workInProgress) {
    if (!isContextProvider$1(workInProgress)) return !1;
    var instance = workInProgress.stateNode,
        memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress), push(didPerformWorkStackCursor, !1, workInProgress), !0;
},
    invalidateContextProvider = function invalidateContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point.");
    var mergedContext = processChildContext$1(workInProgress, previousContext, !0);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, mergedContext, workInProgress), push(didPerformWorkStackCursor, !0, workInProgress);
},
    resetContext = function resetContext() {
    previousContext = emptyObject, contextStackCursor.current = emptyObject, didPerformWorkStackCursor.current = !1;
},
    findCurrentUnmaskedContext$1 = function findCurrentUnmaskedContext$1(fiber) {
    invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent$1, "Expected subtree parent to be a mounted class component");
    for (var node = fiber; node.tag !== HostRoot$1;) {
        if (isContextProvider$1(node)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
        var parent = node.return;
        invariant(parent, "Found unexpected detached subtree parent"), node = parent;
    }
    return node.stateNode.context;
},
    ReactFiberContext = {
    getUnmaskedContext: getUnmaskedContext_1,
    cacheContext: cacheContext_1,
    getMaskedContext: getMaskedContext,
    hasContextChanged: hasContextChanged,
    isContextConsumer: isContextConsumer_1,
    isContextProvider: isContextProvider_1,
    popContextProvider: popContextProvider_1,
    pushTopLevelContextObject: pushTopLevelContextObject,
    processChildContext: processChildContext_1,
    pushContextProvider: pushContextProvider,
    invalidateContextProvider: invalidateContextProvider,
    resetContext: resetContext,
    findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
},
    ReactTypeOfInternalContext = {
    NoContext: 0,
    AsyncUpdates: 1
},
    IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent,
    ClassComponent$4 = ReactTypeOfWork.ClassComponent,
    HostRoot$4 = ReactTypeOfWork.HostRoot,
    HostComponent$5 = ReactTypeOfWork.HostComponent,
    HostText$2 = ReactTypeOfWork.HostText,
    HostPortal$1 = ReactTypeOfWork.HostPortal,
    CoroutineComponent = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$1 = ReactTypeOfWork.YieldComponent,
    Fragment$1 = ReactTypeOfWork.Fragment,
    NoWork$1 = ReactPriorityLevel.NoWork,
    NoContext = ReactTypeOfInternalContext.NoContext,
    NoEffect$1 = ReactTypeOfSideEffect.NoEffect,
    getComponentName$5 = getComponentName_1,
    hasBadMapPolyfill = !1;

try {
    var nonExtensibleObject = Object.preventExtensions({});
    new Map([[nonExtensibleObject, null]]), new Set([nonExtensibleObject]);
} catch (e) {
    hasBadMapPolyfill = !0;
}

var debugCounter = 1,
    createFiber = function createFiber(tag, key, internalContextTag) {
    var fiber = {
        tag: tag,
        key: key,
        type: null,
        stateNode: null,
        return: null,
        child: null,
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: null,
        updateQueue: null,
        memoizedState: null,
        internalContextTag: internalContextTag,
        effectTag: NoEffect$1,
        nextEffect: null,
        firstEffect: null,
        lastEffect: null,
        pendingWorkPriority: NoWork$1,
        alternate: null
    };
    return fiber._debugID = debugCounter++, fiber._debugSource = null, fiber._debugOwner = null, fiber._debugIsCurrentlyTiming = !1, hasBadMapPolyfill || "function" != typeof Object.preventExtensions || Object.preventExtensions(fiber), fiber;
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

var createWorkInProgress = function createWorkInProgress(current, renderPriority) {
    var workInProgress = current.alternate;
    return null === workInProgress ? (workInProgress = createFiber(current.tag, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress._debugID = current._debugID, workInProgress._debugSource = current._debugSource, workInProgress._debugOwner = current._debugOwner, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.effectTag = NoWork$1, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null), workInProgress.pendingWorkPriority = renderPriority, workInProgress.child = current.child, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.sibling = current.sibling, workInProgress.index = current.index, workInProgress.ref = current.ref, workInProgress;
},
    createHostRootFiber$1 = function createHostRootFiber$1() {
    return createFiber(HostRoot$4, null, NoContext);
},
    createFiberFromElement = function createFiberFromElement(element, internalContextTag, priorityLevel) {
    var owner = null;
    owner = element._owner;
    var fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
    return fiber.pendingProps = element.props, fiber.pendingWorkPriority = priorityLevel, fiber._debugSource = element._source, fiber._debugOwner = element._owner, fiber;
},
    createFiberFromFragment = function createFiberFromFragment(elements, internalContextTag, priorityLevel) {
    var fiber = createFiber(Fragment$1, null, internalContextTag);
    return fiber.pendingProps = elements, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromText = function createFiberFromText(content, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostText$2, null, internalContextTag);
    return fiber.pendingProps = content, fiber.pendingWorkPriority = priorityLevel, fiber;
};

function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
    var fiber = void 0;
    if ("function" == typeof type) fiber = shouldConstruct(type) ? createFiber(ClassComponent$4, key, internalContextTag) : createFiber(IndeterminateComponent$1, key, internalContextTag), fiber.type = type;else if ("string" == typeof type) fiber = createFiber(HostComponent$5, key, internalContextTag), fiber.type = type;else if ("object" == typeof type && null !== type && "number" == typeof type.tag) fiber = type;else {
        var info = "";
        (void 0 === type || "object" == typeof type && null !== type && 0 === Object.keys(type).length) && (info += " You likely forgot to export your component from the file " + "it's defined in.");
        var ownerName = debugOwner ? getComponentName$5(debugOwner) : null;
        ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`."), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
    }
    return fiber;
}

var createFiberFromElementType_1 = createFiberFromElementType,
    createFiberFromHostInstanceForDeletion = function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent$5, null, NoContext);
    return fiber.type = "DELETED", fiber;
},
    createFiberFromCoroutine = function createFiberFromCoroutine(coroutine, internalContextTag, priorityLevel) {
    var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
    return fiber.type = coroutine.handler, fiber.pendingProps = coroutine, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromYield = function createFiberFromYield(yieldNode, internalContextTag, priorityLevel) {
    return createFiber(YieldComponent$1, null, internalContextTag);
},
    createFiberFromPortal = function createFiberFromPortal(portal, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostPortal$1, portal.key, internalContextTag);
    return fiber.pendingProps = portal.children || [], fiber.pendingWorkPriority = priorityLevel, fiber.stateNode = {
        containerInfo: portal.containerInfo,
        implementation: portal.implementation
    }, fiber;
},
    largerPriority = function largerPriority(p1, p2) {
    return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
},
    ReactFiber = {
    createWorkInProgress: createWorkInProgress,
    createHostRootFiber: createHostRootFiber$1,
    createFiberFromElement: createFiberFromElement,
    createFiberFromFragment: createFiberFromFragment,
    createFiberFromText: createFiberFromText,
    createFiberFromElementType: createFiberFromElementType_1,
    createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
    createFiberFromCoroutine: createFiberFromCoroutine,
    createFiberFromYield: createFiberFromYield,
    createFiberFromPortal: createFiberFromPortal,
    largerPriority: largerPriority
},
    createHostRootFiber = ReactFiber.createHostRootFiber,
    createFiberRoot$1 = function createFiberRoot$1(containerInfo) {
    var uninitializedFiber = createHostRootFiber(),
        root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        isScheduled: !1,
        nextScheduledRoot: null,
        context: null,
        pendingContext: null
    };
    return uninitializedFiber.stateNode = root, root;
},
    ReactFiberRoot = {
    createFiberRoot: createFiberRoot$1
},
    REACT_COROUTINE_TYPE$1,
    REACT_YIELD_TYPE$1;

"function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") ? (REACT_COROUTINE_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.coroutine"), REACT_YIELD_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.yield")) : (REACT_COROUTINE_TYPE$1 = 60104, REACT_YIELD_TYPE$1 = 60105);

var createCoroutine = function createCoroutine(children, handler, props) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
        coroutine = {
        $$typeof: REACT_COROUTINE_TYPE$1,
        key: null == key ? null : "" + key,
        children: children,
        handler: handler,
        props: props
    };
    return Object.freeze && (Object.freeze(coroutine.props), Object.freeze(coroutine)), coroutine;
},
    createYield = function createYield(value) {
    var yieldNode = {
        $$typeof: REACT_YIELD_TYPE$1,
        value: value
    };
    return Object.freeze && Object.freeze(yieldNode), yieldNode;
},
    isCoroutine = function isCoroutine(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_COROUTINE_TYPE$1;
},
    isYield = function isYield(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_YIELD_TYPE$1;
},
    REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1,
    REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1,
    ReactCoroutine = {
    createCoroutine: createCoroutine,
    createYield: createYield,
    isCoroutine: isCoroutine,
    isYield: isYield,
    REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
    REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
},
    REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE,
    REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE,
    REACT_PORTAL_TYPE$1 = ReactPortal.REACT_PORTAL_TYPE,
    _require3$3 = ReactDebugCurrentFiber_1,
    getCurrentFiberStackAddendum$1 = _require3$3.getCurrentFiberStackAddendum,
    warning$7 = warning,
    didWarnAboutMaps = !1,
    ownerHasKeyUseWarning = {},
    warnForMissingKey = function warnForMissingKey(child) {
    if (null !== child && "object" == typeof child && child._store && !child._store.validated && null == child.key) {
        invariant("object" == typeof child._store, "React Component in warnForMissingKey should have a _store"), child._store.validated = !0;
        var currentComponentErrorInfo = "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information." + (getCurrentFiberStackAddendum$1() || "");
        ownerHasKeyUseWarning[currentComponentErrorInfo] || (ownerHasKeyUseWarning[currentComponentErrorInfo] = !0, warning$7(!1, "Each child in an array or iterator should have a unique " + '"key" prop. See https://fb.me/react-warning-keys for ' + "more information.%s", getCurrentFiberStackAddendum$1()));
    }
},
    createWorkInProgress$2 = ReactFiber.createWorkInProgress,
    createFiberFromElement$1 = ReactFiber.createFiberFromElement,
    createFiberFromFragment$1 = ReactFiber.createFiberFromFragment,
    createFiberFromText$1 = ReactFiber.createFiberFromText,
    createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine,
    createFiberFromYield$1 = ReactFiber.createFiberFromYield,
    createFiberFromPortal$1 = ReactFiber.createFiberFromPortal,
    isArray = Array.isArray,
    FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$7 = ReactTypeOfWork.ClassComponent,
    HostText$4 = ReactTypeOfWork.HostText,
    HostPortal$4 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$3 = ReactTypeOfWork.YieldComponent,
    Fragment$3 = ReactTypeOfWork.Fragment,
    NoEffect$2 = ReactTypeOfSideEffect.NoEffect,
    Placement$3 = ReactTypeOfSideEffect.Placement,
    Deletion$1 = ReactTypeOfSideEffect.Deletion,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103;

function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || void 0 === maybeIterable) return null;
    var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    return "function" == typeof iteratorFn ? iteratorFn : null;
}

function coerceRef(current, element) {
    var mixedRef = element.ref;
    if (null !== mixedRef && "function" != typeof mixedRef && element._owner) {
        var owner = element._owner,
            inst = void 0;
        if (owner) if ("number" == typeof owner.tag) {
            var ownerFiber = owner;
            invariant(ownerFiber.tag === ClassComponent$7, "Stateless function components cannot have refs."), inst = ownerFiber.stateNode;
        } else inst = owner.getPublicInstance();
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;
        var ref = function ref(value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        return ref._stringRef = stringRef, ref;
    }
    return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) {
        var addendum = "";
        addendum = " If you meant to render a collection of children, use an array " + "instead." + (getCurrentFiberStackAddendum$1() || ""), invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, addendum);
    }
}

function ChildReconciler(shouldClone, shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            if (!shouldClone) {
                if (null === childToDelete.alternate) return;
                childToDelete = childToDelete.alternate;
            }
            var last = returnFiber.lastEffect;
            null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete, childToDelete.nextEffect = null, childToDelete.effectTag = Deletion$1;
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (var childToDelete = currentFirstChild; null !== childToDelete;) {
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
        }return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (var existingChildren = new Map(), existingChild = currentFirstChild; null !== existingChild;) {
            null !== existingChild.key ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
        }return existingChildren;
    }
    function useFiber(fiber, priority) {
        if (shouldClone) {
            var clone = createWorkInProgress$2(fiber, priority);
            return clone.index = 0, clone.sibling = null, clone;
        }
        return fiber.pendingWorkPriority = priority, fiber.effectTag = NoEffect$2, fiber.index = 0, fiber.sibling = null, fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        if (newFiber.index = newIndex, !shouldTrackSideEffects) return lastPlacedIndex;
        var current = newFiber.alternate;
        if (null !== current) {
            var oldIndex = current.index;
            return oldIndex < lastPlacedIndex ? (newFiber.effectTag = Placement$3, lastPlacedIndex) : oldIndex;
        }
        return newFiber.effectTag = Placement$3, lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        return shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = Placement$3), newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, priority) {
        if (null === current || current.tag !== HostText$4) {
            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = textContent, existing.return = returnFiber, existing;
    }
    function updateElement(returnFiber, current, element, priority) {
        if (null === current || current.type !== element.type) {
            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
            return created.ref = coerceRef(current, element), created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.ref = coerceRef(current, element), existing.pendingProps = element.props, existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
    }
    function updateCoroutine(returnFiber, current, coroutine, priority) {
        if (null === current || current.tag !== CoroutineComponent$2) {
            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
    }
    function updateYield(returnFiber, current, yieldNode, priority) {
        if (null === current || current.tag !== YieldComponent$3) {
            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
            return created.type = yieldNode.value, created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.type = yieldNode.value, existing.return = returnFiber, existing;
    }
    function updatePortal(returnFiber, current, portal, priority) {
        if (null === current || current.tag !== HostPortal$4 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
    }
    function updateFragment(returnFiber, current, fragment, priority) {
        if (null === current || current.tag !== Fragment$3) {
            var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = fragment, existing.return = returnFiber, existing;
    }
    function createChild(returnFiber, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            var created = createFiberFromText$1("" + newChild, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                    return _created.ref = coerceRef(null, newChild), _created.return = returnFiber, _created;

                case REACT_COROUTINE_TYPE:
                    var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                    return _created2.return = returnFiber, _created2;

                case REACT_YIELD_TYPE:
                    var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                    return _created3.type = newChild.value, _created3.return = returnFiber, _created3;

                case REACT_PORTAL_TYPE$1:
                    var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                    return _created4.return = returnFiber, _created4;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                return _created5.return = returnFiber, _created5;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, priority) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" == typeof newChild || "number" == typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, priority);
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_COROUTINE_TYPE:
                    return newChild.key === key ? updateCoroutine(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_YIELD_TYPE:
                    return null === key ? updateYield(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_PORTAL_TYPE$1:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, priority) : null;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, priority);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            return updateTextNode(returnFiber, existingChildren.get(newIdx) || null, "" + newChild, priority);
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return updateElement(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_COROUTINE_TYPE:
                    return updateCoroutine(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_YIELD_TYPE:
                    return updateYield(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);

                case REACT_PORTAL_TYPE$1:
                    return updatePortal(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                return updateFragment(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function warnOnInvalidKey(child, knownKeys) {
        if ("object" != typeof child || null === child) return knownKeys;
        switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_COROUTINE_TYPE:
            case REACT_PORTAL_TYPE$1:
                warnForMissingKey(child);
                var key = child.key;
                if ("string" != typeof key) break;
                if (null === knownKeys) {
                    knownKeys = new Set(), knownKeys.add(key);
                    break;
                }
                if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                }
                warning$7(!1, "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", key, getCurrentFiberStackAddendum$1());
        }
        return knownKeys;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
        for (var knownKeys = null, i = 0; i < newChildren.length; i++) {
            knownKeys = warnOnInvalidKey(newChildren[i], knownKeys);
        }
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                _newFiber && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
            _newFiber2 && (shouldTrackSideEffects && null !== _newFiber2.alternate && existingChildren.delete(null === _newFiber2.key ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        if (invariant("function" == typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue."), "function" == typeof newChildrenIterable.entries) {
            newChildrenIterable.entries === iteratorFn && (warning$7(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentFiberStackAddendum$1()), didWarnAboutMaps = !0);
        }
        var _newChildren = iteratorFn.call(newChildrenIterable);
        if (_newChildren) for (var knownKeys = null, _step = _newChildren.next(); !_step.done; _step = _newChildren.next()) {
            var child = _step.value;
            knownKeys = warnOnInvalidKey(child, knownKeys);
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        invariant(null != newChildren, "An iterable object provided no iterator.");
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
            if (null === newFiber) {
                oldFiber || (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, priority);
                null !== _newFiber3 && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
            null !== _newFiber4 && (shouldTrackSideEffects && null !== _newFiber4.alternate && existingChildren.delete(null === _newFiber4.key ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
        if (null !== currentFirstChild && currentFirstChild.tag === HostText$4) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, priority);
            return existing.pendingProps = textContent, existing.return = returnFiber, existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
        for (var key = element.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.type === element.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.ref = coerceRef(child, element), existing.pendingProps = element.props, existing.return = returnFiber, existing._debugSource = element._source, existing._debugOwner = element._owner, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
        return created.ref = coerceRef(currentFirstChild, element), created.return = returnFiber, created;
    }
    function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
        for (var key = coroutine.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === CoroutineComponent$2) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
        var child = currentFirstChild;
        if (null !== child) {
            if (child.tag === YieldComponent$3) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, priority);
                return existing.type = yieldNode.value, existing.return = returnFiber, existing;
            }
            deleteRemainingChildren(returnFiber, child);
        }
        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
        return created.type = yieldNode.value, created.return = returnFiber, created;
    }
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
        for (var key = portal.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === HostPortal$4 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
        var disableNewFiberFeatures = ReactFeatureFlags_1.disableNewFiberFeatures,
            isObject = "object" == typeof newChild && null !== newChild;
        if (isObject) if (disableNewFiberFeatures) switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        } else switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_COROUTINE_TYPE:
                return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));

            case REACT_YIELD_TYPE:
                return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        }
        if (disableNewFiberFeatures) switch (returnFiber.tag) {
            case ClassComponent$7:
                if (returnFiber.stateNode.render._isMockFunction && void 0 === newChild) break;
                var Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s.render(): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", Component.displayName || Component.name || "Component");
                break;

            case FunctionalComponent$2:
                var _Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s(...): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", _Component.displayName || _Component.name || "Component");
        }
        if ("string" == typeof newChild || "number" == typeof newChild) return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, priority));
        if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
        if (isObject && throwOnInvalidObjectType(returnFiber, newChild), !disableNewFiberFeatures && void 0 === newChild) switch (returnFiber.tag) {
            case ClassComponent$7:
                if (returnFiber.stateNode.render._isMockFunction) break;

            case FunctionalComponent$2:
                var _Component2 = returnFiber.type;
                invariant(!1, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", _Component2.displayName || _Component2.name || "Component");
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
}

var reconcileChildFibers$1 = ChildReconciler(!0, !0),
    reconcileChildFibersInPlace$1 = ChildReconciler(!1, !0),
    mountChildFibersInPlace$1 = ChildReconciler(!1, !1),
    cloneChildFibers$1 = function cloneChildFibers$1(current, workInProgress) {
    if (invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented."), null !== workInProgress.child) {
        var currentChild = workInProgress.child,
            newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
        for (newChild.pendingProps = currentChild.pendingProps, workInProgress.child = newChild, newChild.return = workInProgress; null !== currentChild.sibling;) {
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority), newChild.pendingProps = currentChild.pendingProps, newChild.return = workInProgress;
        }newChild.sibling = null;
    }
},
    ReactChildFiber = {
    reconcileChildFibers: reconcileChildFibers$1,
    reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
    mountChildFibersInPlace: mountChildFibersInPlace$1,
    cloneChildFibers: cloneChildFibers$1
},
    Update$1 = ReactTypeOfSideEffect.Update,
    AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates,
    cacheContext$1 = ReactFiberContext.cacheContext,
    getMaskedContext$2 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext,
    isContextConsumer$1 = ReactFiberContext.isContextConsumer,
    addUpdate$1 = ReactFiberUpdateQueue.addUpdate,
    addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate,
    addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate,
    beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue,
    _require5$1 = ReactFiberContext,
    hasContextChanged$2 = _require5$1.hasContextChanged,
    isMounted$1 = ReactFiberTreeReflection.isMounted,
    isArray$1 = Array.isArray,
    _require7$1 = ReactDebugFiberPerf_1,
    startPhaseTimer$1 = _require7$1.startPhaseTimer,
    stopPhaseTimer$1 = _require7$1.stopPhaseTimer,
    warning$8 = warning,
    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
    warning$8(null === callback || "function" == typeof callback, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, callback);
},
    ReactFiberClassComponent = function ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
    var updater = {
        isMounted: isMounted$1,
        enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "setState"), addUpdate$1(fiber, partialState, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "replaceState"), addReplaceUpdate$1(fiber, state, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, warnOnInvalidCallback(callback, "forceUpdate"), addForceUpdate$1(fiber, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        }
    };
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
        var instance = workInProgress.stateNode,
            type = workInProgress.type;
        if ("function" == typeof instance.shouldComponentUpdate) {
            startPhaseTimer$1(workInProgress, "shouldComponentUpdate");
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);
            return stopPhaseTimer$1(), warning$8(void 0 !== shouldUpdate, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", getComponentName_1(workInProgress) || "Unknown"), shouldUpdate;
        }
        return !type.prototype || !type.prototype.isPureReactComponent || !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
    function checkClassInstance(workInProgress) {
        var instance = workInProgress.stateNode,
            type = workInProgress.type,
            name = getComponentName_1(workInProgress),
            renderPresent = instance.render;
        warning$8(renderPresent, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", name);
        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        warning$8(noGetInitialStateOnES6, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", name);
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        warning$8(noGetDefaultPropsOnES6, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", name);
        var noInstancePropTypes = !instance.propTypes;
        warning$8(noInstancePropTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", name);
        var noInstanceContextTypes = !instance.contextTypes;
        warning$8(noInstanceContextTypes, "contextTypes was defined as an instance property on %s. Use a static " + "property to define contextTypes instead.", name);
        var noComponentShouldUpdate = "function" != typeof instance.componentShouldUpdate;
        warning$8(noComponentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", name), type.prototype && type.prototype.isPureReactComponent && void 0 !== instance.shouldComponentUpdate && warning$8(!1, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", getComponentName_1(workInProgress) || "A pure component");
        var noComponentDidUnmount = "function" != typeof instance.componentDidUnmount;
        warning$8(noComponentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", name);
        var noComponentWillRecieveProps = "function" != typeof instance.componentWillRecieveProps;
        warning$8(noComponentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== workInProgress.pendingProps;
        warning$8(void 0 === instance.props || !hasMutatedProps, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", name, name);
        var noInstanceDefaultProps = !instance.defaultProps;
        warning$8(noInstanceDefaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", name, name);
        var state = instance.state;
        state && ("object" != typeof state || isArray$1(state)) && invariant(!1, "%s.state: must be set to an object or null", getComponentName_1(workInProgress)), "function" == typeof instance.getChildContext && invariant("object" == typeof workInProgress.type.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", getComponentName_1(workInProgress));
    }
    function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps, instance.state = workInProgress.memoizedState;
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater, workInProgress.stateNode = instance, ReactInstanceMap_1.set(instance, workInProgress);
    }
    function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext$2(workInProgress),
            needsContext = isContextConsumer$1(workInProgress),
            context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject,
            instance = new ctor(props, context);
        return adoptClassInstance(workInProgress, instance), needsContext && cacheContext$1(workInProgress, unmaskedContext, context), instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        startPhaseTimer$1(workInProgress, "componentWillMount");
        var oldState = instance.state;
        instance.componentWillMount(), stopPhaseTimer$1(), oldState !== instance.state && (warning$8(!1, "%s.componentWillMount(): Assigning directly to this.state is " + "deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName_1(workInProgress)), updater.enqueueReplaceState(instance, instance.state, null));
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        startPhaseTimer$1(workInProgress, "componentWillReceiveProps");
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext), stopPhaseTimer$1(), instance.state !== oldState && (warning$8(!1, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", getComponentName_1(workInProgress)), updater.enqueueReplaceState(instance, instance.state, null));
    }
    function mountClassInstance(workInProgress, priorityLevel) {
        var current = workInProgress.alternate;
        checkClassInstance(workInProgress);
        var instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps;
        invariant(props, "There must be pending props for an initial mount. This error is " + "likely caused by a bug in React. Please file an issue.");
        var unmaskedContext = getUnmaskedContext$2(workInProgress);
        if (instance.props = props, instance.state = state, instance.refs = emptyObject, instance.context = getMaskedContext$2(workInProgress, unmaskedContext), ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != workInProgress.type && !0 === workInProgress.type.unstable_asyncUpdates && (workInProgress.internalContextTag |= AsyncUpdates$1), "function" == typeof instance.componentWillMount) {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && (instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel));
        }
        "function" == typeof instance.componentDidMount && (workInProgress.effectTag |= Update$1);
    }
    function updateClassInstance(current, workInProgress, priorityLevel) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps;
        newProps || (newProps = oldProps, invariant(null != newProps, "There should always be pending or memoized props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext$2(workInProgress),
            newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
        "function" != typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newContext || callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        var oldState = workInProgress.memoizedState,
            newState = void 0;
        if (newState = null !== workInProgress.updateQueue ? beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel) : oldState, !(oldProps !== newProps || oldState !== newState || hasContextChanged$2() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), !1;
        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
        return shouldUpdate ? ("function" == typeof instance.componentWillUpdate && (startPhaseTimer$1(workInProgress, "componentWillUpdate"), instance.componentWillUpdate(newProps, newState, newContext), stopPhaseTimer$1()), "function" == typeof instance.componentDidUpdate && (workInProgress.effectTag |= Update$1)) : ("function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, newState)), instance.props = newProps, instance.state = newState, instance.context = newContext, shouldUpdate;
    }
    return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        updateClassInstance: updateClassInstance
    };
},
    mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace,
    reconcileChildFibers = ReactChildFiber.reconcileChildFibers,
    reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace,
    cloneChildFibers = ReactChildFiber.cloneChildFibers,
    beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue,
    getMaskedContext$1 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext,
    hasContextChanged$1 = ReactFiberContext.hasContextChanged,
    pushContextProvider$1 = ReactFiberContext.pushContextProvider,
    pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject,
    invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider,
    IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$6 = ReactTypeOfWork.ClassComponent,
    HostRoot$6 = ReactTypeOfWork.HostRoot,
    HostComponent$7 = ReactTypeOfWork.HostComponent,
    HostText$3 = ReactTypeOfWork.HostText,
    HostPortal$3 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$2 = ReactTypeOfWork.YieldComponent,
    Fragment$2 = ReactTypeOfWork.Fragment,
    NoWork$3 = ReactPriorityLevel.NoWork,
    OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority,
    PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork,
    Placement$2 = ReactTypeOfSideEffect.Placement,
    ContentReset$1 = ReactTypeOfSideEffect.ContentReset,
    Err$1 = ReactTypeOfSideEffect.Err,
    Ref$1 = ReactTypeOfSideEffect.Ref,
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    ReactDebugCurrentFiber$4 = ReactDebugCurrentFiber_1,
    _require7 = ReactDebugFiberPerf_1,
    cancelWorkTimer = _require7.cancelWorkTimer,
    warning$6 = warning,
    warnedAboutStatelessRefs = {},
    ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance,
        _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState),
        adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
        constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
        mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
        updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
    function reconcileChildren(current, workInProgress, nextChildren) {
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, workInProgress.pendingWorkPriority);
    }
    function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
        null === current ? workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel) : workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
    }
    function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = workInProgress.memoizedProps);else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren), workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        null === ref || current && current.ref === ref || (workInProgress.effectTag |= Ref$1);
    }
    function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type,
            nextProps = workInProgress.pendingProps,
            memoizedProps = workInProgress.memoizedProps;
        if (hasContextChanged$1()) null === nextProps && (nextProps = memoizedProps);else {
            if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
            if ("function" == typeof fn.shouldComponentUpdate && !fn.shouldComponentUpdate(memoizedProps, nextProps)) return memoizeProps(workInProgress, nextProps), bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        var nextChildren,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        return ReactCurrentOwner$2.current = workInProgress, ReactDebugCurrentFiber$4.phase = "render", nextChildren = fn(nextProps, context), ReactDebugCurrentFiber$4.phase = null, workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, priorityLevel) {
        var hasContext = pushContextProvider$1(workInProgress),
            shouldUpdate = void 0;
        return null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, priorityLevel), shouldUpdate = !0) : shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel), finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
    }
    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        if (markRef(current, workInProgress), !shouldUpdate) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$2.current = workInProgress;
        var nextChildren = void 0;
        return ReactDebugCurrentFiber$4.phase = "render", nextChildren = instance.render(), ReactDebugCurrentFiber$4.phase = null, workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeState(workInProgress, instance.state), memoizeProps(workInProgress, instance.props), hasContext && invalidateContextProvider$1(workInProgress), workInProgress.child;
    }
    function updateHostRoot(current, workInProgress, priorityLevel) {
        var root = workInProgress.stateNode;
        root.pendingContext ? pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject$1(workInProgress, root.context, !1), pushHostContainer(workInProgress, root.containerInfo);
        var updateQueue = workInProgress.updateQueue;
        if (null !== updateQueue) {
            var prevState = workInProgress.memoizedState,
                state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
            if (prevState === state) return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
            var element = state.element;
            return null !== current && null !== current.child || !enterHydrationState(workInProgress) ? (resetHydrationState(), reconcileChildren(current, workInProgress, element)) : (workInProgress.effectTag |= Placement$2, workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel)), memoizeState(workInProgress, state), workInProgress.child;
        }
        return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    function updateHostComponent(current, workInProgress, renderPriority) {
        pushHostContext(workInProgress), null === current && tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type,
            memoizedProps = workInProgress.memoizedProps,
            nextProps = workInProgress.pendingProps;
        null === nextProps && (nextProps = memoizedProps, invariant(null !== nextProps, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var prevProps = null !== current ? current.memoizedProps : null;
        if (hasContextChanged$1()) ;else if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var nextChildren = nextProps.children;
        return shouldSetTextContent(type, nextProps) ? nextChildren = null : prevProps && shouldSetTextContent(type, prevProps) && (workInProgress.effectTag |= ContentReset$1), markRef(current, workInProgress), renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps) ? (workInProgress.pendingWorkPriority = OffscreenPriority$1, null) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child);
    }
    function updateHostText(current, workInProgress) {
        null === current && tryToClaimNextHydratableInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        return null === nextProps && (nextProps = workInProgress.memoizedProps), memoizeProps(workInProgress, nextProps), null;
    }
    function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
        invariant(null === current, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
        var value,
            fn = workInProgress.type,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        if (ReactCurrentOwner$2.current = workInProgress, value = fn(props, context), workInProgress.effectTag |= PerformedWork$1, "object" == typeof value && null !== value && "function" == typeof value.render) {
            workInProgress.tag = ClassComponent$6;
            var hasContext = pushContextProvider$1(workInProgress);
            return adoptClassInstance(workInProgress, value), mountClassInstance(workInProgress, priorityLevel), finishClassComponent(current, workInProgress, !0, hasContext);
        }
        workInProgress.tag = FunctionalComponent$1;
        var Component = workInProgress.type;
        if (Component && warning$6(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component"), null !== workInProgress.ref) {
            var info = "",
                ownerName = ReactDebugCurrentFiber$4.getCurrentFiberOwnerName();
            ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`.");
            var warningKey = ownerName || workInProgress._debugID || "",
                debugSource = workInProgress._debugSource;
            debugSource && (warningKey = debugSource.fileName + ":" + debugSource.lineNumber), warnedAboutStatelessRefs[warningKey] || (warnedAboutStatelessRefs[warningKey] = !0, warning$6(!1, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactDebugCurrentFiber$4.getCurrentFiberStackAddendum()));
        }
        return reconcileChildren(current, workInProgress, value), memoizeProps(workInProgress, props), workInProgress.child;
    }
    function updateCoroutineComponent(current, workInProgress) {
        var nextCoroutine = workInProgress.pendingProps;
        hasContextChanged$1() ? null === nextCoroutine && (nextCoroutine = current && current.memoizedProps, invariant(null !== nextCoroutine, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue.")) : null !== nextCoroutine && workInProgress.memoizedProps !== nextCoroutine || (nextCoroutine = workInProgress.memoizedProps);
        var nextChildren = nextCoroutine.children,
            priorityLevel = workInProgress.pendingWorkPriority;
        return null === current ? workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel), memoizeProps(workInProgress, nextCoroutine), workInProgress.stateNode;
    }
    function updatePortalComponent(current, workInProgress) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var priorityLevel = workInProgress.pendingWorkPriority,
            nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = current && current.memoizedProps, invariant(null != nextChildren, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return null === current ? (workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel), memoizeProps(workInProgress, nextChildren)) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren)), workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        return cancelWorkTimer(workInProgress), cloneChildFibers(current, workInProgress), workInProgress.child;
    }
    function bailoutOnLowPriority(current, workInProgress) {
        switch (cancelWorkTimer(workInProgress), workInProgress.tag) {
            case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;

            case HostPortal$3:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        }
        return null;
    }
    function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
    }
    function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState;
    }
    function beginWork(current, workInProgress, priorityLevel) {
        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        switch (ReactDebugCurrentFiber$4.current = workInProgress, workInProgress.tag) {
            case IndeterminateComponent$2:
                return mountIndeterminateComponent(current, workInProgress, priorityLevel);

            case FunctionalComponent$1:
                return updateFunctionalComponent(current, workInProgress);

            case ClassComponent$6:
                return updateClassComponent(current, workInProgress, priorityLevel);

            case HostRoot$6:
                return updateHostRoot(current, workInProgress, priorityLevel);

            case HostComponent$7:
                return updateHostComponent(current, workInProgress, priorityLevel);

            case HostText$3:
                return updateHostText(current, workInProgress);

            case CoroutineHandlerPhase:
                workInProgress.tag = CoroutineComponent$1;

            case CoroutineComponent$1:
                return updateCoroutineComponent(current, workInProgress);

            case YieldComponent$2:
                return null;

            case HostPortal$3:
                return updatePortalComponent(current, workInProgress);

            case Fragment$2:
                return updateFragment(current, workInProgress);

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function beginFailedWork(current, workInProgress, priorityLevel) {
        if (invariant(workInProgress.tag === ClassComponent$6 || workInProgress.tag === HostRoot$6, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue."), workInProgress.effectTag |= Err$1, null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child), workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        if (workInProgress.firstEffect = null, workInProgress.lastEffect = null, reconcileChildrenAtPriority(current, workInProgress, null, priorityLevel), workInProgress.tag === ClassComponent$6) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props, workInProgress.memoizedState = instance.state;
        }
        return workInProgress.child;
    }
    return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
    };
},
    reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers,
    popContextProvider$2 = ReactFiberContext.popContextProvider,
    IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$8 = ReactTypeOfWork.ClassComponent,
    HostRoot$7 = ReactTypeOfWork.HostRoot,
    HostComponent$8 = ReactTypeOfWork.HostComponent,
    HostText$5 = ReactTypeOfWork.HostText,
    HostPortal$5 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$4 = ReactTypeOfWork.YieldComponent,
    Fragment$4 = ReactTypeOfWork.Fragment,
    Placement$4 = ReactTypeOfSideEffect.Placement,
    Ref$2 = ReactTypeOfSideEffect.Ref,
    Update$2 = ReactTypeOfSideEffect.Update,
    OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority,
    ReactDebugCurrentFiber$5 = ReactDebugCurrentFiber_1,
    ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState;
    function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update$2;
    }
    function markRef(workInProgress) {
        workInProgress.effectTag |= Ref$2;
    }
    function appendAllYields(yields, workInProgress) {
        var node = workInProgress.stateNode;
        for (node && (node.return = workInProgress); null !== node;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5 || node.tag === HostPortal$5) invariant(!1, "A coroutine cannot have host component children.");else if (node.tag === YieldComponent$4) yields.push(node.type);else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function moveCoroutineToHandlerPhase(current, workInProgress) {
        var coroutine = workInProgress.memoizedProps;
        invariant(coroutine, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue."), workInProgress.tag = CoroutineHandlerPhase$1;
        var yields = [];
        appendAllYields(yields, workInProgress);
        var fn = coroutine.handler,
            props = coroutine.props,
            nextChildren = fn(props, yields),
            currentFirstChild = null !== current ? current.child : null,
            priority = workInProgress.pendingWorkPriority;
        return workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority), workInProgress.child;
    }
    function appendAllChildren(parent, workInProgress) {
        for (var node = workInProgress.child; null !== node;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5) appendInitialChild(parent, node.stateNode);else if (node.tag === HostPortal$5) ;else if (null !== node.child) {
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node = node.sibling;
        }
    }
    function completeWork(current, workInProgress, renderPriority) {
        ReactDebugCurrentFiber$5.current = workInProgress;
        var newProps = workInProgress.pendingProps;
        switch (null === newProps ? newProps = workInProgress.memoizedProps : workInProgress.pendingWorkPriority === OffscreenPriority$2 && renderPriority !== OffscreenPriority$2 || (workInProgress.pendingProps = null), workInProgress.tag) {
            case FunctionalComponent$3:
                return null;

            case ClassComponent$8:
                return popContextProvider$2(workInProgress), null;

            case HostRoot$7:
                var fiberRoot = workInProgress.stateNode;
                return fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), null !== current && null !== current.child || (popHydrationState(workInProgress), workInProgress.effectTag &= ~Placement$4), null;

            case HostComponent$8:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer(),
                    type = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) {
                    var oldProps = current.memoizedProps,
                        instance = workInProgress.stateNode,
                        currentHostContext = getHostContext(),
                        updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                    workInProgress.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress), current.ref !== workInProgress.ref && markRef(workInProgress);
                } else {
                    if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _currentHostContext = getHostContext();
                    if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, rootContainerInstance) && markUpdate(workInProgress);else {
                        var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                        appendAllChildren(_instance, workInProgress), finalizeInitialChildren(_instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress), workInProgress.stateNode = _instance;
                    }
                    null !== workInProgress.ref && markRef(workInProgress);
                }
                return null;

            case HostText$5:
                var newText = newProps;
                if (current && null != workInProgress.stateNode) {
                    current.memoizedProps !== newText && markUpdate(workInProgress);
                } else {
                    if ("string" != typeof newText) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _rootContainerInstance = getRootHostContainer(),
                        _currentHostContext2 = getHostContext();
                    popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
                return null;

            case CoroutineComponent$3:
                return moveCoroutineToHandlerPhase(current, workInProgress);

            case CoroutineHandlerPhase$1:
                return workInProgress.tag = CoroutineComponent$3, null;

            case YieldComponent$4:
            case Fragment$4:
                return null;

            case HostPortal$5:
                return markUpdate(workInProgress), popHostContainer(workInProgress), null;

            case IndeterminateComponent$3:
                invariant(!1, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    return {
        completeWork: completeWork
    };
},
    rendererID = null,
    injectInternals$1 = null,
    onCommitRoot$1 = null,
    onCommitUnmount$1 = null;

if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && __REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber) {
    var inject$1 = __REACT_DEVTOOLS_GLOBAL_HOOK__.inject,
        onCommitFiberRoot = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberRoot,
        onCommitFiberUnmount = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberUnmount;
    injectInternals$1 = function injectInternals$1(internals) {
        warning(null == rendererID, "Cannot inject into DevTools twice."), rendererID = inject$1(internals);
    }, onCommitRoot$1 = function onCommitRoot$1(root) {
        if (null != rendererID) try {
            onCommitFiberRoot(rendererID, root);
        } catch (err) {
            warning(!1, "React DevTools encountered an error: %s", err);
        }
    }, onCommitUnmount$1 = function onCommitUnmount$1(fiber) {
        if (null != rendererID) try {
            onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            warning(!1, "React DevTools encountered an error: %s", err);
        }
    };
}

var injectInternals_1 = injectInternals$1,
    onCommitRoot_1 = onCommitRoot$1,
    onCommitUnmount_1 = onCommitUnmount$1,
    ReactFiberDevToolsHook = {
    injectInternals: injectInternals_1,
    onCommitRoot: onCommitRoot_1,
    onCommitUnmount: onCommitUnmount_1
},
    ClassComponent$9 = ReactTypeOfWork.ClassComponent,
    HostRoot$8 = ReactTypeOfWork.HostRoot,
    HostComponent$9 = ReactTypeOfWork.HostComponent,
    HostText$6 = ReactTypeOfWork.HostText,
    HostPortal$6 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent,
    commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks,
    onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount,
    invokeGuardedCallback$2 = ReactErrorUtils_1.invokeGuardedCallback,
    Placement$5 = ReactTypeOfSideEffect.Placement,
    Update$3 = ReactTypeOfSideEffect.Update,
    Callback$1 = ReactTypeOfSideEffect.Callback,
    ContentReset$2 = ReactTypeOfSideEffect.ContentReset,
    _require5$2 = ReactDebugFiberPerf_1,
    startPhaseTimer$2 = _require5$2.startPhaseTimer,
    stopPhaseTimer$2 = _require5$2.stopPhaseTimer,
    ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
    var commitMount = config.commitMount,
        commitUpdate = config.commitUpdate,
        resetTextContent = config.resetTextContent,
        commitTextUpdate = config.commitTextUpdate,
        appendChild = config.appendChild,
        appendChildToContainer = config.appendChildToContainer,
        insertBefore = config.insertBefore,
        insertInContainerBefore = config.insertInContainerBefore,
        removeChild = config.removeChild,
        removeChildFromContainer = config.removeChildFromContainer,
        getPublicInstance = config.getPublicInstance,
        callComponentWillUnmountWithTimerInDev = function callComponentWillUnmountWithTimerInDev(current, instance) {
        startPhaseTimer$2(current, "componentWillUnmount"), instance.componentWillUnmount(), stopPhaseTimer$2();
    };
    function safelyCallComponentWillUnmount(current, instance) {
        var unmountError = invokeGuardedCallback$2(null, callComponentWillUnmountWithTimerInDev, null, current, instance);
        unmountError && captureError(current, unmountError);
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (null !== ref) {
            var refError = invokeGuardedCallback$2(null, ref, null, null);
            null !== refError && captureError(current, refError);
        }
    }
    function getHostParentFiber(fiber) {
        for (var parent = fiber.return; null !== parent;) {
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        invariant(!1, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent$9 || fiber.tag === HostRoot$8 || fiber.tag === HostPortal$6;
    }
    function getHostSibling(fiber) {
        var node = fiber;
        siblings: for (; !0;) {
            for (; null === node.sibling;) {
                if (null === node.return || isHostParent(node.return)) return null;
                node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent$9 && node.tag !== HostText$6;) {
                if (node.effectTag & Placement$5) continue siblings;
                if (null === node.child || node.tag === HostPortal$6) continue siblings;
                node.child.return = node, node = node.child;
            }
            if (!(node.effectTag & Placement$5)) return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork),
            parent = void 0,
            isContainer = void 0;
        switch (parentFiber.tag) {
            case HostComponent$9:
                parent = parentFiber.stateNode, isContainer = !1;
                break;

            case HostRoot$8:
            case HostPortal$6:
                parent = parentFiber.stateNode.containerInfo, isContainer = !0;
                break;

            default:
                invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
        parentFiber.effectTag & ContentReset$2 && (resetTextContent(parent), parentFiber.effectTag &= ~ContentReset$2);
        for (var before = getHostSibling(finishedWork), node = finishedWork; !0;) {
            if (node.tag === HostComponent$9 || node.tag === HostText$6) before ? isContainer ? insertInContainerBefore(parent, node.stateNode, before) : insertBefore(parent, node.stateNode, before) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (node.tag === HostPortal$6) ;else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitNestedUnmounts(root) {
        for (var node = root; !0;) {
            if (commitUnmount(node), null === node.child || node.tag === HostPortal$6) {
                if (node === root) return;
                for (; null === node.sibling;) {
                    if (null === node.return || node.return === root) return;
                    node = node.return;
                }
                node.sibling.return = node.return, node = node.sibling;
            } else node.child.return = node, node = node.child;
        }
    }
    function unmountHostComponents(current) {
        for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0; !0;) {
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: for (; !0;) {
                    switch (invariant(null !== parent, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue."), parent.tag) {
                        case HostComponent$9:
                            currentParent = parent.stateNode, currentParentIsContainer = !1;
                            break findParent;

                        case HostRoot$8:
                        case HostPortal$6:
                            currentParent = parent.stateNode.containerInfo, currentParentIsContainer = !0;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = !0;
            }
            if (node.tag === HostComponent$9 || node.tag === HostText$6) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (node.tag === HostPortal$6) {
                if (currentParent = node.stateNode.containerInfo, null !== node.child) {
                    node.child.return = node, node = node.child;
                    continue;
                }
            } else if (commitUnmount(node), null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === current) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === current) return;
                node = node.return, node.tag === HostPortal$6 && (currentParentIsValid = !1);
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitDeletion(current) {
        unmountHostComponents(current), current.return = null, current.child = null, current.alternate && (current.alternate.child = null, current.alternate.return = null);
    }
    function commitUnmount(current) {
        switch ("function" == typeof onCommitUnmount && onCommitUnmount(current), current.tag) {
            case ClassComponent$9:
                safelyDetachRef(current);
                var instance = current.stateNode;
                return void ("function" == typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(current, instance));

            case HostComponent$9:
                return void safelyDetachRef(current);

            case CoroutineComponent$4:
                return void commitNestedUnmounts(current.stateNode);

            case HostPortal$6:
                return void unmountHostComponents(current);
        }
    }
    function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                return;

            case HostComponent$9:
                var instance = finishedWork.stateNode;
                if (null != instance) {
                    var newProps = finishedWork.memoizedProps,
                        oldProps = null !== current ? current.memoizedProps : newProps,
                        type = finishedWork.type,
                        updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null, null !== updatePayload && commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                return;

            case HostText$6:
                invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode,
                    newText = finishedWork.memoizedProps,
                    oldText = null !== current ? current.memoizedProps : newText;
                return void commitTextUpdate(textInstance, oldText, newText);

            case HostRoot$8:
            case HostPortal$6:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update$3) if (null === current) startPhaseTimer$2(finishedWork, "componentDidMount"), instance.componentDidMount(), stopPhaseTimer$2();else {
                    var prevProps = current.memoizedProps,
                        prevState = current.memoizedState;
                    startPhaseTimer$2(finishedWork, "componentDidUpdate"), instance.componentDidUpdate(prevProps, prevState), stopPhaseTimer$2();
                }
                return void (finishedWork.effectTag & Callback$1 && null !== finishedWork.updateQueue && commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance));

            case HostRoot$8:
                var updateQueue = finishedWork.updateQueue;
                if (null !== updateQueue) {
                    var _instance = finishedWork.child && finishedWork.child.stateNode;
                    commitCallbacks$1(finishedWork, updateQueue, _instance);
                }
                return;

            case HostComponent$9:
                var _instance2 = finishedWork.stateNode;
                if (null === current && finishedWork.effectTag & Update$3) {
                    var type = finishedWork.type,
                        props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                }
                return;

            case HostText$6:
            case HostPortal$6:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
            var instance = finishedWork.stateNode;
            switch (finishedWork.tag) {
                case HostComponent$9:
                    ref(getPublicInstance(instance));
                    break;

                default:
                    ref(instance);
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        null !== currentRef && currentRef(null);
    }
    return {
        commitPlacement: commitPlacement,
        commitDeletion: commitDeletion,
        commitWork: commitWork,
        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
    };
},
    createCursor$2 = ReactFiberStack.createCursor,
    pop$2 = ReactFiberStack.pop,
    push$2 = ReactFiberStack.push,
    NO_CONTEXT = {},
    ReactFiberHostContext = function ReactFiberHostContext(config) {
    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = createCursor$2(NO_CONTEXT),
        contextFiberStackCursor = createCursor$2(NO_CONTEXT),
        rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
    function requiredContext(c) {
        return invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue."), c;
    }
    function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push$2(rootInstanceStackCursor, nextRootInstance, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber), pop$2(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current),
            nextContext = getChildHostContext(context, fiber.type, rootInstance);
        context !== nextContext && (push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber));
    }
    function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT, rootInstanceStackCursor.current = NO_CONTEXT;
    }
    return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
    };
},
    HostComponent$10 = ReactTypeOfWork.HostComponent,
    HostText$7 = ReactTypeOfWork.HostText,
    HostRoot$9 = ReactTypeOfWork.HostRoot,
    Deletion$2 = ReactTypeOfSideEffect.Deletion,
    Placement$6 = ReactTypeOfSideEffect.Placement,
    createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion,
    ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
    var shouldSetTextContent = config.shouldSetTextContent,
        canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        didNotHydrateInstance = config.didNotHydrateInstance,
        didNotFindHydratableInstance = config.didNotFindHydratableInstance,
        didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
    if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) return {
        enterHydrationState: function enterHydrationState() {
            return !1;
        },
        resetHydrationState: function resetHydrationState() {},
        tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
        prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
            invariant(!1, "React bug.");
        },
        prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
            invariant(!1, "React bug.");
        },
        popHydrationState: function popHydrationState(fiber) {
            return !1;
        }
    };
    var hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChild(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, !0;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        switch (returnFiber.tag) {
            case HostRoot$9:
                didNotHydrateInstance(returnFiber.stateNode.containerInfo, instance);
                break;

            case HostComponent$10:
                didNotHydrateInstance(returnFiber.stateNode, instance);
        }
        var childToDelete = createFiberFromHostInstanceForDeletion$1();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber, childToDelete.effectTag = Deletion$2, null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement$6;
        var parentInstance;
        switch (returnFiber.tag) {
            case HostComponent$10:
                parentInstance = returnFiber.stateNode;
                break;

            default:
                return;
        }
        switch (fiber.tag) {
            case HostComponent$10:
                var type = fiber.type,
                    props = fiber.pendingProps;
                didNotFindHydratableInstance(parentInstance, type, props);
                break;

            case HostText$7:
                var text = fiber.pendingProps;
                didNotFindHydratableTextInstance(parentInstance, text);
        }
    }
    function canHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
            case HostComponent$10:
                var type = fiber.type,
                    props = fiber.pendingProps;
                return canHydrateInstance(nextInstance, type, props);

            case HostText$7:
                var text = fiber.pendingProps;
                return canHydrateTextInstance(nextInstance, text);

            default:
                return !1;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
            if (!canHydrate(fiber, nextInstance)) {
                if (!(nextInstance = getNextHydratableSibling(nextInstance)) || !canHydrate(fiber, nextInstance)) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
                deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }
            fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance) {
        var instance = fiber.stateNode,
            updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, fiber);
        return fiber.updateQueue = updatePayload, null !== updatePayload;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        return hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
    }
    function popToNextHostParent(fiber) {
        for (var parent = fiber.return; null !== parent && parent.tag !== HostComponent$10 && parent.tag !== HostRoot$9;) {
            parent = parent.return;
        }hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (fiber.tag !== HostComponent$10 || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (var nextInstance = nextHydratableInstance; nextInstance;) {
            deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }return popToNextHostParent(fiber), nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
    }
    function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
    }
    return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
    };
},
    ReactFiberInstrumentation$2 = {
    debugTool: null
},
    ReactFiberInstrumentation_1 = ReactFiberInstrumentation$2,
    popContextProvider$1 = ReactFiberContext.popContextProvider,
    reset$1 = ReactFiberStack.reset,
    getStackAddendumByWorkInProgressFiber$2 = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber,
    logCapturedError$1 = ReactFiberErrorLogger.logCapturedError,
    invokeGuardedCallback$1 = ReactErrorUtils_1.invokeGuardedCallback,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    createWorkInProgress$1 = ReactFiber.createWorkInProgress,
    largerPriority$1 = ReactFiber.largerPriority,
    onCommitRoot = ReactFiberDevToolsHook.onCommitRoot,
    NoWork$2 = ReactPriorityLevel.NoWork,
    SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority,
    TaskPriority$1 = ReactPriorityLevel.TaskPriority,
    HighPriority = ReactPriorityLevel.HighPriority,
    LowPriority = ReactPriorityLevel.LowPriority,
    OffscreenPriority = ReactPriorityLevel.OffscreenPriority,
    AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates,
    PerformedWork = ReactTypeOfSideEffect.PerformedWork,
    Placement$1 = ReactTypeOfSideEffect.Placement,
    Update = ReactTypeOfSideEffect.Update,
    PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate,
    Deletion = ReactTypeOfSideEffect.Deletion,
    ContentReset = ReactTypeOfSideEffect.ContentReset,
    Callback = ReactTypeOfSideEffect.Callback,
    Err = ReactTypeOfSideEffect.Err,
    Ref = ReactTypeOfSideEffect.Ref,
    HostRoot$5 = ReactTypeOfWork.HostRoot,
    HostComponent$6 = ReactTypeOfWork.HostComponent,
    HostPortal$2 = ReactTypeOfWork.HostPortal,
    ClassComponent$5 = ReactTypeOfWork.ClassComponent,
    getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority,
    _require14 = ReactFiberContext,
    resetContext$1 = _require14.resetContext,
    warning$5 = warning,
    ReactFiberInstrumentation$1 = ReactFiberInstrumentation_1,
    ReactDebugCurrentFiber$3 = ReactDebugCurrentFiber_1,
    _require15 = ReactDebugFiberPerf_1,
    recordEffect = _require15.recordEffect,
    recordScheduleUpdate = _require15.recordScheduleUpdate,
    startWorkTimer = _require15.startWorkTimer,
    stopWorkTimer = _require15.stopWorkTimer,
    startWorkLoopTimer = _require15.startWorkLoopTimer,
    stopWorkLoopTimer = _require15.stopWorkLoopTimer,
    startCommitTimer = _require15.startCommitTimer,
    stopCommitTimer = _require15.stopCommitTimer,
    startCommitHostEffectsTimer = _require15.startCommitHostEffectsTimer,
    stopCommitHostEffectsTimer = _require15.stopCommitHostEffectsTimer,
    startCommitLifeCyclesTimer = _require15.startCommitLifeCyclesTimer,
    stopCommitLifeCyclesTimer = _require15.stopCommitLifeCyclesTimer,
    warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(instance) {
    var ctor = instance.constructor;
    warning$5(!1, "Can only update a mounted or mounting component. This usually means " + "you called setState, replaceState, or forceUpdate on an unmounted " + "component. This is a no-op.\n\nPlease check the code for the " + "%s component.", ctor && (ctor.displayName || ctor.name) || "ReactClass");
},
    warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {
    switch (ReactDebugCurrentFiber$3.phase) {
        case "getChildContext":
            warning$5(!1, "setState(...): Cannot call setState() inside getChildContext()");
            break;

        case "render":
            warning$5(!1, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`.");
    }
},
    timeHeuristicForUnitOfWork = 1,
    ReactFiberScheduler = function ReactFiberScheduler(config) {
    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
        completeWork = _ReactFiberCompleteWo.completeWork,
        _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
        commitPlacement = _ReactFiberCommitWork.commitPlacement,
        commitDeletion = _ReactFiberCommitWork.commitDeletion,
        commitWork = _ReactFiberCommitWork.commitWork,
        commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
        commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
        commitDetachRef = _ReactFiberCommitWork.commitDetachRef,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        priorityContext = NoWork$2,
        priorityContextBeforeReconciliation = NoWork$2,
        isPerformingWork = !1,
        deadlineHasExpired = !1,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        nextUnitOfWork = null,
        nextPriorityLevel = NoWork$2,
        nextEffect = null,
        pendingCommit = null,
        nextScheduledRoot = null,
        lastScheduledRoot = null,
        isCallbackScheduled = !1,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        fatalError = null,
        isCommitting = !1,
        isUnmounting = !1;
    function resetContextStack() {
        reset$1(), resetContext$1(), resetHostContainer();
    }
    function findNextUnitOfWork() {
        for (; null !== nextScheduledRoot && nextScheduledRoot.current.pendingWorkPriority === NoWork$2;) {
            nextScheduledRoot.isScheduled = !1;
            var next = nextScheduledRoot.nextScheduledRoot;
            if (nextScheduledRoot.nextScheduledRoot = null, nextScheduledRoot === lastScheduledRoot) return nextScheduledRoot = null, lastScheduledRoot = null, nextPriorityLevel = NoWork$2, null;
            nextScheduledRoot = next;
        }
        for (var root = nextScheduledRoot, highestPriorityRoot = null, highestPriorityLevel = NoWork$2; null !== root;) {
            root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority) && (highestPriorityLevel = root.current.pendingWorkPriority, highestPriorityRoot = root), root = root.nextScheduledRoot;
        }return null !== highestPriorityRoot ? (nextPriorityLevel = highestPriorityLevel, priorityContext = nextPriorityLevel, resetContextStack(), createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel)) : (nextPriorityLevel = NoWork$2, null);
    }
    function commitAllHostEffects() {
        for (; null !== nextEffect;) {
            ReactDebugCurrentFiber$3.current = nextEffect, recordEffect();
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset && config.resetTextContent(nextEffect.stateNode), effectTag & Ref) {
                var current = nextEffect.alternate;
                null !== current && commitDetachRef(current);
            }
            switch (effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork)) {
                case Placement$1:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    break;

                case PlacementAndUpdate:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;

                case Update:
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;

                case Deletion:
                    isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }
            nextEffect = nextEffect.nextEffect;
        }
        ReactDebugCurrentFiber$3.current = null;
    }
    function commitAllLifeCycles() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                recordEffect();
                var current = nextEffect.alternate;
                commitLifeCycles(current, nextEffect);
            }
            effectTag & Ref && (recordEffect(), commitAttachRef(nextEffect)), effectTag & Err && (recordEffect(), commitErrorHandling(nextEffect));
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null, nextEffect = next;
        }
    }
    function commitAllWork(finishedWork) {
        isCommitting = !0, startCommitTimer(), pendingCommit = null;
        var root = finishedWork.stateNode;
        invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue."), ReactCurrentOwner$1.current = null;
        var previousPriorityContext = priorityContext;
        priorityContext = TaskPriority$1;
        var firstEffect = void 0;
        for (finishedWork.effectTag > PerformedWork ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstEffect = finishedWork.firstEffect) : firstEffect = finishedWork : firstEffect = finishedWork.firstEffect, prepareForCommit(), nextEffect = firstEffect, startCommitHostEffectsTimer(); null !== nextEffect;) {
            var _error = null;
            _error = invokeGuardedCallback$1(null, commitAllHostEffects, null), null !== _error && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        for (stopCommitHostEffectsTimer(), resetAfterCommit(), root.current = finishedWork, nextEffect = firstEffect, startCommitLifeCyclesTimer(); null !== nextEffect;) {
            var _error2 = null;
            _error2 = invokeGuardedCallback$1(null, commitAllLifeCycles, null), null !== _error2 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error2), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        isCommitting = !1, stopCommitLifeCyclesTimer(), stopCommitTimer(), "function" == typeof onCommitRoot && onCommitRoot(finishedWork.stateNode), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork), commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null), priorityContext = previousPriorityContext;
    }
    function resetWorkPriority(workInProgress, renderPriority) {
        if (!(workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority)) {
            for (var newPriority = getUpdatePriority$1(workInProgress), child = workInProgress.child; null !== child;) {
                newPriority = largerPriority$1(newPriority, child.pendingWorkPriority), child = child.sibling;
            }workInProgress.pendingWorkPriority = newPriority;
        }
    }
    function completeUnitOfWork(workInProgress) {
        for (; !0;) {
            var current = workInProgress.alternate,
                next = completeWork(current, workInProgress, nextPriorityLevel),
                returnFiber = workInProgress.return,
                siblingFiber = workInProgress.sibling;
            if (resetWorkPriority(workInProgress, nextPriorityLevel), null !== next) return stopWorkTimer(workInProgress), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), next;
            if (null !== returnFiber) {
                null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect);
                workInProgress.effectTag > PerformedWork && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress);
            }
            if (stopWorkTimer(workInProgress), !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), null !== siblingFiber) return siblingFiber;
            if (null === returnFiber) return nextPriorityLevel < HighPriority ? commitAllWork(workInProgress) : pendingCommit = workInProgress, null;
            workInProgress = returnFiber;
        }
        return null;
    }
    function performUnitOfWork(workInProgress) {
        var current = workInProgress.alternate;
        startWorkTimer(workInProgress);
        var next = beginWork(current, workInProgress, nextPriorityLevel);
        return !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, next;
    }
    function performFailedUnitOfWork(workInProgress) {
        var current = workInProgress.alternate;
        startWorkTimer(workInProgress);
        var next = beginFailedWork(current, workInProgress, nextPriorityLevel);
        return !0 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, next;
    }
    function clearErrors() {
        for (null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()); null !== capturedErrors && capturedErrors.size && null !== nextUnitOfWork && nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= TaskPriority$1;) {
            null === (nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork());
        }
    }
    function workLoopAsync(minPriorityLevel, deadline) {
        for (; null !== nextUnitOfWork && !deadlineHasExpired;) {
            if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                if (null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && null !== pendingCommit) if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    if (commitAllWork(pendingCommit), nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) break;
                } else deadlineHasExpired = !0;
            } else deadlineHasExpired = !0;
        }
    }
    function workLoopSync(minPriorityLevel) {
        for (; null !== nextUnitOfWork && !(null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1));) {}
    }
    function workLoop(minPriorityLevel, deadline) {
        clearErrors(), null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()), nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= minPriorityLevel && (nextPriorityLevel <= TaskPriority$1 ? workLoopSync(minPriorityLevel) : null !== deadline && workLoopAsync(minPriorityLevel, deadline));
    }
    function performDeferredWork(deadline) {
        performWork(OffscreenPriority, deadline);
    }
    function performWork(minPriorityLevel, deadline) {
        startWorkLoopTimer(), invariant(!isPerformingWork, "performWork was called recursively. This error is likely caused " + "by a bug in React. Please file an issue."), isPerformingWork = !0;
        for (var hasRemainingAsyncWork = !1; null === fatalError;) {
            null === pendingCommit || deadlineHasExpired || commitAllWork(pendingCommit), priorityContextBeforeReconciliation = priorityContext;
            var _error3 = null;
            if (_error3 = invokeGuardedCallback$1(null, workLoop, null, minPriorityLevel, deadline), priorityContext = priorityContextBeforeReconciliation, null === _error3) {
                switch (nextPriorityLevel) {
                    case SynchronousPriority$1:
                    case TaskPriority$1:
                        if (nextPriorityLevel <= minPriorityLevel) continue;
                        break;

                    case HighPriority:
                    case LowPriority:
                    case OffscreenPriority:
                        if (null === deadline) hasRemainingAsyncWork = !0;else {
                            if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) continue;
                            hasRemainingAsyncWork = !0;
                        }
                        break;

                    case NoWork$2:
                        break;

                    default:
                        invariant(!1, "Switch statement should be exhuastive.");
                }
                break;
            }
            var failedWork = nextUnitOfWork;
            if (null === failedWork) null === fatalError && (fatalError = _error3);else {
                var maybeBoundary = captureError(failedWork, _error3);
                if (null !== maybeBoundary) {
                    var boundary = maybeBoundary;
                    beginFailedWork(boundary.alternate, boundary, nextPriorityLevel), unwindContexts(failedWork, boundary), nextUnitOfWork = completeUnitOfWork(boundary);
                }
            }
        }
        null !== deadline && (isCallbackScheduled = !1), hasRemainingAsyncWork && !isCallbackScheduled && (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
        var errorToThrow = null !== fatalError ? fatalError : firstUncaughtError;
        if (isPerformingWork = !1, deadlineHasExpired = !1, fatalError = null, firstUncaughtError = null, capturedErrors = null, failedBoundaries = null, stopWorkLoopTimer(), null !== errorToThrow) throw errorToThrow;
    }
    function captureError(failedWork, error) {
        ReactCurrentOwner$1.current = null, ReactDebugCurrentFiber$3.current = null, ReactDebugCurrentFiber$3.phase = null, nextUnitOfWork = null;
        var boundary = null,
            errorBoundaryFound = !1,
            willRetry = !1,
            errorBoundaryName = null;
        if (failedWork.tag === HostRoot$5) boundary = failedWork, isFailedBoundary(failedWork) && (fatalError = error);else for (var node = failedWork.return; null !== node && null === boundary;) {
            if (node.tag === ClassComponent$5) {
                var instance = node.stateNode;
                "function" == typeof instance.unstable_handleError && (errorBoundaryFound = !0, errorBoundaryName = getComponentName_1(node), boundary = node, willRetry = !0);
            } else node.tag === HostRoot$5 && (boundary = node);
            if (isFailedBoundary(node)) {
                if (isUnmounting) return null;
                if (null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
                boundary = null, willRetry = !1;
            }
            node = node.return;
        }
        if (null !== boundary) {
            null === failedBoundaries && (failedBoundaries = new Set()), failedBoundaries.add(boundary);
            var _componentStack = getStackAddendumByWorkInProgressFiber$2(failedWork),
                _componentName = getComponentName_1(failedWork);
            return null === capturedErrors && (capturedErrors = new Map()), capturedErrors.set(boundary, {
                componentName: _componentName,
                componentStack: _componentStack,
                error: error,
                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                errorBoundaryFound: errorBoundaryFound,
                errorBoundaryName: errorBoundaryName,
                willRetry: willRetry
            }), isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary), boundary;
        }
        return null === firstUncaughtError && (firstUncaughtError = error), null;
    }
    function hasCapturedError(fiber) {
        return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }
    function isFailedBoundary(fiber) {
        return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }
    function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;
        null !== capturedErrors && (capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber), null == capturedError && null !== effectfulFiber.alternate && (effectfulFiber = effectfulFiber.alternate, capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber))), invariant(null != capturedError, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");
        var error = capturedError.error;
        try {
            logCapturedError$1(capturedError);
        } catch (e) {
            console.error(e);
        }
        switch (effectfulFiber.tag) {
            case ClassComponent$5:
                var instance = effectfulFiber.stateNode,
                    info = {
                    componentStack: capturedError.componentStack
                };
                return void instance.unstable_handleError(error, info);

            case HostRoot$5:
                return void (null === firstUncaughtError && (firstUncaughtError = error));

            default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function unwindContexts(from, to) {
        for (var node = from; null !== node && node !== to && node.alternate !== to;) {
            switch (node.tag) {
                case ClassComponent$5:
                    popContextProvider$1(node);
                    break;

                case HostComponent$6:
                    popHostContext(node);
                    break;

                case HostRoot$5:
                case HostPortal$2:
                    popHostContainer(node);
            }
            stopWorkTimer(node), node = node.return;
        }
    }
    function scheduleRoot(root, priorityLevel) {
        priorityLevel !== NoWork$2 && (root.isScheduled || (root.isScheduled = !0, lastScheduledRoot ? (lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot = root) : (nextScheduledRoot = root, lastScheduledRoot = root)));
    }
    function scheduleUpdate(fiber, priorityLevel) {
        if (recordScheduleUpdate(), priorityLevel <= nextPriorityLevel && (nextUnitOfWork = null), fiber.tag === ClassComponent$5) {
            var instance = fiber.stateNode;
            warnAboutInvalidUpdates(instance);
        }
        for (var node = fiber, shouldContinue = !0; null !== node && shouldContinue;) {
            if (shouldContinue = !1, (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.pendingWorkPriority = priorityLevel), null !== node.alternate && (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.alternate.pendingWorkPriority = priorityLevel), null === node.return) {
                if (node.tag !== HostRoot$5) return void (fiber.tag === ClassComponent$5 && warnAboutUpdateOnUnmounted(fiber.stateNode));
                if (scheduleRoot(node.stateNode, priorityLevel), !isPerformingWork) switch (priorityLevel) {
                    case SynchronousPriority$1:
                        isUnbatchingUpdates ? performWork(SynchronousPriority$1, null) : performWork(TaskPriority$1, null);
                        break;

                    case TaskPriority$1:
                        invariant(isBatchingUpdates, "Task updates can only be scheduled as a nested update or " + "inside batchedUpdates.");
                        break;

                    default:
                        isCallbackScheduled || (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
                }
            }
            node = node.return;
        }
    }
    function getPriorityContext(fiber, forceAsync) {
        var priorityLevel = priorityContext;
        return priorityLevel === NoWork$2 && (priorityLevel = !useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync ? LowPriority : SynchronousPriority$1), priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates) ? TaskPriority$1 : priorityLevel;
    }
    function scheduleErrorRecovery(fiber) {
        scheduleUpdate(fiber, TaskPriority$1);
    }
    function performWithPriority(priorityLevel, fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = priorityLevel;
        try {
            fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;
        try {
            return fn(a);
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isPerformingWork || isBatchingUpdates || performWork(TaskPriority$1, null);
        }
    }
    function unbatchedUpdates(fn) {
        var previousIsUnbatchingUpdates = isUnbatchingUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isUnbatchingUpdates = isBatchingUpdates, isBatchingUpdates = !1;
        try {
            return fn();
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isUnbatchingUpdates = previousIsUnbatchingUpdates;
        }
    }
    function syncUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = SynchronousPriority$1;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function deferredUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = LowPriority;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    return {
        scheduleUpdate: scheduleUpdate,
        getPriorityContext: getPriorityContext,
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates
    };
},
    getContextFiber = function getContextFiber(arg) {
    invariant(!1, "Missing injection for fiber getContextForSubtree");
};

function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyObject;
    var instance = ReactInstanceMap_1.get(parentComponent);
    return "number" == typeof instance.tag ? getContextFiber(instance) : instance._processChildContext(instance._context);
}

getContextForSubtree._injectFiber = function (fn) {
    getContextFiber = fn;
};

var getContextForSubtree_1 = getContextForSubtree,
    addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate,
    findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext,
    isContextProvider = ReactFiberContext.isContextProvider,
    processChildContext = ReactFiberContext.processChildContext,
    createFiberRoot = ReactFiberRoot.createFiberRoot,
    HostComponent$1 = ReactTypeOfWork.HostComponent,
    warning$2 = warning,
    ReactFiberInstrumentation = ReactFiberInstrumentation_1,
    ReactDebugCurrentFiber = ReactDebugCurrentFiber_1,
    getComponentName = getComponentName_1,
    findCurrentHostFiber = ReactFiberTreeReflection.findCurrentHostFiber;

getContextForSubtree_1._injectFiber(function (fiber) {
    var parentContext = findCurrentUnmaskedContext(fiber);
    return isContextProvider(fiber) ? processChildContext(fiber, parentContext, !1) : parentContext;
});

var ReactFiberReconciler = function ReactFiberReconciler(config) {
    var getPublicInstance = config.getPublicInstance,
        _ReactFiberScheduler = ReactFiberScheduler(config),
        scheduleUpdate = _ReactFiberScheduler.scheduleUpdate,
        getPriorityContext = _ReactFiberScheduler.getPriorityContext,
        performWithPriority = _ReactFiberScheduler.performWithPriority,
        batchedUpdates = _ReactFiberScheduler.batchedUpdates,
        unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
        syncUpdates = _ReactFiberScheduler.syncUpdates,
        deferredUpdates = _ReactFiberScheduler.deferredUpdates;
    function scheduleTopLevelUpdate(current, element, callback) {
        "render" === ReactDebugCurrentFiber.phase && null !== ReactDebugCurrentFiber.current && warning$2(!1, "Render methods should be a pure function of props and state; " + "triggering nested component updates from render is not allowed. " + "If necessary, trigger nested updates in componentDidUpdate.\n\n" + "Check the render method of %s.", getComponentName(ReactDebugCurrentFiber.current) || "Unknown");
        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != element && null != element.type && !0 === element.type.unstable_asyncUpdates,
            priorityLevel = getPriorityContext(current, forceAsync),
            nextState = {
            element: element
        };
        callback = void 0 === callback ? null : callback, warning$2(null === callback || "function" == typeof callback, "render(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callback), addTopLevelUpdate(current, nextState, callback, priorityLevel), scheduleUpdate(current, priorityLevel);
    }
    return {
        createContainer: function createContainer(containerInfo) {
            return createFiberRoot(containerInfo);
        },
        updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current;
            ReactFiberInstrumentation.debugTool && (null === current.alternate ? ReactFiberInstrumentation.debugTool.onMountContainer(container) : null === element ? ReactFiberInstrumentation.debugTool.onUnmountContainer(container) : ReactFiberInstrumentation.debugTool.onUpdateContainer(container));
            var context = getContextForSubtree_1(parentComponent);
            null === container.context ? container.context = context : container.pendingContext = context, scheduleTopLevelUpdate(current, element, callback);
        },
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates,
        getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) return null;
            switch (containerFiber.child.tag) {
                case HostComponent$1:
                    return getPublicInstance(containerFiber.child.stateNode);

                default:
                    return containerFiber.child.stateNode;
            }
        },
        findHostInstance: function findHostInstance(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            return null === hostFiber ? null : hostFiber.stateNode;
        }
    };
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return Object.freeze(object), objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps$1(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps$1
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    warnForStyleProps = NativeMethodsMixinUtils.warnForStyleProps,
    ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        _classCallCheck$1(this, ReactNativeFiberHostComponent), this._nativeTag = tag, this._children = [], this.viewConfig = viewConfig;
    }
    return ReactNativeFiberHostComponent.prototype.blur = function () {
        TextInputState.blurTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.focus = function () {
        TextInputState.focusTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.measure = function (callback) {
        UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
        warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, this.viewConfig.validAttributes);
        UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
    }, ReactNativeFiberHostComponent;
}(),
    ReactNativeFiberHostComponent_1 = ReactNativeFiberHostComponent,
    viewConfigs = new Map(),
    ReactNativeViewConfigRegistry = {
    register: function register(viewConfig) {
        var name = viewConfig.uiViewClassName;
        return invariant(!viewConfigs.has(name), "Tried to register two views with the same name %s", name), viewConfigs.set(name, viewConfig), name;
    },
    get: function get(name) {
        var config = viewConfigs.get(name);
        return invariant(config, "View config not found for name %s", name), config;
    }
},
    ReactNativeViewConfigRegistry_1 = ReactNativeViewConfigRegistry,
    precacheFiberNode$1 = ReactNativeComponentTree_1.precacheFiberNode,
    uncacheFiberNode$1 = ReactNativeComponentTree_1.uncacheFiberNode,
    updateFiberProps$1 = ReactNativeComponentTree_1.updateFiberProps;

function recursivelyUncacheFiberNode(node) {
    "number" == typeof node ? uncacheFiberNode$1(node) : (uncacheFiberNode$1(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
}

var NativeRenderer = ReactFiberReconciler({
    appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        index >= 0 ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
    },
    appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag;
        UIManager.setChildren(parentInstance, [childTag]);
    },
    appendInitialChild: function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
    },
    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
            text: newText
        });
    },
    commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
    commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps$1(instance._nativeTag, newProps);
        var updatePayload = ReactNativeAttributePayload_1.diff(oldProps, newProps, viewConfig.validAttributes);
        UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag(),
            viewConfig = ReactNativeViewConfigRegistry_1.get(type);
        for (var key in viewConfig.validAttributes) {
            props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.create(props, viewConfig.validAttributes);
        UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent_1(tag, viewConfig);
        return precacheFiberNode$1(internalInstanceHandle, tag), updateFiberProps$1(tag, props), component;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        return UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
        }), precacheFiberNode$1(internalInstanceHandle, tag), tag;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
        if (0 === parentInstance._children.length) return !1;
        var nativeTags = parentInstance._children.map(function (child) {
            return "number" == typeof child ? child : child._nativeTag;
        });
        return UIManager.setChildren(parentInstance._nativeTag, nativeTags), !1;
    },
    getRootHostContext: function getRootHostContext() {
        return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
        return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
        return instance;
    },
    insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        if (index >= 0) {
            children.splice(index, 1);
            var beforeChildIndex = children.indexOf(beforeChild);
            children.splice(beforeChildIndex, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
            var _beforeChildIndex = children.indexOf(beforeChild);
            children.splice(_beforeChildIndex, 0, child);
            var childTag = "number" == typeof child ? child : child._nativeTag;
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
    },
    insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
        invariant("number" != typeof parentInstance, "Container does not support insertBefore operation");
    },
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return emptyObject;
    },
    removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children,
            index = children.indexOf(child);
        children.splice(index, 1), UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
    },
    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child), UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
    },
    resetAfterCommit: function resetAfterCommit() {},
    resetTextContent: function resetTextContent(instance) {},
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
        return !1;
    },
    scheduleDeferredCallback: commonjsGlobal.requestIdleCallback,
    shouldSetTextContent: function shouldSetTextContent(type, props) {
        return !1;
    },
    useSyncScheduling: !0
}),
    ReactNativeFiberRenderer = NativeRenderer,
    getClosestInstanceFromNode = ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findCurrentFiberUsingSlowPath$1 = ReactFiberTreeReflection.findCurrentFiberUsingSlowPath,
    HostComponent$11 = ReactTypeOfWork.HostComponent,
    getInspectorDataForViewTag = void 0,
    traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
    instance && (hierarchy.unshift(instance), traverseOwnerTreeUp(hierarchy, instance._debugOwner));
},
    getOwnerHierarchy = function getOwnerHierarchy(instance) {
    var hierarchy = [];
    return traverseOwnerTreeUp(hierarchy, instance), hierarchy;
},
    lastNonHostInstance = function lastNonHostInstance(hierarchy) {
    for (var i = hierarchy.length - 1; i > 1; i--) {
        var instance = hierarchy[i];
        if (instance.tag !== HostComponent$11) return instance;
    }
    return hierarchy[0];
},
    getHostProps = function getHostProps(fiber) {
    var host = ReactFiberTreeReflection.findCurrentHostFiber(fiber);
    return host ? host.memoizedProps || emptyObject : emptyObject;
},
    getHostNode = function getHostNode(fiber, findNodeHandle) {
    for (var hostNode = void 0; fiber;) {
        if (null !== fiber.stateNode && fiber.tag === HostComponent$11 && (hostNode = findNodeHandle(fiber.stateNode)), hostNode) return hostNode;
        fiber = fiber.child;
    }
    return null;
},
    createHierarchy = function createHierarchy(fiberHierarchy) {
    return fiberHierarchy.map(function (fiber) {
        return {
            name: getComponentName_1(fiber),
            getInspectorData: function getInspectorData(findNodeHandle) {
                return {
                    measure: function measure(callback) {
                        return UIManager.measure(getHostNode(fiber, findNodeHandle), callback);
                    },
                    props: getHostProps(fiber),
                    source: fiber._debugSource
                };
            }
        };
    });
};

getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
    var closestInstance = getClosestInstanceFromNode(viewTag);
    if (!closestInstance) return {
        hierarchy: [],
        props: emptyObject,
        selection: null,
        source: null
    };
    var fiber = findCurrentFiberUsingSlowPath$1(closestInstance),
        fiberHierarchy = getOwnerHierarchy(fiber),
        instance = lastNonHostInstance(fiberHierarchy),
        hierarchy = createHierarchy(fiberHierarchy),
        props = getHostProps(instance),
        source = instance._debugSource;
    return {
        hierarchy: hierarchy,
        props: props,
        selection: fiberHierarchy.indexOf(instance),
        source: source
    };
};

var ReactNativeFiberInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    ReactVersion = "16.0.0-alpha.13",
    ReactNativeFeatureFlags = require(66                       ), // 66 = ReactNativeFeatureFlags
    ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner,
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return ReactNativeFiberRenderer.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    var owner = ReactCurrentOwner$3.current;
    if (null !== owner && (warning(owner._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0), null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    findNumericNodeHandleFiber = function findNumericNodeHandleFiber(componentOrHandle) {
    var instance = findNodeHandle_1(componentOrHandle);
    return null == instance || "number" == typeof instance ? instance : instance._nativeTag;
},
    DevOnlyStubShim = null;

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$2(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(react.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$3 = NativeMethodsMixinUtils.mountSafeCallback,
    throwOnStylesProp$1 = NativeMethodsMixinUtils.throwOnStylesProp,
    warnForStyleProps$2 = NativeMethodsMixinUtils.warnForStyleProps,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$3(this, onFail), mountSafeCallback$3(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        warnForStyleProps$2(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID;
        warnForStyleProps$2(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_DEV = NativeMethodsMixin;

invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions."), NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp$1(this, this.props);
}, NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp$1(this, newProps);
};

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath,
    createReactNativeComponentClassFiber = function createReactNativeComponentClassFiber(viewConfig) {
    return ReactNativeViewConfigRegistry_1.register(viewConfig);
},
    createReactNativeComponentClassFiber_1 = createReactNativeComponentClassFiber,
    ReactNativeFeatureFlags$3 = require(66                       ), // 66 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? createReactNativeComponentClassFiber_1 : DevOnlyStubShim,
    ReactNativeFeatureFlags$4 = require(66                       ), // 66 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    ReactInvalidSetStateWarningHook = {},
    processingChildContext = !1,
    warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, "setState(...): Cannot call setState() inside getChildContext()");
};

ReactInvalidSetStateWarningHook = {
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        processingChildContext = !0;
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        processingChildContext = !1;
    },
    onSetState: function onSetState() {
        warnInvalidSetState();
    }
};

var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook,
    ReactHostOperationHistoryHook = null,
    history = [];

ReactHostOperationHistoryHook = {
    onHostOperation: function onHostOperation(operation) {
        history.push(operation);
    },
    clearHistory: function clearHistory() {
        ReactHostOperationHistoryHook._preventClearing || (history = []);
    },
    getHistory: function getHistory() {
        return history;
    }
};

var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook,
    ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook,
    ReactDebugTool = null,
    hooks = [],
    didHookThrowForEvent = {},
    callHook = function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
    try {
        fn.call(context, arg1, arg2, arg3, arg4, arg5);
    } catch (e) {
        warning(didHookThrowForEvent[event], "Exception thrown by hook while handling %s: %s", event, e + "\n" + e.stack), didHookThrowForEvent[event] = !0;
    }
},
    emitEvent = function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
    for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i],
            fn = hook[event];
        fn && callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
},
    _isProfiling = !1,
    flushHistory = [],
    lifeCycleTimerStack = [],
    currentFlushNesting = 0,
    currentFlushMeasurements = [],
    currentFlushStartTime = 0,
    currentTimerDebugID = null,
    currentTimerStartTime = 0,
    currentTimerNestedFlushDuration = 0,
    currentTimerType = null,
    lifeCycleTimerHasWarned = !1,
    clearHistory = function clearHistory() {
    ReactComponentTreeHook.purgeUnmountedComponents(), ReactHostOperationHistoryHook_1.clearHistory();
},
    getTreeSnapshot = function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
        var ownerID = ReactComponentTreeHook.getOwnerID(id),
            parentID = ReactComponentTreeHook.getParentID(id);
        return tree[id] = {
            displayName: ReactComponentTreeHook.getDisplayName(id),
            text: ReactComponentTreeHook.getText(id),
            updateCount: ReactComponentTreeHook.getUpdateCount(id),
            childIDs: ReactComponentTreeHook.getChildIDs(id),
            ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
            parentID: parentID
        }, tree;
    }, {});
},
    resetMeasurements = function resetMeasurements() {
    var previousStartTime = currentFlushStartTime,
        previousMeasurements = currentFlushMeasurements,
        previousOperations = ReactHostOperationHistoryHook_1.getHistory();
    if (0 === currentFlushNesting) return currentFlushStartTime = 0, currentFlushMeasurements = [], void clearHistory();
    if (previousMeasurements.length || previousOperations.length) {
        var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
        flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
        });
    }
    clearHistory(), currentFlushStartTime = performanceNow(), currentFlushMeasurements = [];
},
    checkDebugID = function checkDebugID(debugID) {
    arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning(!1, "ReactDebugTool: debugID may not be empty.");
},
    beginLifeCycleTimer = function beginLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning(!1, "There is an internal error in the React performance measurement code." + "\n\nDid not expect %s timer to start while %s timer is still in " + "progress for %s instance.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), currentTimerStartTime = performanceNow(), currentTimerNestedFlushDuration = 0, currentTimerDebugID = debugID, currentTimerType = timerType);
},
    endLifeCycleTimer = function endLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning(!1, "There is an internal error in the React performance measurement code. " + "We did not expect %s timer to stop while %s timer is still in " + "progress for %s instance. Please report this as a bug in React.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), _isProfiling && currentFlushMeasurements.push({
        timerType: timerType,
        instanceID: debugID,
        duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    }), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null);
},
    pauseCurrentLifeCycleTimer = function pauseCurrentLifeCycleTimer() {
    var currentTimer = {
        startTime: currentTimerStartTime,
        nestedFlushStartTime: performanceNow(),
        debugID: currentTimerDebugID,
        timerType: currentTimerType
    };
    lifeCycleTimerStack.push(currentTimer), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null;
},
    resumeCurrentLifeCycleTimer = function resumeCurrentLifeCycleTimer() {
    var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
        startTime = _lifeCycleTimerStack$.startTime,
        nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
        debugID = _lifeCycleTimerStack$.debugID,
        timerType = _lifeCycleTimerStack$.timerType,
        nestedFlushDuration = performanceNow() - nestedFlushStartTime;
    currentTimerStartTime = startTime, currentTimerNestedFlushDuration += nestedFlushDuration, currentTimerDebugID = debugID, currentTimerType = timerType;
},
    lastMarkTimeStamp = 0,
    canUsePerformanceMeasure = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    shouldMark = function shouldMark(debugID) {
    if (!_isProfiling || !canUsePerformanceMeasure) return !1;
    var element = ReactComponentTreeHook.getElement(debugID);
    return null != element && "object" == typeof element && !("string" == typeof element.type);
},
    markBegin = function markBegin(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType;
        lastMarkTimeStamp = performanceNow(), performance.mark(markName);
    }
},
    markEnd = function markEnd(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType,
            displayName = ReactComponentTreeHook.getDisplayName(debugID) || "Unknown";
        if (performanceNow() - lastMarkTimeStamp > .1) {
            var measurementName = displayName + " [" + markType + "]";
            performance.measure(measurementName, markName);
        }
        performance.clearMarks(markName), measurementName && performance.clearMeasures(measurementName);
    }
};

ReactDebugTool = {
    addHook: function addHook(hook) {
        hooks.push(hook);
    },
    removeHook: function removeHook(hook) {
        for (var i = 0; i < hooks.length; i++) {
            hooks[i] === hook && (hooks.splice(i, 1), i--);
        }
    },
    isProfiling: function isProfiling() {
        return _isProfiling;
    },
    beginProfiling: function beginProfiling() {
        _isProfiling || (_isProfiling = !0, flushHistory.length = 0, resetMeasurements(), ReactDebugTool.addHook(ReactHostOperationHistoryHook_1));
    },
    endProfiling: function endProfiling() {
        _isProfiling && (_isProfiling = !1, resetMeasurements(), ReactDebugTool.removeHook(ReactHostOperationHistoryHook_1));
    },
    getFlushHistory: function getFlushHistory() {
        return flushHistory;
    },
    onBeginFlush: function onBeginFlush() {
        currentFlushNesting++, resetMeasurements(), pauseCurrentLifeCycleTimer(), emitEvent("onBeginFlush");
    },
    onEndFlush: function onEndFlush() {
        resetMeasurements(), currentFlushNesting--, resumeCurrentLifeCycleTimer(), emitEvent("onEndFlush");
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), emitEvent("onBeginLifeCycleTimer", debugID, timerType), markBegin(debugID, timerType), beginLifeCycleTimer(debugID, timerType);
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), endLifeCycleTimer(debugID, timerType), markEnd(debugID, timerType), emitEvent("onEndLifeCycleTimer", debugID, timerType);
    },
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        emitEvent("onBeginProcessingChildContext");
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        emitEvent("onEndProcessingChildContext");
    },
    onHostOperation: function onHostOperation(operation) {
        checkDebugID(operation.instanceID), emitEvent("onHostOperation", operation);
    },
    onSetState: function onSetState() {
        emitEvent("onSetState");
    },
    onSetChildren: function onSetChildren(debugID, childDebugIDs) {
        checkDebugID(debugID), childDebugIDs.forEach(checkDebugID), emitEvent("onSetChildren", debugID, childDebugIDs);
    },
    onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
        checkDebugID(debugID), checkDebugID(parentDebugID, !0), emitEvent("onBeforeMountComponent", debugID, element, parentDebugID), markBegin(debugID, "mount");
    },
    onMountComponent: function onMountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "mount"), emitEvent("onMountComponent", debugID);
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
        checkDebugID(debugID), emitEvent("onBeforeUpdateComponent", debugID, element), markBegin(debugID, "update");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "update"), emitEvent("onUpdateComponent", debugID);
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
        checkDebugID(debugID), emitEvent("onBeforeUnmountComponent", debugID), markBegin(debugID, "unmount");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "unmount"), emitEvent("onUnmountComponent", debugID);
    },
    onTestEvent: function onTestEvent() {
        emitEvent("onTestEvent");
    }
}, ReactDebugTool.addHook(ReactInvalidSetStateWarningHook_1), ReactDebugTool.addHook(ReactComponentTreeHook);

var url = ExecutionEnvironment.canUseDOM && window.location.href || "";

/[?&]react_perf\b/.test(url) && ReactDebugTool.beginProfiling();

var ReactDebugTool_1 = ReactDebugTool,
    lowPriorityWarning = function lowPriorityWarning() {},
    printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }var argIndex = 0,
        message = "Warning: " + format.replace(/%s/g, function () {
        return args[argIndex++];
    });
    "undefined" != typeof console && console.warn(message);
    try {
        throw new Error(message);
    } catch (x) {}
};

lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (void 0 === format) throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
    if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
        }printWarning.apply(void 0, [format].concat(args));
    }
};

var lowPriorityWarning_1 = lowPriorityWarning,
    _extends$3 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
};

function roundFloat(val) {
    var base = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
        n = Math.pow(10, base);
    return Math.floor(val * n) / n;
}

function consoleTable(table) {
    console.table(table);
}

function getLastMeasurements() {
    return ReactDebugTool_1.getFlushHistory();
}

function getExclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
        var displayName = treeSnapshot[instanceID].displayName,
            key = displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            counts: {},
            durations: {},
            totalDuration: 0
        }), stats.durations[timerType] || (stats.durations[timerType] = 0), stats.counts[timerType] || (stats.counts[timerType] = 0), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID,
                timerType = measurement.timerType;
            updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
                stats.totalDuration += duration, stats.durations[timerType] += duration, stats.counts[timerType]++;
            });
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.totalDuration - a.totalDuration;
    });
}

function getInclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc.displayName,
            ownerID = _treeSnapshot$instanc.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    var isCompositeByID = {};
    return flushHistory.forEach(function (flush) {
        flush.measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (isCompositeByID[instanceID] = !0);
        });
    }), flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                    stats.renderCount++;
                });
                for (var nextParentID = instanceID; nextParentID;) {
                    isCompositeByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                        stats.inclusiveRenderDuration += duration;
                    }), nextParentID = treeSnapshot[nextParentID].parentID;
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getWasted() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc2.displayName,
            ownerID = _treeSnapshot$instanc2.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot,
            operations = flush.operations,
            isDefinitelyNotWastedByID = {};
        operations.forEach(function (operation) {
            for (var instanceID = operation.instanceID, nextParentID = instanceID; nextParentID;) {
                isDefinitelyNotWastedByID[nextParentID] = !0, nextParentID = treeSnapshot[nextParentID].parentID;
            }
        });
        var renderedCompositeIDs = {};
        measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (renderedCompositeIDs[instanceID] = !0);
        }), measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                var updateCount = treeSnapshot[instanceID].updateCount;
                if (!isDefinitelyNotWastedByID[instanceID] && 0 !== updateCount) {
                    updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                        stats.renderCount++;
                    });
                    for (var nextParentID = instanceID; nextParentID;) {
                        renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                            stats.inclusiveRenderDuration += duration;
                        }), nextParentID = treeSnapshot[nextParentID].parentID;
                    }
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$3({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getOperations() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        stats = [];
    return flushHistory.forEach(function (flush, flushIndex) {
        var operations = flush.operations,
            treeSnapshot = flush.treeSnapshot;
        operations.forEach(function (operation) {
            var instanceID = operation.instanceID,
                type = operation.type,
                payload = operation.payload,
                _treeSnapshot$instanc3 = treeSnapshot[instanceID],
                displayName = _treeSnapshot$instanc3.displayName,
                ownerID = _treeSnapshot$instanc3.ownerID,
                owner = treeSnapshot[ownerID],
                key = (owner ? owner.displayName + " > " : "") + displayName;
            stats.push({
                flushIndex: flushIndex,
                instanceID: instanceID,
                key: key,
                type: type,
                ownerID: ownerID,
                payload: payload
            });
        });
    }), stats;
}

function printExclusive(flushHistory) {
    consoleTable(getExclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            totalDuration = item.totalDuration,
            renderCount = item.counts.render || 0,
            renderDuration = item.durations.render || 0;
        return {
            Component: key,
            "Total time (ms)": roundFloat(totalDuration),
            "Instance count": instanceCount,
            "Total render time (ms)": roundFloat(renderDuration),
            "Average render time (ms)": renderCount ? roundFloat(renderDuration / renderCount) : void 0,
            "Render count": renderCount,
            "Total lifecycle time (ms)": roundFloat(totalDuration - renderDuration)
        };
    }));
}

function printInclusive(flushHistory) {
    consoleTable(getInclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive render time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printWasted(flushHistory) {
    consoleTable(getWasted(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive wasted time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printOperations(flushHistory) {
    consoleTable(getOperations(flushHistory).map(function (stat) {
        return {
            "Owner > Node": stat.key,
            Operation: stat.type,
            Payload: "object" == typeof stat.payload ? JSON.stringify(stat.payload) : stat.payload,
            "Flush index": stat.flushIndex,
            "Owner Component ID": stat.ownerID,
            "DOM Component ID": stat.instanceID
        };
    }));
}

var warnedAboutPrintDOM = !1;

function printDOM(measurements) {
    return lowPriorityWarning_1(warnedAboutPrintDOM, "`ReactPerf.printDOM(...)` is deprecated. Use " + "`ReactPerf.printOperations(...)` instead."), warnedAboutPrintDOM = !0, printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = !1;

function getMeasurementsSummaryMap(measurements) {
    return lowPriorityWarning_1(warnedAboutGetMeasurementsSummaryMap, "`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use " + "`ReactPerf.getWasted(...)` instead."), warnedAboutGetMeasurementsSummaryMap = !0, getWasted(measurements);
}

function start() {
    ReactDebugTool_1.beginProfiling();
}

function stop() {
    ReactDebugTool_1.endProfiling();
}

function isRunning() {
    return ReactDebugTool_1.isProfiling();
}

var ReactPerfAnalysis = {
    getLastMeasurements: getLastMeasurements,
    getExclusive: getExclusive,
    getInclusive: getInclusive,
    getWasted: getWasted,
    getOperations: getOperations,
    printExclusive: printExclusive,
    printInclusive: printInclusive,
    printWasted: printWasted,
    printOperations: printOperations,
    start: start,
    stop: stop,
    isRunning: isRunning,
    printDOM: printDOM,
    getMeasurementsSummaryMap: getMeasurementsSummaryMap
},
    ReactPerf = ReactPerfAnalysis,
    injectInternals = ReactFiberDevToolsHook.injectInternals;

ReactNativeInjection.inject(), ReactGenericBatching_1.injection.injectFiberBatchedUpdates(ReactNativeFiberRenderer.batchedUpdates);

var roots = new Map();

ReactFiberErrorLogger.injection.injectDialog(ReactNativeFiberErrorDialog_1.showDialog);

var ReactNativeFiber = {
    NativeComponent: ReactNativeComponent_1,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
        var root = roots.get(containerTag);
        return root || (root = ReactNativeFiberRenderer.createContainer(containerTag), roots.set(containerTag, root)), ReactNativeFiberRenderer.updateContainer(element, root, null, callback), ReactNativeFiberRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);
        root && ReactNativeFiberRenderer.updateContainer(null, root, null, function () {
            roots.delete(containerTag);
        });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeFiber.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unstable_createPortal: function unstable_createPortal(children, containerTag) {
        var key = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
        return ReactPortal.createPortal(children, containerTag, null, key);
    },
    unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

babelHelpers.extends(ReactNativeFiber.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactDebugTool: ReactDebugTool_1,
    ReactPerf: ReactPerf
}), "function" == typeof injectInternals && injectInternals({
    findFiberByHostInstance: ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findHostInstanceByFiber: ReactNativeFiberRenderer.findHostInstance,
    getInspectorDataForViewTag: ReactNativeFiberInspector.getInspectorDataForViewTag,
    bundleType: 1,
    version: ReactVersion
});

var ReactNativeFiberEntry = ReactNativeFiber;

module.exports = ReactNativeFiberEntry;
}, 67, null, "ReactNativeFiber-dev");
__d(/* ExceptionsManager */function(global, require, module, exports) {
'use strict';

var exceptionID = 0;
function reportException(e, isFatal) {
  var _require = require(30             ), // 30 = NativeModules
      ExceptionsManager = _require.ExceptionsManager;

  if (ExceptionsManager) {
    var parseErrorStack = require(42               ); // 42 = parseErrorStack
    var stack = parseErrorStack(e);
    var currentExceptionID = ++exceptionID;
    if (isFatal) {
      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
    } else {
      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
    }
    if (__DEV__) {
      var symbolicateStackTrace = require(69                     ); // 69 = symbolicateStackTrace
      symbolicateStackTrace(stack).then(function (prettyStack) {
        if (prettyStack) {
          ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
        } else {
          throw new Error('The stack is null');
        }
      }).catch(function (error) {
        return console.warn('Unable to symbolicate stack trace: ' + error.message);
      });
    }
  }
}

function handleException(e, isFatal) {
  if (!e.message) {
    e = new Error(e);
  }
  if (console._errorOriginal) {
    console._errorOriginal(e.message);
  } else {
    console.error(e.message);
  }
  reportException(e, isFatal);
}

function reactConsoleErrorHandler() {
  console._errorOriginal.apply(console, arguments);
  if (!console.reportErrorsAsExceptions) {
    return;
  }

  if (arguments[0] && arguments[0].stack) {
    reportException(arguments[0], false);
  } else {
    var stringifySafe = require(36             ); // 36 = stringifySafe
    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
    if (str.slice(0, 10) === '"Warning: ') {
      return;
    }
    var error = new Error('console.error: ' + str);
    error.framesToPop = 1;
    reportException(error, false);
  }
}

function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }

  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}

module.exports = { handleException: handleException, installConsoleErrorReporter: installConsoleErrorReporter };
}, 68, null, "ExceptionsManager");
__d(/* symbolicateStackTrace */function(global, require, module, exports) {
'use strict';

var getDevServer = require(70            ); // 70 = getDevServer

var _require = require(30             ), // 30 = NativeModules
    SourceCode = _require.SourceCode;

var fetch = void 0;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, foundInternalSource, response, json;
  return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require(71     ).fetch; // 71 = fetch
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;


          if (SourceCode.scriptURL) {
            foundInternalSource = false;

            stackCopy = stack.map(function (frame) {
              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return babelHelpers.extends({}, frame, { file: SourceCode.scriptURL });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 8;
          return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({ stack: stackCopy })
          }));

        case 8:
          response = _context.sent;
          _context.next = 11;
          return regeneratorRuntime.awrap(response.json());

        case 11:
          json = _context.sent;
          return _context.abrupt('return', json.stack);

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

module.exports = symbolicateStackTrace;
}, 69, null, "symbolicateStackTrace");
__d(/* getDevServer */function(global, require, module, exports) {
'use strict';

var _require = require(30             ), // 30 = NativeModules
    SourceCode = _require.SourceCode;

var _cachedDevServerURL = void 0;
var FALLBACK = 'http://localhost:8081/';

function getDevServer() {
  if (_cachedDevServerURL === undefined) {
    var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
    _cachedDevServerURL = match ? match[0] : null;
  }

  return {
    url: _cachedDevServerURL || FALLBACK,
    bundleLoadedFromServer: _cachedDevServerURL !== null
  };
}

module.exports = getDevServer;
}, 70, null, "getDevServer");
__d(/* fetch */function(global, require, module, exports) {

'use strict';

require(72            ); // 72 = whatwg-fetch

module.exports = { fetch: fetch, Headers: Headers, Request: Request, Response: Response };
}, 71, null, "fetch");
__d(/* whatwg-fetch/fetch.js */function(global, require, module, exports) {(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

    var isDataView = function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    };

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('');
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);

        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (typeof input === 'string') {
      this.url = input;
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split('\r\n').forEach(function (line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : this);
}, 72, null, "whatwg-fetch/fetch.js");
__d(/* InitializeCore */function(global, require, module, exports) {
'use strict';

if (global.GLOBAL === undefined) {
  global.GLOBAL = global;
}

if (global.window === undefined) {
  global.window = global;
}

var defineLazyObjectProperty = require(47                        ); // 47 = defineLazyObjectProperty

function defineLazyProperty(object, name, getValue) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (__DEV__ && descriptor) {
    var backupName = 'original' + name[0].toUpperCase() + name.substr(1);
    Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
      value: object[name]
    }));
  }

  var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      configurable = _ref.configurable;

  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }

  defineLazyObjectProperty(object, name, {
    get: getValue,
    enumerable: enumerable !== false,
    writable: writable !== false
  });
}

function polyfillGlobal(name, getValue) {
  defineLazyProperty(global, name, getValue);
}

global.process = global.process || {};
global.process.env = global.process.env || {};
if (!global.process.env.NODE_ENV) {
  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
}

if (global.__RCTProfileIsProfiling) {
  var Systrace = require(34        ); // 34 = Systrace
  Systrace.setEnabled(true);
}

if (__DEV__ && global.performance === undefined) {
  var _Systrace = require(34        ); // 34 = Systrace
  global.performance = _Systrace.getUserTimingPolyfill();
}

var ExceptionsManager = require(68                 ); // 68 = ExceptionsManager
ExceptionsManager.installConsoleErrorReporter();

if (!global.__fbDisableExceptionsManager) {
  var handleError = function handleError(e, isFatal) {
    try {
      ExceptionsManager.handleException(e, isFatal);
    } catch (ee) {
      console.log('Failed to print error: ', ee.message);

      throw e;
    }
  };

  var ErrorUtils = require(33          ); // 33 = ErrorUtils
  ErrorUtils.setGlobalHandler(handleError);
}

var _shouldPolyfillCollection = require(74                            ); // 74 = _shouldPolyfillES6Collection
if (_shouldPolyfillCollection('Map')) {
  polyfillGlobal('Map', function () {
    return require(75   ); // 75 = Map
  });
}
if (_shouldPolyfillCollection('Set')) {
  polyfillGlobal('Set', function () {
    return require(79   ); // 79 = Set
  });
}

polyfillGlobal('Promise', function () {
  return require(48       ); // 48 = Promise
});

polyfillGlobal('regeneratorRuntime', function () {
  delete global.regeneratorRuntime;
  require(80                           ); // 80 = regenerator-runtime/runtime
  return global.regeneratorRuntime;
});

var defineLazyTimer = function defineLazyTimer(name) {
  polyfillGlobal(name, function () {
    return require(37        )[name]; // 37 = JSTimers
  });
};
defineLazyTimer('setTimeout');
defineLazyTimer('setInterval');
defineLazyTimer('setImmediate');
defineLazyTimer('clearTimeout');
defineLazyTimer('clearInterval');
defineLazyTimer('clearImmediate');
defineLazyTimer('requestAnimationFrame');
defineLazyTimer('cancelAnimationFrame');
defineLazyTimer('requestIdleCallback');
defineLazyTimer('cancelIdleCallback');

polyfillGlobal('XMLHttpRequest', function () {
  return require(81              ); // 81 = XMLHttpRequest
});
polyfillGlobal('FormData', function () {
  return require(92        ); // 92 = FormData
});

polyfillGlobal('fetch', function () {
  return require(71     ).fetch; // 71 = fetch
});
polyfillGlobal('Headers', function () {
  return require(71     ).Headers; // 71 = fetch
});
polyfillGlobal('Request', function () {
  return require(71     ).Request; // 71 = fetch
});
polyfillGlobal('Response', function () {
  return require(71     ).Response; // 71 = fetch
});
polyfillGlobal('WebSocket', function () {
  return require(93         ); // 93 = WebSocket
});
polyfillGlobal('Blob', function () {
  return require(94    ); // 94 = Blob
});
polyfillGlobal('URL', function () {
  return require(101  ); // 101 = URL
});

if (!global.alert) {
  global.alert = function (text) {
    require(102    ).alert('Alert', '' + text); // 102 = Alert
  };
}

var navigator = global.navigator;
if (navigator === undefined) {
  global.navigator = navigator = {};
}

defineLazyProperty(navigator, 'product', function () {
  return 'ReactNative';
});
defineLazyProperty(navigator, 'geolocation', function () {
  return require(104          ); // 104 = Geolocation
});

var BatchedBridge = require(31             ); // 31 = BatchedBridge
BatchedBridge.registerLazyCallableModule('Systrace', function () {
  return require(34        ); // 34 = Systrace
});
BatchedBridge.registerLazyCallableModule('JSTimers', function () {
  return require(37        ); // 37 = JSTimers
});
BatchedBridge.registerLazyCallableModule('HeapCapture', function () {
  return require(107          ); // 107 = HeapCapture
});
BatchedBridge.registerLazyCallableModule('SamplingProfiler', function () {
  return require(108               ); // 108 = SamplingProfiler
});
BatchedBridge.registerLazyCallableModule('RCTLog', function () {
  return require(109     ); // 109 = RCTLog
});
BatchedBridge.registerLazyCallableModule('RCTDeviceEventEmitter', function () {
  return require(56                     ); // 56 = RCTDeviceEventEmitter
});
BatchedBridge.registerLazyCallableModule('RCTNativeAppEventEmitter', function () {
  return require(110                       ); // 110 = RCTNativeAppEventEmitter
});
BatchedBridge.registerLazyCallableModule('PerformanceLogger', function () {
  return require(111                ); // 111 = PerformanceLogger
});

if (__DEV__) {
  if (!global.__RCTProfileIsProfiling) {
    BatchedBridge.registerCallableModule('HMRClient', require(113        )); // 113 = HMRClient

    if (!window.document) {
      require(116            ); // 116 = setupDevtools
    }

    var JSInspector = require(121          ); // 121 = JSInspector
    JSInspector.registerAgent(require(122           )); // 122 = NetworkAgent
  }
}
}, 73, null, "InitializeCore");
__d(/* _shouldPolyfillES6Collection */function(global, require, module, exports) {
'use strict';

function _shouldActuallyPolyfillES6Collection(collectionName) {
  var Collection = global[collectionName];
  if (Collection == null) {
    return true;
  }

  if (typeof global.Symbol !== 'function') {
    return true;
  }

  var proto = Collection.prototype;

  return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
}

var cache = {};

function _shouldPolyfillES6Collection(collectionName) {
  var result = cache[collectionName];
  if (result !== undefined) {
    return result;
  }

  result = _shouldActuallyPolyfillES6Collection(collectionName);
  cache[collectionName] = result;
  return result;
}

module.exports = _shouldPolyfillES6Collection;
}, 74, null, "_shouldPolyfillES6Collection");
__d(/* Map */function(global, require, module, exports) {

'use strict';

var _shouldPolyfillES6Collection = require(74                            ); // 74 = _shouldPolyfillES6Collection
var guid = require(76    ); // 76 = guid
var isNode = require(77               ); // 77 = fbjs/lib/isNode
var toIterator = require(78          ); // 78 = toIterator

module.exports = function (global, undefined) {
  if (!_shouldPolyfillES6Collection('Map')) {
    return global.Map;
  }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VALUE = 'key+value';

  var KEY_PREFIX = '$map_';

  var SECRET_SIZE_PROP;
  if (__DEV__) {
    SECRET_SIZE_PROP = '$size' + guid();
  }

  var OLD_IE_HASH_PREFIX = 'IE_HASH_';

  var Map = function () {
    function Map(iterable) {
      babelHelpers.classCallCheck(this, Map);

      if (!isObject(this)) {
        throw new TypeError('Wrong map object type.');
      }

      initMap(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          if (!isObject(next.value)) {
            throw new TypeError('Expected iterable items to be pair objects.');
          }
          this.set(next.value[0], next.value[1]);
        }
      }
    }

    babelHelpers.createClass(Map, [{
      key: 'clear',
      value: function clear() {
        initMap(this);
      }
    }, {
      key: 'has',
      value: function has(key) {
        var index = getIndex(this, key);
        return !!(index != null && this._mapData[index]);
      }
    }, {
      key: 'set',
      value: function set(key, value) {
        var index = getIndex(this, key);

        if (index != null && this._mapData[index]) {
          this._mapData[index][1] = value;
        } else {
          index = this._mapData.push([key, value]) - 1;
          setIndex(this, key, index);
          if (__DEV__) {
            this[SECRET_SIZE_PROP] += 1;
          } else {
            this.size += 1;
          }
        }

        return this;
      }
    }, {
      key: 'get',
      value: function get(key) {
        var index = getIndex(this, key);
        if (index == null) {
          return undefined;
        } else {
          return this._mapData[index][1];
        }
      }
    }, {
      key: 'delete',
      value: function _delete(key) {
        var index = getIndex(this, key);
        if (index != null && this._mapData[index]) {
          setIndex(this, key, undefined);
          this._mapData[index] = undefined;
          if (__DEV__) {
            this[SECRET_SIZE_PROP] -= 1;
          } else {
            this.size -= 1;
          }
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'entries',
      value: function entries() {
        return new MapIterator(this, KIND_KEY_VALUE);
      }
    }, {
      key: 'keys',
      value: function keys() {
        return new MapIterator(this, KIND_KEY);
      }
    }, {
      key: 'values',
      value: function values() {
        return new MapIterator(this, KIND_VALUE);
      }
    }, {
      key: 'forEach',
      value: function forEach(callback, thisArg) {
        if (typeof callback !== 'function') {
          throw new TypeError('Callback must be callable.');
        }

        var boundCallback = callback.bind(thisArg || undefined);
        var mapData = this._mapData;

        for (var i = 0; i < mapData.length; i++) {
          var entry = mapData[i];
          if (entry != null) {
            boundCallback(entry[1], entry[0], this);
          }
        }
      }
    }]);
    return Map;
  }();

  Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

  var MapIterator = function () {
    function MapIterator(map, kind) {
      babelHelpers.classCallCheck(this, MapIterator);

      if (!(isObject(map) && map._mapData)) {
        throw new TypeError('Object is not a map.');
      }

      if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
        throw new Error('Invalid iteration kind.');
      }

      this._map = map;
      this._nextIndex = 0;
      this._kind = kind;
    }

    babelHelpers.createClass(MapIterator, [{
      key: 'next',
      value: function next() {
        if (!this instanceof Map) {
          throw new TypeError('Expected to be called on a MapIterator.');
        }

        var map = this._map;
        var index = this._nextIndex;
        var kind = this._kind;

        if (map == null) {
          return createIterResultObject(undefined, true);
        }

        var entries = map._mapData;

        while (index < entries.length) {
          var record = entries[index];

          index += 1;
          this._nextIndex = index;

          if (record) {
            if (kind === KIND_KEY) {
              return createIterResultObject(record[0], false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(record[1], false);
            } else if (kind) {
              return createIterResultObject(record, false);
            }
          }
        }

        this._map = undefined;

        return createIterResultObject(undefined, true);
      }
    }]);
    return MapIterator;
  }();

  MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
    return this;
  };

  function getIndex(map, key) {
    if (isObject(key)) {
      var hash = getHash(key);
      return map._objectIndex[hash];
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        return map._stringIndex[prefixedKey];
      } else {
        return map._otherIndex[prefixedKey];
      }
    }
  }

  function setIndex(map, key, index) {
    var shouldDelete = index == null;

    if (isObject(key)) {
      var hash = getHash(key);
      if (shouldDelete) {
        delete map._objectIndex[hash];
      } else {
        map._objectIndex[hash] = index;
      }
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        if (shouldDelete) {
          delete map._stringIndex[prefixedKey];
        } else {
          map._stringIndex[prefixedKey] = index;
        }
      } else {
        if (shouldDelete) {
          delete map._otherIndex[prefixedKey];
        } else {
          map._otherIndex[prefixedKey] = index;
        }
      }
    }
  }

  function initMap(map) {
    map._mapData = [];

    map._objectIndex = {};

    map._stringIndex = {};

    map._otherIndex = {};

    if (__DEV__) {
      if (isES5) {
        if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
          map[SECRET_SIZE_PROP] = 0;
        } else {
          Object.defineProperty(map, SECRET_SIZE_PROP, {
            value: 0,
            writable: true
          });
          Object.defineProperty(map, 'size', {
            set: function set(v) {
              console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
              throw new Error('The map size property is not writable.');
            },
            get: function get() {
              return map[SECRET_SIZE_PROP];
            }
          });
        }

        return;
      }
    }

    map.size = 0;
  }

  function isObject(o) {
    return o != null && (typeof o === 'object' || typeof o === 'function');
  }

  function createIterResultObject(value, done) {
    return { value: value, done: done };
  }

  var isES5 = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function isExtensible(o) {
    if (!isES5) {
      return true;
    } else {
      return Object.isExtensible(o);
    }
  }

  function getIENodeHash(node) {
    var uniqueID;
    switch (node.nodeType) {
      case 1:
        uniqueID = node.uniqueID;
        break;
      case 9:
        uniqueID = node.documentElement.uniqueID;
        break;
      default:
        return null;
    }

    if (uniqueID) {
      return OLD_IE_HASH_PREFIX + uniqueID;
    } else {
      return null;
    }
  }

  var getHash = function () {
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    var hashProperty = guid();
    var hashCounter = 0;

    return function getHash(o) {
      if (o[hashProperty]) {
        return o[hashProperty];
      } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
        return o.propertyIsEnumerable[hashProperty];
      } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
        return getIENodeHash(o);
      } else if (!isES5 && o[hashProperty]) {
        return o[hashProperty];
      }

      if (isExtensible(o)) {
        hashCounter += 1;
        if (isES5) {
          Object.defineProperty(o, hashProperty, {
            enumerable: false,
            writable: false,
            configurable: false,
            value: hashCounter
          });
        } else if (o.propertyIsEnumerable) {
          o.propertyIsEnumerable = function () {
            return propIsEnumerable.apply(this, arguments);
          };
          o.propertyIsEnumerable[hashProperty] = hashCounter;
        } else if (isNode(o)) {
          o[hashProperty] = hashCounter;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }
        return hashCounter;
      } else {
        throw new Error('Non-extensible objects are not allowed as keys.');
      }
    };
  }();

  return Map;
}(Function('return this')());
}, 75, null, "Map");
__d(/* guid */function(global, require, module, exports) {

'use strict';

function guid() {
  return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
}

module.exports = guid;
}, 76, null, "guid");
__d(/* fbjs/lib/isNode.js */function(global, require, module, exports) {'use strict';

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
}, 77, null, "fbjs/lib/isNode.js");
__d(/* toIterator */function(global, require, module, exports) {
'use strict';

var KIND_KEY = 'key';
var KIND_VALUE = 'value';
var KIND_KEY_VAL = 'key+value';

var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';

var toIterator = function () {
  if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
    return function () {
      var ArrayIterator = function () {
        function ArrayIterator(array, kind) {
          babelHelpers.classCallCheck(this, ArrayIterator);

          if (!Array.isArray(array)) {
            throw new TypeError('Object is not an Array');
          }
          this._iteratedObject = array;
          this._kind = kind;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(ArrayIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof ArrayIterator) {
              throw new TypeError('Object is not an ArrayIterator');
            }

            if (this._iteratedObject == null) {
              return createIterResultObject(undefined, true);
            }

            var array = this._iteratedObject;
            var len = this._iteratedObject.length;
            var index = this._nextIndex;
            var kind = this._kind;

            if (index >= len) {
              this._iteratedObject = undefined;
              return createIterResultObject(undefined, true);
            }

            this._nextIndex = index + 1;

            if (kind === KIND_KEY) {
              return createIterResultObject(index, false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(array[index], false);
            } else if (kind === KIND_KEY_VAL) {
              return createIterResultObject([index, array[index]], false);
            }
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return ArrayIterator;
      }();

      var StringIterator = function () {
        function StringIterator(string) {
          babelHelpers.classCallCheck(this, StringIterator);

          if (typeof string !== 'string') {
            throw new TypeError('Object is not a string');
          }
          this._iteratedString = string;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(StringIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof StringIterator) {
              throw new TypeError('Object is not a StringIterator');
            }

            if (this._iteratedString == null) {
              return createIterResultObject(undefined, true);
            }

            var index = this._nextIndex;
            var s = this._iteratedString;
            var len = s.length;

            if (index >= len) {
              this._iteratedString = undefined;
              return createIterResultObject(undefined, true);
            }

            var ret;
            var first = s.charCodeAt(index);

            if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
              ret = s[index];
            } else {
              var second = s.charCodeAt(index + 1);
              if (second < 0xDC00 || second > 0xDFFF) {
                ret = s[index];
              } else {
                ret = s[index] + s[index + 1];
              }
            }

            this._nextIndex = index + ret.length;

            return createIterResultObject(ret, false);
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return StringIterator;
      }();

      function createIterResultObject(value, done) {
        return { value: value, done: done };
      }

      return function (object, kind) {
        if (typeof object === 'string') {
          return new StringIterator(object);
        } else if (Array.isArray(object)) {
          return new ArrayIterator(object, kind || KIND_VALUE);
        } else {
          return object[ITERATOR_SYMBOL]();
        }
      };
    }();
  } else {
    return function (object) {
      return object[ITERATOR_SYMBOL]();
    };
  }
}();

babelHelpers.extends(toIterator, {
  KIND_KEY: KIND_KEY,
  KIND_VALUE: KIND_VALUE,
  KIND_KEY_VAL: KIND_KEY_VAL,
  ITERATOR_SYMBOL: ITERATOR_SYMBOL
});

module.exports = toIterator;
}, 78, null, "toIterator");
__d(/* Set */function(global, require, module, exports) {

'use strict';

var Map = require(75   ); // 75 = Map

var _shouldPolyfillES6Collection = require(74                            ); // 74 = _shouldPolyfillES6Collection
var toIterator = require(78          ); // 78 = toIterator

module.exports = function (global) {
  if (!_shouldPolyfillES6Collection('Set')) {
    return global.Set;
  }

  var Set = function () {
    function Set(iterable) {
      babelHelpers.classCallCheck(this, Set);

      if (this == null || typeof this !== 'object' && typeof this !== 'function') {
        throw new TypeError('Wrong set object type.');
      }

      initSet(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          this.add(next.value);
        }
      }
    }

    babelHelpers.createClass(Set, [{
      key: 'add',
      value: function add(value) {
        this._map.set(value, value);
        this.size = this._map.size;
        return this;
      }
    }, {
      key: 'clear',
      value: function clear() {
        initSet(this);
      }
    }, {
      key: 'delete',
      value: function _delete(value) {
        var ret = this._map.delete(value);
        this.size = this._map.size;
        return ret;
      }
    }, {
      key: 'entries',
      value: function entries() {
        return this._map.entries();
      }
    }, {
      key: 'forEach',
      value: function forEach(callback) {
        var thisArg = arguments[1];
        var it = this._map.keys();
        var next;
        while (!(next = it.next()).done) {
          callback.call(thisArg, next.value, next.value, this);
        }
      }
    }, {
      key: 'has',
      value: function has(value) {
        return this._map.has(value);
      }
    }, {
      key: 'values',
      value: function values() {
        return this._map.values();
      }
    }]);
    return Set;
  }();

  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;

  Set.prototype.keys = Set.prototype.values;

  function initSet(set) {
    set._map = new Map();
    set.size = set._map.size;
  }

  return Set;
}(Function('return this')());
}, 79, null, "Set");
__d(/* regenerator-runtime/runtime.js */function(global, require, module, exports) {

!function (global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      module.exports = runtime;
    }

    return;
  }

  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  var ContinueSentinel = {};

  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.awrap = function (arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
            context.delegate = null;

            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              continue;
            }
          }

          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

          if (record.type === "throw") {
            context.delegate = null;

            method = "throw";
            arg = record.arg;
            continue;
          }

          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context.sent = context._sent = arg;
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            method = "next";
            arg = undefined;
          }
        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              arg = undefined;
            }
          } else {
            return info;
          }
        } else if (record.type === "throw") {
          state = GenStateCompleted;

          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
}, 80, null, "regenerator-runtime/runtime.js");
__d(/* XMLHttpRequest */function(global, require, module, exports) {
'use strict';

var EventTarget = require(82                 ); // 82 = event-target-shim
var RCTNetworking = require(86             ); // 86 = RCTNetworking

var base64 = require(91         ); // 91 = base64-js
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var warning = require(45                ); // 45 = fbjs/lib/warning

var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

var SUPPORTED_RESPONSE_TYPES = {
  arraybuffer: typeof global.ArrayBuffer === 'function',
  blob: typeof global.Blob === 'function',
  document: false,
  json: true,
  text: true,
  '': true
};

var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];

var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

var XMLHttpRequestEventTarget = function (_EventTarget) {
  babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

  function XMLHttpRequestEventTarget() {
    babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
    return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
  }

  return XMLHttpRequestEventTarget;
}(EventTarget.apply(undefined, REQUEST_EVENTS));

var XMLHttpRequest = function (_EventTarget2) {
  babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
  babelHelpers.createClass(XMLHttpRequest, null, [{
    key: 'setInterceptor',
    value: function setInterceptor(interceptor) {
      XMLHttpRequest._interceptor = interceptor;
    }
  }]);

  function XMLHttpRequest() {
    babelHelpers.classCallCheck(this, XMLHttpRequest);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

    _this2.UNSENT = UNSENT;
    _this2.OPENED = OPENED;
    _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
    _this2.LOADING = LOADING;
    _this2.DONE = DONE;
    _this2.readyState = UNSENT;
    _this2.status = 0;
    _this2.timeout = 0;
    _this2.withCredentials = true;
    _this2.upload = new XMLHttpRequestEventTarget();
    _this2._aborted = false;
    _this2._hasError = false;
    _this2._method = null;
    _this2._response = '';
    _this2._url = null;
    _this2._timedOut = false;
    _this2._trackingName = 'unknown';
    _this2._incrementalEvents = false;

    _this2._reset();
    return _this2;
  }

  babelHelpers.createClass(XMLHttpRequest, [{
    key: '_reset',
    value: function _reset() {
      this.readyState = this.UNSENT;
      this.responseHeaders = undefined;
      this.status = 0;
      delete this.responseURL;

      this._requestId = null;

      this._cachedResponse = undefined;
      this._hasError = false;
      this._headers = {};
      this._response = '';
      this._responseType = '';
      this._sent = false;
      this._lowerCaseResponseHeaders = {};

      this._clearSubscriptions();
      this._timedOut = false;
    }
  }, {
    key: '__didCreateRequest',
    value: function __didCreateRequest(requestId) {
      this._requestId = requestId;

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
    }
  }, {
    key: '__didUploadProgress',
    value: function __didUploadProgress(requestId, progress, total) {
      if (requestId === this._requestId) {
        this.upload.dispatchEvent({
          type: 'progress',
          lengthComputable: true,
          loaded: progress,
          total: total
        });
      }
    }
  }, {
    key: '__didReceiveResponse',
    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
      if (requestId === this._requestId) {
        this.status = status;
        this.setResponseHeaders(responseHeaders);
        this.setReadyState(this.HEADERS_RECEIVED);
        if (responseURL || responseURL === '') {
          this.responseURL = responseURL;
        } else {
          delete this.responseURL;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
      }
    }
  }, {
    key: '__didReceiveData',
    value: function __didReceiveData(requestId, response) {
      if (requestId !== this._requestId) {
        return;
      }
      this._response = response;
      this._cachedResponse = undefined;
      this.setReadyState(this.LOADING);

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
    }
  }, {
    key: '__didReceiveIncrementalData',
    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
      if (requestId !== this._requestId) {
        return;
      }
      if (!this._response) {
        this._response = responseText;
      } else {
        this._response += responseText;
      }

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);

      this.setReadyState(this.LOADING);
      this.__didReceiveDataProgress(requestId, progress, total);
    }
  }, {
    key: '__didReceiveDataProgress',
    value: function __didReceiveDataProgress(requestId, loaded, total) {
      if (requestId !== this._requestId) {
        return;
      }
      this.dispatchEvent({
        type: 'progress',
        lengthComputable: total >= 0,
        loaded: loaded,
        total: total
      });
    }
  }, {
    key: '__didCompleteResponse',
    value: function __didCompleteResponse(requestId, error, timeOutError) {
      if (requestId === this._requestId) {
        if (error) {
          if (this._responseType === '' || this._responseType === 'text') {
            this._response = error;
          }
          this._hasError = true;
          if (timeOutError) {
            this._timedOut = true;
          }
        }
        this._clearSubscriptions();
        this._requestId = null;
        this.setReadyState(this.DONE);

        if (error) {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
        } else {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
        }
      }
    }
  }, {
    key: '_clearSubscriptions',
    value: function _clearSubscriptions() {
      (this._subscriptions || []).forEach(function (sub) {
        sub.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: 'getAllResponseHeaders',
    value: function getAllResponseHeaders() {
      if (!this.responseHeaders) {
        return null;
      }
      var headers = this.responseHeaders || {};
      return Object.keys(headers).map(function (headerName) {
        return headerName + ': ' + headers[headerName];
      }).join('\r\n');
    }
  }, {
    key: 'getResponseHeader',
    value: function getResponseHeader(header) {
      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
      return value !== undefined ? value : null;
    }
  }, {
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      this._headers[header.toLowerCase()] = String(value);
    }
  }, {
    key: 'setTrackingName',
    value: function setTrackingName(trackingName) {
      this._trackingName = trackingName;
      return this;
    }
  }, {
    key: 'open',
    value: function open(method, url, async) {
      if (this.readyState !== this.UNSENT) {
        throw new Error('Cannot open, already sending');
      }
      if (async !== undefined && !async) {
        throw new Error('Synchronous http requests are not supported');
      }
      if (!url) {
        throw new Error('Cannot load an empty url');
      }
      this._method = method.toUpperCase();
      this._url = url;
      this._aborted = false;
      this.setReadyState(this.OPENED);
    }
  }, {
    key: 'send',
    value: function send(data) {
      var _this3 = this;

      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      if (this._sent) {
        throw new Error('Request has already been sent');
      }
      this._sent = true;
      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
        return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
        return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
        return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
        return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
        return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
        return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));

      var nativeResponseType = 'text';
      if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
        nativeResponseType = 'base64';
      }

      invariant(this._method, 'Request method needs to be defined.');
      invariant(this._url, 'Request URL needs to be defined.');
      RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this), this.withCredentials);
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._aborted = true;
      if (this._requestId) {
        RCTNetworking.abortRequest(this._requestId);
      }

      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
        this._reset();
        this.setReadyState(this.DONE);
      }

      this._reset();
    }
  }, {
    key: 'setResponseHeaders',
    value: function setResponseHeaders(responseHeaders) {
      this.responseHeaders = responseHeaders || null;
      var headers = responseHeaders || {};
      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
        return lcaseHeaders;
      }, {});
    }
  }, {
    key: 'setReadyState',
    value: function setReadyState(newState) {
      this.readyState = newState;
      this.dispatchEvent({ type: 'readystatechange' });
      if (newState === this.DONE) {
        if (this._aborted) {
          this.dispatchEvent({ type: 'abort' });
        } else if (this._hasError) {
          if (this._timedOut) {
            this.dispatchEvent({ type: 'timeout' });
          } else {
            this.dispatchEvent({ type: 'error' });
          }
        } else {
          this.dispatchEvent({ type: 'load' });
        }
        this.dispatchEvent({ type: 'loadend' });
      }
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, listener) {
      if (type === 'readystatechange' || type === 'progress') {
        this._incrementalEvents = true;
      }
      babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), 'addEventListener', this).call(this, type, listener);
    }
  }, {
    key: 'responseType',
    get: function get() {
      return this._responseType;
    },
    set: function set(responseType) {
      if (this._sent) {
        throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
      }
      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
        warning(false, 'The provided value \'' + responseType + '\' is not a valid \'responseType\'.');
        return;
      }

      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', 'The provided value \'' + responseType + '\' is unsupported in this environment.');
      this._responseType = responseType;
    }
  }, {
    key: 'responseText',
    get: function get() {
      if (this._responseType !== '' && this._responseType !== 'text') {
        throw new Error("The 'responseText' property is only available if 'responseType' " + ('is set to \'\' or \'text\', but it is \'' + this._responseType + '\'.'));
      }
      if (this.readyState < LOADING) {
        return '';
      }
      return this._response;
    }
  }, {
    key: 'response',
    get: function get() {
      var responseType = this.responseType;

      if (responseType === '' || responseType === 'text') {
        return this.readyState < LOADING || this._hasError ? '' : this._response;
      }

      if (this.readyState !== DONE) {
        return null;
      }

      if (this._cachedResponse !== undefined) {
        return this._cachedResponse;
      }

      switch (responseType) {
        case 'document':
          this._cachedResponse = null;
          break;

        case 'arraybuffer':
          this._cachedResponse = base64.toByteArray(this._response).buffer;
          break;

        case 'blob':
          this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], { type: this.getResponseHeader('content-type') || '' });
          break;

        case 'json':
          try {
            this._cachedResponse = JSON.parse(this._response);
          } catch (_) {
            this._cachedResponse = null;
          }
          break;

        default:
          this._cachedResponse = null;
      }

      return this._cachedResponse;
    }
  }]);
  return XMLHttpRequest;
}(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS)));

XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;


module.exports = XMLHttpRequest;
}, 81, null, "XMLHttpRequest");
__d(/* event-target-shim/lib/event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(83         ); // 83 = ./commons
var CustomEventTarget = require(84                     ); // 84 = ./custom-event-target
var EventWrapper = require(85               ); // 85 = ./event-wrapper
var LISTENERS = Commons.LISTENERS;
var CAPTURE = Commons.CAPTURE;
var BUBBLE = Commons.BUBBLE;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;
var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
var createEventWrapper = EventWrapper.createEventWrapper;
var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;

var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
        Object.defineProperty(this, LISTENERS, { value: Object.create(null) });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
        var types = Array(arguments.length);
        for (var i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
        }

        return defineCustomEventTarget(EventTarget, types);
    } else {
        throw new TypeError("Cannot call a class as a function");
    }
};

EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
        value: EventTarget,
        writable: true,
        configurable: true
    },

    addEventListener: {
        value: function addEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }
            if (typeof listener !== "function" && typeof listener !== "object") {
                throw new TypeError("\"listener\" is not an object.");
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var node = this[LISTENERS][type];
            if (node == null) {
                this[LISTENERS][type] = newNode(listener, kind);
                return true;
            }

            var prev = null;
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    return false;
                }
                prev = node;
                node = node.next;
            }

            prev.next = newNode(listener, kind);
            return true;
        },
        configurable: true,
        writable: true
    },

    removeEventListener: {
        value: function removeEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var prev = null;
            var node = this[LISTENERS][type];
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    if (prev == null) {
                        this[LISTENERS][type] = node.next;
                    } else {
                        prev.next = node.next;
                    }
                    return true;
                }

                prev = node;
                node = node.next;
            }

            return false;
        },
        configurable: true,
        writable: true
    },

    dispatchEvent: {
        value: function dispatchEvent(event) {
            var node = this[LISTENERS][event.type];
            if (node == null) {
                return true;
            }

            var wrapped = createEventWrapper(event, this);

            while (node != null) {
                if (typeof node.listener === "function") {
                    node.listener.call(this, wrapped);
                } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                    node.listener.handleEvent(wrapped);
                }

                if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                    break;
                }
                node = node.next;
            }

            return !wrapped.defaultPrevented;
        },
        configurable: true,
        writable: true
    }
});
}, 82, null, "event-target-shim/lib/event-target.js");
__d(/* event-target-shim/lib/commons.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
  return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
};

exports.LISTENERS = createUniqueKey("listeners");

exports.CAPTURE = 1;

exports.BUBBLE = 2;

exports.ATTRIBUTE = 3;

exports.newNode = function newNode(listener, kind) {
  return { listener: listener, kind: kind, next: null };
};
}, 83, null, "event-target-shim/lib/commons.js");
__d(/* event-target-shim/lib/custom-event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(83         ); // 83 = ./commons
var LISTENERS = Commons.LISTENERS;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;

function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            return node.listener;
        }
        node = node.next;
    }
    return null;
}

function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
        listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = node.next;
            } else {
                prev.next = node.next;
            }
        } else {
            prev = node;
        }

        node = node.next;
    }

    if (listener != null) {
        if (prev == null) {
            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
        } else {
            prev.next = newNode(listener, ATTRIBUTE);
        }
    }
}

exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
        EventTargetBase.call(this);
    }

    var descripter = {
        constructor: {
            value: EventTarget,
            configurable: true,
            writable: true
        }
    };

    types.forEach(function (type) {
        descripter["on" + type] = {
            get: function get() {
                return getAttributeListener(this, type);
            },
            set: function set(listener) {
                setAttributeListener(this, type, listener);
            },
            configurable: true,
            enumerable: true
        };
    });

    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);

    return EventTarget;
};
}, 84, null, "event-target-shim/lib/custom-event-target.js");
__d(/* event-target-shim/lib/event-wrapper.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = require(83         ).createUniqueKey; // 83 = ./commons

var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");

var CANCELED_FLAG = createUniqueKey("canceled_flag");

var ORIGINAL_EVENT = createUniqueKey("original_event");

var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
        value: function stopPropagation() {
            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    stopImmediatePropagation: Object.freeze({
        value: function stopImmediatePropagation() {
            this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;

            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopImmediatePropagation === "function") {
                e.stopImmediatePropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    preventDefault: Object.freeze({
        value: function preventDefault() {
            if (this.cancelable === true) {
                this[CANCELED_FLAG] = true;
            }

            var e = this[ORIGINAL_EVENT];
            if (typeof e.preventDefault === "function") {
                e.preventDefault();
            }
        },
        writable: true,
        configurable: true
    }),

    defaultPrevented: Object.freeze({
        get: function defaultPrevented() {
            return this[CANCELED_FLAG];
        },
        enumerable: true,
        configurable: true
    })
});

exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
        type: { value: event.type, enumerable: true },
        target: { value: eventTarget, enumerable: true },
        currentTarget: { value: eventTarget, enumerable: true },
        eventPhase: { value: 2, enumerable: true },
        bubbles: { value: Boolean(event.bubbles), enumerable: true },
        cancelable: { value: Boolean(event.cancelable), enumerable: true },
        timeStamp: { value: timeStamp, enumerable: true },
        isTrusted: { value: false, enumerable: true }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = { value: false, writable: true };
    propertyDefinition[CANCELED_FLAG] = { value: false, writable: true };
    propertyDefinition[ORIGINAL_EVENT] = { value: event };

    if (typeof event.detail !== "undefined") {
        propertyDefinition.detail = { value: event.detail, enumerable: true };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
};
}, 85, null, "event-target-shim/lib/event-wrapper.js");
__d(/* RCTNetworking */function(global, require, module, exports) {
'use strict';

var MissingNativeEventEmitterShim = require(87                             ); // 87 = MissingNativeEventEmitterShim
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var RCTNetworkingNative = require(30             ).Networking; // 30 = NativeModules
var convertRequestBody = require(89                  ); // 89 = convertRequestBody

var RCTNetworking = function (_NativeEventEmitter) {
  babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

  function RCTNetworking() {
    babelHelpers.classCallCheck(this, RCTNetworking);

    var _this = babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));

    _this.isAvailable = true;
    return _this;
  }

  babelHelpers.createClass(RCTNetworking, [{
    key: 'sendRequest',
    value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback, withCredentials) {
      var body = convertRequestBody(data);
      RCTNetworkingNative.sendRequest({
        method: method,
        url: url,
        data: babelHelpers.extends({}, body, { trackingName: trackingName }),
        headers: headers,
        responseType: responseType,
        incrementalUpdates: incrementalUpdates,
        timeout: timeout,
        withCredentials: withCredentials
      }, callback);
    }
  }, {
    key: 'abortRequest',
    value: function abortRequest(requestId) {
      RCTNetworkingNative.abortRequest(requestId);
    }
  }, {
    key: 'clearCookies',
    value: function clearCookies(callback) {
      RCTNetworkingNative.clearCookies(callback);
    }
  }]);
  return RCTNetworking;
}(NativeEventEmitter);

if (__DEV__ && !RCTNetworkingNative) {
  var MissingNativeRCTNetworkingShim = function (_MissingNativeEventEm) {
    babelHelpers.inherits(MissingNativeRCTNetworkingShim, _MissingNativeEventEm);

    function MissingNativeRCTNetworkingShim() {
      babelHelpers.classCallCheck(this, MissingNativeRCTNetworkingShim);
      return babelHelpers.possibleConstructorReturn(this, (MissingNativeRCTNetworkingShim.__proto__ || Object.getPrototypeOf(MissingNativeRCTNetworkingShim)).call(this, 'RCTNetworking', 'Networking'));
    }

    babelHelpers.createClass(MissingNativeRCTNetworkingShim, [{
      key: 'sendRequest',
      value: function sendRequest() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'abortRequest',
      value: function abortRequest() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'clearCookies',
      value: function clearCookies() {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeRCTNetworkingShim;
  }(MissingNativeEventEmitterShim);

  RCTNetworking = new MissingNativeRCTNetworkingShim();
} else {
  RCTNetworking = new RCTNetworking();
}

module.exports = RCTNetworking;
}, 86, null, "RCTNetworking");
__d(/* MissingNativeEventEmitterShim */function(global, require, module, exports) {
'use strict';

var EmitterSubscription = require(58                   ); // 58 = EmitterSubscription
var EventEmitter = require(57            ); // 57 = EventEmitter

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var MissingNativeEventEmitterShim = function (_EventEmitter) {
  babelHelpers.inherits(MissingNativeEventEmitterShim, _EventEmitter);

  function MissingNativeEventEmitterShim(nativeModuleName, nativeEventEmitterName) {
    babelHelpers.classCallCheck(this, MissingNativeEventEmitterShim);

    var _this = babelHelpers.possibleConstructorReturn(this, (MissingNativeEventEmitterShim.__proto__ || Object.getPrototypeOf(MissingNativeEventEmitterShim)).call(this, null));

    _this.isAvailable = false;

    _this._nativeModuleName = nativeModuleName;
    _this._nativeEventEmitterName = nativeEventEmitterName;
    return _this;
  }

  babelHelpers.createClass(MissingNativeEventEmitterShim, [{
    key: 'throwMissingNativeModule',
    value: function throwMissingNativeModule() {
      invariant(false, 'Cannot use \'' + this._nativeEventEmitterName + '\' module when ' + ('native \'' + this._nativeModuleName + '\' is not included in the build. ') + ('Either include it, or check \'' + this._nativeEventEmitterName + '\'.isAvailable ') + 'before calling any methods.');
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      this.throwMissingNativeModule();
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this.throwMissingNativeModule();
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      this.throwMissingNativeModule();
    }
  }]);
  return MissingNativeEventEmitterShim;
}(EventEmitter);

module.exports = MissingNativeEventEmitterShim;
}, 87, null, "MissingNativeEventEmitterShim");
__d(/* NativeEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(57            ); // 57 = EventEmitter
var Platform = require(38        ); // 38 = Platform
var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var NativeEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

  function NativeEventEmitter(nativeModule) {
    babelHelpers.classCallCheck(this, NativeEventEmitter);

    var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

    if (Platform.OS === 'ios') {
      invariant(nativeModule, 'Native module cannot be null.');
      _this._nativeModule = nativeModule;
    }
    return _this;
  }

  babelHelpers.createClass(NativeEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (Platform.OS === 'ios') {
        this._nativeModule.addListener(eventType);
      }
      return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      invariant(eventType, 'eventType argument is required.');
      if (Platform.OS === 'ios') {
        var count = this.listeners(eventType).length;
        this._nativeModule.removeListeners(count);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (Platform.OS === 'ios') {
        this._nativeModule.removeListeners(1);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
    }
  }]);
  return NativeEventEmitter;
}(EventEmitter);

module.exports = NativeEventEmitter;
}, 88, null, "NativeEventEmitter");
__d(/* convertRequestBody */function(global, require, module, exports) {
'use strict';

var binaryToBase64 = require(90              ); // 90 = binaryToBase64

var FormData = require(92        ); // 92 = FormData

function convertRequestBody(body) {
  if (typeof body === 'string') {
    return { string: body };
  }
  if (body instanceof FormData) {
    return { formData: body.getParts() };
  }
  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
    return { base64: binaryToBase64(body) };
  }
  return body;
}

module.exports = convertRequestBody;
}, 89, null, "convertRequestBody");
__d(/* binaryToBase64 */function(global, require, module, exports) {
'use strict';

var base64 = require(91         ); // 91 = base64-js

function binaryToBase64(data) {
  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }
  if (data instanceof Uint8Array) {
    return base64.fromByteArray(data);
  }
  if (!ArrayBuffer.isView(data)) {
    throw new Error('data must be ArrayBuffer or typed array');
  }
  var _data = data,
      buffer = _data.buffer,
      byteOffset = _data.byteOffset,
      byteLength = _data.byteLength;

  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}

module.exports = binaryToBase64;
}, 90, null, "binaryToBase64");
__d(/* base64-js/index.js */function(global, require, module, exports) {'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0; i < l; i += 4) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = '';
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}
}, 91, null, "base64-js/index.js");
__d(/* FormData */function(global, require, module, exports) {
'use strict';

var FormData = function () {
  function FormData() {
    babelHelpers.classCallCheck(this, FormData);

    this._parts = [];
  }

  babelHelpers.createClass(FormData, [{
    key: 'append',
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: 'getParts',
    value: function getParts() {
      return this._parts.map(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            name = _ref2[0],
            value = _ref2[1];

        var contentDisposition = 'form-data; name="' + name + '"';

        var headers = { 'content-disposition': contentDisposition };

        if (typeof value === 'object' && value) {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return babelHelpers.extends({}, value, { headers: headers, fieldName: name });
        }

        return { string: String(value), headers: headers, fieldName: name };
      });
    }
  }]);
  return FormData;
}();

module.exports = FormData;
}, 92, null, "FormData");
__d(/* WebSocket */function(global, require, module, exports) {
'use strict';

var Blob = require(94    ); // 94 = Blob
var EventTarget = require(82                 ); // 82 = event-target-shim
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var NativeModules = require(30             ); // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform
var WebSocketEvent = require(100             ); // 100 = WebSocketEvent

var base64 = require(91         ); // 91 = base64-js
var binaryToBase64 = require(90              ); // 90 = binaryToBase64
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var WebSocketModule = NativeModules.WebSocketModule;


var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;

var CLOSE_NORMAL = 1000;

var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];

var nextWebSocketId = 0;

var WebSocket = function (_EventTarget) {
  babelHelpers.inherits(WebSocket, _EventTarget);

  function WebSocket(url, protocols, options) {
    babelHelpers.classCallCheck(this, WebSocket);

    var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

    _this.CONNECTING = CONNECTING;
    _this.OPEN = OPEN;
    _this.CLOSING = CLOSING;
    _this.CLOSED = CLOSED;
    _this.readyState = CONNECTING;

    if (typeof protocols === 'string') {
      protocols = [protocols];
    }

    if (!Array.isArray(protocols)) {
      protocols = null;
    }

    if (!WebSocket.isAvailable) {
      throw new Error('Cannot initialize WebSocket module. ' + 'Native module WebSocketModule is missing.');
    }

    _this._eventEmitter = new NativeEventEmitter(WebSocketModule);
    _this._socketId = nextWebSocketId++;
    _this._registerEvents();
    WebSocketModule.connect(url, protocols, options, _this._socketId);
    return _this;
  }

  babelHelpers.createClass(WebSocket, [{
    key: 'close',
    value: function close(code, reason) {
      if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
        return;
      }

      this.readyState = this.CLOSING;
      this._close(code, reason);
    }
  }, {
    key: 'send',
    value: function send(data) {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      if (data instanceof Blob) {
        var BlobModule = NativeModules.BlobModule;
        invariant(BlobModule, 'Native module BlobModule is required for blob support');
        BlobModule.sendBlob(data, this._socketId);
        return;
      }

      if (typeof data === 'string') {
        WebSocketModule.send(data, this._socketId);
        return;
      }

      if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
        WebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
        return;
      }

      throw new Error('Unsupported data type');
    }
  }, {
    key: 'ping',
    value: function ping() {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      WebSocketModule.ping(this._socketId);
    }
  }, {
    key: '_close',
    value: function _close(code, reason) {
      if (Platform.OS === 'android') {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        WebSocketModule.close(statusCode, closeReason, this._socketId);
      } else {
        WebSocketModule.close(this._socketId);
      }
    }
  }, {
    key: '_unregisterEvents',
    value: function _unregisterEvents() {
      this._subscriptions.forEach(function (e) {
        return e.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      var _this2 = this;

      this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        var data = ev.data;
        switch (ev.type) {
          case 'binary':
            data = base64.toByteArray(ev.data).buffer;
            break;
          case 'blob':
            data = Blob.create(ev.data);
            break;
        }
        _this2.dispatchEvent(new WebSocketEvent('message', { data: data }));
      }), this._eventEmitter.addListener('websocketOpen', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.OPEN;
        _this2.dispatchEvent(new WebSocketEvent('open'));
      }), this._eventEmitter.addListener('websocketClosed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('close', {
          code: ev.code,
          reason: ev.reason
        }));
        _this2._unregisterEvents();
        _this2.close();
      }), this._eventEmitter.addListener('websocketFailed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('error', {
          message: ev.message
        }));
        _this2.dispatchEvent(new WebSocketEvent('close', {
          message: ev.message
        }));
        _this2._unregisterEvents();
        _this2.close();
      })];
    }
  }, {
    key: 'binaryType',
    get: function get() {
      return this._binaryType;
    },
    set: function set(binaryType) {
      if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {
        throw new Error('binaryType must be either \'blob\' or \'arraybuffer\'');
      }
      if (this._binaryType === 'blob' || binaryType === 'blob') {
        var BlobModule = NativeModules.BlobModule;
        invariant(BlobModule, 'Native module BlobModule is required for blob support');
        if (BlobModule) {
          if (binaryType === 'blob') {
            BlobModule.enableBlobSupport(this._socketId);
          } else {
            BlobModule.disableBlobSupport(this._socketId);
          }
        }
      }
      this._binaryType = binaryType;
    }
  }]);
  return WebSocket;
}(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;
WebSocket.isAvailable = !!WebSocketModule;


module.exports = WebSocket;
}, 93, null, "WebSocket");
__d(/* Blob */function(global, require, module, exports) {

'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var uuid = require(95    ); // 95 = uuid

var _require = require(30             ), // 30 = NativeModules
    BlobModule = _require.BlobModule;

var Blob = function () {
  babelHelpers.createClass(Blob, null, [{
    key: 'create',
    value: function create(props) {
      return babelHelpers.extends(Object.create(Blob.prototype), props);
    }
  }]);

  function Blob(parts, options) {
    babelHelpers.classCallCheck(this, Blob);

    var blobId = uuid();
    var size = 0;
    parts.forEach(function (part) {
      invariant(part instanceof Blob, 'Can currently only create a Blob from other Blobs');
      size += part.size;
    });
    BlobModule.createFromParts(parts, blobId);
    return Blob.create({
      blobId: blobId,
      offset: 0,
      size: size
    });
  }

  babelHelpers.createClass(Blob, [{
    key: 'slice',
    value: function slice(start, end) {
      var offset = this.offset;
      var size = this.size;
      if (typeof start === 'number') {
        if (start > size) {
          start = size;
        }
        offset += start;
        size -= start;

        if (typeof end === 'number') {
          if (end < 0) {
            end = this.size + end;
          }
          size = end - start;
        }
      }
      return Blob.create({
        blobId: this.blobId,
        offset: offset,
        size: size
      });
    }
  }, {
    key: 'close',
    value: function close() {
      BlobModule.release(this.blobId);
    }
  }]);
  return Blob;
}();

module.exports = Blob;
}, 94, null, "Blob");
__d(/* uuid/index.js */function(global, require, module, exports) {var v1 = require(96    ); // 96 = ./v1
var v4 = require(99    ); // 99 = ./v4

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;
}, 95, null, "uuid/index.js");
__d(/* uuid/v1.js */function(global, require, module, exports) {
var rng = require(97         ); // 97 = ./lib/rng
var bytesToUuid = require(98                 ); // 98 = ./lib/bytesToUuid

var _seedBytes = rng();

var _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];

var _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;

var _lastMSecs = 0,
    _lastNSecs = 0;

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};

  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  msecs += 12219292800000;

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  b[i++] = tmh >>> 24 & 0xf | 0x10;
  b[i++] = tmh >>> 16 & 0xff;

  b[i++] = clockseq >>> 8 | 0x80;

  b[i++] = clockseq & 0xff;

  var node = options.node || _nodeId;
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;
}, 96, null, "uuid/v1.js");
__d(/* uuid/lib/rng-browser.js */function(global, require, module, exports) {
var rng;

var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) {
  var rnds8 = new Uint8Array(16);
  rng = function whatwgRNG() {
    crypto.getRandomValues(rnds8);
    return rnds8;
  };
}

if (!rng) {
  var rnds = new Array(16);
  rng = function rng() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}

module.exports = rng;
}, 97, null, "uuid/lib/rng-browser.js");
__d(/* uuid/lib/bytesToUuid.js */function(global, require, module, exports) {
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + '-' + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
}

module.exports = bytesToUuid;
}, 98, null, "uuid/lib/bytesToUuid.js");
__d(/* uuid/v4.js */function(global, require, module, exports) {var rng = require(97         ); // 97 = ./lib/rng
var bytesToUuid = require(98                 ); // 98 = ./lib/bytesToUuid

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof options == 'string') {
    buf = options == 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80;

  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;
}, 99, null, "uuid/v4.js");
__d(/* WebSocketEvent */function(global, require, module, exports) {

'use strict';

var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
  babelHelpers.classCallCheck(this, WebSocketEvent);

  this.type = type.toString();
  babelHelpers.extends(this, eventInitDict);
};

module.exports = WebSocketEvent;
}, 100, null, "WebSocketEvent");
__d(/* URL */function(global, require, module, exports) {

'use strict';

var Blob = require(94    ); // 94 = Blob

var _require = require(30             ), // 30 = NativeModules
    BlobModule = _require.BlobModule;

var BLOB_URL_PREFIX = null;

if (typeof BlobModule.BLOB_URI_SCHEME === 'string') {
  BLOB_URL_PREFIX = BlobModule.BLOB_URI_SCHEME + ':';
  if (typeof BlobModule.BLOB_URI_HOST === 'string') {
    BLOB_URL_PREFIX += '//' + BlobModule.BLOB_URI_HOST + '/';
  }
}

var URL = function () {
  function URL() {
    babelHelpers.classCallCheck(this, URL);

    throw new Error('Creating BlobURL objects is not supported yet.');
  }

  babelHelpers.createClass(URL, null, [{
    key: 'createObjectURL',
    value: function createObjectURL(blob) {
      if (BLOB_URL_PREFIX === null) {
        throw new Error('Cannot create URL for blob!');
      }
      return '' + BLOB_URL_PREFIX + blob.blobId + '?offset=' + blob.offset + '&size=' + blob.size;
    }
  }, {
    key: 'revokeObjectURL',
    value: function revokeObjectURL(url) {}
  }]);
  return URL;
}();

module.exports = URL;
}, 101, null, "URL");
__d(/* Alert */function(global, require, module, exports) {
'use strict';

var AlertIOS = require(103       ); // 103 = AlertIOS
var NativeModules = require(30             ); // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform

var Alert = function () {
  function Alert() {
    babelHelpers.classCallCheck(this, Alert);
  }

  babelHelpers.createClass(Alert, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options, type) {
      if (Platform.OS === 'ios') {
        if (typeof type !== 'undefined') {
          console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          AlertIOS.alert(title, message, buttons, type);
          return;
        }
        AlertIOS.alert(title, message, buttons);
      } else if (Platform.OS === 'android') {
        AlertAndroid.alert(title, message, buttons, options);
      }
    }
  }]);
  return Alert;
}();

var AlertAndroid = function () {
  function AlertAndroid() {
    babelHelpers.classCallCheck(this, AlertAndroid);
  }

  babelHelpers.createClass(AlertAndroid, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options) {
      var config = {
        title: title || '',
        message: message || ''
      };

      if (options) {
        config = babelHelpers.extends({}, config, { cancelable: options.cancelable });
      }

      var validButtons = buttons ? buttons.slice(0, 3) : [{ text: 'OK' }];
      var buttonPositive = validButtons.pop();
      var buttonNegative = validButtons.pop();
      var buttonNeutral = validButtons.pop();
      if (buttonNeutral) {
        config = babelHelpers.extends({}, config, { buttonNeutral: buttonNeutral.text || '' });
      }
      if (buttonNegative) {
        config = babelHelpers.extends({}, config, { buttonNegative: buttonNegative.text || '' });
      }
      if (buttonPositive) {
        config = babelHelpers.extends({}, config, { buttonPositive: buttonPositive.text || '' });
      }
      NativeModules.DialogManagerAndroid.showAlert(config, function (errorMessage) {
        return console.warn(errorMessage);
      }, function (action, buttonKey) {
        if (action === NativeModules.DialogManagerAndroid.buttonClicked) {
          if (buttonKey === NativeModules.DialogManagerAndroid.buttonNeutral) {
            buttonNeutral.onPress && buttonNeutral.onPress();
          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonNegative) {
            buttonNegative.onPress && buttonNegative.onPress();
          } else if (buttonKey === NativeModules.DialogManagerAndroid.buttonPositive) {
            buttonPositive.onPress && buttonPositive.onPress();
          }
        } else if (action === NativeModules.DialogManagerAndroid.dismissed) {
          options && options.onDismiss && options.onDismiss();
        }
      });
    }
  }]);
  return AlertAndroid;
}();

module.exports = Alert;
}, 102, null, "Alert");
__d(/* AlertIOS */function(global, require, module, exports) {
'use strict';

var RCTAlertManager = require(30             ).AlertManager; // 30 = NativeModules

var AlertIOS = function () {
  function AlertIOS() {
    babelHelpers.classCallCheck(this, AlertIOS);
  }

  babelHelpers.createClass(AlertIOS, null, [{
    key: 'alert',
    value: function alert(title, message, callbackOrButtons, type) {
      if (typeof type !== 'undefined') {
        console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
        this.prompt(title, message, callbackOrButtons, type);
        return;
      }
      this.prompt(title, message, callbackOrButtons, 'default');
    }
  }, {
    key: 'prompt',
    value: function prompt(title, message, callbackOrButtons) {
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
      var defaultValue = arguments[4];
      var keyboardType = arguments[5];

      if (typeof type === 'function') {
        console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');

        var callback = type;
        var defaultValue = message;
        RCTAlertManager.alertWithArgs({
          title: title || undefined,
          type: 'plain-text',
          defaultValue: defaultValue
        }, function (id, value) {
          callback(value);
        });
        return;
      }

      var callbacks = [];
      var buttons = [];
      var cancelButtonKey;
      var destructiveButtonKey;
      if (typeof callbackOrButtons === 'function') {
        callbacks = [callbackOrButtons];
      } else if (callbackOrButtons instanceof Array) {
        callbackOrButtons.forEach(function (btn, index) {
          callbacks[index] = btn.onPress;
          if (btn.style === 'cancel') {
            cancelButtonKey = String(index);
          } else if (btn.style === 'destructive') {
            destructiveButtonKey = String(index);
          }
          if (btn.text || index < (callbackOrButtons || []).length - 1) {
            var btnDef = {};
            btnDef[index] = btn.text || '';
            buttons.push(btnDef);
          }
        });
      }

      RCTAlertManager.alertWithArgs({
        title: title || undefined,
        message: message || undefined,
        buttons: buttons,
        type: type || undefined,
        defaultValue: defaultValue,
        cancelButtonKey: cancelButtonKey,
        destructiveButtonKey: destructiveButtonKey,
        keyboardType: keyboardType
      }, function (id, value) {
        var cb = callbacks[id];
        cb && cb(value);
      });
    }
  }]);
  return AlertIOS;
}();

module.exports = AlertIOS;
}, 103, null, "AlertIOS");
__d(/* Geolocation */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var RCTLocationObserver = require(30             ).LocationObserver; // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var logError = require(105       ); // 105 = logError
var warning = require(45                ); // 45 = fbjs/lib/warning

var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

var Platform = require(38        ); // 38 = Platform
var PermissionsAndroid = require(106                 ); // 106 = PermissionsAndroid

var subscriptions = [];
var updatesEnabled = false;

var Geolocation = {
  requestAuthorization: function requestAuthorization() {
    RCTLocationObserver.requestAuthorization();
  },

  getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
    var hasPermission, status;
    return regeneratorRuntime.async(function getCurrentPosition$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
            hasPermission = true;

            if (!(Platform.OS === 'android' && Platform.Version >= 23)) {
              _context.next = 11;
              break;
            }

            _context.next = 5;
            return regeneratorRuntime.awrap(PermissionsAndroid.check(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

          case 5:
            hasPermission = _context.sent;

            if (hasPermission) {
              _context.next = 11;
              break;
            }

            _context.next = 9;
            return regeneratorRuntime.awrap(PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION));

          case 9:
            status = _context.sent;

            hasPermission = status === PermissionsAndroid.RESULTS.GRANTED;

          case 11:
            if (hasPermission) {
              RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
            }

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, null, this);
  },

  watchPosition: function watchPosition(success, error, options) {
    if (!updatesEnabled) {
      RCTLocationObserver.startObserving(options || {});
      updatesEnabled = true;
    }
    var watchID = subscriptions.length;
    subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
    return watchID;
  },

  clearWatch: function clearWatch(watchID) {
    var sub = subscriptions[watchID];
    if (!sub) {
      return;
    }

    sub[0].remove();

    var sub1 = sub[1];sub1 && sub1.remove();
    subscriptions[watchID] = undefined;
    var noWatchers = true;
    for (var ii = 0; ii < subscriptions.length; ii++) {
      if (subscriptions[ii]) {
        noWatchers = false;
      }
    }
    if (noWatchers) {
      Geolocation.stopObserving();
    }
  },

  stopObserving: function stopObserving() {
    if (updatesEnabled) {
      RCTLocationObserver.stopObserving();
      updatesEnabled = false;
      for (var ii = 0; ii < subscriptions.length; ii++) {
        var sub = subscriptions[ii];
        if (sub) {
          warning(false, 'Called stopObserving with existing subscriptions.');
          sub[0].remove();

          var sub1 = sub[1];sub1 && sub1.remove();
        }
      }
      subscriptions = [];
    }
  }
};

module.exports = Geolocation;
}, 104, null, "Geolocation");
__d(/* logError */function(global, require, module, exports) {
'use strict';

var logError = function logError() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 1 && args[0] instanceof Error) {
    var err = args[0];
    console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
  } else {
    console.error.apply(console, args);
  }
};

module.exports = logError;
}, 105, null, "logError");
__d(/* PermissionsAndroid */function(global, require, module, exports) {
'use strict';

var NativeModules = require(30             ); // 30 = NativeModules

var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    babelHelpers.classCallCheck(this, PermissionsAndroid);

    this.PERMISSIONS = {
      READ_CALENDAR: 'android.permission.READ_CALENDAR',
      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
      CAMERA: 'android.permission.CAMERA',
      READ_CONTACTS: 'android.permission.READ_CONTACTS',
      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
      CALL_PHONE: 'android.permission.CALL_PHONE',
      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
      USE_SIP: 'android.permission.USE_SIP',
      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
      BODY_SENSORS: 'android.permission.BODY_SENSORS',
      SEND_SMS: 'android.permission.SEND_SMS',
      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
      READ_SMS: 'android.permission.READ_SMS',
      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
    };

    this.RESULTS = {
      GRANTED: 'granted',
      DENIED: 'denied',
      NEVER_ASK_AGAIN: 'never_ask_again'
    };
  }

  babelHelpers.createClass(PermissionsAndroid, [{
    key: 'checkPermission',
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      return NativeModules.PermissionsAndroid.checkPermission(permission);
    }
  }, {
    key: 'check',
    value: function check(permission) {
      return NativeModules.PermissionsAndroid.checkPermission(permission);
    }
  }, {
    key: 'requestPermission',
    value: function requestPermission(permission, rationale) {
      var response;
      return regeneratorRuntime.async(function requestPermission$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
              _context.next = 3;
              return regeneratorRuntime.awrap(this.request(permission, rationale));

            case 3:
              response = _context.sent;
              return _context.abrupt('return', response === this.RESULTS.GRANTED);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'request',
    value: function request(permission, rationale) {
      var shouldShowRationale;
      return regeneratorRuntime.async(function request$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!rationale) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(NativeModules.PermissionsAndroid.shouldShowRequestPermissionRationale(permission));

            case 3:
              shouldShowRationale = _context2.sent;

              if (!shouldShowRationale) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt('return', new Promise(function (resolve, reject) {
                NativeModules.DialogManagerAndroid.showAlert(rationale, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(NativeModules.PermissionsAndroid.requestPermission(permission));
                });
              }));

            case 6:
              return _context2.abrupt('return', NativeModules.PermissionsAndroid.requestPermission(permission));

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'requestMultiple',
    value: function requestMultiple(permissions) {
      return NativeModules.PermissionsAndroid.requestMultiplePermissions(permissions);
    }
  }]);
  return PermissionsAndroid;
}();

PermissionsAndroid = new PermissionsAndroid();

module.exports = PermissionsAndroid;
}, 106, null, "PermissionsAndroid");
__d(/* HeapCapture */function(global, require, module, exports) {
'use strict';

var HeapCapture = {
  captureHeap: function captureHeap(path) {
    var error = null;
    try {
      global.nativeCaptureHeap(path);
      console.log('HeapCapture.captureHeap succeeded: ' + path);
    } catch (e) {
      console.log('HeapCapture.captureHeap error: ' + e.toString());
      error = e.toString();
    }
    require(30             ).JSCHeapCapture.captureComplete(path, error); // 30 = NativeModules
  }
};

module.exports = HeapCapture;
}, 107, null, "HeapCapture");
__d(/* SamplingProfiler */function(global, require, module, exports) {
'use strict';

var SamplingProfiler = {
  poke: function poke(token) {
    var error = null;
    var result = null;
    try {
      result = global.pokeSamplingProfiler();
      if (result === null) {
        console.log('The JSC Sampling Profiler has started');
      } else {
        console.log('The JSC Sampling Profiler has stopped');
      }
    } catch (e) {
      console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
      error = e.toString();
    }

    var _require = require(30             ), // 30 = NativeModules
        JSCSamplingProfiler = _require.JSCSamplingProfiler;

    JSCSamplingProfiler.operationComplete(token, result, error);
  }
};

module.exports = SamplingProfiler;
}, 108, null, "SamplingProfiler");
__d(/* RCTLog */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};

var RCTLog = function () {
  function RCTLog() {
    babelHelpers.classCallCheck(this, RCTLog);
  }

  babelHelpers.createClass(RCTLog, null, [{
    key: 'logIfNoNativeHook',
    value: function logIfNoNativeHook() {
      if (typeof global.nativeLoggingHook === 'undefined') {
        RCTLog.logToConsole.apply(RCTLog, arguments);
      }

      return true;
    }
  }, {
    key: 'logToConsole',
    value: function logToConsole(level) {
      var _console;

      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap));

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_console = console)[logFn].apply(_console, args);

      return true;
    }
  }]);
  return RCTLog;
}();

module.exports = RCTLog;
}, 109, null, "RCTLog");
__d(/* RCTNativeAppEventEmitter */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter

var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;
module.exports = RCTNativeAppEventEmitter;
}, 110, null, "RCTNativeAppEventEmitter");
__d(/* PerformanceLogger */function(global, require, module, exports) {
'use strict';

var Systrace = require(34        ); // 34 = Systrace

var infoLog = require(112      ); // 112 = infoLog
var performanceNow = global.nativePerformanceNow || require(39                       ); // 39 = fbjs/lib/performanceNow

var timespans = {};
var extras = {};
var cookies = {};

var PRINT_TO_CONSOLE = false;

var PerformanceLogger = {
  addTimespan: function addTimespan(key, lengthInMs, description) {
    if (timespans[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      totalTime: lengthInMs
    };
  },
  startTimespan: function startTimespan(key, description) {
    if (timespans[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      startTime: performanceNow()
    };
    cookies[key] = Systrace.beginAsyncEvent(key);
    if (__DEV__ && PRINT_TO_CONSOLE) {
      infoLog('PerformanceLogger.js', 'start: ' + key);
    }
  },
  stopTimespan: function stopTimespan(key) {
    var timespan = timespans[key];
    if (!timespan || !timespan.startTime) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);
      }
      return;
    }
    if (timespan.endTime) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
      }
      return;
    }

    timespan.endTime = performanceNow();
    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);
    if (__DEV__ && PRINT_TO_CONSOLE) {
      infoLog('PerformanceLogger.js', 'end: ' + key);
    }

    Systrace.endAsyncEvent(key, cookies[key]);
    delete cookies[key];
  },
  clear: function clear() {
    timespans = {};
    extras = {};
  },
  clearCompleted: function clearCompleted() {
    for (var _key in timespans) {
      if (timespans[_key].totalTime) {
        delete timespans[_key];
      }
    }
    extras = {};
  },
  clearExceptTimespans: function clearExceptTimespans(keys) {
    timespans = Object.keys(timespans).reduce(function (previous, key) {
      if (keys.indexOf(key) !== -1) {
        previous[key] = timespans[key];
      }
      return previous;
    }, {});
    extras = {};
  },
  currentTimestamp: function currentTimestamp() {
    return performanceNow();
  },
  getTimespans: function getTimespans() {
    return timespans;
  },
  hasTimespan: function hasTimespan(key) {
    return !!timespans[key];
  },
  logTimespans: function logTimespans() {
    for (var _key2 in timespans) {
      if (timespans[_key2].totalTime) {
        infoLog(_key2 + ': ' + timespans[_key2].totalTime + 'ms');
      }
    }
  },
  addTimespans: function addTimespans(newTimespans, labels) {
    for (var ii = 0, l = newTimespans.length; ii < l; ii += 2) {
      var label = labels[ii / 2];
      PerformanceLogger.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);
    }
  },
  setExtra: function setExtra(key, value) {
    if (extras[key]) {
      if (__DEV__) {
        infoLog('PerformanceLogger: Attempting to set an extra that already exists ', { key: key, currentValue: extras[key], attemptedValue: value });
      }
      return;
    }
    extras[key] = value;
  },
  getExtras: function getExtras() {
    return extras;
  }
};

module.exports = PerformanceLogger;
}, 111, null, "PerformanceLogger");
__d(/* infoLog */function(global, require, module, exports) {
'use strict';

function infoLog() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
}

module.exports = infoLog;
}, 112, null, "infoLog");
__d(/* HMRClient */function(global, require, module, exports) {
'use strict';

var Platform = require(38        ); // 38 = Platform
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var HMRClient = {
  enable: function enable(platform, bundleEntry, host, port) {
    invariant(platform, 'Missing required parameter `platform`');
    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
    invariant(host, 'Missing required paramenter `host`');

    var WebSocket = require(93         ); // 93 = WebSocket

    var wsHostPort = port !== null && port !== '' ? host + ':' + port : host;

    var wsUrl = 'ws://' + wsHostPort + '/hot?' + ('platform=' + platform + '&') + ('bundleEntry=' + bundleEntry.replace('.bundle', '.js'));

    var activeWS = new WebSocket(wsUrl);
    activeWS.onerror = function (e) {
      var error = 'Hot loading isn\'t working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network';

      if (Platform.OS === 'ios') {
        error += '\n- Ensure that the Packager server URL is correctly set in AppDelegate';
      } else {
        error += '\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run \'adb devices\' to see a list of connected devices\n- If you\'re on a physical device connected to the same machine, run \'adb reverse tcp:8081 tcp:8081\' to forward requests from your device\n- If your device is on the same Wi-Fi network, set \'Debug server host & port for device\' in \'Dev settings\' to your machine\'s IP address and the port of the local dev server - e.g. 10.0.1.1:8081';
      }

      error += '\n\nURL: ' + host + ':' + port + '\n\nError: ' + e.message;

      throw new Error(error);
    };
    activeWS.onmessage = function (_ref) {
      var data = _ref.data;

      var HMRLoadingView = require(114             ); // 114 = HMRLoadingView

      data = JSON.parse(data);

      switch (data.type) {
        case 'update-start':
          {
            HMRLoadingView.showMessage('Hot Loading...');
            break;
          }
        case 'update':
          {
            var _data$body = data.body,
                modules = _data$body.modules,
                sourceMappingURLs = _data$body.sourceMappingURLs,
                sourceURLs = _data$body.sourceURLs,
                inverseDependencies = _data$body.inverseDependencies;


            if (Platform.OS === 'ios') {
              var RCTRedBox = require(30             ).RedBox; // 30 = NativeModules
              RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
            } else {
              var RCTExceptionsManager = require(30             ).ExceptionsManager; // 30 = NativeModules
              RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
            }

            modules.forEach(function (_ref2, i) {
              var id = _ref2.id,
                  code = _ref2.code;

              code = code + '\n\n' + sourceMappingURLs[i];

              var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;

              code = ['__accept(', id + ',', 'function(global,require,module,exports){', '' + code, '\n},', '' + JSON.stringify(inverseDependencies), ');'].join('');

              injectFunction(code, sourceURLs[i]);
            });

            HMRLoadingView.hide();
            break;
          }
        case 'update-done':
          {
            HMRLoadingView.hide();
            break;
          }
        case 'error':
          {
            HMRLoadingView.hide();
            throw new Error(data.body.type + ' ' + data.body.description);
          }
        default:
          {
            throw new Error('Unexpected message: ' + data);
          }
      }
    };
  }
};

module.exports = HMRClient;
}, 113, null, "HMRClient");
__d(/* HMRLoadingView */function(global, require, module, exports) {

'use strict';

var processColor = require(115           ); // 115 = processColor

var _require = require(30             ), // 30 = NativeModules
    DevLoadingView = _require.DevLoadingView;

var HMRLoadingView = function () {
  function HMRLoadingView() {
    babelHelpers.classCallCheck(this, HMRLoadingView);
  }

  babelHelpers.createClass(HMRLoadingView, null, [{
    key: 'showMessage',
    value: function showMessage(message) {
      DevLoadingView.showMessage(message, processColor('#000000'), processColor('#aaaaaa'));
    }
  }, {
    key: 'hide',
    value: function hide() {
      DevLoadingView.hide();
    }
  }]);
  return HMRLoadingView;
}();

module.exports = HMRLoadingView;
}, 114, null, "HMRLoadingView");
__d(/* processColor */function(global, require, module, exports) {
'use strict';

var Platform = require(38        ); // 38 = Platform

var normalizeColor = require(63              ); // 63 = normalizeColor

function processColor(color) {
  if (color === undefined || color === null) {
    return color;
  }

  var int32Color = normalizeColor(color);
  if (int32Color === null || int32Color === undefined) {
    return undefined;
  }

  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

  if (Platform.OS === 'android') {
    int32Color = int32Color | 0x0;
  }
  return int32Color;
}

module.exports = processColor;
}, 115, null, "processColor");
__d(/* setupDevtools */function(global, require, module, exports) {
'use strict';

if (__DEV__) {
  var AppState = require(117       ); // 117 = AppState
  var WebSocket = require(93         ); // 93 = WebSocket

  var _require = require(30             ), // 30 = NativeModules
      PlatformConstants = _require.PlatformConstants;

  var _require2 = require(118                  ), // 118 = react-devtools-core
      connectToDevTools = _require2.connectToDevTools;

  if (WebSocket.isAvailable) {
    connectToDevTools({
      isAppActive: function isAppActive() {
        return AppState.currentState !== 'background';
      },

      host: PlatformConstants && PlatformConstants.ServerHost ? PlatformConstants.ServerHost.split(':')[0] : 'localhost',

      port: window.__REACT_DEVTOOLS_PORT__,
      resolveRNStyle: require(119           ) // 119 = flattenStyle
    });
  }
}
}, 116, null, "setupDevtools");
__d(/* AppState */function(global, require, module, exports) {
'use strict';

var MissingNativeEventEmitterShim = require(87                             ); // 87 = MissingNativeEventEmitterShim
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var NativeModules = require(30             ); // 30 = NativeModules
var RCTAppState = NativeModules.AppState;

var logError = require(105       ); // 105 = logError
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var AppState = function (_NativeEventEmitter) {
  babelHelpers.inherits(AppState, _NativeEventEmitter);

  function AppState() {
    babelHelpers.classCallCheck(this, AppState);

    var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

    _this.isAvailable = true;


    _this.isAvailable = true;
    _this._eventHandlers = {
      change: new Map(),
      memoryWarning: new Map()
    };

    _this.currentState = RCTAppState.initialAppState || 'active';

    _this.addListener('appStateDidChange', function (appStateData) {
      _this.currentState = appStateData.app_state;
    });

    RCTAppState.getCurrentAppState(function (appStateData) {
      _this.currentState = appStateData.app_state;
    }, logError);
    return _this;
  }

  babelHelpers.createClass(AppState, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);
      if (type === 'change') {
        this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
          handler(appStateData.app_state);
        }));
      } else if (type === 'memoryWarning') {
        this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
      }
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);
      if (!this._eventHandlers[type].has(handler)) {
        return;
      }
      this._eventHandlers[type].get(handler).remove();
      this._eventHandlers[type].delete(handler);
    }
  }]);
  return AppState;
}(NativeEventEmitter);

if (__DEV__ && !RCTAppState) {
  var MissingNativeAppStateShim = function (_MissingNativeEventEm) {
    babelHelpers.inherits(MissingNativeAppStateShim, _MissingNativeEventEm);

    function MissingNativeAppStateShim() {
      babelHelpers.classCallCheck(this, MissingNativeAppStateShim);
      return babelHelpers.possibleConstructorReturn(this, (MissingNativeAppStateShim.__proto__ || Object.getPrototypeOf(MissingNativeAppStateShim)).call(this, 'RCTAppState', 'AppState'));
    }

    babelHelpers.createClass(MissingNativeAppStateShim, [{
      key: 'addEventListener',
      value: function addEventListener() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'removeEventListener',
      value: function removeEventListener() {
        this.throwMissingNativeModule();
      }
    }, {
      key: 'currentState',
      get: function get() {
        this.throwMissingNativeModule();
      }
    }]);
    return MissingNativeAppStateShim;
  }(MissingNativeEventEmitterShim);

  AppState = new MissingNativeAppStateShim();
} else {
  AppState = new AppState();
}

module.exports = AppState;
}, 117, null, "AppState");
__d(/* react-devtools-core/build/backend.js */function(global, require, module, exports) {!function (root, factory) {
    "object" == typeof exports && "object" == typeof module ? module.exports = factory() : "function" == typeof define && define.amd ? define([], factory) : "object" == typeof exports ? exports.ReactDevToolsBackend = factory() : root.ReactDevToolsBackend = factory();
}(this, function () {
    return function (modules) {
        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) return installedModules[moduleId].exports;
            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: !1
            };
            return modules[moduleId].call(module.exports, module, module.exports, __webpack_require__), module.loaded = !0, module.exports;
        }
        var installedModules = {};
        return __webpack_require__.m = modules, __webpack_require__.c = installedModules, __webpack_require__.p = "", __webpack_require__(0);
    }([function (module, exports, __webpack_require__) {
        "use strict";

        function connectToDevTools(options) {
            function scheduleRetry() {
                setTimeout(function () {
                    return connectToDevTools(options);
                }, 2e3);
            }
            function handleClose() {
                hasClosed || (hasClosed = !0, scheduleRetry(), closeListeners.forEach(function (fn) {
                    return fn();
                }));
            }
            function handleMessage(evt) {
                var data;
                if (0 !== evt.data.indexOf("eval:")) {
                    try {
                        data = JSON.parse(evt.data);
                    } catch (e) {
                        return void console.error("failed to parse json: " + evt.data);
                    }
                    messageListeners.forEach(function (fn) {
                        try {
                            fn(data);
                        } catch (e) {
                            throw console.log(data), e;
                        }
                    });
                }
            }
            var _ref = options || {},
                _ref$host = _ref.host,
                host = void 0 === _ref$host ? "localhost" : _ref$host,
                _ref$port = _ref.port,
                port = void 0 === _ref$port ? 8097 : _ref$port,
                _ref$resolveRNStyle = _ref.resolveRNStyle,
                resolveRNStyle = void 0 === _ref$resolveRNStyle ? null : _ref$resolveRNStyle,
                _ref$isAppActive = _ref.isAppActive,
                isAppActive = void 0 === _ref$isAppActive ? function () {
                return !0;
            } : _ref$isAppActive;
            if (!isAppActive()) return void scheduleRetry();
            var messageListeners = [],
                closeListeners = [],
                uri = "ws://" + host + ":" + port,
                ws = new window.WebSocket(uri);
            ws.onclose = handleClose, ws.onerror = handleClose, ws.onmessage = handleMessage, ws.onopen = function () {
                var wall = {
                    listen: function listen(fn) {
                        messageListeners.push(fn);
                    },
                    onClose: function onClose(fn) {
                        closeListeners.push(fn);
                    },
                    send: function send(data) {
                        ws.send(JSON.stringify(data));
                    }
                };
                setupBackend(wall, resolveRNStyle);
            };
            var hasClosed = !1;
        }
        function setupBackend(wall, resolveRNStyle) {
            wall.onClose(function () {
                agent && agent.emit("shutdown"), window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit("shutdown"), bridge = null, agent = null, console.log("closing devtools");
            });
            var bridge = new Bridge(wall),
                agent = new Agent(window, {
                rnStyle: !!resolveRNStyle,
                rnStyleMeasure: !!resolveRNStyle
            });
            agent.addBridge(bridge), resolveRNStyle && setupRNStyle(bridge, agent, resolveRNStyle), setupRelay(bridge, agent, window.__REACT_DEVTOOLS_GLOBAL_HOOK__);
            var _connectTimeout = setTimeout(function () {
                console.warn("react-devtools agent got no connection");
            }, 2e4);
            agent.once("connected", function () {
                agent && (inject(window.__REACT_DEVTOOLS_GLOBAL_HOOK__, agent), clearTimeout(_connectTimeout));
            });
        }
        var Agent = __webpack_require__(1),
            Bridge = __webpack_require__(6),
            installGlobalHook = __webpack_require__(31),
            installRelayHook = __webpack_require__(32),
            inject = __webpack_require__(33),
            setupRNStyle = __webpack_require__(43),
            setupRelay = __webpack_require__(45);
        installGlobalHook(window), installRelayHook(window), window.document && window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on("react-devtools", function (agent) {
            var setupHighlighter = __webpack_require__(46);
            setupHighlighter(agent);
        }), module.exports = {
            connectToDevTools: connectToDevTools
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            return !call || "object" != typeof call && "function" != typeof call ? self : call;
        }
        function _inherits(subClass, superClass) {
            if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            _require = __webpack_require__(2),
            EventEmitter = _require.EventEmitter,
            assign = __webpack_require__(3),
            guid = __webpack_require__(4),
            getIn = __webpack_require__(5),
            Agent = function (_EventEmitter) {
            function Agent(global, capabilities) {
                _classCallCheck(this, Agent);
                var _this = _possibleConstructorReturn(this, (Agent.__proto__ || Object.getPrototypeOf(Agent)).call(this));
                _this.global = global, _this.internalInstancesById = new Map(), _this.idsByInternalInstances = new WeakMap(), _this.renderers = new Map(), _this.elementData = new Map(), _this.roots = new Set(), _this.reactInternals = {};
                var lastSelected;
                _this.on("selected", function (id) {
                    var data = _this.elementData.get(id);
                    data && data.publicInstance && _this.global.$r === lastSelected && (_this.global.$r = data.publicInstance, lastSelected = data.publicInstance);
                }), _this._prevSelected = null, _this._scrollUpdate = !1;
                var isReactDOM = window.document && "function" == typeof window.document.createElement;
                return _this.capabilities = assign({
                    scroll: isReactDOM && "function" == typeof window.document.body.scrollIntoView,
                    dom: isReactDOM,
                    editTextContent: !1
                }, capabilities), isReactDOM && (_this._updateScroll = _this._updateScroll.bind(_this), window.addEventListener("scroll", _this._onScroll.bind(_this), !0), window.addEventListener("click", _this._onClick.bind(_this), !0), window.addEventListener("mouseover", _this._onMouseOver.bind(_this), !0), window.addEventListener("resize", _this._onResize.bind(_this), !0)), _this;
            }
            return _inherits(Agent, _EventEmitter), _createClass(Agent, [{
                key: "sub",
                value: function value(ev, fn) {
                    var _this2 = this;
                    return this.on(ev, fn), function () {
                        _this2.removeListener(ev, fn);
                    };
                }
            }, {
                key: "setReactInternals",
                value: function value(renderer, reactInternals) {
                    this.reactInternals[renderer] = reactInternals;
                }
            }, {
                key: "addBridge",
                value: function value(bridge) {
                    var _this3 = this;
                    bridge.on("requestCapabilities", function () {
                        bridge.send("capabilities", _this3.capabilities), _this3.emit("connected");
                    }), bridge.on("setState", this._setState.bind(this)), bridge.on("setProps", this._setProps.bind(this)), bridge.on("setContext", this._setContext.bind(this)), bridge.on("makeGlobal", this._makeGlobal.bind(this)), bridge.on("highlight", function (id) {
                        return _this3.highlight(id);
                    }), bridge.on("highlightMany", function (id) {
                        return _this3.highlightMany(id);
                    }), bridge.on("hideHighlight", function () {
                        return _this3.emit("hideHighlight");
                    }), bridge.on("startInspecting", function () {
                        return _this3.emit("startInspecting");
                    }), bridge.on("stopInspecting", function () {
                        return _this3.emit("stopInspecting");
                    }), bridge.on("selected", function (id) {
                        return _this3.emit("selected", id);
                    }), bridge.on("setInspectEnabled", function (enabled) {
                        _this3._inspectEnabled = enabled, _this3.emit("stopInspecting");
                    }), bridge.on("shutdown", function () {
                        return _this3.emit("shutdown");
                    }), bridge.on("changeTextContent", function (_ref) {
                        var id = _ref.id,
                            text = _ref.text,
                            node = _this3.getNodeForID(id);
                        node && (node.textContent = text);
                    }), bridge.on("putSelectedNode", function (id) {
                        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node = _this3.getNodeForID(id);
                    }), bridge.on("putSelectedInstance", function (id) {
                        var node = _this3.elementData.get(id);
                        node ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = node.type : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$type = null, node && node.publicInstance ? window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = node.publicInstance : window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$inst = null;
                    }), bridge.on("checkSelection", function () {
                        var newSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$0;
                        if (newSelected !== _this3._prevSelected) {
                            _this3._prevSelected = newSelected;
                            var sentSelected = window.__REACT_DEVTOOLS_GLOBAL_HOOK__.$node;
                            newSelected !== sentSelected && _this3.selectFromDOMNode(newSelected, !0);
                        }
                    }), bridge.on("scrollToNode", function (id) {
                        return _this3.scrollToNode(id);
                    }), bridge.on("traceupdatesstatechange", function (value) {
                        return _this3.emit("traceupdatesstatechange", value);
                    }), bridge.on("colorizerchange", function (value) {
                        return _this3.emit("colorizerchange", value);
                    }), this.on("root", function (id) {
                        return bridge.send("root", id);
                    }), this.on("mount", function (data) {
                        return bridge.send("mount", data);
                    }), this.on("update", function (data) {
                        return bridge.send("update", data);
                    }), this.on("unmount", function (id) {
                        bridge.send("unmount", id), bridge.forget(id);
                    }), this.on("setSelection", function (data) {
                        return bridge.send("select", data);
                    }), this.on("setInspectEnabled", function (data) {
                        return bridge.send("setInspectEnabled", data);
                    });
                }
            }, {
                key: "scrollToNode",
                value: function value(id) {
                    var node = this.getNodeForID(id);
                    if (!node) return void console.warn("unable to get the node for scrolling");
                    var domElement = node.nodeType === Node.ELEMENT_NODE ? node : node.parentElement;
                    return domElement ? ("function" == typeof domElement.scrollIntoViewIfNeeded ? domElement.scrollIntoViewIfNeeded() : "function" == typeof domElement.scrollIntoView && domElement.scrollIntoView(), void this.highlight(id)) : void console.warn("unable to get the domElement for scrolling");
                }
            }, {
                key: "highlight",
                value: function value(id) {
                    var data = this.elementData.get(id),
                        node = this.getNodeForID(id);
                    data && node && this.emit("highlight", {
                        node: node,
                        name: data.name,
                        props: data.props
                    });
                }
            }, {
                key: "highlightMany",
                value: function value(ids) {
                    var _this4 = this,
                        nodes = [];
                    ids.forEach(function (id) {
                        var node = _this4.getNodeForID(id);
                        node && nodes.push(node);
                    }), nodes.length && this.emit("highlightMany", nodes);
                }
            }, {
                key: "getNodeForID",
                value: function value(id) {
                    var component = this.internalInstancesById.get(id);
                    if (!component) return null;
                    var renderer = this.renderers.get(id);
                    return renderer && this.reactInternals[renderer].getNativeFromReactElement ? this.reactInternals[renderer].getNativeFromReactElement(component) : null;
                }
            }, {
                key: "selectFromDOMNode",
                value: function value(node, quiet) {
                    var offsetFromLeaf = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0,
                        id = this.getIDForNode(node);
                    id && this.emit("setSelection", {
                        id: id,
                        quiet: quiet,
                        offsetFromLeaf: offsetFromLeaf
                    });
                }
            }, {
                key: "selectFromReactInstance",
                value: function value(instance, quiet) {
                    var id = this.getId(instance);
                    return id ? void this.emit("setSelection", {
                        id: id,
                        quiet: quiet
                    }) : void console.log("no instance id", instance);
                }
            }, {
                key: "getIDForNode",
                value: function value(node) {
                    if (!this.reactInternals) return null;
                    var component;
                    for (var renderer in this.reactInternals) {
                        try {
                            component = this.reactInternals[renderer].getReactElementFromNative(node);
                        } catch (e) {}
                        if (component) return this.getId(component);
                    }
                    return null;
                }
            }, {
                key: "_setProps",
                value: function value(_ref2) {
                    var id = _ref2.id,
                        path = _ref2.path,
                        value = _ref2.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInProps ? data.updater.setInProps(path, value) : console.warn("trying to set props on a component that doesn't support it");
                }
            }, {
                key: "_setState",
                value: function value(_ref3) {
                    var id = _ref3.id,
                        path = _ref3.path,
                        value = _ref3.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInState ? data.updater.setInState(path, value) : console.warn("trying to set state on a component that doesn't support it");
                }
            }, {
                key: "_setContext",
                value: function value(_ref4) {
                    var id = _ref4.id,
                        path = _ref4.path,
                        value = _ref4.value,
                        data = this.elementData.get(id);
                    data && data.updater && data.updater.setInContext ? data.updater.setInContext(path, value) : console.warn("trying to set context on a component that doesn't support it");
                }
            }, {
                key: "_makeGlobal",
                value: function value(_ref5) {
                    var id = _ref5.id,
                        path = _ref5.path,
                        data = this.elementData.get(id);
                    if (data) {
                        var value;
                        value = "instance" === path ? data.publicInstance : getIn(data, path), this.global.$tmp = value, console.log("$tmp =", value);
                    }
                }
            }, {
                key: "getId",
                value: function value(internalInstance) {
                    return "object" === ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) && internalInstance ? (this.idsByInternalInstances.has(internalInstance) || (this.idsByInternalInstances.set(internalInstance, guid()), this.internalInstancesById.set(this.idsByInternalInstances.get(internalInstance), internalInstance)), this.idsByInternalInstances.get(internalInstance)) : internalInstance;
                }
            }, {
                key: "addRoot",
                value: function value(renderer, internalInstance) {
                    var id = this.getId(internalInstance);
                    this.roots.add(id), this.emit("root", id);
                }
            }, {
                key: "onMounted",
                value: function value(renderer, component, data) {
                    var _this5 = this,
                        id = this.getId(component);
                    this.renderers.set(id, renderer), this.elementData.set(id, data);
                    var send = assign({}, data);
                    send.children && send.children.map && (send.children = send.children.map(function (c) {
                        return _this5.getId(c);
                    })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("mount", send);
                }
            }, {
                key: "onUpdated",
                value: function value(component, data) {
                    var _this6 = this,
                        id = this.getId(component);
                    this.elementData.set(id, data);
                    var send = assign({}, data);
                    send.children && send.children.map && (send.children = send.children.map(function (c) {
                        return _this6.getId(c);
                    })), send.id = id, send.canUpdate = send.updater && !!send.updater.forceUpdate, delete send.type, delete send.updater, this.emit("update", send);
                }
            }, {
                key: "onUnmounted",
                value: function value(component) {
                    var id = this.getId(component);
                    this.elementData["delete"](id), this.roots["delete"](id), this.renderers["delete"](id), this.emit("unmount", id), this.idsByInternalInstances["delete"](component);
                }
            }, {
                key: "_onScroll",
                value: function value() {
                    this._scrollUpdate || (this._scrollUpdate = !0, window.requestAnimationFrame(this._updateScroll));
                }
            }, {
                key: "_updateScroll",
                value: function value() {
                    this.emit("refreshMultiOverlay"), this.emit("stopInspecting"), this._scrollUpdate = !1;
                }
            }, {
                key: "_onClick",
                value: function value(event) {
                    if (this._inspectEnabled) {
                        var id = this.getIDForNode(event.target);
                        id && (event.stopPropagation(), event.preventDefault(), this.emit("setSelection", {
                            id: id
                        }), this.emit("setInspectEnabled", !1));
                    }
                }
            }, {
                key: "_onMouseOver",
                value: function value(event) {
                    if (this._inspectEnabled) {
                        var id = this.getIDForNode(event.target);
                        if (!id) return;
                        this.highlight(id);
                    }
                }
            }, {
                key: "_onResize",
                value: function value(event) {
                    this.emit("stopInspecting");
                }
            }]), Agent;
        }(EventEmitter);
        module.exports = Agent;
    }, function (module, exports) {
        function EventEmitter() {
            this._events = this._events || {}, this._maxListeners = this._maxListeners || void 0;
        }
        function isFunction(arg) {
            return "function" == typeof arg;
        }
        function isNumber(arg) {
            return "number" == typeof arg;
        }
        function isObject(arg) {
            return "object" == typeof arg && null !== arg;
        }
        function isUndefined(arg) {
            return void 0 === arg;
        }
        module.exports = EventEmitter, EventEmitter.EventEmitter = EventEmitter, EventEmitter.prototype._events = void 0, EventEmitter.prototype._maxListeners = void 0, EventEmitter.defaultMaxListeners = 10, EventEmitter.prototype.setMaxListeners = function (n) {
            if (!isNumber(n) || n < 0 || isNaN(n)) throw TypeError("n must be a positive number");
            return this._maxListeners = n, this;
        }, EventEmitter.prototype.emit = function (type) {
            var er, handler, len, args, i, listeners;
            if (this._events || (this._events = {}), "error" === type && (!this._events.error || isObject(this._events.error) && !this._events.error.length)) {
                if (er = arguments[1], er instanceof Error) throw er;
                var err = new Error('Uncaught, unspecified "error" event. (' + er + ")");
                throw err.context = er, err;
            }
            if (handler = this._events[type], isUndefined(handler)) return !1;
            if (isFunction(handler)) switch (arguments.length) {
                case 1:
                    handler.call(this);
                    break;

                case 2:
                    handler.call(this, arguments[1]);
                    break;

                case 3:
                    handler.call(this, arguments[1], arguments[2]);
                    break;

                default:
                    args = Array.prototype.slice.call(arguments, 1), handler.apply(this, args);
            } else if (isObject(handler)) for (args = Array.prototype.slice.call(arguments, 1), listeners = handler.slice(), len = listeners.length, i = 0; i < len; i++) {
                listeners[i].apply(this, args);
            }return !0;
        }, EventEmitter.prototype.addListener = function (type, listener) {
            var m;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            return this._events || (this._events = {}), this._events.newListener && this.emit("newListener", type, isFunction(listener.listener) ? listener.listener : listener), this._events[type] ? isObject(this._events[type]) ? this._events[type].push(listener) : this._events[type] = [this._events[type], listener] : this._events[type] = listener, isObject(this._events[type]) && !this._events[type].warned && (m = isUndefined(this._maxListeners) ? EventEmitter.defaultMaxListeners : this._maxListeners, m && m > 0 && this._events[type].length > m && (this._events[type].warned = !0, console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.", this._events[type].length), "function" == typeof console.trace && console.trace())), this;
        }, EventEmitter.prototype.on = EventEmitter.prototype.addListener, EventEmitter.prototype.once = function (type, listener) {
            function g() {
                this.removeListener(type, g), fired || (fired = !0, listener.apply(this, arguments));
            }
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            var fired = !1;
            return g.listener = listener, this.on(type, g), this;
        }, EventEmitter.prototype.removeListener = function (type, listener) {
            var list, position, length, i;
            if (!isFunction(listener)) throw TypeError("listener must be a function");
            if (!this._events || !this._events[type]) return this;
            if (list = this._events[type], length = list.length, position = -1, list === listener || isFunction(list.listener) && list.listener === listener) delete this._events[type], this._events.removeListener && this.emit("removeListener", type, listener);else if (isObject(list)) {
                for (i = length; i-- > 0;) {
                    if (list[i] === listener || list[i].listener && list[i].listener === listener) {
                        position = i;
                        break;
                    }
                }if (position < 0) return this;
                1 === list.length ? (list.length = 0, delete this._events[type]) : list.splice(position, 1), this._events.removeListener && this.emit("removeListener", type, listener);
            }
            return this;
        }, EventEmitter.prototype.removeAllListeners = function (type) {
            var key, listeners;
            if (!this._events) return this;
            if (!this._events.removeListener) return 0 === arguments.length ? this._events = {} : this._events[type] && delete this._events[type], this;
            if (0 === arguments.length) {
                for (key in this._events) {
                    "removeListener" !== key && this.removeAllListeners(key);
                }return this.removeAllListeners("removeListener"), this._events = {}, this;
            }
            if (listeners = this._events[type], isFunction(listeners)) this.removeListener(type, listeners);else if (listeners) for (; listeners.length;) {
                this.removeListener(type, listeners[listeners.length - 1]);
            }return delete this._events[type], this;
        }, EventEmitter.prototype.listeners = function (type) {
            var ret;
            return ret = this._events && this._events[type] ? isFunction(this._events[type]) ? [this._events[type]] : this._events[type].slice() : [];
        }, EventEmitter.prototype.listenerCount = function (type) {
            if (this._events) {
                var evlistener = this._events[type];
                if (isFunction(evlistener)) return 1;
                if (evlistener) return evlistener.length;
            }
            return 0;
        }, EventEmitter.listenerCount = function (emitter, type) {
            return emitter.listenerCount(type);
        };
    }, function (module, exports) {
        "use strict";

        function toObject(val) {
            if (null === val || void 0 === val) throw new TypeError("Object.assign cannot be called with null or undefined");
            return Object(val);
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            propIsEnumerable = Object.prototype.propertyIsEnumerable;
        module.exports = Object.assign || function (target, source) {
            for (var from, symbols, to = toObject(target), s = 1; s < arguments.length; s++) {
                from = Object(arguments[s]);
                for (var key in from) {
                    hasOwnProperty.call(from, key) && (to[key] = from[key]);
                }if (Object.getOwnPropertySymbols) {
                    symbols = Object.getOwnPropertySymbols(from);
                    for (var i = 0; i < symbols.length; i++) {
                        propIsEnumerable.call(from, symbols[i]) && (to[symbols[i]] = from[symbols[i]]);
                    }
                }
            }
            return to;
        };
    }, function (module, exports) {
        "use strict";

        function guid() {
            return "g" + Math.random().toString(16).substr(2);
        }
        module.exports = guid;
    }, function (module, exports) {
        "use strict";

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }return arr2;
            }
            return Array.from(arr);
        }
        function getIn(base, path) {
            return path.reduce(function (obj, attr) {
                if (obj) {
                    if (obj.hasOwnProperty(attr)) return obj[attr];
                    if ("function" == typeof obj[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return [].concat(_toConsumableArray(obj))[attr];
                }
                return null;
            }, base);
        }
        module.exports = getIn;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _toConsumableArray(arr) {
            if (Array.isArray(arr)) {
                for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
                    arr2[i] = arr[i];
                }return arr2;
            }
            return Array.from(arr);
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function getWindowFunction(name, polyfill) {
            return String(window[name]).indexOf("[native code]") === -1 ? polyfill : window[name];
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        },
            _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            consts = __webpack_require__(7),
            hydrate = __webpack_require__(26),
            dehydrate = __webpack_require__(27),
            getIn = __webpack_require__(5),
            performanceNow = __webpack_require__(28),
            lastRunTimeMS = 5,
            cancelIdleCallback = getWindowFunction("cancelIdleCallback", clearTimeout),
            requestIdleCallback = getWindowFunction("requestIdleCallback", function (cb, options) {
            var delayMS = 3e3 * lastRunTimeMS;
            return delayMS > 500 && (delayMS = 500), setTimeout(function () {
                var startTime = performanceNow();
                cb({
                    didTimeout: !1,
                    timeRemaining: function timeRemaining() {
                        return 1 / 0;
                    }
                });
                var endTime = performanceNow();
                lastRunTimeMS = (endTime - startTime) / 1e3;
            }, delayMS);
        }),
            Bridge = function () {
            function Bridge(wall) {
                _classCallCheck(this, Bridge), this._cbs = new Map(), this._inspectables = new Map(), this._cid = 0, this._listeners = {}, this._buffer = [], this._flushHandle = null, this._callers = {}, this._paused = !1, this._wall = wall, wall.listen(this._handleMessage.bind(this));
            }
            return _createClass(Bridge, [{
                key: "inspect",
                value: function value(id, path, cb) {
                    var _cid = this._cid++;
                    this._cbs.set(_cid, function (data, cleaned, proto, protoclean) {
                        cleaned.length && hydrate(data, cleaned), proto && protoclean.length && hydrate(proto, protoclean), proto && (data[consts.proto] = proto), cb(data);
                    }), this._wall.send({
                        type: "inspect",
                        callback: _cid,
                        path: path,
                        id: id
                    });
                }
            }, {
                key: "call",
                value: function value(name, args, cb) {
                    var _cid = this._cid++;
                    this._cbs.set(_cid, cb), this._wall.send({
                        type: "call",
                        callback: _cid,
                        args: args,
                        name: name
                    });
                }
            }, {
                key: "onCall",
                value: function value(name, handler) {
                    if (this._callers[name]) throw new Error("only one call handler per call name allowed");
                    this._callers[name] = handler;
                }
            }, {
                key: "pause",
                value: function value() {
                    this._wall.send({
                        type: "pause"
                    });
                }
            }, {
                key: "resume",
                value: function value() {
                    this._wall.send({
                        type: "resume"
                    });
                }
            }, {
                key: "setInspectable",
                value: function value(id, data) {
                    var prev = this._inspectables.get(id);
                    return prev ? void this._inspectables.set(id, _extends({}, prev, data)) : void this._inspectables.set(id, data);
                }
            }, {
                key: "send",
                value: function value(evt, data) {
                    this._buffer.push({
                        evt: evt,
                        data: data
                    }), this.scheduleFlush();
                }
            }, {
                key: "scheduleFlush",
                value: function value() {
                    if (!this._flushHandle && this._buffer.length) {
                        var timeout = this._paused ? 5e3 : 500;
                        this._flushHandle = requestIdleCallback(this.flushBufferWhileIdle.bind(this), {
                            timeout: timeout
                        });
                    }
                }
            }, {
                key: "cancelFlush",
                value: function value() {
                    this._flushHandle && (cancelIdleCallback(this._flushHandle), this._flushHandle = null);
                }
            }, {
                key: "flushBufferWhileIdle",
                value: function value(deadline) {
                    this._flushHandle = null;
                    for (var chunkCount = this._paused ? 20 : 10, chunkSize = Math.round(this._buffer.length / chunkCount), minChunkSize = this._paused ? 50 : 100; this._buffer.length && (deadline.timeRemaining() > 0 || deadline.didTimeout);) {
                        var take = Math.min(this._buffer.length, Math.max(minChunkSize, chunkSize)),
                            currentBuffer = this._buffer.splice(0, take);
                        this.flushBufferSlice(currentBuffer);
                    }
                    this._buffer.length && this.scheduleFlush();
                }
            }, {
                key: "flushBufferSlice",
                value: function value(bufferSlice) {
                    var _this = this,
                        events = bufferSlice.map(function (_ref) {
                        var evt = _ref.evt,
                            data = _ref.data,
                            cleaned = [],
                            san = dehydrate(data, cleaned);
                        return cleaned.length && _this.setInspectable(data.id, data), {
                            type: "event",
                            evt: evt,
                            data: san,
                            cleaned: cleaned
                        };
                    });
                    this._wall.send({
                        type: "many-events",
                        events: events
                    });
                }
            }, {
                key: "forget",
                value: function value(id) {
                    this._inspectables["delete"](id);
                }
            }, {
                key: "on",
                value: function value(evt, fn) {
                    this._listeners[evt] ? this._listeners[evt].push(fn) : this._listeners[evt] = [fn];
                }
            }, {
                key: "off",
                value: function value(evt, fn) {
                    if (this._listeners[evt]) {
                        var ix = this._listeners[evt].indexOf(fn);
                        ix !== -1 && this._listeners[evt].splice(ix, 1);
                    }
                }
            }, {
                key: "once",
                value: function value(evt, fn) {
                    var self = this,
                        listener = function listener() {
                        fn.apply(this, arguments), self.off(evt, listener);
                    };
                    this.on(evt, listener);
                }
            }, {
                key: "_handleMessage",
                value: function value(payload) {
                    var _this2 = this;
                    if ("resume" === payload.type) return this._paused = !1, void this.scheduleFlush();
                    if ("pause" === payload.type) return this._paused = !0, void this.cancelFlush();
                    if ("callback" === payload.type) {
                        var callback = this._cbs.get(payload.id);
                        return void (callback && (callback.apply(void 0, _toConsumableArray(payload.args)), this._cbs["delete"](payload.id)));
                    }
                    if ("call" === payload.type) return void this._handleCall(payload.name, payload.args, payload.callback);
                    if ("inspect" === payload.type) return void this._inspectResponse(payload.id, payload.path, payload.callback);
                    if ("event" === payload.type) {
                        payload.cleaned && hydrate(payload.data, payload.cleaned);
                        var fns = this._listeners[payload.evt],
                            data = payload.data;
                        fns && fns.forEach(function (fn) {
                            return fn(data);
                        });
                    }
                    "many-events" === payload.type && payload.events.forEach(function (event) {
                        event.cleaned && hydrate(event.data, event.cleaned);
                        var handlers = _this2._listeners[event.evt];
                        handlers && handlers.forEach(function (fn) {
                            return fn(event.data);
                        });
                    });
                }
            }, {
                key: "_handleCall",
                value: function value(name, args, callback) {
                    if (!this._callers[name]) return void console.warn('unknown call: "' + name + '"');
                    args = Array.isArray(args) ? args : [args];
                    var result;
                    try {
                        result = this._callers[name].apply(null, args);
                    } catch (e) {
                        return void console.error("Failed to call", e);
                    }
                    this._wall.send({
                        type: "callback",
                        id: callback,
                        args: [result]
                    });
                }
            }, {
                key: "_inspectResponse",
                value: function value(id, path, callback) {
                    var inspectable = this._inspectables.get(id),
                        result = {},
                        cleaned = [],
                        proto = null,
                        protoclean = [];
                    if (inspectable) {
                        var val = getIn(inspectable, path),
                            protod = !1,
                            isFn = "function" == typeof val;
                        if (val && "function" == typeof val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
                            var iterVal = Object.create({}),
                                count = 0,
                                _iteratorNormalCompletion = !0,
                                _didIteratorError = !1,
                                _iteratorError = void 0;
                            try {
                                for (var _step, _iterator = val[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = !0) {
                                    var entry = _step.value;
                                    if (count > 100) break;
                                    iterVal[count] = entry, count++;
                                }
                            } catch (err) {
                                _didIteratorError = !0, _iteratorError = err;
                            } finally {
                                try {
                                    !_iteratorNormalCompletion && _iterator["return"] && _iterator["return"]();
                                } finally {
                                    if (_didIteratorError) throw _iteratorError;
                                }
                            }
                            val = iterVal;
                        }
                        if (Object.getOwnPropertyNames(val).forEach(function (name) {
                            "__proto__" === name && (protod = !0), (!isFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (result[name] = dehydrate(val[name], cleaned, [name]));
                        }), !protod && val.__proto__ && "Object" !== val.constructor.name) {
                            var newProto = {},
                                pIsFn = "function" == typeof val.__proto__;
                            Object.getOwnPropertyNames(val.__proto__).forEach(function (name) {
                                (!pIsFn || "arguments" !== name && "callee" !== name && "caller" !== name) && (newProto[name] = dehydrate(val.__proto__[name], protoclean, [name]));
                            }), proto = newProto;
                        }
                    }
                    this._wall.send({
                        type: "callback",
                        id: callback,
                        args: [result, cleaned, proto, protoclean]
                    });
                }
            }]), Bridge;
        }();
        module.exports = Bridge;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var _Symbol = __webpack_require__(8);
        module.exports = {
            name: _Symbol("name"),
            type: _Symbol("type"),
            inspected: _Symbol("inspected"),
            meta: _Symbol("meta"),
            proto: _Symbol("proto")
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(9)() ? Symbol : __webpack_require__(10);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            var symbol;
            if ("function" != typeof Symbol) return !1;
            symbol = Symbol("test symbol");
            try {
                String(symbol);
            } catch (e) {
                return !1;
            }
            return "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") || "object" == typeof (typeof Symbol === "function" ? Symbol.isConcatSpreadable : "@@isConcatSpreadable") && "object" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") && "object" == typeof (typeof Symbol === "function" ? Symbol.toPrimitive : "@@toPrimitive") && "object" == typeof (typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag") && "object" == typeof (typeof Symbol === "function" ? Symbol.unscopables : "@@unscopables");
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var NativeSymbol,
            SymbolPolyfill,
            _HiddenSymbol,
            d = __webpack_require__(11),
            validateSymbol = __webpack_require__(24),
            create = Object.create,
            defineProperties = Object.defineProperties,
            defineProperty = Object.defineProperty,
            objPrototype = Object.prototype,
            globalSymbols = create(null);
        "function" == typeof Symbol && (NativeSymbol = Symbol);
        var generateName = function () {
            var created = create(null);
            return function (desc) {
                for (var name, ie11BugWorkaround, postfix = 0; created[desc + (postfix || "")];) {
                    ++postfix;
                }return desc += postfix || "", created[desc] = !0, name = "@@" + desc, defineProperty(objPrototype, name, d.gs(null, function (value) {
                    ie11BugWorkaround || (ie11BugWorkaround = !0, defineProperty(this, name, d(value)), ie11BugWorkaround = !1);
                })), name;
            };
        }();
        _HiddenSymbol = function HiddenSymbol(description) {
            if (this instanceof _HiddenSymbol) throw new TypeError("TypeError: Symbol is not a constructor");
            return SymbolPolyfill(description);
        }, module.exports = SymbolPolyfill = function Symbol(description) {
            var symbol;
            if (this instanceof Symbol) throw new TypeError("TypeError: Symbol is not a constructor");
            return symbol = create(_HiddenSymbol.prototype), description = void 0 === description ? "" : String(description), defineProperties(symbol, {
                __description__: d("", description),
                __name__: d("", generateName(description))
            });
        }, defineProperties(SymbolPolyfill, {
            "for": d(function (key) {
                return globalSymbols[key] ? globalSymbols[key] : globalSymbols[key] = SymbolPolyfill(String(key));
            }),
            keyFor: d(function (s) {
                var key;
                validateSymbol(s);
                for (key in globalSymbols) {
                    if (globalSymbols[key] === s) return key;
                }
            }),
            hasInstance: d("", NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill("hasInstance")),
            isConcatSpreadable: d("", NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill("isConcatSpreadable")),
            iterator: d("", NativeSymbol && NativeSymbol.iterator || SymbolPolyfill("iterator")),
            match: d("", NativeSymbol && NativeSymbol.match || SymbolPolyfill("match")),
            replace: d("", NativeSymbol && NativeSymbol.replace || SymbolPolyfill("replace")),
            search: d("", NativeSymbol && NativeSymbol.search || SymbolPolyfill("search")),
            species: d("", NativeSymbol && NativeSymbol.species || SymbolPolyfill("species")),
            split: d("", NativeSymbol && NativeSymbol.split || SymbolPolyfill("split")),
            toPrimitive: d("", NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill("toPrimitive")),
            toStringTag: d("", NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill("toStringTag")),
            unscopables: d("", NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill("unscopables"))
        }), defineProperties(_HiddenSymbol.prototype, {
            constructor: d(SymbolPolyfill),
            toString: d("", function () {
                return this.__name__;
            })
        }), defineProperties(SymbolPolyfill.prototype, {
            toString: d(function () {
                return "Symbol (" + validateSymbol(this).__description__ + ")";
            }),
            valueOf: d(function () {
                return validateSymbol(this);
            })
        }), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d("", function () {
            return validateSymbol(this);
        })), defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d("c", "Symbol")), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toStringTag])), defineProperty(_HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d("c", SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var d,
            assign = __webpack_require__(12),
            normalizeOpts = __webpack_require__(19),
            isCallable = __webpack_require__(20),
            contains = __webpack_require__(21);
        d = module.exports = function (dscr, value) {
            var c, e, w, options, desc;
            return arguments.length < 2 || "string" != typeof dscr ? (options = value, value = dscr, dscr = null) : options = arguments[2], null == dscr ? (c = w = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e"), w = contains.call(dscr, "w")), desc = {
                value: value,
                configurable: c,
                enumerable: e,
                writable: w
            }, options ? assign(normalizeOpts(options), desc) : desc;
        }, d.gs = function (dscr, get, set) {
            var c, e, options, desc;
            return "string" != typeof dscr ? (options = set, set = get, get = dscr, dscr = null) : options = arguments[3], null == get ? get = void 0 : isCallable(get) ? null == set ? set = void 0 : isCallable(set) || (options = set, set = void 0) : (options = get, get = set = void 0), null == dscr ? (c = !0, e = !1) : (c = contains.call(dscr, "c"), e = contains.call(dscr, "e")), desc = {
                get: get,
                set: set,
                configurable: c,
                enumerable: e
            }, options ? assign(normalizeOpts(options), desc) : desc;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(13)() ? Object.assign : __webpack_require__(14);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            var obj,
                assign = Object.assign;
            return "function" == typeof assign && (obj = {
                foo: "raz"
            }, assign(obj, {
                bar: "dwa"
            }, {
                trzy: "trzy"
            }), obj.foo + obj.bar + obj.trzy === "razdwatrzy");
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var keys = __webpack_require__(15),
            value = __webpack_require__(18),
            max = Math.max;
        module.exports = function (dest, src) {
            var error,
                i,
                assign,
                l = max(arguments.length, 2);
            for (dest = Object(value(dest)), assign = function assign(key) {
                try {
                    dest[key] = src[key];
                } catch (e) {
                    error || (error = e);
                }
            }, i = 1; i < l; ++i) {
                src = arguments[i], keys(src).forEach(assign);
            }if (void 0 !== error) throw error;
            return dest;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(16)() ? Object.keys : __webpack_require__(17);
    }, function (module, exports) {
        "use strict";

        module.exports = function () {
            try {
                return Object.keys("primitive"), !0;
            } catch (e) {
                return !1;
            }
        };
    }, function (module, exports) {
        "use strict";

        var keys = Object.keys;
        module.exports = function (object) {
            return keys(null == object ? object : Object(object));
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (value) {
            if (null == value) throw new TypeError("Cannot use null or undefined");
            return value;
        };
    }, function (module, exports) {
        "use strict";

        var forEach = Array.prototype.forEach,
            create = Object.create,
            process = function process(src, obj) {
            var key;
            for (key in src) {
                obj[key] = src[key];
            }
        };
        module.exports = function (options) {
            var result = create(null);
            return forEach.call(arguments, function (options) {
                null != options && process(Object(options), result);
            }), result;
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (obj) {
            return "function" == typeof obj;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        module.exports = __webpack_require__(22)() ? String.prototype.contains : __webpack_require__(23);
    }, function (module, exports) {
        "use strict";

        var str = "razdwatrzy";
        module.exports = function () {
            return "function" == typeof str.contains && str.contains("dwa") === !0 && str.contains("foo") === !1;
        };
    }, function (module, exports) {
        "use strict";

        var indexOf = String.prototype.indexOf;
        module.exports = function (searchString) {
            return indexOf.call(this, searchString, arguments[1]) > -1;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var isSymbol = __webpack_require__(25);
        module.exports = function (value) {
            if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
            return value;
        };
    }, function (module, exports) {
        "use strict";

        module.exports = function (x) {
            return x && ("symbol" == typeof x || "Symbol" === x["@@toStringTag"]) || !1;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function hydrate(data, cleaned) {
            cleaned.forEach(function (path) {
                var last = path.pop(),
                    obj = path.reduce(function (obj_, attr) {
                    return obj_ ? obj_[attr] : null;
                }, data);
                if (obj && obj[last]) {
                    var replace = {};
                    replace[consts.name] = obj[last].name, replace[consts.type] = obj[last].type, replace[consts.meta] = obj[last].meta, replace[consts.inspected] = !1, obj[last] = replace;
                }
            });
        }
        var consts = __webpack_require__(7);
        module.exports = hydrate;
    }, function (module, exports) {
        "use strict";

        function getPropType(data) {
            if (!data) return null;
            var type = "undefined" == typeof data ? "undefined" : _typeof(data);
            if ("object" === type) {
                if (data._reactFragment) return "react_fragment";
                if (Array.isArray(data)) return "array";
                if (ArrayBuffer.isView(data)) return data instanceof DataView ? "data_view" : "typed_array";
                if (data instanceof ArrayBuffer) return "array_buffer";
                if ("function" == typeof data[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) return "iterator";
                if ("[object Date]" === Object.prototype.toString.call(data)) return "date";
            }
            return type;
        }
        function createDehydrated(type, data, cleaned, path) {
            var meta = {};
            return "array" !== type && "typed_array" !== type || (meta.length = data.length), "iterator" !== type && "typed_array" !== type || (meta.readOnly = !0), cleaned.push(path), {
                type: type,
                meta: meta,
                name: data.constructor && "Object" !== data.constructor.name ? data.constructor.name : ""
            };
        }
        function dehydrate(data, cleaned) {
            var path = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : [],
                level = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0,
                type = getPropType(data);
            switch (type) {
                case "function":
                    return cleaned.push(path), {
                        name: data.name,
                        type: "function"
                    };

                case "string":
                    return data.length <= 500 ? data : data.slice(0, 500) + "...";

                case "symbol":
                    return cleaned.push(path), {
                        type: "symbol",
                        name: data.toString()
                    };

                case "react_fragment":
                    return "A React Fragment";

                case "array_buffer":
                case "data_view":
                    return cleaned.push(path), {
                        type: type,
                        name: "data_view" === type ? "DataView" : "ArrayBuffer",
                        meta: {
                            length: data.byteLength,
                            uninspectable: !0
                        }
                    };

                case "array":
                    return level > 2 ? createDehydrated(type, data, cleaned, path) : data.map(function (item, i) {
                        return dehydrate(item, cleaned, path.concat([i]), level + 1);
                    });

                case "typed_array":
                case "iterator":
                    return createDehydrated(type, data, cleaned, path);

                case "date":
                    return cleaned.push(path), {
                        name: data.toString(),
                        type: "date",
                        meta: {
                            uninspectable: !0
                        }
                    };

                case "object":
                    if (level > 2 || data.constructor && "function" == typeof data.constructor && "Object" !== data.constructor.name) return createDehydrated(type, data, cleaned, path);
                    var res = {};
                    for (var name in data) {
                        res[name] = dehydrate(data[name], cleaned, path.concat([name]), level + 1);
                    }return res;

                default:
                    return data;
            }
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        };
        module.exports = dehydrate;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var performanceNow,
            performance = __webpack_require__(29);
        performanceNow = performance.now ? function () {
            return performance.now();
        } : function () {
            return Date.now();
        }, module.exports = performanceNow;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var performance,
            ExecutionEnvironment = __webpack_require__(30);
        ExecutionEnvironment.canUseDOM && (performance = window.performance || window.msPerformance || window.webkitPerformance), module.exports = performance || {};
    }, function (module, exports) {
        "use strict";

        var canUseDOM = !("undefined" == typeof window || !window.document || !window.document.createElement),
            ExecutionEnvironment = {
            canUseDOM: canUseDOM,
            canUseWorkers: "undefined" != typeof Worker,
            canUseEventListeners: canUseDOM && !(!window.addEventListener && !window.attachEvent),
            canUseViewport: canUseDOM && !!window.screen,
            isInWorker: !canUseDOM
        };
        module.exports = ExecutionEnvironment;
    }, function (module, exports) {
        "use strict";

        function installGlobalHook(window) {
            function detectReactBuildType(renderer) {
                try {
                    var toString = Function.prototype.toString;
                    if ("string" == typeof renderer.version) {
                        if (renderer.bundleType > 0) return "development";
                        var findFiberCode = toString.call(renderer.findFiberByHostInstance);
                        return 0 !== findFiberCode.indexOf("function") ? "production" : findFiberCode.indexOf("getClosestInstanceFromNode") !== -1 ? "unminified" : "production";
                    }
                    if (renderer.Mount && renderer.Mount._renderNewRootComponent) {
                        var renderRootCode = toString.call(renderer.Mount._renderNewRootComponent);
                        return 0 !== renderRootCode.indexOf("function") ? "production" : renderRootCode.indexOf("storedMeasure") !== -1 ? "development" : renderRootCode.indexOf("should be a pure function") !== -1 ? renderRootCode.indexOf("NODE_ENV") !== -1 ? "development" : renderRootCode.indexOf("development") !== -1 ? "development" : renderRootCode.indexOf("true") !== -1 ? "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : "development" : renderRootCode.indexOf("nextElement") !== -1 || renderRootCode.indexOf("nextComponent") !== -1 ? "unminified" : renderRootCode.indexOf("._registerComponent") !== -1 ? "outdated" : "production";
                    }
                } catch (err) {}
                return "production";
            }
            if (!window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
                var hook = {
                    _renderers: {},
                    helpers: {},
                    inject: function inject(renderer) {
                        var id = Math.random().toString(16).slice(2);
                        hook._renderers[id] = renderer;
                        var reactBuildType = detectReactBuildType(renderer);
                        return hook.emit("renderer", {
                            id: id,
                            renderer: renderer,
                            reactBuildType: reactBuildType
                        }), id;
                    },
                    _listeners: {},
                    sub: function sub(evt, fn) {
                        return hook.on(evt, fn), function () {
                            return hook.off(evt, fn);
                        };
                    },
                    on: function on(evt, fn) {
                        hook._listeners[evt] || (hook._listeners[evt] = []), hook._listeners[evt].push(fn);
                    },
                    off: function off(evt, fn) {
                        if (hook._listeners[evt]) {
                            var ix = hook._listeners[evt].indexOf(fn);
                            ix !== -1 && hook._listeners[evt].splice(ix, 1), hook._listeners[evt].length || (hook._listeners[evt] = null);
                        }
                    },
                    emit: function emit(evt, data) {
                        hook._listeners[evt] && hook._listeners[evt].map(function (fn) {
                            return fn(data);
                        });
                    },
                    supportsFiber: !0,
                    _fiberRoots: {},
                    getFiberRoots: function getFiberRoots(rendererID) {
                        var roots = hook._fiberRoots;
                        return roots[rendererID] || (roots[rendererID] = new Set()), roots[rendererID];
                    },
                    onCommitFiberUnmount: function onCommitFiberUnmount(rendererID, fiber) {
                        hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberUnmount(fiber);
                    },
                    onCommitFiberRoot: function onCommitFiberRoot(rendererID, root) {
                        var mountedRoots = hook.getFiberRoots(rendererID),
                            current = root.current,
                            isKnownRoot = mountedRoots.has(root),
                            isUnmounting = null == current.memoizedState || null == current.memoizedState.element;
                        isKnownRoot || isUnmounting ? isKnownRoot && isUnmounting && mountedRoots["delete"](root) : mountedRoots.add(root), hook.helpers[rendererID] && hook.helpers[rendererID].handleCommitFiberRoot(root);
                    }
                };
                Object.defineProperty(window, "__REACT_DEVTOOLS_GLOBAL_HOOK__", {
                    value: hook
                });
            }
        }
        module.exports = installGlobalHook;
    }, function (module, exports) {
        "use strict";

        function installRelayHook(window) {
            function decorate(obj, attr, fn) {
                var old = obj[attr];
                obj[attr] = function () {
                    var res = old.apply(this, arguments);
                    return fn.apply(this, arguments), res;
                };
            }
            function emit(name, data) {
                _eventQueue.push({
                    name: name,
                    data: data
                }), _listener && _listener(name, data);
            }
            function setRequestListener(listener) {
                if (_listener) throw new Error("Relay Devtools: Called only call setRequestListener once.");
                return _listener = listener, _eventQueue.forEach(function (_ref) {
                    var name = _ref.name,
                        data = _ref.data;
                    listener(name, data);
                }), function () {
                    _listener = null;
                };
            }
            function recordRequest(type, start, request, requestNumber) {
                var id = Math.random().toString(16).substr(2);
                request.then(function (response) {
                    emit("relay:success", {
                        id: id,
                        end: performanceNow(),
                        response: response.response
                    });
                }, function (error) {
                    emit("relay:failure", {
                        id: id,
                        end: performanceNow(),
                        error: error
                    });
                });
                for (var textChunks = [], text = request.getQueryString(); text.length > 0;) {
                    textChunks.push(text.substr(0, TEXT_CHUNK_LENGTH)), text = text.substr(TEXT_CHUNK_LENGTH);
                }return {
                    id: id,
                    name: request.getDebugName(),
                    requestNumber: requestNumber,
                    start: start,
                    text: textChunks,
                    type: type,
                    variables: request.getVariables()
                };
            }
            function instrumentRelayRequests(relayInternals) {
                var NetworkLayer = relayInternals.NetworkLayer;
                decorate(NetworkLayer, "sendMutation", function (mutation) {
                    requestNumber++, emit("relay:pending", [recordRequest("mutation", performanceNow(), mutation, requestNumber)]);
                }), decorate(NetworkLayer, "sendQueries", function (queries) {
                    requestNumber++;
                    var start = performanceNow();
                    emit("relay:pending", queries.map(function (query) {
                        return recordRequest("query", start, query, requestNumber);
                    }));
                });
                var instrumented = {};
                for (var key in relayInternals) {
                    relayInternals.hasOwnProperty(key) && (instrumented[key] = relayInternals[key]);
                }return instrumented.setRequestListener = setRequestListener, instrumented;
            }
            var performanceNow,
                performance = window.performance;
            performanceNow = performance && "function" == typeof performance.now ? function () {
                return performance.now();
            } : function () {
                return Date.now();
            };
            var TEXT_CHUNK_LENGTH = 500,
                hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook) {
                var _eventQueue = [],
                    _listener = null,
                    requestNumber = 0,
                    _relayInternals = null;
                Object.defineProperty(hook, "_relayInternals", {
                    configurable: !0,
                    set: function set(relayInternals) {
                        _relayInternals = instrumentRelayRequests(relayInternals);
                    },
                    get: function get() {
                        return _relayInternals;
                    }
                });
            }
        }
        module.exports = installRelayHook;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var setupBackend = __webpack_require__(34);
        module.exports = function (hook, agent) {
            var subs = [hook.sub("renderer-attached", function (_ref) {
                var id = _ref.id,
                    helpers = (_ref.renderer, _ref.helpers);
                agent.setReactInternals(id, helpers), helpers.walkTree(agent.onMounted.bind(agent, id), agent.addRoot.bind(agent, id));
            }), hook.sub("root", function (_ref2) {
                var renderer = _ref2.renderer,
                    internalInstance = _ref2.internalInstance;
                return agent.addRoot(renderer, internalInstance);
            }), hook.sub("mount", function (_ref3) {
                var renderer = _ref3.renderer,
                    internalInstance = _ref3.internalInstance,
                    data = _ref3.data;
                return agent.onMounted(renderer, internalInstance, data);
            }), hook.sub("update", function (_ref4) {
                var internalInstance = (_ref4.renderer, _ref4.internalInstance),
                    data = _ref4.data;
                return agent.onUpdated(internalInstance, data);
            }), hook.sub("unmount", function (_ref5) {
                var internalInstance = (_ref5.renderer, _ref5.internalInstance);
                return agent.onUnmounted(internalInstance);
            })],
                success = setupBackend(hook);
            success && (hook.emit("react-devtools", agent), hook.reactDevtoolsAgent = agent, agent.on("shutdown", function () {
                subs.forEach(function (fn) {
                    return fn();
                }), hook.reactDevtoolsAgent = null;
            }));
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var attachRenderer = __webpack_require__(35);
        module.exports = function (hook) {
            var oldReact = window.React && window.React.__internals;
            oldReact && 0 === Object.keys(hook._renderers).length && hook.inject(oldReact);
            for (var rid in hook._renderers) {
                hook.helpers[rid] = attachRenderer(hook, rid, hook._renderers[rid]), hook.emit("renderer-attached", {
                    id: rid,
                    renderer: hook._renderers[rid],
                    helpers: hook.helpers[rid]
                });
            }hook.on("renderer", function (_ref) {
                var id = _ref.id,
                    renderer = _ref.renderer;
                hook.helpers[id] = attachRenderer(hook, id, renderer), hook.emit("renderer-attached", {
                    id: id,
                    renderer: renderer,
                    helpers: hook.helpers[id]
                });
            });
            var shutdown = function shutdown() {
                for (var id in hook.helpers) {
                    hook.helpers[id].cleanup();
                }hook.off("shutdown", shutdown);
            };
            return hook.on("shutdown", shutdown), !0;
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function attachRenderer(hook, rid, renderer) {
            var rootNodeIDMap = new Map(),
                extras = {},
                isPre013 = !renderer.Reconciler;
            if ("function" == typeof renderer.findFiberByHostInstance) return attachRendererFiber(hook, rid, renderer);
            renderer.Mount.findNodeHandle && renderer.Mount.nativeTagToRootNodeID ? (extras.getNativeFromReactElement = function (component) {
                return renderer.Mount.findNodeHandle(component);
            }, extras.getReactElementFromNative = function (nativeTag) {
                var id = renderer.Mount.nativeTagToRootNodeID(nativeTag);
                return rootNodeIDMap.get(id);
            }) : renderer.ComponentTree ? (extras.getNativeFromReactElement = function (component) {
                return renderer.ComponentTree.getNodeFromInstance(component);
            }, extras.getReactElementFromNative = function (node) {
                return renderer.ComponentTree.getClosestInstanceFromNode(node);
            }) : renderer.Mount.getID && renderer.Mount.getNode ? (extras.getNativeFromReactElement = function (component) {
                try {
                    return renderer.Mount.getNode(component._rootNodeID);
                } catch (e) {
                    return;
                }
            }, extras.getReactElementFromNative = function (node) {
                for (var id = renderer.Mount.getID(node); node && node.parentNode && !id;) {
                    node = node.parentNode, id = renderer.Mount.getID(node);
                }return rootNodeIDMap.get(id);
            }) : console.warn("Unknown react version (does not have getID), probably an unshimmed React Native");
            var oldMethods, oldRenderComponent, oldRenderRoot;
            return renderer.Mount._renderNewRootComponent ? oldRenderRoot = decorateResult(renderer.Mount, "_renderNewRootComponent", function (internalInstance) {
                hook.emit("root", {
                    renderer: rid,
                    internalInstance: internalInstance
                });
            }) : renderer.Mount.renderComponent && (oldRenderComponent = decorateResult(renderer.Mount, "renderComponent", function (internalInstance) {
                hook.emit("root", {
                    renderer: rid,
                    internalInstance: internalInstance._reactInternalInstance
                });
            })), renderer.Component ? (console.error("You are using a version of React with limited support in this version of the devtools.\nPlease upgrade to use at least 0.13, or you can downgrade to use the old version of the devtools:\ninstructions here https://github.com/facebook/react-devtools/tree/devtools-next#how-do-i-use-this-for-react--013"), oldMethods = decorateMany(renderer.Component.Mixin, {
                mountComponent: function mountComponent() {
                    var _this = this;
                    rootNodeIDMap.set(this._rootNodeID, this), setTimeout(function () {
                        hook.emit("mount", {
                            internalInstance: _this,
                            data: getData012(_this),
                            renderer: rid
                        });
                    }, 0);
                },
                updateComponent: function updateComponent() {
                    var _this2 = this;
                    setTimeout(function () {
                        hook.emit("update", {
                            internalInstance: _this2,
                            data: getData012(_this2),
                            renderer: rid
                        });
                    }, 0);
                },
                unmountComponent: function unmountComponent() {
                    hook.emit("unmount", {
                        internalInstance: this,
                        renderer: rid
                    }), rootNodeIDMap["delete"](this._rootNodeID, this);
                }
            })) : renderer.Reconciler && (oldMethods = decorateMany(renderer.Reconciler, {
                mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
                    var data = getData(internalInstance);
                    rootNodeIDMap.set(internalInstance._rootNodeID, internalInstance), hook.emit("mount", {
                        internalInstance: internalInstance,
                        data: data,
                        renderer: rid
                    });
                },
                performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, nextChild, transaction, context) {
                    hook.emit("update", {
                        internalInstance: internalInstance,
                        data: getData(internalInstance),
                        renderer: rid
                    });
                },
                receiveComponent: function receiveComponent(internalInstance, nextChild, transaction, context) {
                    hook.emit("update", {
                        internalInstance: internalInstance,
                        data: getData(internalInstance),
                        renderer: rid
                    });
                },
                unmountComponent: function unmountComponent(internalInstance) {
                    hook.emit("unmount", {
                        internalInstance: internalInstance,
                        renderer: rid
                    }), rootNodeIDMap["delete"](internalInstance._rootNodeID, internalInstance);
                }
            })), extras.walkTree = function (visit, visitRoot) {
                var onMount = function onMount(component, data) {
                    rootNodeIDMap.set(component._rootNodeID, component), visit(component, data);
                };
                walkRoots(renderer.Mount._instancesByReactRootID || renderer.Mount._instancesByContainerID, onMount, visitRoot, isPre013);
            }, extras.cleanup = function () {
                oldMethods && (renderer.Component ? restoreMany(renderer.Component.Mixin, oldMethods) : restoreMany(renderer.Reconciler, oldMethods)), oldRenderRoot && (renderer.Mount._renderNewRootComponent = oldRenderRoot), oldRenderComponent && (renderer.Mount.renderComponent = oldRenderComponent), oldMethods = null, oldRenderRoot = null, oldRenderComponent = null;
            }, extras;
        }
        function walkRoots(roots, onMount, onRoot, isPre013) {
            for (var name in roots) {
                walkNode(roots[name], onMount, isPre013), onRoot(roots[name]);
            }
        }
        function walkNode(internalInstance, onMount, isPre013) {
            var data = isPre013 ? getData012(internalInstance) : getData(internalInstance);
            data.children && Array.isArray(data.children) && data.children.forEach(function (child) {
                return walkNode(child, onMount, isPre013);
            }), onMount(internalInstance, data);
        }
        function decorateResult(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function (instance) {
                var res = old.apply(this, arguments);
                return fn(res), res;
            }, old;
        }
        function decorate(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function (instance) {
                var res = old.apply(this, arguments);
                return fn.apply(this, arguments), res;
            }, old;
        }
        function decorateMany(source, fns) {
            var olds = {};
            for (var name in fns) {
                olds[name] = decorate(source, name, fns[name]);
            }return olds;
        }
        function restoreMany(source, olds) {
            for (var name in olds) {
                source[name] = olds[name];
            }
        }
        var getData = __webpack_require__(36),
            getData012 = __webpack_require__(39),
            attachRendererFiber = __webpack_require__(40);
        module.exports = attachRenderer;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getData(internalInstance) {
            var children = null,
                props = null,
                state = null,
                context = null,
                updater = null,
                name = null,
                type = null,
                key = null,
                ref = null,
                source = null,
                text = null,
                publicInstance = null,
                nodeType = "Native";
            if ("object" !== ("undefined" == typeof internalInstance ? "undefined" : _typeof(internalInstance)) ? (nodeType = "Text", text = internalInstance + "") : null === internalInstance._currentElement || internalInstance._currentElement === !1 ? nodeType = "Empty" : internalInstance._renderedComponent ? (nodeType = "NativeWrapper", children = [internalInstance._renderedComponent], props = internalInstance._instance.props, state = internalInstance._instance.state, context = internalInstance._instance.context, context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? children = childrenList(internalInstance._renderedChildren) : internalInstance._currentElement && internalInstance._currentElement.props && (children = internalInstance._currentElement.props.children), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), null != internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), source = internalInstance._currentElement._source, ref = internalInstance._currentElement.ref, "string" == typeof type ? (name = type, null != internalInstance._nativeNode && (publicInstance = internalInstance._nativeNode), null != internalInstance._hostNode && (publicInstance = internalInstance._hostNode)) : "function" == typeof type ? (nodeType = "Composite", name = getDisplayName(type), internalInstance._renderedComponent && (internalInstance._currentElement.props === internalInstance._renderedComponent._currentElement || internalInstance._currentElement.type.isReactTopLevelWrapper) && (nodeType = "Wrapper"), null === name && (name = "No display name")) : "string" == typeof internalInstance._stringText ? (nodeType = "Text", text = internalInstance._stringText) : name = getDisplayName(type)), internalInstance._instance) {
                var inst = internalInstance._instance;
                updater = {
                    setState: inst.setState && inst.setState.bind(inst),
                    forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                    setInProps: inst.forceUpdate && setInProps.bind(null, internalInstance),
                    setInState: inst.forceUpdate && setInState.bind(null, inst),
                    setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                }, "function" == typeof type && (publicInstance = inst), inst._renderedChildren && (children = childrenList(inst._renderedChildren));
            }
            return "function" == typeof internalInstance.setNativeProps && (updater = {
                setNativeProps: function setNativeProps(nativeProps) {
                    internalInstance.setNativeProps(nativeProps);
                }
            }), {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: source,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(internalInst, path, value) {
            var element = internalInst._currentElement;
            internalInst._currentElement = _extends({}, element, {
                props: copyWithSet(element.props, path, value)
            }), internalInst._instance.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        function childrenList(children) {
            var res = [];
            for (var name in children) {
                res.push(children[name]);
            }return res;
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        },
            _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            copyWithSet = __webpack_require__(37),
            getDisplayName = __webpack_require__(38);
        module.exports = getData;
    }, function (module, exports) {
        "use strict";

        function copyWithSetImpl(obj, path, idx, value) {
            if (idx >= path.length) return value;
            var key = path[idx],
                updated = Array.isArray(obj) ? obj.slice() : _extends({}, obj);
            return updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value), updated;
        }
        function copyWithSet(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
        }
        var _extends = Object.assign || function (target) {
            for (var i = 1; i < arguments.length; i++) {
                var source = arguments[i];
                for (var key in source) {
                    Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
                }
            }
            return target;
        };
        module.exports = copyWithSet;
    }, function (module, exports) {
        "use strict";

        function getDisplayName(type) {
            if (cachedDisplayNames.has(type)) return cachedDisplayNames.get(type);
            var displayName = type.displayName || type.name;
            if ("function" == typeof displayName) try {
                displayName = displayName();
            } catch (error) {}
            displayName && "string" == typeof displayName || (displayName = "Unknown");
            var match = displayName.match(FB_MODULE_RE);
            if (match) {
                var componentName = match[1],
                    moduleName = match[2];
                componentName && moduleName && (moduleName === componentName || moduleName.startsWith(componentName + ".")) && (displayName = componentName);
            }
            return cachedDisplayNames.set(type, displayName), displayName;
        }
        var FB_MODULE_RE = /^(.*) \[from (.*)\]$/,
            cachedDisplayNames = new WeakMap();
        module.exports = getDisplayName;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getData012(internalInstance) {
            var children = null,
                props = internalInstance.props,
                state = internalInstance.state,
                context = internalInstance.context,
                updater = null,
                name = null,
                type = null,
                key = null,
                ref = null,
                text = null,
                publicInstance = null,
                nodeType = "Native";
            return internalInstance._renderedComponent ? (nodeType = "Wrapper", children = [internalInstance._renderedComponent], context && 0 === Object.keys(context).length && (context = null)) : internalInstance._renderedChildren ? (name = internalInstance.constructor.displayName, children = childrenList(internalInstance._renderedChildren)) : "string" == typeof props.children && (name = internalInstance.constructor.displayName, children = props.children, nodeType = "Native"), !props && internalInstance._currentElement && internalInstance._currentElement.props && (props = internalInstance._currentElement.props), internalInstance._currentElement && (type = internalInstance._currentElement.type, internalInstance._currentElement.key && (key = String(internalInstance._currentElement.key)), ref = internalInstance._currentElement.ref, "string" == typeof type ? name = type : (nodeType = "Composite", name = type.displayName, name || (name = "No display name"))), name || (name = internalInstance.constructor.displayName || "No display name", nodeType = "Composite"), "string" == typeof props && (nodeType = "Text", text = props, props = null, name = null), internalInstance.forceUpdate && (updater = {
                setState: internalInstance.setState.bind(internalInstance),
                forceUpdate: internalInstance.forceUpdate.bind(internalInstance),
                setInProps: internalInstance.forceUpdate && setInProps.bind(null, internalInstance),
                setInState: internalInstance.forceUpdate && setInState.bind(null, internalInstance),
                setInContext: internalInstance.forceUpdate && setInContext.bind(null, internalInstance)
            }, publicInstance = internalInstance), {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: null,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(inst, path, value) {
            inst.props = copyWithSet(inst.props, path, value), inst.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        function childrenList(children) {
            var res = [];
            for (var name in children) {
                res.push(children[name]);
            }return res;
        }
        var copyWithSet = __webpack_require__(37);
        module.exports = getData012;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function attachRendererFiber(hook, rid, renderer) {
            function getOpaqueNode(fiber) {
                if (opaqueNodes.has(fiber)) return fiber;
                var alternate = fiber.alternate;
                return null != alternate && opaqueNodes.has(alternate) ? alternate : (opaqueNodes.add(fiber), fiber);
            }
            function hasDataChanged(prevFiber, nextFiber) {
                if (prevFiber.tag === ClassComponent) {
                    if ((nextFiber.effectTag & PerformedWork) !== PerformedWork) return !1;
                    if (prevFiber.stateNode.context !== nextFiber.stateNode.context) return !0;
                    if (null != nextFiber.updateQueue && nextFiber.updateQueue.hasForceUpdate) return !0;
                }
                return prevFiber.memoizedProps !== nextFiber.memoizedProps || prevFiber.memoizedState !== nextFiber.memoizedState || prevFiber.ref !== nextFiber.ref || prevFiber._debugSource !== nextFiber._debugSource;
            }
            function flushPendingEvents() {
                var events = pendingEvents;
                pendingEvents = [];
                for (var i = 0; i < events.length; i++) {
                    var event = events[i];
                    hook.emit(event.type, event);
                }
            }
            function enqueueMount(fiber) {
                pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    data: getDataFiber(fiber, getOpaqueNode),
                    renderer: rid,
                    type: "mount"
                });
                var isRoot = fiber.tag === HostRoot;
                isRoot && pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    renderer: rid,
                    type: "root"
                });
            }
            function enqueueUpdateIfNecessary(fiber, hasChildOrderChanged) {
                (hasChildOrderChanged || hasDataChanged(fiber.alternate, fiber)) && pendingEvents.push({
                    internalInstance: getOpaqueNode(fiber),
                    data: getDataFiber(fiber, getOpaqueNode),
                    renderer: rid,
                    type: "update"
                });
            }
            function enqueueUnmount(fiber) {
                var isRoot = fiber.tag === HostRoot,
                    opaqueNode = getOpaqueNode(fiber),
                    event = {
                    internalInstance: opaqueNode,
                    renderer: rid,
                    type: "unmount"
                };
                isRoot ? pendingEvents.push(event) : pendingEvents.unshift(event), opaqueNodes["delete"](opaqueNode);
            }
            function mountFiber(fiber) {
                var node = fiber;
                outer: for (;;) {
                    if (node.child) node.child["return"] = node, node = node.child;else {
                        if (enqueueMount(node), node == fiber) return;
                        if (!node.sibling) {
                            for (; node["return"];) {
                                if (node = node["return"], enqueueMount(node), node == fiber) return;
                                if (node.sibling) {
                                    node.sibling["return"] = node["return"], node = node.sibling;
                                    continue outer;
                                }
                            }
                            return;
                        }
                        node.sibling["return"] = node["return"], node = node.sibling;
                    }
                }
            }
            function updateFiber(nextFiber, prevFiber) {
                var hasChildOrderChanged = !1;
                if (nextFiber.child !== prevFiber.child) {
                    for (var nextChild = nextFiber.child, prevChildAtSameIndex = prevFiber.child; nextChild;) {
                        if (nextChild.alternate) {
                            var prevChild = nextChild.alternate;
                            updateFiber(nextChild, prevChild), hasChildOrderChanged || prevChild === prevChildAtSameIndex || (hasChildOrderChanged = !0);
                        } else mountFiber(nextChild), hasChildOrderChanged || (hasChildOrderChanged = !0);
                        nextChild = nextChild.sibling, hasChildOrderChanged || null == prevChildAtSameIndex || (prevChildAtSameIndex = prevChildAtSameIndex.sibling);
                    }
                    hasChildOrderChanged || null == prevChildAtSameIndex || (hasChildOrderChanged = !0);
                }
                enqueueUpdateIfNecessary(nextFiber, hasChildOrderChanged);
            }
            function walkTree() {
                hook.getFiberRoots(rid).forEach(function (root) {
                    mountFiber(root.current);
                }), flushPendingEvents();
            }
            function cleanup() {}
            function handleCommitFiberUnmount(fiber) {
                enqueueUnmount(fiber);
            }
            function handleCommitFiberRoot(root) {
                var current = root.current,
                    alternate = current.alternate;
                if (alternate) {
                    var wasMounted = null != alternate.memoizedState && null != alternate.memoizedState.element,
                        isMounted = null != current.memoizedState && null != current.memoizedState.element;
                    !wasMounted && isMounted ? mountFiber(current) : wasMounted && isMounted ? updateFiber(current, alternate) : wasMounted && !isMounted && enqueueUnmount(current);
                } else mountFiber(current);
                flushPendingEvents();
            }
            function getNativeFromReactElement(fiber) {
                try {
                    var opaqueNode = fiber,
                        hostInstance = renderer.findHostInstanceByFiber(opaqueNode);
                    return hostInstance;
                } catch (err) {
                    return null;
                }
            }
            function getReactElementFromNative(hostInstance) {
                var fiber = renderer.findFiberByHostInstance(hostInstance);
                if (null != fiber) {
                    var opaqueNode = getOpaqueNode(fiber);
                    return opaqueNode;
                }
                return null;
            }
            var opaqueNodes = new Set(),
                pendingEvents = [];
            return {
                getNativeFromReactElement: getNativeFromReactElement,
                getReactElementFromNative: getReactElementFromNative,
                handleCommitFiberRoot: handleCommitFiberRoot,
                handleCommitFiberUnmount: handleCommitFiberUnmount,
                cleanup: cleanup,
                walkTree: walkTree
            };
        }
        var getDataFiber = __webpack_require__(41),
            _require = __webpack_require__(42),
            ClassComponent = _require.ClassComponent,
            HostRoot = _require.HostRoot,
            PerformedWork = 1;
        module.exports = attachRendererFiber;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function getDataFiber(fiber, getOpaqueNode) {
            var type = fiber.type,
                key = fiber.key,
                ref = fiber.ref,
                source = fiber._debugSource,
                publicInstance = null,
                props = null,
                state = null,
                children = null,
                context = null,
                updater = null,
                nodeType = null,
                name = null,
                text = null;
            switch (fiber.tag) {
                case FunctionalComponent:
                case ClassComponent:
                    nodeType = "Composite", name = getDisplayName(fiber.type), publicInstance = fiber.stateNode, props = fiber.memoizedProps, state = fiber.memoizedState, null != publicInstance && (context = publicInstance.context, context && 0 === Object.keys(context).length && (context = null));
                    var inst = publicInstance;
                    inst && (updater = {
                        setState: inst.setState && inst.setState.bind(inst),
                        forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
                        setInProps: inst.forceUpdate && setInProps.bind(null, fiber),
                        setInState: inst.forceUpdate && setInState.bind(null, inst),
                        setInContext: inst.forceUpdate && setInContext.bind(null, inst)
                    }), children = [];
                    break;

                case HostRoot:
                    nodeType = "Wrapper", children = [];
                    break;

                case HostPortal:
                    nodeType = "Portal", name = "ReactPortal", props = {
                        target: fiber.stateNode.containerInfo
                    }, children = [];
                    break;

                case HostComponent:
                    nodeType = "Native", name = fiber.type, name = name.replace("topsecret-", ""), publicInstance = fiber.stateNode, props = fiber.memoizedProps, children = "string" == typeof props.children || "number" == typeof props.children ? props.children.toString() : [], "function" == typeof fiber.stateNode.setNativeProps && (updater = {
                        setNativeProps: function setNativeProps(nativeProps) {
                            fiber.stateNode.setNativeProps(nativeProps);
                        }
                    });
                    break;

                case HostText:
                    nodeType = "Text", text = fiber.memoizedProps;
                    break;

                case Fragment:
                    nodeType = "Wrapper", children = [];
                    break;

                default:
                    nodeType = "Native", props = fiber.memoizedProps, name = "TODO_NOT_IMPLEMENTED_YET", children = [];
            }
            if (Array.isArray(children)) for (var child = fiber.child; child;) {
                children.push(getOpaqueNode(child)), child = child.sibling;
            }return {
                nodeType: nodeType,
                type: type,
                key: key,
                ref: ref,
                source: source,
                name: name,
                props: props,
                state: state,
                context: context,
                children: children,
                text: text,
                updater: updater,
                publicInstance: publicInstance
            };
        }
        function setInProps(fiber, path, value) {
            var inst = fiber.stateNode;
            fiber.pendingProps = copyWithSet(inst.props, path, value), fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps), fiber.stateNode.forceUpdate();
        }
        function setInState(inst, path, value) {
            setIn(inst.state, path, value), inst.forceUpdate();
        }
        function setInContext(inst, path, value) {
            setIn(inst.context, path, value), inst.forceUpdate();
        }
        function setIn(obj, path, value) {
            var last = path.pop(),
                parent = path.reduce(function (obj_, attr) {
                return obj_ ? obj_[attr] : null;
            }, obj);
            parent && (parent[last] = value);
        }
        var copyWithSet = __webpack_require__(37),
            getDisplayName = __webpack_require__(38),
            _require = __webpack_require__(42),
            FunctionalComponent = _require.FunctionalComponent,
            ClassComponent = _require.ClassComponent,
            HostRoot = _require.HostRoot,
            HostPortal = _require.HostPortal,
            HostComponent = _require.HostComponent,
            HostText = _require.HostText,
            Fragment = _require.Fragment;
        module.exports = getDataFiber;
    }, function (module, exports) {
        "use strict";

        module.exports = {
            IndeterminateComponent: 0,
            FunctionalComponent: 1,
            ClassComponent: 2,
            HostRoot: 3,
            HostPortal: 4,
            HostComponent: 5,
            HostText: 6,
            CoroutineComponent: 7,
            CoroutineHandlerPhase: 8,
            YieldComponent: 9,
            Fragment: 10
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _defineProperty(obj, key, value) {
            return key in obj ? Object.defineProperty(obj, key, {
                value: value,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }) : obj[key] = value, obj;
        }
        function measureStyle(agent, bridge, resolveRNStyle, id) {
            var node = agent.elementData.get(id);
            if (!node || !node.props) return void bridge.send("rn-style:measure", {});
            var style = resolveRNStyle(node.props.style);
            styleOverridesByHostComponentId[id] && (style = babelHelpers.extends({}, style, styleOverridesByHostComponentId[id]));
            var instance = node.publicInstance;
            return instance && instance.measure ? void instance.measure(function (x, y, width, height, left, top) {
                if ("number" != typeof x) return void bridge.send("rn-style:measure", {
                    style: style
                });
                var margin = style && resolveBoxStyle("margin", style) || blank,
                    padding = style && resolveBoxStyle("padding", style) || blank;
                bridge.send("rn-style:measure", {
                    style: style,
                    measuredLayout: {
                        x: x,
                        y: y,
                        width: width,
                        height: height,
                        left: left,
                        top: top,
                        margin: margin,
                        padding: padding
                    }
                });
            }) : void bridge.send("rn-style:measure", {
                style: style
            });
        }
        function shallowClone(obj) {
            var nobj = {};
            for (var n in obj) {
                nobj[n] = obj[n];
            }return nobj;
        }
        function renameStyle(agent, id, oldName, newName, val) {
            var _ref3,
                data = agent.elementData.get(id),
                newStyle = newName ? (_ref3 = {}, _defineProperty(_ref3, oldName, void 0), _defineProperty(_ref3, newName, val), _ref3) : _defineProperty({}, oldName, void 0);
            if (data && data.updater && data.updater.setInProps) {
                var customStyle,
                    style = data && data.props && data.props.style;
                if (Array.isArray(style)) {
                    var lastLength = style.length - 1;
                    "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : (customStyle = shallowClone(style[lastLength]), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style", lastLength], customStyle));
                } else "object" === ("undefined" == typeof style ? "undefined" : _typeof(style)) ? (customStyle = shallowClone(style), delete customStyle[oldName], newName ? customStyle[newName] = val : customStyle[oldName] = void 0, data.updater.setInProps(["style"], customStyle)) : (style = [style, newStyle], data.updater.setInProps(["style"], style));
            } else {
                if (!(data && data.updater && data.updater.setNativeProps)) return;
                styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                    style: newStyle
                });
            }
            agent.emit("hideHighlight");
        }
        function setStyle(agent, id, attr, val) {
            var data = agent.elementData.get(id),
                newStyle = _defineProperty({}, attr, val);
            if (data && data.updater && data.updater.setInProps) {
                var style = data.props && data.props.style;
                if (Array.isArray(style)) {
                    var lastLength = style.length - 1;
                    "object" !== _typeof(style[lastLength]) || Array.isArray(style[lastLength]) ? (style = style.concat([newStyle]), data.updater.setInProps(["style"], style)) : data.updater.setInProps(["style", lastLength, attr], val);
                } else style = [style, newStyle], data.updater.setInProps(["style"], style);
            } else {
                if (!(data && data.updater && data.updater.setNativeProps)) return;
                styleOverridesByHostComponentId[id] ? babelHelpers.extends(styleOverridesByHostComponentId[id], newStyle) : styleOverridesByHostComponentId[id] = newStyle, data.updater.setNativeProps({
                    style: newStyle
                });
            }
            agent.emit("hideHighlight");
        }
        var _typeof = "function" == typeof Symbol && "symbol" == typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
        },
            resolveBoxStyle = __webpack_require__(44),
            styleOverridesByHostComponentId = {};
        module.exports = function (bridge, agent, resolveRNStyle) {
            bridge.onCall("rn-style:get", function (id) {
                var node = agent.elementData.get(id);
                return node && node.props ? resolveRNStyle(node.props.style) : null;
            }), bridge.on("rn-style:measure", function (id) {
                measureStyle(agent, bridge, resolveRNStyle, id);
            }), bridge.on("rn-style:rename", function (_ref) {
                var id = _ref.id,
                    oldName = _ref.oldName,
                    newName = _ref.newName,
                    val = _ref.val;
                renameStyle(agent, id, oldName, newName, val), setTimeout(function () {
                    return measureStyle(agent, bridge, resolveRNStyle, id);
                });
            }), bridge.on("rn-style:set", function (_ref2) {
                var id = _ref2.id,
                    attr = _ref2.attr,
                    val = _ref2.val;
                setStyle(agent, id, attr, val), setTimeout(function () {
                    return measureStyle(agent, bridge, resolveRNStyle, id);
                });
            });
        };
        var blank = {
            top: 0,
            left: 0,
            right: 0,
            bottom: 0
        };
    }, function (module, exports) {
        "use strict";

        function resolveBoxStyle(prefix, style) {
            var res = {},
                subs = ["top", "left", "bottom", "right"],
                set = !1;
            return subs.forEach(function (sub) {
                res[sub] = style[prefix] || 0;
            }), style[prefix] && (set = !0), style[prefix + "Vertical"] && (res.top = res.bottom = style[prefix + "Vertical"], set = !0), style[prefix + "Horizontal"] && (res.left = res.right = style[prefix + "Horizontal"], set = !0), subs.forEach(function (sub) {
                var val = style[prefix + capFirst(sub)];
                val && (res[sub] = val, set = !0);
            }), set ? res : null;
        }
        function capFirst(text) {
            return text[0].toUpperCase() + text.slice(1);
        }
        module.exports = resolveBoxStyle;
    }, function (module, exports) {
        "use strict";

        function decorate(obj, attr, fn) {
            var old = obj[attr];
            return obj[attr] = function () {
                var res = old.apply(this, arguments);
                return fn.apply(this, arguments), res;
            }, function () {
                obj[attr] = old;
            };
        }
        var subscriptionEnabled = !1;
        module.exports = function (bridge, agent, hook) {
            function sendStoreData() {
                subscriptionEnabled && bridge.send("relay:store", {
                    id: "relay:store",
                    nodes: DefaultStoreData.getNodeData()
                });
            }
            var shouldEnable = !!hook._relayInternals;
            if (bridge.onCall("relay:check", function () {
                return shouldEnable;
            }), shouldEnable) {
                var _hook$_relayInternals = hook._relayInternals,
                    DefaultStoreData = _hook$_relayInternals.DefaultStoreData,
                    setRequestListener = _hook$_relayInternals.setRequestListener;
                bridge.onCall("relay:store:enable", function () {
                    subscriptionEnabled = !0, sendStoreData();
                }), bridge.onCall("relay:store:disable", function () {
                    subscriptionEnabled = !1;
                }), sendStoreData(), decorate(DefaultStoreData, "handleUpdatePayload", sendStoreData), decorate(DefaultStoreData, "handleQueryPayload", sendStoreData);
                var removeListener = setRequestListener(function (event, data) {
                    bridge.send(event, data);
                });
                hook.on("shutdown", removeListener);
            }
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        var Highlighter = __webpack_require__(47);
        module.exports = function (agent) {
            var hl = new Highlighter(window, function (node) {
                agent.selectFromDOMNode(node);
            });
            agent.on("highlight", function (data) {
                return hl.highlight(data.node, data.name);
            }), agent.on("highlightMany", function (nodes) {
                return hl.highlightMany(nodes);
            }), agent.on("hideHighlight", function () {
                return hl.hideHighlight();
            }), agent.on("refreshMultiOverlay", function () {
                return hl.refreshMultiOverlay();
            }), agent.on("startInspecting", function () {
                return hl.startInspecting();
            }), agent.on("stopInspecting", function () {
                return hl.stopInspecting();
            }), agent.on("shutdown", function () {
                hl.remove();
            });
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function captureSubscription(obj, evt, cb) {
            return obj.addEventListener(evt, cb, !0), function () {
                return obj.removeEventListener(evt, cb, !0);
            };
        }
        function makeMagnifier() {
            var button = window.document.createElement("button");
            return button.innerHTML = "&#128269;", button.style.backgroundColor = "transparent", button.style.border = "none", button.style.outline = "none", button.style.cursor = "pointer", button.style.position = "fixed", button.style.bottom = "10px", button.style.right = "10px", button.style.fontSize = "30px", button.style.zIndex = 1e7, button;
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            Overlay = __webpack_require__(48),
            MultiOverlay = __webpack_require__(50),
            Highlighter = function () {
            function Highlighter(win, onSelect) {
                _classCallCheck(this, Highlighter), this._win = win, this._onSelect = onSelect, this._overlay = null, this._multiOverlay = null, this._subs = [];
            }
            return _createClass(Highlighter, [{
                key: "startInspecting",
                value: function value() {
                    this._inspecting = !0, this._subs = [captureSubscription(this._win, "mouseover", this.onHover.bind(this)), captureSubscription(this._win, "mousedown", this.onMouseDown.bind(this)), captureSubscription(this._win, "click", this.onClick.bind(this))];
                }
            }, {
                key: "stopInspecting",
                value: function value() {
                    this._subs.forEach(function (unsub) {
                        return unsub();
                    }), this.hideHighlight();
                }
            }, {
                key: "remove",
                value: function value() {
                    this.stopInspecting(), this._button && this._button.parentNode && this._button.parentNode.removeChild(this._button);
                }
            }, {
                key: "highlight",
                value: function value(node, name) {
                    this.removeMultiOverlay(), node.nodeType !== Node.COMMENT_NODE && (this._overlay || (this._overlay = new Overlay(this._win)), this._overlay.inspect(node, name));
                }
            }, {
                key: "highlightMany",
                value: function value(nodes) {
                    this.removeOverlay(), this._multiOverlay || (this._multiOverlay = new MultiOverlay(this._win)), this._multiOverlay.highlightMany(nodes);
                }
            }, {
                key: "hideHighlight",
                value: function value() {
                    this._inspecting = !1, this.removeOverlay(), this.removeMultiOverlay();
                }
            }, {
                key: "refreshMultiOverlay",
                value: function value() {
                    this._multiOverlay && this._multiOverlay.refresh();
                }
            }, {
                key: "removeOverlay",
                value: function value() {
                    this._overlay && (this._overlay.remove(), this._overlay = null);
                }
            }, {
                key: "removeMultiOverlay",
                value: function value() {
                    this._multiOverlay && (this._multiOverlay.remove(), this._multiOverlay = null);
                }
            }, {
                key: "onMouseDown",
                value: function value(evt) {
                    this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this._onSelect(evt.target));
                }
            }, {
                key: "onClick",
                value: function value(evt) {
                    this._inspecting && (this._subs.forEach(function (unsub) {
                        return unsub();
                    }), evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.hideHighlight());
                }
            }, {
                key: "onHover",
                value: function value(evt) {
                    this._inspecting && (evt.preventDefault(), evt.stopPropagation(), evt.cancelBubble = !0, this.highlight(evt.target));
                }
            }, {
                key: "injectButton",
                value: function value() {
                    this._button = makeMagnifier(), this._button.onclick = this.startInspecting.bind(this), this._win.document.body.appendChild(this._button);
                }
            }]), Highlighter;
        }();
        module.exports = Highlighter;
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        function findTipPos(dims, win) {
            var top,
                tipHeight = 20,
                margin = 5;
            return top = dims.top + dims.height + tipHeight <= win.innerHeight ? dims.top + dims.height < 0 ? margin : dims.top + dims.height + margin : dims.top - tipHeight <= win.innerHeight ? dims.top - tipHeight - margin < margin ? margin : dims.top - tipHeight - margin : win.innerHeight - tipHeight - margin, top += "px", dims.left < 0 ? {
                top: top,
                left: margin
            } : dims.left + 200 > win.innerWidth ? {
                top: top,
                right: margin
            } : {
                top: top,
                left: dims.left + margin + "px"
            };
        }
        function getElementDimensions(domElement) {
            var calculatedStyle = window.getComputedStyle(domElement);
            return {
                borderLeft: +calculatedStyle.borderLeftWidth.match(/[0-9]*/)[0],
                borderRight: +calculatedStyle.borderRightWidth.match(/[0-9]*/)[0],
                borderTop: +calculatedStyle.borderTopWidth.match(/[0-9]*/)[0],
                borderBottom: +calculatedStyle.borderBottomWidth.match(/[0-9]*/)[0],
                marginLeft: +calculatedStyle.marginLeft.match(/[0-9]*/)[0],
                marginRight: +calculatedStyle.marginRight.match(/[0-9]*/)[0],
                marginTop: +calculatedStyle.marginTop.match(/[0-9]*/)[0],
                marginBottom: +calculatedStyle.marginBottom.match(/[0-9]*/)[0],
                paddingLeft: +calculatedStyle.paddingLeft.match(/[0-9]*/)[0],
                paddingRight: +calculatedStyle.paddingRight.match(/[0-9]*/)[0],
                paddingTop: +calculatedStyle.paddingTop.match(/[0-9]*/)[0],
                paddingBottom: +calculatedStyle.paddingBottom.match(/[0-9]*/)[0]
            };
        }
        function getOwnerWindow(node) {
            return node.ownerDocument ? node.ownerDocument.defaultView : null;
        }
        function getOwnerIframe(node) {
            var nodeWindow = getOwnerWindow(node);
            return nodeWindow ? nodeWindow.frameElement : null;
        }
        function getBoundingClientRectWithBorderOffset(node) {
            var dimensions = getElementDimensions(node);
            return mergeRectOffsets([node.getBoundingClientRect(), {
                top: dimensions.borderTop,
                left: dimensions.borderLeft,
                bottom: dimensions.borderBottom,
                right: dimensions.borderRight,
                width: 0,
                height: 0
            }]);
        }
        function mergeRectOffsets(rects) {
            return rects.reduce(function (previousRect, rect) {
                return null == previousRect ? rect : {
                    top: previousRect.top + rect.top,
                    left: previousRect.left + rect.left,
                    width: previousRect.width,
                    height: previousRect.height,
                    bottom: previousRect.bottom + rect.bottom,
                    right: previousRect.right + rect.right
                };
            });
        }
        function getNestedBoundingClientRect(node, boundaryWindow) {
            var ownerIframe = getOwnerIframe(node);
            if (ownerIframe && ownerIframe !== boundaryWindow) {
                for (var rects = [node.getBoundingClientRect()], currentIframe = ownerIframe, onlyOneMore = !1; currentIframe;) {
                    var rect = getBoundingClientRectWithBorderOffset(currentIframe);
                    if (rects.push(rect), currentIframe = getOwnerIframe(currentIframe), onlyOneMore) break;
                    currentIframe && getOwnerWindow(currentIframe) === boundaryWindow && (onlyOneMore = !0);
                }
                return mergeRectOffsets(rects);
            }
            return node.getBoundingClientRect();
        }
        function boxWrap(dims, what, node) {
            assign(node.style, {
                borderTopWidth: dims[what + "Top"] + "px",
                borderLeftWidth: dims[what + "Left"] + "px",
                borderRightWidth: dims[what + "Right"] + "px",
                borderBottomWidth: dims[what + "Bottom"] + "px",
                borderStyle: "solid"
            });
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            assign = __webpack_require__(3),
            _require = __webpack_require__(49),
            monospace = _require.monospace,
            Overlay = function () {
            function Overlay(window) {
                _classCallCheck(this, Overlay);
                var doc = window.document;
                this.win = window, this.container = doc.createElement("div"), this.node = doc.createElement("div"), this.border = doc.createElement("div"), this.padding = doc.createElement("div"), this.content = doc.createElement("div"), this.border.style.borderColor = overlayStyles.border, this.padding.style.borderColor = overlayStyles.padding, this.content.style.backgroundColor = overlayStyles.background, assign(this.node.style, {
                    borderColor: overlayStyles.margin,
                    pointerEvents: "none",
                    position: "fixed"
                }), this.tip = doc.createElement("div"), assign(this.tip.style, {
                    backgroundColor: "#333740",
                    borderRadius: "2px",
                    fontFamily: monospace.family,
                    fontWeight: "bold",
                    padding: "3px 5px",
                    position: "fixed",
                    fontSize: monospace.sizes.normal
                }), this.nameSpan = doc.createElement("span"), this.tip.appendChild(this.nameSpan), assign(this.nameSpan.style, {
                    color: "#ee78e6",
                    borderRight: "1px solid #aaaaaa",
                    paddingRight: "0.5rem",
                    marginRight: "0.5rem"
                }), this.dimSpan = doc.createElement("span"), this.tip.appendChild(this.dimSpan), assign(this.dimSpan.style, {
                    color: "#d7d7d7"
                }), this.container.style.zIndex = 1e7, this.node.style.zIndex = 1e7, this.tip.style.zIndex = 1e7, this.container.appendChild(this.node), this.container.appendChild(this.tip), this.node.appendChild(this.border), this.border.appendChild(this.padding), this.padding.appendChild(this.content), doc.body.appendChild(this.container);
            }
            return _createClass(Overlay, [{
                key: "remove",
                value: function value() {
                    this.container.parentNode && this.container.parentNode.removeChild(this.container);
                }
            }, {
                key: "inspect",
                value: function value(node, name) {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        var box = getNestedBoundingClientRect(node, this.win),
                            dims = getElementDimensions(node);
                        boxWrap(dims, "margin", this.node), boxWrap(dims, "border", this.border), boxWrap(dims, "padding", this.padding), assign(this.content.style, {
                            height: box.height - dims.borderTop - dims.borderBottom - dims.paddingTop - dims.paddingBottom + "px",
                            width: box.width - dims.borderLeft - dims.borderRight - dims.paddingLeft - dims.paddingRight + "px"
                        }), assign(this.node.style, {
                            top: box.top - dims.marginTop + "px",
                            left: box.left - dims.marginLeft + "px"
                        }), this.nameSpan.textContent = name || node.nodeName.toLowerCase(), this.dimSpan.textContent = box.width + "px × " + box.height + "px";
                        var tipPos = findTipPos({
                            top: box.top - dims.marginTop,
                            left: box.left - dims.marginLeft,
                            height: box.height + dims.marginTop + dims.marginBottom,
                            width: box.width + dims.marginLeft + dims.marginRight
                        }, this.win);
                        assign(this.tip.style, tipPos);
                    }
                }
            }]), Overlay;
        }(),
            overlayStyles = {
            background: "rgba(120, 170, 210, 0.7)",
            padding: "rgba(77, 200, 0, 0.3)",
            margin: "rgba(255, 155, 0, 0.3)",
            border: "rgba(255, 200, 50, 0.3)"
        };
        module.exports = Overlay;
    }, function (module, exports) {
        "use strict";

        module.exports = {
            monospace: {
                family: "Menlo, Consolas, monospace",
                sizes: {
                    normal: 11,
                    large: 14
                }
            },
            sansSerif: {
                family: '"Helvetica Neue", "Lucida Grande", -apple-system, BlinkMacSystemFont, "Segoe UI", Ubuntu, sans-serif',
                sizes: {
                    small: 10,
                    normal: 12,
                    large: 14
                }
            }
        };
    }, function (module, exports, __webpack_require__) {
        "use strict";

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
        }
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || !1, descriptor.configurable = !0, "value" in descriptor && (descriptor.writable = !0), Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                return protoProps && defineProperties(Constructor.prototype, protoProps), staticProps && defineProperties(Constructor, staticProps), Constructor;
            };
        }(),
            assign = __webpack_require__(3),
            MultiOverlay = function () {
            function MultiOverlay(window) {
                _classCallCheck(this, MultiOverlay), this.win = window;
                var doc = window.document;
                this.container = doc.createElement("div"), doc.body.appendChild(this.container), this._currentNodes = null;
            }
            return _createClass(MultiOverlay, [{
                key: "highlightMany",
                value: function value(nodes) {
                    var _this = this;
                    this._currentNodes = nodes, this.container.innerHTML = "", nodes.forEach(function (node) {
                        var div = _this.win.document.createElement("div");
                        if ("function" == typeof node.getBoundingClientRect) {
                            var box = node.getBoundingClientRect();
                            box.bottom < 0 || box.top > window.innerHeight || (assign(div.style, {
                                top: box.top + "px",
                                left: box.left + "px",
                                width: box.width + "px",
                                height: box.height + "px",
                                border: "2px dotted rgba(200, 100, 100, .8)",
                                boxSizing: "border-box",
                                backgroundColor: "rgba(200, 100, 100, .2)",
                                position: "fixed",
                                zIndex: 1e7,
                                pointerEvents: "none"
                            }), _this.container.appendChild(div));
                        }
                    });
                }
            }, {
                key: "refresh",
                value: function value() {
                    this._currentNodes && this.highlightMany(this._currentNodes);
                }
            }, {
                key: "remove",
                value: function value() {
                    this.container.parentNode && (this.container.parentNode.removeChild(this.container), this._currentNodes = null);
                }
            }]), MultiOverlay;
        }();
        module.exports = MultiOverlay;
    }]);
});
}, 118, null, "react-devtools-core/build/backend.js");
__d(/* flattenStyle */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var ReactNativePropRegistry;

function getStyle(style) {
  if (ReactNativePropRegistry === undefined) {
    ReactNativePropRegistry = require(120                      ); // 120 = ReactNativePropRegistry
  }
  if (typeof style === 'number') {
    return ReactNativePropRegistry.getByID(style);
  }
  return style;
}

function flattenStyle(style) {
  if (!style) {
    return undefined;
  }
  invariant(style !== true, 'style may be false but not true');

  if (!Array.isArray(style)) {
    return getStyle(style);
  }

  var result = {};
  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
    var computedStyle = flattenStyle(style[i]);
    if (computedStyle) {
      for (var key in computedStyle) {
        result[key] = computedStyle[key];
      }
    }
  }
  return result;
}

module.exports = flattenStyle;
}, 119, null, "flattenStyle");
__d(/* ReactNativePropRegistry */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativePropRegistry;
}, 120, null, "ReactNativePropRegistry");
__d(/* JSInspector */function(global, require, module, exports) {
'use strict';

var JSInspector = {
  registerAgent: function registerAgent(type) {
    if (global.__registerInspectorAgent) {
      global.__registerInspectorAgent(type);
    }
  },
  getTimestamp: function getTimestamp() {
    return global.__inspectorTimestamp();
  }
};

module.exports = JSInspector;
}, 121, null, "JSInspector");
__d(/* NetworkAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = require(123             ); // 123 = InspectorAgent
var JSInspector = require(121          ); // 121 = JSInspector
var Map = require(75   ); // 75 = Map
var XMLHttpRequest = require(81              ); // 81 = XMLHttpRequest

var Interceptor = function () {
  function Interceptor(agent) {
    babelHelpers.classCallCheck(this, Interceptor);

    this._agent = agent;
    this._requests = new Map();
  }

  babelHelpers.createClass(Interceptor, [{
    key: 'getData',
    value: function getData(requestId) {
      return this._requests.get(requestId);
    }
  }, {
    key: 'requestSent',
    value: function requestSent(id, url, method, headers) {
      var requestId = String(id);
      this._requests.set(requestId, '');

      var request = {
        url: url,
        method: method,
        headers: headers,
        initialPriority: 'Medium'
      };
      var event = {
        requestId: requestId,
        documentURL: '',
        frameId: '1',
        loaderId: '1',
        request: request,
        timestamp: JSInspector.getTimestamp(),
        initiator: {
          type: 'other'
        },
        type: 'Other'
      };
      this._agent.sendEvent('requestWillBeSent', event);
    }
  }, {
    key: 'responseReceived',
    value: function responseReceived(id, url, status, headers) {
      var requestId = String(id);
      var response = {
        url: url,
        status: status,
        statusText: String(status),
        headers: headers,

        requestHeaders: {},
        mimeType: this._getMimeType(headers),
        connectionReused: false,
        connectionId: -1,
        encodedDataLength: 0,
        securityState: 'unknown'
      };

      var event = {
        requestId: requestId,
        frameId: '1',
        loaderId: '1',
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        response: response
      };
      this._agent.sendEvent('responseReceived', event);
    }
  }, {
    key: 'dataReceived',
    value: function dataReceived(id, data) {
      var requestId = String(id);
      var existingData = this._requests.get(requestId) || '';
      this._requests.set(requestId, existingData.concat(data));
      var event = {
        requestId: requestId,
        timestamp: JSInspector.getTimestamp(),
        dataLength: data.length,
        encodedDataLength: data.length
      };
      this._agent.sendEvent('dataReceived', event);
    }
  }, {
    key: 'loadingFinished',
    value: function loadingFinished(id, encodedDataLength) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        encodedDataLength: encodedDataLength
      };
      this._agent.sendEvent('loadingFinished', event);
    }
  }, {
    key: 'loadingFailed',
    value: function loadingFailed(id, error) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        errorText: error
      };
      this._agent.sendEvent('loadingFailed', event);
    }
  }, {
    key: '_getMimeType',
    value: function _getMimeType(headers) {
      var contentType = headers['Content-Type'] || '';
      return contentType.split(';')[0];
    }
  }]);
  return Interceptor;
}();

var NetworkAgent = function (_InspectorAgent) {
  babelHelpers.inherits(NetworkAgent, _InspectorAgent);

  function NetworkAgent() {
    babelHelpers.classCallCheck(this, NetworkAgent);
    return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
  }

  babelHelpers.createClass(NetworkAgent, [{
    key: 'enable',
    value: function enable(_ref) {
      var maxResourceBufferSize = _ref.maxResourceBufferSize,
          maxTotalBufferSize = _ref.maxTotalBufferSize;

      this._interceptor = new Interceptor(this);
      XMLHttpRequest.setInterceptor(this._interceptor);
    }
  }, {
    key: 'disable',
    value: function disable() {
      XMLHttpRequest.setInterceptor(null);
      this._interceptor = null;
    }
  }, {
    key: 'getResponseBody',
    value: function getResponseBody(_ref2) {
      var requestId = _ref2.requestId;

      return { body: this.interceptor().getData(requestId), base64Encoded: false };
    }
  }, {
    key: 'interceptor',
    value: function interceptor() {
      if (this._interceptor) {
        return this._interceptor;
      } else {
        throw Error('_interceptor can not be null');
      }
    }
  }]);
  return NetworkAgent;
}(InspectorAgent);

NetworkAgent.DOMAIN = 'Network';


module.exports = NetworkAgent;
}, 122, null, "NetworkAgent");
__d(/* InspectorAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = function () {
  function InspectorAgent(eventSender) {
    babelHelpers.classCallCheck(this, InspectorAgent);

    this._eventSender = eventSender;
  }

  babelHelpers.createClass(InspectorAgent, [{
    key: 'sendEvent',
    value: function sendEvent(name, params) {
      this._eventSender(name, params);
    }
  }]);
  return InspectorAgent;
}();

module.exports = InspectorAgent;
}, 123, null, "InspectorAgent");
__d(/* RCTEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(31             ); // 31 = BatchedBridge

var RCTEventEmitter = {
  register: function register(eventEmitter) {
    BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
  }
};

module.exports = RCTEventEmitter;
}, 124, null, "RCTEventEmitter");
__d(/* UIManager */function(global, require, module, exports) {
'use strict';

var NativeModules = require(30             ); // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform

var defineLazyObjectProperty = require(47                        ); // 47 = defineLazyObjectProperty
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var UIManager = NativeModules.UIManager;


invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');

UIManager.__takeSnapshot = UIManager.takeSnapshot;
UIManager.takeSnapshot = function () {
  invariant(false, 'UIManager.takeSnapshot should not be called directly. ' + 'Use ReactNative.takeSnapshot instead.');
};

if (Platform.OS === 'ios') {
  Object.keys(UIManager).forEach(function (viewName) {
    var viewConfig = UIManager[viewName];
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  });
} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {
  UIManager.ViewManagerNames.forEach(function (viewManagerName) {
    defineLazyObjectProperty(UIManager, viewManagerName, {
      get: function get() {
        return NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')];
      }
    });
  });
}

module.exports = UIManager;
}, 125, null, "UIManager");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 126, null, "fbjs/lib/emptyObject.js");
__d(/* fbjs/lib/shallowEqual.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
}, 127, null, "fbjs/lib/shallowEqual.js");
__d(/* deepDiffer */function(global, require, module, exports) {
'use strict';

var deepDiffer = function deepDiffer(one, two) {
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    return false;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii])) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key])) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};

module.exports = deepDiffer;
}, 128, null, "deepDiffer");
__d(/* TextInputState */function(global, require, module, exports) {
'use strict';

var Platform = require(38        ); // 38 = Platform
var UIManager = require(125        ); // 125 = UIManager

var TextInputState = {
  _currentlyFocusedID: null,

  currentlyFocusedField: function currentlyFocusedField() {
    return this._currentlyFocusedID;
  },

  focusTextInput: function focusTextInput(textFieldID) {
    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = textFieldID;
      if (Platform.OS === 'ios') {
        UIManager.focus(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  },

  blurTextInput: function blurTextInput(textFieldID) {
    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = null;
      if (Platform.OS === 'ios') {
        UIManager.blur(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  }
};

module.exports = TextInputState;
}, 129, null, "TextInputState");
__d(/* ReactNativeStack-dev */function(global, require, module, exports) {
"use strict";

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

require(73              ); // 73 = InitializeCore

var warning = require(45                ), // 45 = fbjs/lib/warning
    RCTEventEmitter = require(124              ), // 124 = RCTEventEmitter
    emptyFunction = require(46                      ), // 46 = fbjs/lib/emptyFunction
    UIManager = require(125        ), // 125 = UIManager
    React = require(13     ), // 13 = react
    ExecutionEnvironment = require(41                             ), // 41 = fbjs/lib/ExecutionEnvironment
    performanceNow = require(39                       ), // 39 = fbjs/lib/performanceNow
    emptyObject = require(126                   ), // 126 = fbjs/lib/emptyObject
    checkPropTypes = require(23                         ), // 23 = prop-types/checkPropTypes
    shallowEqual = require(127                    ), // 127 = fbjs/lib/shallowEqual
    deepDiffer = require(128         ), // 128 = deepDiffer
    flattenStyle = require(119           ), // 119 = flattenStyle
    TextInputState = require(129             ), // 129 = TextInputState
    deepFreezeAndThrowOnMutationInDev = require(35                                 ), // 35 = deepFreezeAndThrowOnMutationInDev
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree,
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName, "onDoubleClick" === registrationName && (EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName);
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: {},
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry,
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
};

if ("undefined" != typeof window && "function" == typeof window.dispatchEvent && "undefined" != typeof document && "function" == typeof document.createEvent) {
    var fakeNode = document.createElement("react"),
        depth = 0;
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        depth++;
        var thisDepth = depth,
            funcArgs = Array.prototype.slice.call(arguments, 3),
            boundFunc = function boundFunc() {
            func.apply(context, funcArgs);
        },
            fakeEventError = null,
            onFakeEventError = function onFakeEventError(event) {
            depth === thisDepth && (fakeEventError = event.error);
        },
            evtType = "react-" + (name || "invokeguardedcallback") + "-" + depth;
        window.addEventListener("error", onFakeEventError), fakeNode.addEventListener(evtType, boundFunc, !1);
        var evt = document.createEvent("Event");
        return evt.initEvent(evtType, !1, !1), fakeNode.dispatchEvent(evt), fakeNode.removeEventListener(evtType, boundFunc, !1), window.removeEventListener("error", onFakeEventError), depth--, fakeEventError;
    };
}

var _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected, warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, "EventPluginUtils.injection.injectComponentTree(...): Injected " + "module is missing getNodeFromInstance or getInstanceFromNode.");
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

var validateEventDispatches;

validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances,
        listenersIsArr = Array.isArray(dispatchListeners),
        listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0,
        instancesIsArr = Array.isArray(dispatchInstances),
        instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, "EventPluginUtils: Invalid `event`.");
};

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (validateEventDispatches(event), Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    validateEventDispatches(event);
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection
},
    EventPluginUtils_1 = EventPluginUtils;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    warning(inst, "Dispatching inst must not be null");
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    didWarnForAddedNewProperty = !1,
    isProxySupported = "function" == typeof Proxy,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    delete this.nativeEvent, delete this.preventDefault, delete this.stopPropagation, this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            delete this[propName];
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }Object.defineProperty(this, "nativeEvent", getPooledWarningPropertyDefinition("nativeEvent", null)), Object.defineProperty(this, "preventDefault", getPooledWarningPropertyDefinition("preventDefault", emptyFunction)), Object.defineProperty(this, "stopPropagation", getPooledWarningPropertyDefinition("stopPropagation", emptyFunction));
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = babelHelpers.extends({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, isProxySupported && (SyntheticEvent = new Proxy(SyntheticEvent, {
    construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
    },
    apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
            set: function set(target, prop, value) {
                return "isPersistent" === prop || target.constructor.Interface.hasOwnProperty(prop) || -1 !== shouldBeReleasedProperties.indexOf(prop) || (warning(didWarnForAddedNewProperty || target.isPersistent(), "This synthetic event is reused for performance reasons. If you're " + "seeing this, you're adding a new property in the synthetic event object. " + "The property is never released. See " + "https://fb.me/react-event-pooling for more information."), didWarnForAddedNewProperty = !0), target[prop] = value, !0;
            }
        });
    }
})), PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
    var isFunction = "function" == typeof getVal;
    return {
        configurable: !0,
        set: set,
        get: get
    };
    function set(val) {
        return warn(isFunction ? "setting the method" : "setting the property", "This is effectively a no-op"), val;
    }
    function get() {
        return warn(isFunction ? "accessing the method" : "accessing the property", isFunction ? "This is a no-op function" : "This is set to null"), getVal;
    }
    function warn(action, result) {
        warning(!1, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + "If you must keep the original synthetic event around, use event.persist(). " + "See https://fb.me/react-event-pooling for more information.", action, propName, result);
    }
}

var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt ? warning(!1, "A view is reporting that a touch occurred on tag zero.") : rootNodeID = target), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) {
            for (var i = 0; i < touchBank.length; i++) {
                var touchTrackToCheck = touchBank[i];
                if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                    touchHistory.indexOfSingleActiveTouch = i;
                    break;
                }
            }
            var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
            warning(null != activeRecord && activeRecord.touchActive, "Cannot find single active touch.");
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    ReactInvalidSetStateWarningHook = {},
    processingChildContext = !1,
    warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, "setState(...): Cannot call setState() inside getChildContext()");
};

ReactInvalidSetStateWarningHook = {
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        processingChildContext = !0;
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        processingChildContext = !1;
    },
    onSetState: function onSetState() {
        warnInvalidSetState();
    }
};

var ReactInvalidSetStateWarningHook_1 = ReactInvalidSetStateWarningHook,
    ReactHostOperationHistoryHook = null,
    history = [];

ReactHostOperationHistoryHook = {
    onHostOperation: function onHostOperation(operation) {
        history.push(operation);
    },
    clearHistory: function clearHistory() {
        ReactHostOperationHistoryHook._preventClearing || (history = []);
    },
    getHistory: function getHistory() {
        return history;
    }
};

var ReactHostOperationHistoryHook_1 = ReactHostOperationHistoryHook,
    ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
};

babelHelpers.extends(ReactGlobalSharedState, {
    ReactComponentTreeHook: ReactInternals.ReactComponentTreeHook,
    ReactDebugCurrentFrame: ReactInternals.ReactDebugCurrentFrame
});

var ReactGlobalSharedState_1 = ReactGlobalSharedState,
    ReactComponentTreeHook = ReactGlobalSharedState_1.ReactComponentTreeHook,
    ReactDebugTool$1 = null,
    hooks = [],
    didHookThrowForEvent = {},
    callHook = function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
    try {
        fn.call(context, arg1, arg2, arg3, arg4, arg5);
    } catch (e) {
        warning(didHookThrowForEvent[event], "Exception thrown by hook while handling %s: %s", event, e + "\n" + e.stack), didHookThrowForEvent[event] = !0;
    }
},
    emitEvent = function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
    for (var i = 0; i < hooks.length; i++) {
        var hook = hooks[i],
            fn = hook[event];
        fn && callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
},
    _isProfiling = !1,
    flushHistory = [],
    lifeCycleTimerStack = [],
    currentFlushNesting = 0,
    currentFlushMeasurements = [],
    currentFlushStartTime = 0,
    currentTimerDebugID = null,
    currentTimerStartTime = 0,
    currentTimerNestedFlushDuration = 0,
    currentTimerType = null,
    lifeCycleTimerHasWarned = !1,
    clearHistory = function clearHistory() {
    ReactComponentTreeHook.purgeUnmountedComponents(), ReactHostOperationHistoryHook_1.clearHistory();
},
    getTreeSnapshot = function getTreeSnapshot(registeredIDs) {
    return registeredIDs.reduce(function (tree, id) {
        var ownerID = ReactComponentTreeHook.getOwnerID(id),
            parentID = ReactComponentTreeHook.getParentID(id);
        return tree[id] = {
            displayName: ReactComponentTreeHook.getDisplayName(id),
            text: ReactComponentTreeHook.getText(id),
            updateCount: ReactComponentTreeHook.getUpdateCount(id),
            childIDs: ReactComponentTreeHook.getChildIDs(id),
            ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
            parentID: parentID
        }, tree;
    }, {});
},
    resetMeasurements = function resetMeasurements() {
    var previousStartTime = currentFlushStartTime,
        previousMeasurements = currentFlushMeasurements,
        previousOperations = ReactHostOperationHistoryHook_1.getHistory();
    if (0 === currentFlushNesting) return currentFlushStartTime = 0, currentFlushMeasurements = [], void clearHistory();
    if (previousMeasurements.length || previousOperations.length) {
        var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
        flushHistory.push({
            duration: performanceNow() - previousStartTime,
            measurements: previousMeasurements || [],
            operations: previousOperations || [],
            treeSnapshot: getTreeSnapshot(registeredIDs)
        });
    }
    clearHistory(), currentFlushStartTime = performanceNow(), currentFlushMeasurements = [];
},
    checkDebugID = function checkDebugID(debugID) {
    arguments.length > 1 && void 0 !== arguments[1] && arguments[1] && 0 === debugID || debugID || warning(!1, "ReactDebugTool: debugID may not be empty.");
},
    beginLifeCycleTimer = function beginLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType && !lifeCycleTimerHasWarned && (warning(!1, "There is an internal error in the React performance measurement code." + "\n\nDid not expect %s timer to start while %s timer is still in " + "progress for %s instance.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), currentTimerStartTime = performanceNow(), currentTimerNestedFlushDuration = 0, currentTimerDebugID = debugID, currentTimerType = timerType);
},
    endLifeCycleTimer = function endLifeCycleTimer(debugID, timerType) {
    0 !== currentFlushNesting && (currentTimerType === timerType || lifeCycleTimerHasWarned || (warning(!1, "There is an internal error in the React performance measurement code. " + "We did not expect %s timer to stop while %s timer is still in " + "progress for %s instance. Please report this as a bug in React.", timerType, currentTimerType || "no", debugID === currentTimerDebugID ? "the same" : "another"), lifeCycleTimerHasWarned = !0), _isProfiling && currentFlushMeasurements.push({
        timerType: timerType,
        instanceID: debugID,
        duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    }), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null);
},
    pauseCurrentLifeCycleTimer = function pauseCurrentLifeCycleTimer() {
    var currentTimer = {
        startTime: currentTimerStartTime,
        nestedFlushStartTime: performanceNow(),
        debugID: currentTimerDebugID,
        timerType: currentTimerType
    };
    lifeCycleTimerStack.push(currentTimer), currentTimerStartTime = 0, currentTimerNestedFlushDuration = 0, currentTimerDebugID = null, currentTimerType = null;
},
    resumeCurrentLifeCycleTimer = function resumeCurrentLifeCycleTimer() {
    var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
        startTime = _lifeCycleTimerStack$.startTime,
        nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
        debugID = _lifeCycleTimerStack$.debugID,
        timerType = _lifeCycleTimerStack$.timerType,
        nestedFlushDuration = performanceNow() - nestedFlushStartTime;
    currentTimerStartTime = startTime, currentTimerNestedFlushDuration += nestedFlushDuration, currentTimerDebugID = debugID, currentTimerType = timerType;
},
    lastMarkTimeStamp = 0,
    canUsePerformanceMeasure = "undefined" != typeof performance && "function" == typeof performance.mark && "function" == typeof performance.clearMarks && "function" == typeof performance.measure && "function" == typeof performance.clearMeasures,
    shouldMark = function shouldMark(debugID) {
    if (!_isProfiling || !canUsePerformanceMeasure) return !1;
    var element = ReactComponentTreeHook.getElement(debugID);
    return null != element && "object" == typeof element && !("string" == typeof element.type);
},
    markBegin = function markBegin(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType;
        lastMarkTimeStamp = performanceNow(), performance.mark(markName);
    }
},
    markEnd = function markEnd(debugID, markType) {
    if (shouldMark(debugID)) {
        var markName = debugID + "::" + markType,
            displayName = ReactComponentTreeHook.getDisplayName(debugID) || "Unknown";
        if (performanceNow() - lastMarkTimeStamp > .1) {
            var measurementName = displayName + " [" + markType + "]";
            performance.measure(measurementName, markName);
        }
        performance.clearMarks(markName), measurementName && performance.clearMeasures(measurementName);
    }
};

ReactDebugTool$1 = {
    addHook: function addHook(hook) {
        hooks.push(hook);
    },
    removeHook: function removeHook(hook) {
        for (var i = 0; i < hooks.length; i++) {
            hooks[i] === hook && (hooks.splice(i, 1), i--);
        }
    },
    isProfiling: function isProfiling() {
        return _isProfiling;
    },
    beginProfiling: function beginProfiling() {
        _isProfiling || (_isProfiling = !0, flushHistory.length = 0, resetMeasurements(), ReactDebugTool$1.addHook(ReactHostOperationHistoryHook_1));
    },
    endProfiling: function endProfiling() {
        _isProfiling && (_isProfiling = !1, resetMeasurements(), ReactDebugTool$1.removeHook(ReactHostOperationHistoryHook_1));
    },
    getFlushHistory: function getFlushHistory() {
        return flushHistory;
    },
    onBeginFlush: function onBeginFlush() {
        currentFlushNesting++, resetMeasurements(), pauseCurrentLifeCycleTimer(), emitEvent("onBeginFlush");
    },
    onEndFlush: function onEndFlush() {
        resetMeasurements(), currentFlushNesting--, resumeCurrentLifeCycleTimer(), emitEvent("onEndFlush");
    },
    onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), emitEvent("onBeginLifeCycleTimer", debugID, timerType), markBegin(debugID, timerType), beginLifeCycleTimer(debugID, timerType);
    },
    onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
        checkDebugID(debugID), endLifeCycleTimer(debugID, timerType), markEnd(debugID, timerType), emitEvent("onEndLifeCycleTimer", debugID, timerType);
    },
    onBeginProcessingChildContext: function onBeginProcessingChildContext() {
        emitEvent("onBeginProcessingChildContext");
    },
    onEndProcessingChildContext: function onEndProcessingChildContext() {
        emitEvent("onEndProcessingChildContext");
    },
    onHostOperation: function onHostOperation(operation) {
        checkDebugID(operation.instanceID), emitEvent("onHostOperation", operation);
    },
    onSetState: function onSetState() {
        emitEvent("onSetState");
    },
    onSetChildren: function onSetChildren(debugID, childDebugIDs) {
        checkDebugID(debugID), childDebugIDs.forEach(checkDebugID), emitEvent("onSetChildren", debugID, childDebugIDs);
    },
    onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
        checkDebugID(debugID), checkDebugID(parentDebugID, !0), emitEvent("onBeforeMountComponent", debugID, element, parentDebugID), markBegin(debugID, "mount");
    },
    onMountComponent: function onMountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "mount"), emitEvent("onMountComponent", debugID);
    },
    onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
        checkDebugID(debugID), emitEvent("onBeforeUpdateComponent", debugID, element), markBegin(debugID, "update");
    },
    onUpdateComponent: function onUpdateComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "update"), emitEvent("onUpdateComponent", debugID);
    },
    onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
        checkDebugID(debugID), emitEvent("onBeforeUnmountComponent", debugID), markBegin(debugID, "unmount");
    },
    onUnmountComponent: function onUnmountComponent(debugID) {
        checkDebugID(debugID), markEnd(debugID, "unmount"), emitEvent("onUnmountComponent", debugID);
    },
    onTestEvent: function onTestEvent() {
        emitEvent("onTestEvent");
    }
}, ReactDebugTool$1.addHook(ReactInvalidSetStateWarningHook_1), ReactDebugTool$1.addHook(ReactComponentTreeHook);

var url = ExecutionEnvironment.canUseDOM && window.location.href || "";

/[?&]react_perf\b/.test(url) && ReactDebugTool$1.beginProfiling();

var ReactDebugTool_1 = ReactDebugTool$1,
    debugTool = null,
    ReactDebugTool = ReactDebugTool_1;

debugTool = ReactDebugTool;

var ReactInstrumentation = {
    debugTool: debugTool
};

function ReactNativeContainerInfo(tag) {
    return {
        _tag: tag
    };
}

var ReactNativeContainerInfo_1 = ReactNativeContainerInfo,
    ClassComponent = ReactTypeOfWork.ClassComponent;

function isValidOwner(object) {
    return !(!object || "function" != typeof object.attachRef || "function" != typeof object.detachRef);
}

var ReactOwner = {
    addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = component.getPublicInstance();
        } else invariant(isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. You might " + "be adding a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner)."), owner.attachRef(ref, component);
    },
    removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            inst && inst.refs[ref] === component.getPublicInstance() && delete inst.refs[ref];
        } else {
            invariant(isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might " + "be removing a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner).");
            var ownerPublicInstance = owner.getPublicInstance();
            ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance() && owner.detachRef(ref);
        }
    }
},
    ReactOwner_1 = ReactOwner,
    ReactCompositeComponentTypes$1 = {
    ImpureClass: 0,
    PureClass: 1,
    StatelessFunctional: 2
},
    ReactRef = {},
    ReactCompositeComponentTypes = ReactCompositeComponentTypes$1,
    _require$1 = ReactGlobalSharedState_1,
    ReactComponentTreeHook$1 = _require$1.ReactComponentTreeHook,
    warning$2 = warning,
    warnedAboutStatelessRefs = {};

function attachRef(ref, component, owner) {
    if (component._compositeType === ReactCompositeComponentTypes.StatelessFunctional) {
        var info = "",
            ownerName = void 0;
        owner && ("function" == typeof owner.getName && (ownerName = owner.getName()), ownerName && (info += "\n\nCheck the render method of `" + ownerName + "`."));
        var warningKey = ownerName || component._debugID,
            element = component._currentElement;
        element && element._source && (warningKey = element._source.fileName + ":" + element._source.lineNumber), warnedAboutStatelessRefs[warningKey] || (warnedAboutStatelessRefs[warningKey] = !0, warning$2(!1, "Stateless function components cannot be given refs. " + "Attempts to access this ref will fail.%s%s", info, ReactComponentTreeHook$1.getStackAddendumByID(component._debugID)));
    }
    "function" == typeof ref ? ref(component.getPublicInstance()) : ReactOwner_1.addComponentAsRefTo(component, ref, owner);
}

function detachRef(ref, component, owner) {
    "function" == typeof ref ? ref(null) : ReactOwner_1.removeComponentAsRefFrom(component, ref, owner);
}

ReactRef.attachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && attachRef(ref, instance, element._owner);
    }
}, ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    var prevRef = null,
        prevOwner = null;
    null !== prevElement && "object" == typeof prevElement && (prevRef = prevElement.ref, prevOwner = prevElement._owner);
    var nextRef = null,
        nextOwner = null;
    return null !== nextElement && "object" == typeof nextElement && (nextRef = nextElement.ref, nextOwner = nextElement._owner), prevRef !== nextRef || "string" == typeof nextRef && nextOwner !== prevOwner;
}, ReactRef.detachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && detachRef(ref, instance, element._owner);
    }
};

var ReactRef_1 = ReactRef;

function attachRefs() {
    ReactRef_1.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
    mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
        var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
        return internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID), markup;
    },
    getHostNode: function getHostNode(internalInstance) {
        return internalInstance.getHostNode();
    },
    unmountComponent: function unmountComponent(internalInstance, safely, skipLifecycle) {
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID), ReactRef_1.detachRefs(internalInstance, internalInstance._currentElement), internalInstance.unmountComponent(safely, skipLifecycle), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
    },
    receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
        var prevElement = internalInstance._currentElement;
        if (nextElement !== prevElement || context !== internalInstance._context) {
            0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
            var refsChanged = ReactRef_1.shouldUpdateRefs(prevElement, nextElement);
            refsChanged && ReactRef_1.detachRefs(internalInstance, prevElement), internalInstance.receiveComponent(nextElement, transaction, context), refsChanged && internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
        }
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
        if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, "performUpdateIfNecessary: Unexpected batch number (current %s, " + "pending %s)", updateBatchNumber, internalInstance._updateBatchNumber);
        0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement), internalInstance.performUpdateIfNecessary(transaction), 0 !== internalInstance._debugID && ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
    }
},
    ReactReconciler_1 = ReactReconciler,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    OBSERVED_ERROR = {},
    TransactionImpl = {
    reinitializeTransaction: function reinitializeTransaction() {
        this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1;
    },
    _isInTransaction: !1,
    getTransactionWrappers: null,
    isInTransaction: function isInTransaction() {
        return !!this._isInTransaction;
    },
    perform: function perform(method, scope, a, b, c, d, e, f) {
        invariant(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there " + "is already an outstanding transaction.");
        var errorThrown, ret;
        try {
            this._isInTransaction = !0, errorThrown = !0, this.initializeAll(0), ret = method.call(scope, a, b, c, d, e, f), errorThrown = !1;
        } finally {
            try {
                if (errorThrown) try {
                    this.closeAll(0);
                } catch (err) {} else this.closeAll(0);
            } finally {
                this._isInTransaction = !1;
            }
        }
        return ret;
    },
    initializeAll: function initializeAll(startIndex) {
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var wrapper = transactionWrappers[i];
            try {
                this.wrapperInitData[i] = OBSERVED_ERROR, this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
            } finally {
                if (this.wrapperInitData[i] === OBSERVED_ERROR) try {
                    this.initializeAll(i + 1);
                } catch (err) {}
            }
        }
    },
    closeAll: function closeAll(startIndex) {
        invariant(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.");
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var errorThrown,
                wrapper = transactionWrappers[i],
                initData = this.wrapperInitData[i];
            try {
                errorThrown = !0, initData !== OBSERVED_ERROR && wrapper.close && wrapper.close.call(this, initData), errorThrown = !1;
            } finally {
                if (errorThrown) try {
                    this.closeAll(i + 1);
                } catch (e) {}
            }
        }
        this.wrapperInitData.length = 0;
    }
},
    Transaction = TransactionImpl,
    dirtyComponents = [],
    updateBatchNumber = 0,
    batchingStrategy = null;

function ensureInjected() {
    invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, "ReactUpdates: must inject a reconcile transaction class and batching " + "strategy");
}

var NESTED_UPDATES = {
    initialize: function initialize() {
        this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function close() {
        this.dirtyComponentsLength !== dirtyComponents.length ? (dirtyComponents.splice(0, this.dirtyComponentsLength), flushBatchedUpdates()) : dirtyComponents.length = 0;
    }
},
    TRANSACTION_WRAPPERS = [NESTED_UPDATES];

function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(!0);
}

babelHelpers.extends(ReactUpdatesFlushTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS;
    },
    destructor: function destructor() {
        this.dirtyComponentsLength = null, ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null;
    },
    perform: function perform(method, scope, a) {
        return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
}), PooledClass_1.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates$1(callback, a, b, c, d, e) {
    return ensureInjected(), batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    invariant(len === dirtyComponents.length, "Expected flush transaction's stored dirty-components length (%s) to " + "match dirty-components array length (%s).", len, dirtyComponents.length), dirtyComponents.sort(mountOrderComparator), updateBatchNumber++;
    for (var i = 0; i < len; i++) {
        var component = dirtyComponents[i];
        ReactReconciler_1.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
    }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
    for (; dirtyComponents.length;) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction), ReactUpdatesFlushTransaction.release(transaction);
    }
};

function enqueueUpdate$1(component) {
    if (ensureInjected(), !batchingStrategy.isBatchingUpdates) return void batchingStrategy.batchedUpdates(enqueueUpdate$1, component);
    dirtyComponents.push(component), null == component._updateBatchNumber && (component._updateBatchNumber = updateBatchNumber + 1);
}

var ReactUpdatesInjection = {
    injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
        invariant(ReconcileTransaction, "ReactUpdates: must provide a reconcile transaction class"), ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
    injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
        invariant(_batchingStrategy, "ReactUpdates: must provide a batching strategy"), invariant("function" == typeof _batchingStrategy.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function"), invariant("boolean" == typeof _batchingStrategy.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute"), batchingStrategy = _batchingStrategy;
    },
    getBatchingStrategy: function getBatchingStrategy() {
        return batchingStrategy;
    }
},
    ReactUpdates = {
    ReactReconcileTransaction: null,
    batchedUpdates: batchedUpdates$1,
    enqueueUpdate: enqueueUpdate$1,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection
},
    ReactUpdates_1 = ReactUpdates,
    ReactCurrentOwner = ReactGlobalSharedState_1.ReactCurrentOwner,
    warning$3 = warning,
    warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {
    warning$3(null === callback || "function" == typeof callback, "%s(...): Expected the last optional `callback` argument to be a " + "function. Instead received: %s.", callerName, "" + callback);
};

function enqueueUpdate(internalInstance) {
    ReactUpdates_1.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap_1.get(publicInstance);
    if (!internalInstance) {
        var ctor = publicInstance.constructor;
        return warning$3(!1, "Can only update a mounted or mounting component. This usually means " + "you called setState, replaceState, or forceUpdate on an unmounted " + "component. This is a no-op.\n\nPlease check the code for the " + "%s component.", ctor && (ctor.displayName || ctor.name) || "ReactClass"), null;
    }
    return warning$3(null == ReactCurrentOwner.current, "Cannot update during an existing state transition (such as within " + "`render` or another component's constructor). Render methods should " + "be a pure function of props and state; constructor side-effects are " + "an anti-pattern, but can be moved to `componentWillMount`."), internalInstance;
}

var ReactUpdateQueue = {
    isMounted: function isMounted(publicInstance) {
        var owner = ReactCurrentOwner.current;
        null !== owner && (warning$3(owner._warnedAboutRefsInRender, "%s is accessing isMounted inside its render() function. " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0);
        var internalInstance = ReactInstanceMap_1.get(publicInstance);
        return !!internalInstance && !!internalInstance._renderedComponent;
    },
    enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
        internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback], enqueueUpdate(internalInstance);
    },
    enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), internalInstance._pendingForceUpdate = !0, enqueueUpdate(internalInstance));
    },
    enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (internalInstance._pendingStateQueue = [completeState], internalInstance._pendingReplaceState = !0, callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance));
    },
    enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        ReactInstrumentation.debugTool.onSetState(), warning$3(null != partialState, "setState(...): You passed an undefined or null state object; " + "instead, use forceUpdate().");
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        if (internalInstance) {
            (internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = [])).push(partialState), callback = void 0 === callback ? null : callback, null !== callback && (warnOnInvalidCallback(callback, callerName), internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance);
        }
    },
    enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
        internalInstance._pendingElement = nextElement, internalInstance._context = nextContext, enqueueUpdate(internalInstance);
    }
},
    ReactUpdateQueue_1 = ReactUpdateQueue,
    injected = !1,
    ReactComponentEnvironment = {
    replaceNodeWithMarkup: null,
    processChildrenUpdates: null,
    injection: {
        injectEnvironment: function injectEnvironment(environment) {
            invariant(!injected, "ReactCompositeComponent: injectEnvironment() can only be called once."), ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup, ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates, injected = !0;
        }
    }
},
    ReactComponentEnvironment_1 = ReactComponentEnvironment,
    ReactNodeTypes = {
    HOST: 0,
    COMPOSITE: 1,
    EMPTY: 2,
    getType: function getType(node) {
        return null === node || !1 === node ? ReactNodeTypes.EMPTY : React.isValidElement(node) ? "function" == typeof node.type ? ReactNodeTypes.COMPOSITE : ReactNodeTypes.HOST : void invariant(!1, "Unexpected node: %s", node);
    }
},
    ReactNodeTypes_1 = ReactNodeTypes;

function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = null === prevElement || !1 === prevElement,
        nextEmpty = null === nextElement || !1 === nextElement;
    if (prevEmpty || nextEmpty) return prevEmpty === nextEmpty;
    var prevType = typeof prevElement,
        nextType = typeof nextElement;
    return "string" === prevType || "number" === prevType ? "string" === nextType || "number" === nextType : "object" === nextType && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
}

var shouldUpdateReactComponent_1 = shouldUpdateReactComponent,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    _require2 = ReactGlobalSharedState_1,
    ReactDebugCurrentFrame = _require2.ReactDebugCurrentFrame,
    warningAboutMissingGetChildContext = {};

function StatelessComponent(Component) {}

StatelessComponent.prototype.render = function () {
    return (0, ReactInstanceMap_1.get(this)._currentElement.type)(this.props, this.context, this.updater);
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
    return !(!Component.prototype || !Component.prototype.isPureReactComponent);
}

function measureLifeCyclePerf(fn, debugID, timerType) {
    if (0 === debugID) return fn();
    ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
    try {
        return fn();
    } finally {
        ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
    }
}

var nextMountID = 1,
    ReactCompositeComponent = {
    construct: function construct(element) {
        this._currentElement = element, this._rootNodeID = 0, this._compositeType = null, this._instance = null, this._hostParent = null, this._hostContainerInfo = null, this._updateBatchNumber = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1, this._warnedAboutRefsInRender = !1;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var _this = this;
        this._context = context, this._mountOrder = nextMountID++, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var renderedElement,
            publicProps = this._currentElement.props,
            publicContext = this._processContext(context),
            Component = this._currentElement.type,
            updateQueue = transaction.getUpdateQueue(),
            doConstruct = shouldConstruct(Component),
            inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
        doConstruct || null != inst && null != inst.render ? isPureComponent(Component) ? this._compositeType = ReactCompositeComponentTypes$1.PureClass : this._compositeType = ReactCompositeComponentTypes$1.ImpureClass : (renderedElement = inst, warning(!Component.childContextTypes, "%s(...): childContextTypes cannot be defined on a functional component.", Component.displayName || Component.name || "Component"), invariant(null === inst || !1 === inst || React.isValidElement(inst), "%s(...): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", Component.displayName || Component.name || "Component"), inst = new StatelessComponent(Component), this._compositeType = ReactCompositeComponentTypes$1.StatelessFunctional), null == inst.render && warning(!1, "%s(...): No `render` method found on the returned component " + "instance: you may have forgotten to define `render`.", Component.displayName || Component.name || "Component");
        var propsMutated = inst.props !== publicProps,
            componentName = Component.displayName || Component.name || "Component";
        warning(void 0 === inst.props || !propsMutated, "%s(...): When calling super() in `%s`, make sure to pass " + "up the same props that your component's constructor was passed.", componentName, componentName), inst.props = publicProps, inst.context = publicContext, inst.refs = emptyObject, inst.updater = updateQueue, this._instance = inst, ReactInstanceMap_1.set(inst, this), warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved || inst.state, "getInitialState was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Did you mean to define a state property instead?", this.getName() || "a component"), warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, "getDefaultProps was defined on %s, a plain JavaScript class. " + "This is only supported for classes created using React.createClass. " + "Use a static property to define defaultProps instead.", this.getName() || "a component"), warning(!inst.propTypes, "propTypes was defined as an instance property on %s. Use a static " + "property to define propTypes instead.", this.getName() || "a component"), warning(!inst.contextTypes, "contextTypes was defined as an instance property on %s. Use a " + "static property to define contextTypes instead.", this.getName() || "a component"), warning("function" != typeof inst.componentShouldUpdate, "%s has a method called " + "componentShouldUpdate(). Did you mean shouldComponentUpdate()? " + "The name is phrased as a question because the function is " + "expected to return a value.", this.getName() || "A component"), warning("function" != typeof inst.componentDidUnmount, "%s has a method called " + "componentDidUnmount(). But there is no such lifecycle method. " + "Did you mean componentWillUnmount()?", this.getName() || "A component"), warning("function" != typeof inst.componentWillRecieveProps, "%s has a method called " + "componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", this.getName() || "A component"), isPureComponent(Component) && void 0 !== inst.shouldComponentUpdate && warning(!1, "%s has a method called shouldComponentUpdate(). " + "shouldComponentUpdate should not be used when extending React.PureComponent. " + "Please extend React.Component if shouldComponentUpdate is used.", this.getName() || "A pure component"), warning(!inst.defaultProps, "Setting defaultProps as an instance property on %s is not supported and will be ignored." + " Instead, define defaultProps as a static property on %s.", this.getName() || "a component", this.getName() || "a component");
        var initialState = inst.state;
        void 0 === initialState && (inst.state = initialState = null), invariant("object" == typeof initialState && !Array.isArray(initialState), "%s.state: must be set to an object or null", this.getName() || "ReactCompositeComponent"), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, inst.componentWillMount && (measureLifeCyclePerf(function () {
            return inst.componentWillMount();
        }, this._debugID, "componentWillMount"), this._pendingStateQueue && (inst.state = this._processPendingState(inst.props, inst.context)));
        var markup;
        markup = inst.unstable_handleError ? this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) : this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context), inst.componentDidMount && transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(function () {
                return inst.componentDidMount();
            }, _this._debugID, "componentDidMount");
        });
        var callbacks = this._pendingCallbacks;
        if (callbacks) {
            this._pendingCallbacks = null;
            for (var i = 0; i < callbacks.length; i++) {
                transaction.getReactMountReady().enqueue(callbacks[i], inst);
            }
        }
        return markup;
    },
    _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
        ReactCurrentOwner$1.current = this;
        try {
            return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
        } finally {
            ReactCurrentOwner$1.current = null;
        }
    },
    _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
        var Component = this._currentElement.type;
        return doConstruct ? measureLifeCyclePerf(function () {
            return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, "ctor") : measureLifeCyclePerf(function () {
            return Component(publicProps, publicContext, updateQueue);
        }, this._debugID, "render");
    },
    performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        var markup,
            checkpoint = transaction.checkpoint();
        try {
            markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._renderedComponent.unmountComponent(!0, !0), transaction.rollback(checkpoint), markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        }
        return markup;
    },
    performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        void 0 === renderedElement && (renderedElement = this._renderValidatedComponent());
        var nodeType = ReactNodeTypes_1.getType(renderedElement);
        this._renderedNodeType = nodeType;
        var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
        this._renderedComponent = child;
        var debugID = 0;
        debugID = this._debugID;
        var markup = ReactReconciler_1.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);
        if (0 !== debugID) {
            var childDebugIDs = 0 !== child._debugID ? [child._debugID] : [];
            ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
        return markup;
    },
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        if (this._renderedComponent) {
            var inst = this._instance;
            if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) if (inst._calledComponentWillUnmount = !0, safely) {
                if (!skipLifecycle) {
                    var name = this.getName() + ".componentWillUnmount()";
                    ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(name, inst.componentWillUnmount, inst);
                }
            } else measureLifeCyclePerf(function () {
                return inst.componentWillUnmount();
            }, this._debugID, "componentWillUnmount");
            this._renderedComponent && (ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = 0, this._topLevelWrapper = null, ReactInstanceMap_1.remove(inst);
        }
    },
    _maskContext: function _maskContext(context) {
        var Component = this._currentElement.type,
            contextTypes = Component.contextTypes;
        if (!contextTypes) return emptyObject;
        var maskedContext = {};
        for (var contextName in contextTypes) {
            maskedContext[contextName] = context[contextName];
        }return maskedContext;
    },
    _processContext: function _processContext(context) {
        var maskedContext = this._maskContext(context),
            Component = this._currentElement.type;
        return Component.contextTypes && this._checkContextTypes(Component.contextTypes, maskedContext, "context"), maskedContext;
    },
    _processChildContext: function _processChildContext(currentContext) {
        var childContext,
            Component = this._currentElement.type,
            inst = this._instance;
        if ("function" == typeof inst.getChildContext) {
            ReactInstrumentation.debugTool.onBeginProcessingChildContext();
            try {
                childContext = inst.getChildContext();
            } finally {
                ReactInstrumentation.debugTool.onEndProcessingChildContext();
            }
            invariant("object" == typeof Component.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", this.getName() || "ReactCompositeComponent"), this._checkContextTypes(Component.childContextTypes, childContext, "child context");
            for (var name in childContext) {
                invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || "ReactCompositeComponent", name);
            }return babelHelpers.extends({}, currentContext, childContext);
        }
        var componentName = this.getName();
        return warningAboutMissingGetChildContext[componentName] || (warningAboutMissingGetChildContext[componentName] = !0, warning(!Component.childContextTypes, "%s.childContextTypes is specified but there is no getChildContext() method " + "on the instance. You can either define getChildContext() on %s or remove " + "childContextTypes from it.", componentName, componentName)), currentContext;
    },
    _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
        ReactDebugCurrentFrame.current = this._debugID, checkPropTypes(typeSpecs, values, location, this.getName(), ReactDebugCurrentFrame.getStackAddendum), ReactDebugCurrentFrame.current = null;
    },
    receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
        var prevElement = this._currentElement,
            prevContext = this._context;
        this._pendingElement = null, this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
        if (null != this._pendingElement) ReactReconciler_1.receiveComponent(this, this._pendingElement, transaction, this._context);else if (null !== this._pendingStateQueue || this._pendingForceUpdate) this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);else {
            var callbacks = this._pendingCallbacks;
            if (this._pendingCallbacks = null, callbacks) for (var j = 0; j < callbacks.length; j++) {
                transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
            }this._updateBatchNumber = null;
        }
    },
    updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
        var inst = this._instance;
        invariant(null != inst, "Attempted to update component `%s` that has already been unmounted " + "(or failed to mount).", this.getName() || "ReactCompositeComponent");
        var nextContext,
            willReceive = !1;
        this._context === nextUnmaskedContext ? nextContext = inst.context : (nextContext = this._processContext(nextUnmaskedContext), willReceive = !0);
        var prevProps = prevParentElement.props,
            nextProps = nextParentElement.props;
        if (prevParentElement !== nextParentElement && (willReceive = !0), willReceive && inst.componentWillReceiveProps) {
            var beforeState = inst.state;
            measureLifeCyclePerf(function () {
                return inst.componentWillReceiveProps(nextProps, nextContext);
            }, this._debugID, "componentWillReceiveProps");
            var afterState = inst.state;
            beforeState !== afterState && (inst.state = beforeState, inst.updater.enqueueReplaceState(inst, afterState), warning(!1, "%s.componentWillReceiveProps(): Assigning directly to " + "this.state is deprecated (except inside a component's " + "constructor). Use setState instead.", this.getName() || "ReactCompositeComponent"));
        }
        var callbacks = this._pendingCallbacks;
        this._pendingCallbacks = null;
        var nextState = this._processPendingState(nextProps, nextContext),
            shouldUpdate = !0;
        if (!this._pendingForceUpdate) {
            var prevState = inst.state;
            shouldUpdate = willReceive || nextState !== prevState, inst.shouldComponentUpdate ? shouldUpdate = measureLifeCyclePerf(function () {
                return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
            }, this._debugID, "shouldComponentUpdate") : this._compositeType === ReactCompositeComponentTypes$1.PureClass && (shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState));
        }
        if (warning(void 0 !== shouldUpdate, "%s.shouldComponentUpdate(): Returned undefined instead of a " + "boolean value. Make sure to return true or false.", this.getName() || "ReactCompositeComponent"), this._updateBatchNumber = null, shouldUpdate ? (this._pendingForceUpdate = !1, this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext)) : (this._currentElement = nextParentElement, this._context = nextUnmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext), callbacks) for (var j = 0; j < callbacks.length; j++) {
            transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
        }
    },
    _processPendingState: function _processPendingState(props, context) {
        var inst = this._instance,
            queue = this._pendingStateQueue,
            replace = this._pendingReplaceState;
        if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !queue) return inst.state;
        if (replace && 1 === queue.length) return queue[0];
        for (var nextState = replace ? queue[0] : inst.state, dontMutate = !0, i = replace ? 1 : 0; i < queue.length; i++) {
            var partial = queue[i],
                partialState = "function" == typeof partial ? partial.call(inst, nextState, props, context) : partial;
            partialState && (dontMutate ? (dontMutate = !1, nextState = babelHelpers.extends({}, nextState, partialState)) : babelHelpers.extends(nextState, partialState));
        }
        return nextState;
    },
    _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
        var prevProps,
            prevState,
            _this2 = this,
            inst = this._instance,
            hasComponentDidUpdate = !!inst.componentDidUpdate;
        hasComponentDidUpdate && (prevProps = inst.props, prevState = inst.state), inst.componentWillUpdate && measureLifeCyclePerf(function () {
            return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, "componentWillUpdate"), this._currentElement = nextElement, this._context = unmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext, inst.unstable_handleError ? this._updateRenderedComponentWithErrorHandling(transaction, unmaskedContext) : this._updateRenderedComponent(transaction, unmaskedContext), hasComponentDidUpdate && transaction.getReactMountReady().enqueue(function () {
            measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState), _this2._debugID, "componentDidUpdate");
        });
    },
    _updateRenderedComponentWithErrorHandling: function _updateRenderedComponentWithErrorHandling(transaction, context) {
        var checkpoint = transaction.checkpoint();
        try {
            this._updateRenderedComponent(transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._updateRenderedComponentWithNextElement(transaction, context, null, !0), this._updateRenderedComponent(transaction, context);
        }
    },
    _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
        var nextRenderedElement = this._renderValidatedComponent();
        this._updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, !1);
    },
    _updateRenderedComponentWithNextElement: function _updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, safely) {
        var prevComponentInstance = this._renderedComponent,
            prevRenderedElement = prevComponentInstance._currentElement,
            debugID = 0;
        if (debugID = this._debugID, shouldUpdateReactComponent_1(prevRenderedElement, nextRenderedElement)) ReactReconciler_1.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));else {
            var oldHostNode = ReactReconciler_1.getHostNode(prevComponentInstance),
                nodeType = ReactNodeTypes_1.getType(nextRenderedElement);
            this._renderedNodeType = nodeType;
            var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
            this._renderedComponent = child;
            var nextMarkup = ReactReconciler_1.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);
            if (ReactReconciler_1.unmountComponent(prevComponentInstance, safely, !1), 0 !== debugID) {
                var childDebugIDs = 0 !== child._debugID ? [child._debugID] : [];
                ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
            }
            this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
        }
    },
    _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
        ReactComponentEnvironment_1.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
    },
    _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
        var renderedElement,
            inst = this._instance;
        return renderedElement = measureLifeCyclePerf(function () {
            return inst.render();
        }, this._debugID, "render"), void 0 === renderedElement && inst.render._isMockFunction && (renderedElement = null), renderedElement;
    },
    _renderValidatedComponent: function _renderValidatedComponent() {
        var renderedElement;
        if (0 && this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional) renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();else {
            ReactCurrentOwner$1.current = this;
            try {
                renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
            } finally {
                ReactCurrentOwner$1.current = null;
            }
        }
        return invariant(null === renderedElement || !1 === renderedElement || React.isValidElement(renderedElement), "%s.render(): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", this.getName() || "ReactCompositeComponent"), renderedElement;
    },
    attachRef: function attachRef(ref, component) {
        var inst = this.getPublicInstance();
        invariant(null != inst, "Stateless function components cannot have refs.");
        var publicComponentInstance = component.getPublicInstance();
        (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = publicComponentInstance;
    },
    detachRef: function detachRef(ref) {
        delete this.getPublicInstance().refs[ref];
    },
    getName: function getName() {
        var type = this._currentElement.type,
            constructor = this._instance && this._instance.constructor;
        return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
    getPublicInstance: function getPublicInstance() {
        var inst = this._instance;
        return this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional ? null : inst;
    },
    _instantiateReactComponent: null
},
    ReactCompositeComponent_1 = ReactCompositeComponent,
    emptyComponentFactory,
    ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
        emptyComponentFactory = factory;
    }
},
    ReactEmptyComponent = {
    create: function create(instantiate) {
        return emptyComponentFactory(instantiate);
    }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

var ReactEmptyComponent_1 = ReactEmptyComponent,
    genericComponentClass = null,
    textComponentClass = null,
    ReactHostComponentInjection = {
    injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
        genericComponentClass = componentClass;
    },
    injectTextComponentClass: function injectTextComponentClass(componentClass) {
        textComponentClass = componentClass;
    }
};

function createInternalComponent(element) {
    return invariant(genericComponentClass, "There is no registered component for the tag %s", element.type), new genericComponentClass(element);
}

function createInstanceForText(text) {
    return new textComponentClass(text);
}

function isTextComponent(component) {
    return component instanceof textComponentClass;
}

var ReactHostComponent = {
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactHostComponentInjection
},
    ReactHostComponent_1 = ReactHostComponent,
    nextDebugID = 1,
    ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
    this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
    if (owner) {
        var name = owner.getName();
        if (name) return "\n\nCheck the render method of `" + name + "`.";
    }
    return "";
}

function isInternalComponentType(type) {
    return "function" == typeof type && void 0 !== type.prototype && "function" == typeof type.prototype.mountComponent && "function" == typeof type.prototype.receiveComponent;
}

function instantiateReactComponent(node, shouldHaveDebugID) {
    var instance;
    if (null === node || !1 === node) instance = ReactEmptyComponent_1.create(instantiateReactComponent);else if ("object" == typeof node) {
        var element = node,
            type = element.type;
        if ("function" != typeof type && "string" != typeof type) {
            var info = "";
            (void 0 === type || "object" == typeof type && null !== type && 0 === Object.keys(type).length) && (info += " You likely forgot to export your component from the file " + "it's defined in."), info += getDeclarationErrorAddendum(element._owner), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
        }
        "string" == typeof element.type ? instance = ReactHostComponent_1.createInternalComponent(element) : isInternalComponentType(element.type) ? (instance = new element.type(element), instance.getHostNode || (instance.getHostNode = instance.getNativeNode)) : instance = new ReactCompositeComponentWrapper(element);
    } else "string" == typeof node || "number" == typeof node ? instance = ReactHostComponent_1.createInstanceForText(node) : invariant(!1, "Encountered invalid React node of type %s", typeof node);
    return warning("function" == typeof instance.mountComponent && "function" == typeof instance.receiveComponent && "function" == typeof instance.getHostNode && "function" == typeof instance.unmountComponent, "Only React Components can be mounted."), instance._mountIndex = 0, instance._mountImage = null, instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0, Object.preventExtensions && Object.preventExtensions(instance), instance;
}

babelHelpers.extends(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent_1, {
    _instantiateReactComponent: instantiateReactComponent
});

var instantiateReactComponent_1 = instantiateReactComponent,
    DevOnlyStubShim = null,
    ReactNativeFeatureFlags = require(66                       ), // 66 = ReactNativeFeatureFlags
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return DevOnlyStubShim.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    var owner = ReactCurrentOwner$2.current;
    if (null !== owner && (warning(owner._warnedAboutRefsInRender, "%s is accessing findNodeHandle inside its render(). " + "render() should be a pure function of props and state. It should " + "never access something that requires stale data from the previous " + "render, such as refs. Move this logic to componentDidMount and " + "componentDidUpdate instead.", owner.getName() || "A component"), owner._warnedAboutRefsInRender = !0), null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    TopLevelWrapper = function TopLevelWrapper() {};

TopLevelWrapper.prototype.isReactComponent = {}, TopLevelWrapper.displayName = "TopLevelWrapper", TopLevelWrapper.prototype.render = function () {
    return this.props.child;
}, TopLevelWrapper.isReactTopLevelWrapper = !0;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
    var markup = ReactReconciler_1.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo_1(containerTag), emptyObject, 0);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance, ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
    var transaction = ReactUpdates_1.ReactReconcileTransaction.getPooled();
    transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction), ReactUpdates_1.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
    _instancesByContainerID: {},
    findNodeHandle: findNodeHandle_1,
    renderComponent: function renderComponent(nextElement, containerTag, callback) {
        var nextWrappedElement = React.createElement(TopLevelWrapper, {
            child: nextElement
        }),
            topRootNodeID = containerTag,
            prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
        if (prevComponent) {
            var prevWrappedElement = prevComponent._currentElement,
                prevElement = prevWrappedElement.props.child;
            if (shouldUpdateReactComponent_1(prevElement, nextElement)) return ReactUpdateQueue_1.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject), callback && ReactUpdateQueue_1.enqueueCallbackInternal(prevComponent, callback), prevComponent;
            ReactNativeMount.unmountComponentAtNode(containerTag);
        }
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), null;
        ReactNativeTagHandles_1.assertRootTag(containerTag);
        var instance = instantiateReactComponent_1(nextWrappedElement, !1);
        if (ReactNativeMount._instancesByContainerID[containerTag] = instance, callback) {
            var nonNullCallback = callback;
            instance._pendingCallbacks = [function () {
                nonNullCallback.call(instance._renderedComponent.getPublicInstance());
            }];
        }
        return ReactUpdates_1.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag), instance._renderedComponent.getPublicInstance();
    },
    _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
        var childTag = mountImage;
        UIManager.setChildren(containerID, [childTag]);
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeMount.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), !1;
        var instance = ReactNativeMount._instancesByContainerID[containerTag];
        return !!instance && (ReactInstrumentation.debugTool.onBeginFlush(), ReactNativeMount.unmountComponentFromNode(instance, containerTag), delete ReactNativeMount._instancesByContainerID[containerTag], ReactInstrumentation.debugTool.onEndFlush(), !0);
    },
    unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
        ReactReconciler_1.unmountComponent(instance), UIManager.removeSubviewsFromContainerWithID(containerID);
    }
},
    ReactNativeMount_1 = ReactNativeMount,
    RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function close() {
        ReactDefaultBatchingStrategy.isBatchingUpdates = !1;
    }
},
    FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates_1.flushBatchedUpdates.bind(ReactUpdates_1)
},
    TRANSACTION_WRAPPERS$1 = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
}

babelHelpers.extends(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$1;
    }
});

var transaction = new ReactDefaultBatchingStrategyTransaction(),
    ReactDefaultBatchingStrategy = {
    isBatchingUpdates: !1,
    batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
        var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
        return ReactDefaultBatchingStrategy.isBatchingUpdates = !0, alreadyBatchingUpdates ? callback(a, b, c, d, e) : transaction.perform(callback, null, a, b, c, d, e);
    }
},
    ReactDefaultBatchingStrategy_1 = ReactDefaultBatchingStrategy,
    dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
    if (childrenUpdates.length) {
        for (var moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices, containerTag = ReactNativeComponentTree_1.getNodeFromInstance(inst), i = 0; i < childrenUpdates.length; i++) {
            var update = childrenUpdates[i];
            if ("MOVE_EXISTING" === update.type) (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex), (moveToIndices || (moveToIndices = [])).push(update.toIndex);else if ("REMOVE_NODE" === update.type) (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);else if ("INSERT_MARKUP" === update.type) {
                var mountImage = update.content,
                    tag = mountImage;
                (addAtIndices || (addAtIndices = [])).push(update.toIndex), (addChildTags || (addChildTags = [])).push(tag);
            }
        }
        UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
    }
},
    ReactNativeDOMIDOperations = {
    dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,
    dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
        var oldTag = id;
        UIManager.replaceExistingNonRootView(oldTag, mountImage);
    }
},
    ReactNativeDOMIDOperations_1 = ReactNativeDOMIDOperations;

function validateCallback(callback) {
    invariant(!callback || "function" == typeof callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", callback);
}

var validateCallback_1 = validateCallback;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var CallbackQueue = function () {
    function CallbackQueue() {
        _classCallCheck(this, CallbackQueue), this._callbacks = null, this._contexts = null;
    }
    return CallbackQueue.prototype.enqueue = function (callback, context) {
        this._callbacks = this._callbacks || [], this._callbacks.push(callback), this._contexts = this._contexts || [], this._contexts.push(context);
    }, CallbackQueue.prototype.notifyAll = function () {
        var callbacks = this._callbacks,
            contexts = this._contexts;
        if (callbacks && contexts) {
            invariant(callbacks.length === contexts.length, "Mismatched list of contexts in callback queue"), this._callbacks = null, this._contexts = null;
            for (var i = 0; i < callbacks.length; i++) {
                validateCallback_1(callbacks[i]), callbacks[i].call(contexts[i]);
            }callbacks.length = 0, contexts.length = 0;
        }
    }, CallbackQueue.prototype.checkpoint = function () {
        return this._callbacks ? this._callbacks.length : 0;
    }, CallbackQueue.prototype.rollback = function (len) {
        this._callbacks && this._contexts && (this._callbacks.length = len, this._contexts.length = len);
    }, CallbackQueue.prototype.reset = function () {
        this._callbacks = null, this._contexts = null;
    }, CallbackQueue.prototype.destructor = function () {
        this.reset();
    }, CallbackQueue;
}(),
    CallbackQueue_1 = PooledClass_1.addPoolingTo(CallbackQueue),
    ON_DOM_READY_QUEUEING = {
    initialize: function initialize() {
        this.reactMountReady.reset();
    },
    close: function close() {
        this.reactMountReady.notifyAll();
    }
},
    TRANSACTION_WRAPPERS$2 = [ON_DOM_READY_QUEUEING];

TRANSACTION_WRAPPERS$2.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
});

function ReactNativeReconcileTransaction() {
    this.reinitializeTransaction(), this.reactMountReady = CallbackQueue_1.getPooled();
}

var Mixin = {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$2;
    },
    getReactMountReady: function getReactMountReady() {
        return this.reactMountReady;
    },
    getUpdateQueue: function getUpdateQueue() {
        return ReactUpdateQueue_1;
    },
    checkpoint: function checkpoint() {
        return this.reactMountReady.checkpoint();
    },
    rollback: function rollback(checkpoint) {
        this.reactMountReady.rollback(checkpoint);
    },
    destructor: function destructor() {
        CallbackQueue_1.release(this.reactMountReady), this.reactMountReady = null;
    }
};

babelHelpers.extends(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin), PooledClass_1.addPoolingTo(ReactNativeReconcileTransaction);

var ReactNativeReconcileTransaction_1 = ReactNativeReconcileTransaction,
    ReactNativeComponentEnvironment = {
    processChildrenUpdates: ReactNativeDOMIDOperations_1.dangerouslyProcessChildrenUpdates,
    replaceNodeWithMarkup: ReactNativeDOMIDOperations_1.dangerouslyReplaceNodeWithMarkupByID,
    clearNode: function clearNode() {},
    ReactReconcileTransaction: ReactNativeReconcileTransaction_1
},
    ReactNativeComponentEnvironment_1 = ReactNativeComponentEnvironment,
    ReactNativeTextComponent = function ReactNativeTextComponent(text) {
    this._currentElement = text, this._stringText = "" + text, this._hostParent = null, this._rootNodeID = 0;
};

babelHelpers.extends(ReactNativeTextComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText), this._hostParent = hostParent;
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag;
        var nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, "RCTRawText", nativeTopRootTag, {
            text: this._stringText
        }), ReactNativeComponentTree_1.precacheNode(this, tag), tag;
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    receiveComponent: function receiveComponent(nextText, transaction, context) {
        if (nextText !== this._currentElement) {
            this._currentElement = nextText;
            var nextStringText = "" + nextText;
            nextStringText !== this._stringText && (this._stringText = nextStringText, UIManager.updateView(this._rootNodeID, "RCTRawText", {
                text: this._stringText
            }));
        }
    },
    unmountComponent: function unmountComponent() {
        ReactNativeComponentTree_1.uncacheNode(this), this._currentElement = null, this._stringText = null, this._rootNodeID = 0;
    }
});

var ReactNativeTextComponent_1 = ReactNativeTextComponent,
    ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
    this._currentElement = null, this._renderedComponent = instantiate(placeholderElement);
};

babelHelpers.extends(ReactSimpleEmptyComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        return ReactReconciler_1.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
    },
    receiveComponent: function receiveComponent() {},
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedComponent = null;
    }
});

var ReactSimpleEmptyComponent_1 = ReactSimpleEmptyComponent;

function inject$1() {
    ReactGenericBatching_1.injection.injectStackBatchedUpdates(ReactUpdates_1.batchedUpdates), ReactUpdates_1.injection.injectReconcileTransaction(ReactNativeComponentEnvironment_1.ReactReconcileTransaction), ReactUpdates_1.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy_1), ReactComponentEnvironment_1.injection.injectEnvironment(ReactNativeComponentEnvironment_1);
    var EmptyComponent = function EmptyComponent(instantiate) {
        var View = require(131   ); // 131 = View
        return new ReactSimpleEmptyComponent_1(React.createElement(View, {
            collapsable: !0,
            style: {
                position: "absolute"
            }
        }), instantiate);
    };
    ReactEmptyComponent_1.injection.injectEmptyComponentFactory(EmptyComponent), ReactHostComponent_1.injection.injectTextComponentClass(ReactNativeTextComponent_1), ReactHostComponent_1.injection.injectGenericComponentClass(function (tag) {
        var info = "";
        "string" == typeof tag && /^[a-z]/.test(tag) && (info += " Each component name should start with an uppercase letter."), invariant(!1, "Expected a component class, got %s.%s", tag, info);
    });
}

var ReactNativeStackInjection = {
    inject: inject$1
};

function getComponentName(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName,
    getInspectorDataForViewTag = void 0,
    traverseOwnerTreeUp = function traverseOwnerTreeUp(hierarchy, instance) {
    instance && (hierarchy.unshift(instance), traverseOwnerTreeUp(hierarchy, instance._currentElement._owner));
},
    getOwnerHierarchy = function getOwnerHierarchy(instance) {
    var hierarchy = [];
    return traverseOwnerTreeUp(hierarchy, instance), hierarchy;
},
    lastNotNativeInstance = function lastNotNativeInstance(hierarchy) {
    for (var i = hierarchy.length - 1; i > 1; i--) {
        var instance = hierarchy[i];
        if (!instance.viewConfig) return instance;
    }
    return hierarchy[0];
},
    getHostProps = function getHostProps(component) {
    var instance = component._instance;
    return instance ? instance.props || emptyObject : emptyObject;
},
    createHierarchy = function createHierarchy(componentHierarchy) {
    return componentHierarchy.map(function (component) {
        return {
            name: getComponentName_1(component),
            getInspectorData: function getInspectorData() {
                return {
                    measure: function measure(callback) {
                        return UIManager.measure(component.getHostNode(), callback);
                    },
                    props: getHostProps(component),
                    source: component._currentElement && component._currentElement._source
                };
            }
        };
    });
};

getInspectorDataForViewTag = function getInspectorDataForViewTag(viewTag) {
    var component = ReactNativeComponentTree_1.getClosestInstanceFromNode(viewTag);
    if (!component) return {
        hierarchy: [],
        props: emptyObject,
        selection: null,
        source: null
    };
    var componentHierarchy = getOwnerHierarchy(component),
        instance = lastNotNativeInstance(componentHierarchy),
        hierarchy = createHierarchy(componentHierarchy),
        props = getHostProps(instance),
        source = instance._currentElement && instance._currentElement._source;
    return {
        hierarchy: hierarchy,
        props: props,
        selection: componentHierarchy.indexOf(instance),
        source: source
    };
};

var ReactNativeStackInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    findNumericNodeHandleStack = function findNumericNodeHandleStack(componentOrHandle) {
    var nodeHandle = findNodeHandle_1(componentOrHandle);
    return null == nodeHandle || "number" == typeof nodeHandle ? nodeHandle : nodeHandle.getHostNode();
};

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck$2(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return Object.freeze(object), objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$1(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(React.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    throwOnStylesProp$1 = NativeMethodsMixinUtils.throwOnStylesProp,
    warnForStyleProps$1 = NativeMethodsMixinUtils.warnForStyleProps,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig;
        warnForStyleProps$1(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID;
        warnForStyleProps$1(nativeProps, viewConfig.validAttributes);
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_DEV = NativeMethodsMixin;

invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, "Do not override existing functions."), NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp$1(this, this.props);
}, NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp$1(this, newProps);
};

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath;

function escape(key) {
    var escaperLookup = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + ("" + key).replace(/[=:]/g, function (match) {
        return escaperLookup[match];
    });
}

var unescapeInDev = emptyFunction;

unescapeInDev = function unescapeInDev(key) {
    var unescapeRegex = /(=0|=2)/g,
        unescaperLookup = {
        "=0": "=",
        "=2": ":"
    };
    return ("" + ("." === key[0] && "$" === key[1] ? key.substring(2) : key.substring(1))).replace(unescapeRegex, function (match) {
        return unescaperLookup[match];
    });
};

var KeyEscapeUtils = {
    escape: escape,
    unescapeInDev: unescapeInDev
},
    KeyEscapeUtils_1 = KeyEscapeUtils,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    getCurrentStackAddendum = ReactGlobalSharedState_1.ReactComponentTreeHook.getCurrentStackAddendum,
    SEPARATOR = ".",
    SUBSEPARATOR = ":",
    didWarnAboutMaps = !1;

function getComponentKey(component, index) {
    return component && "object" == typeof component && null != component.key ? KeyEscapeUtils_1.escape(component.key) : index.toString(36);
}

function traverseStackChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
    var child,
        nextName,
        subtreeCount = 0,
        nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
        child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
    } else {
        var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
        if ("function" == typeof iteratorFn) {
            iteratorFn === children.entries && (warning(didWarnAboutMaps, "Using Maps as children is unsupported and will likely yield " + "unexpected results. Convert it to a sequence/iterable of keyed " + "ReactElements instead.%s", getCurrentStackAddendum()), didWarnAboutMaps = !0);
            for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
                child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
            }
        } else if ("object" === type) {
            var addendum = "";
            addendum = " If you meant to render a collection of children, use an array " + "instead." + getCurrentStackAddendum();
            var childrenString = "" + children;
            invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
        }
    }
    return subtreeCount;
}

function traverseStackChildren(children, callback, traverseContext) {
    return null == children ? 0 : traverseStackChildrenImpl(children, "", callback, traverseContext);
}

var traverseStackChildren_1 = traverseStackChildren,
    ReactComponentTreeHook$2;

"undefined" != typeof process && process.env && "development" == "test" && (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function instantiateChild(childInstances, child, name, selfDebugID) {
    var keyUnique = void 0 === childInstances[name];
    ReactComponentTreeHook$2 || (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook), keyUnique || warning(!1, "flattenChildren(...):" + "Encountered two children with the same key, `%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$2.getStackAddendumByID(selfDebugID)), null != child && keyUnique && (childInstances[name] = instantiateReactComponent_1(child, !0));
}

var ReactChildReconciler = {
    instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
        if (null == nestedChildNodes) return null;
        var childInstances = {};
        return traverseStackChildren_1(nestedChildNodes, function (childInsts, child, name) {
            return instantiateChild(childInsts, child, name, selfDebugID);
        }, childInstances), childInstances;
    },
    updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
        if (nextChildren || prevChildren) {
            var name, prevChild;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    prevChild = prevChildren && prevChildren[name];
                    var prevElement = prevChild && prevChild._currentElement,
                        nextElement = nextChildren[name];
                    if (null != prevChild && shouldUpdateReactComponent_1(prevElement, nextElement)) ReactReconciler_1.receiveComponent(prevChild, nextElement, transaction, context), nextChildren[name] = prevChild;else {
                        var nextChildInstance = instantiateReactComponent_1(nextElement, !0);
                        nextChildren[name] = nextChildInstance;
                        var nextChildMountImage = ReactReconciler_1.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
                        mountImages.push(nextChildMountImage), prevChild && (removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
                    }
                }
            }for (name in prevChildren) {
                !prevChildren.hasOwnProperty(name) || nextChildren && nextChildren.hasOwnProperty(name) || (prevChild = prevChildren[name], removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
            }
        }
    },
    unmountChildren: function unmountChildren(renderedChildren, safely, skipLifecycle) {
        for (var name in renderedChildren) {
            if (renderedChildren.hasOwnProperty(name)) {
                var renderedChild = renderedChildren[name];
                ReactReconciler_1.unmountComponent(renderedChild, safely, skipLifecycle);
            }
        }
    }
},
    ReactChildReconciler_1 = ReactChildReconciler,
    ReactComponentTreeHook$3;

"undefined" != typeof process && process.env && "development" == "test" && (ReactComponentTreeHook$3 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
    if (traverseContext && "object" == typeof traverseContext) {
        var result = traverseContext,
            keyUnique = void 0 === result[name];
        ReactComponentTreeHook$3 || (ReactComponentTreeHook$3 = ReactGlobalSharedState_1.ReactComponentTreeHook), keyUnique || warning(!1, "flattenChildren(...): Encountered two children with the same key, " + "`%s`. " + "Keys should be unique so that components maintain their identity " + "across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted — the behavior is unsupported and " + "could change in a future version.%s", KeyEscapeUtils_1.unescapeInDev(name), ReactComponentTreeHook$3.getStackAddendumByID(selfDebugID)), keyUnique && null != child && (result[name] = child);
    }
}

function flattenStackChildren(children, selfDebugID) {
    if (null == children) return children;
    var result = {};
    return traverseStackChildren_1(children, function (traverseContext, child, name) {
        return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result), result;
}

var flattenStackChildren_1 = flattenStackChildren,
    ReactCurrentOwner$3 = ReactGlobalSharedState_1.ReactCurrentOwner;

function makeInsertMarkup(markup, afterNode, toIndex) {
    return {
        type: "INSERT_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeMove(child, afterNode, toIndex) {
    return {
        type: "MOVE_EXISTING",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: ReactReconciler_1.getHostNode(child),
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeRemove(child, node) {
    return {
        type: "REMOVE_NODE",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: node,
        toIndex: null,
        afterNode: null
    };
}

function makeSetMarkup(markup) {
    return {
        type: "SET_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function makeTextContent(textContent) {
    return {
        type: "TEXT_CONTENT",
        content: textContent,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function enqueue(queue, update) {
    return update && (queue = queue || [], queue.push(update)), queue;
}

function processQueue(inst, updateQueue) {
    ReactComponentEnvironment_1.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction,
    getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
        var internal;
        (internal = ReactInstanceMap_1.get(inst)) && (inst = internal);
    }
    return inst._debugID;
};

setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);
    0 !== debugID && ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
    }) : []);
};

var ReactMultiChild = {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
        var selfDebugID = getDebugID(this);
        if (this._currentElement) try {
            return ReactCurrentOwner$3.current = this._currentElement._owner, ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
        } finally {
            ReactCurrentOwner$3.current = null;
        }
        return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context);
    },
    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
        var nextChildren,
            selfDebugID = 0;
        if (selfDebugID = getDebugID(this), this._currentElement) {
            try {
                ReactCurrentOwner$3.current = this._currentElement._owner, nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID);
            } finally {
                ReactCurrentOwner$3.current = null;
            }
            return ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
        }
        return nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID), ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
    },
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [],
            index = 0;
        for (var name in children) {
            if (children.hasOwnProperty(name)) {
                var child = children[name],
                    selfDebugID = 0;
                selfDebugID = getDebugID(this);
                var mountImage = ReactReconciler_1.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
                child._mountIndex = index++, mountImages.push(mountImage);
            }
        }return setChildrenForInstrumentation.call(this, children), mountImages;
    },
    updateTextContent: function updateTextContent(nextContent) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeTextContent(nextContent)]);
    },
    updateMarkup: function updateMarkup(nextMarkup) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeSetMarkup(nextMarkup)]);
    },
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
    },
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren,
            removedNodes = {},
            mountImages = [],
            nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
        if (nextChildren || prevChildren) {
            var name,
                updates = null,
                nextIndex = 0,
                lastIndex = 0,
                nextMountIndex = 0,
                lastPlacedNode = null;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    var prevChild = prevChildren && prevChildren[name],
                        nextChild = nextChildren[name];
                    prevChild === nextChild ? (updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)), lastIndex = Math.max(prevChild._mountIndex, lastIndex), prevChild._mountIndex = nextIndex) : (prevChild && (lastIndex = Math.max(prevChild._mountIndex, lastIndex)), updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context)), nextMountIndex++), nextIndex++, lastPlacedNode = ReactReconciler_1.getHostNode(nextChild);
                }
            }for (name in removedNodes) {
                removedNodes.hasOwnProperty(name) && (updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name])));
            }updates && processQueue(this, updates), this._renderedChildren = nextChildren, setChildrenForInstrumentation.call(this, nextChildren);
        }
    },
    unmountChildren: function unmountChildren(safely, skipLifecycle) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(renderedChildren, safely, skipLifecycle), this._renderedChildren = null;
    },
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
        if (child._mountIndex < lastIndex) return makeMove(child, afterNode, toIndex);
    },
    createChild: function createChild(child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },
    removeChild: function removeChild(child, node) {
        return makeRemove(child, node);
    },
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
        return child._mountIndex = index, this.createChild(child, afterNode, mountImage);
    },
    _unmountChild: function _unmountChild(child, node) {
        var update = this.removeChild(child, node);
        return child._mountIndex = null, update;
    }
},
    ReactMultiChild_1 = ReactMultiChild,
    ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
    this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
    getPublicInstance: function getPublicInstance() {
        return this;
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactNativeComponentTree_1.uncacheNode(this), this.unmountChildren(safely, skipLifecycle), this._rootNodeID = 0;
    },
    initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
        var mountImages = this.mountChildren(children, transaction, context);
        if (mountImages.length) {
            for (var createdTags = [], i = 0, l = mountImages.length; i < l; i++) {
                var mountImage = mountImages[i],
                    childTag = mountImage;
                createdTags[i] = childTag;
            }
            UIManager.setChildren(containerTag, createdTags);
        }
    },
    receiveComponent: function receiveComponent(nextElement, transaction, context) {
        var prevElement = this._currentElement;
        this._currentElement = nextElement;
        for (var key in this.viewConfig.validAttributes) {
            nextElement.props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(nextElement.props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);
        updatePayload && UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload), this.updateChildren(nextElement.props.children, transaction, context);
    },
    getName: function getName() {
        return this.constructor.displayName || this.constructor.name || "Unknown";
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        for (var key in this.viewConfig.validAttributes) {
            this._currentElement.props.hasOwnProperty(key) && deepFreezeAndThrowOnMutationInDev(this._currentElement.props[key]);
        }var updatePayload = ReactNativeAttributePayload_1.create(this._currentElement.props, this.viewConfig.validAttributes),
            nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload), ReactNativeComponentTree_1.precacheNode(this, tag), this.initializeChildren(this._currentElement.props.children, tag, transaction, context), tag;
    }
}, babelHelpers.extends(ReactNativeBaseComponent.prototype, ReactMultiChild_1, ReactNativeBaseComponent.Mixin, NativeMethodsMixin_1);

var ReactNativeBaseComponent_1 = ReactNativeBaseComponent,
    createReactNativeComponentClassStack = function createReactNativeComponentClassStack(viewConfig) {
    var Constructor = function Constructor(element) {
        this._currentElement = element, this._topLevelWrapper = null, this._hostParent = null, this._hostContainerInfo = null, this._rootNodeID = 0, this._renderedChildren = null;
    };
    return Constructor.displayName = viewConfig.uiViewClassName, Constructor.viewConfig = viewConfig, Constructor.propTypes = viewConfig.propTypes, Constructor.prototype = new ReactNativeBaseComponent_1(viewConfig), Constructor.prototype.constructor = Constructor, Constructor;
},
    createReactNativeComponentClassStack_1 = createReactNativeComponentClassStack,
    ReactNativeFeatureFlags$3 = require(66                       ), // 66 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? DevOnlyStubShim : createReactNativeComponentClassStack_1,
    ReactNativeFeatureFlags$4 = require(66                       ), // 66 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    lowPriorityWarning = function lowPriorityWarning() {},
    printWarning = function printWarning(format) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
    }var argIndex = 0,
        message = "Warning: " + format.replace(/%s/g, function () {
        return args[argIndex++];
    });
    "undefined" != typeof console && console.warn(message);
    try {
        throw new Error(message);
    } catch (x) {}
};

lowPriorityWarning = function lowPriorityWarning(condition, format) {
    if (void 0 === format) throw new Error("`warning(condition, format, ...args)` requires a warning " + "message argument");
    if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
        }printWarning.apply(void 0, [format].concat(args));
    }
};

var lowPriorityWarning_1 = lowPriorityWarning,
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
};

function roundFloat(val) {
    var base = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
        n = Math.pow(10, base);
    return Math.floor(val * n) / n;
}

function consoleTable(table) {
    console.table(table);
}

function getLastMeasurements() {
    return ReactDebugTool_1.getFlushHistory();
}

function getExclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
        var displayName = treeSnapshot[instanceID].displayName,
            key = displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            counts: {},
            durations: {},
            totalDuration: 0
        }), stats.durations[timerType] || (stats.durations[timerType] = 0), stats.counts[timerType] || (stats.counts[timerType] = 0), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID,
                timerType = measurement.timerType;
            updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
                stats.totalDuration += duration, stats.durations[timerType] += duration, stats.counts[timerType]++;
            });
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.totalDuration - a.totalDuration;
    });
}

function getInclusive() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc.displayName,
            ownerID = _treeSnapshot$instanc.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    var isCompositeByID = {};
    return flushHistory.forEach(function (flush) {
        flush.measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (isCompositeByID[instanceID] = !0);
        });
    }), flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot;
        measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                    stats.renderCount++;
                });
                for (var nextParentID = instanceID; nextParentID;) {
                    isCompositeByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                        stats.inclusiveRenderDuration += duration;
                    }), nextParentID = treeSnapshot[nextParentID].parentID;
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getWasted() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        aggregatedStats = {},
        affectedIDs = {};
    function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
        var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
            displayName = _treeSnapshot$instanc2.displayName,
            ownerID = _treeSnapshot$instanc2.ownerID,
            owner = treeSnapshot[ownerID],
            key = (owner ? owner.displayName + " > " : "") + displayName,
            stats = aggregatedStats[key];
        stats || (affectedIDs[key] = {}, stats = aggregatedStats[key] = {
            key: key,
            instanceCount: 0,
            inclusiveRenderDuration: 0,
            renderCount: 0
        }), affectedIDs[key][instanceID] = !0, applyUpdate(stats);
    }
    return flushHistory.forEach(function (flush) {
        var measurements = flush.measurements,
            treeSnapshot = flush.treeSnapshot,
            operations = flush.operations,
            isDefinitelyNotWastedByID = {};
        operations.forEach(function (operation) {
            for (var instanceID = operation.instanceID, nextParentID = instanceID; nextParentID;) {
                isDefinitelyNotWastedByID[nextParentID] = !0, nextParentID = treeSnapshot[nextParentID].parentID;
            }
        });
        var renderedCompositeIDs = {};
        measurements.forEach(function (measurement) {
            var instanceID = measurement.instanceID;
            "render" === measurement.timerType && (renderedCompositeIDs[instanceID] = !0);
        }), measurements.forEach(function (measurement) {
            var duration = measurement.duration,
                instanceID = measurement.instanceID;
            if ("render" === measurement.timerType) {
                var updateCount = treeSnapshot[instanceID].updateCount;
                if (!isDefinitelyNotWastedByID[instanceID] && 0 !== updateCount) {
                    updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
                        stats.renderCount++;
                    });
                    for (var nextParentID = instanceID; nextParentID;) {
                        renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID] && updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
                            stats.inclusiveRenderDuration += duration;
                        }), nextParentID = treeSnapshot[nextParentID].parentID;
                    }
                }
            }
        });
    }), Object.keys(aggregatedStats).map(function (key) {
        return _extends$2({}, aggregatedStats[key], {
            instanceCount: Object.keys(affectedIDs[key]).length
        });
    }).sort(function (a, b) {
        return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
    });
}

function getOperations() {
    var flushHistory = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : getLastMeasurements(),
        stats = [];
    return flushHistory.forEach(function (flush, flushIndex) {
        var operations = flush.operations,
            treeSnapshot = flush.treeSnapshot;
        operations.forEach(function (operation) {
            var instanceID = operation.instanceID,
                type = operation.type,
                payload = operation.payload,
                _treeSnapshot$instanc3 = treeSnapshot[instanceID],
                displayName = _treeSnapshot$instanc3.displayName,
                ownerID = _treeSnapshot$instanc3.ownerID,
                owner = treeSnapshot[ownerID],
                key = (owner ? owner.displayName + " > " : "") + displayName;
            stats.push({
                flushIndex: flushIndex,
                instanceID: instanceID,
                key: key,
                type: type,
                ownerID: ownerID,
                payload: payload
            });
        });
    }), stats;
}

function printExclusive(flushHistory) {
    consoleTable(getExclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            totalDuration = item.totalDuration,
            renderCount = item.counts.render || 0,
            renderDuration = item.durations.render || 0;
        return {
            Component: key,
            "Total time (ms)": roundFloat(totalDuration),
            "Instance count": instanceCount,
            "Total render time (ms)": roundFloat(renderDuration),
            "Average render time (ms)": renderCount ? roundFloat(renderDuration / renderCount) : void 0,
            "Render count": renderCount,
            "Total lifecycle time (ms)": roundFloat(totalDuration - renderDuration)
        };
    }));
}

function printInclusive(flushHistory) {
    consoleTable(getInclusive(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive render time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printWasted(flushHistory) {
    consoleTable(getWasted(flushHistory).map(function (item) {
        var key = item.key,
            instanceCount = item.instanceCount,
            inclusiveRenderDuration = item.inclusiveRenderDuration,
            renderCount = item.renderCount;
        return {
            "Owner > Component": key,
            "Inclusive wasted time (ms)": roundFloat(inclusiveRenderDuration),
            "Instance count": instanceCount,
            "Render count": renderCount
        };
    }));
}

function printOperations(flushHistory) {
    consoleTable(getOperations(flushHistory).map(function (stat) {
        return {
            "Owner > Node": stat.key,
            Operation: stat.type,
            Payload: "object" == typeof stat.payload ? JSON.stringify(stat.payload) : stat.payload,
            "Flush index": stat.flushIndex,
            "Owner Component ID": stat.ownerID,
            "DOM Component ID": stat.instanceID
        };
    }));
}

var warnedAboutPrintDOM = !1;

function printDOM(measurements) {
    return lowPriorityWarning_1(warnedAboutPrintDOM, "`ReactPerf.printDOM(...)` is deprecated. Use " + "`ReactPerf.printOperations(...)` instead."), warnedAboutPrintDOM = !0, printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = !1;

function getMeasurementsSummaryMap(measurements) {
    return lowPriorityWarning_1(warnedAboutGetMeasurementsSummaryMap, "`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use " + "`ReactPerf.getWasted(...)` instead."), warnedAboutGetMeasurementsSummaryMap = !0, getWasted(measurements);
}

function start() {
    ReactDebugTool_1.beginProfiling();
}

function stop() {
    ReactDebugTool_1.endProfiling();
}

function isRunning() {
    return ReactDebugTool_1.isProfiling();
}

var ReactPerfAnalysis = {
    getLastMeasurements: getLastMeasurements,
    getExclusive: getExclusive,
    getInclusive: getInclusive,
    getWasted: getWasted,
    getOperations: getOperations,
    printExclusive: printExclusive,
    printInclusive: printInclusive,
    printWasted: printWasted,
    printOperations: printOperations,
    start: start,
    stop: stop,
    isRunning: isRunning,
    printDOM: printDOM,
    getMeasurementsSummaryMap: getMeasurementsSummaryMap
},
    ReactPerf = ReactPerfAnalysis;

ReactNativeInjection.inject(), ReactNativeStackInjection.inject();

var render = function render(element, mountInto, callback) {
    return ReactNativeMount_1.renderComponent(element, mountInto, callback);
},
    ReactNativeStack = {
    NativeComponent: ReactNativeComponent_1,
    hasReactNativeInitialized: !1,
    findNodeHandle: findNumericNodeHandleStack,
    render: render,
    unmountComponentAtNode: ReactNativeMount_1.unmountComponentAtNode,
    unstable_batchedUpdates: ReactUpdates_1.batchedUpdates,
    unmountComponentAtNodeAndRemoveContainer: ReactNativeMount_1.unmountComponentAtNodeAndRemoveContainer,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

babelHelpers.extends(ReactNativeStack.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {
    ReactDebugTool: ReactDebugTool_1,
    ReactPerf: ReactPerf
}), "undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
            return ReactNativeComponentTree_1.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
            for (; inst._renderedComponent;) {
                inst = inst._renderedComponent;
            }return inst ? ReactNativeComponentTree_1.getNodeFromInstance(inst) : null;
        }
    },
    Mount: ReactNativeMount_1,
    Reconciler: ReactReconciler_1,
    getInspectorDataForViewTag: ReactNativeStackInspector.getInspectorDataForViewTag
});

var ReactNativeStackEntry = ReactNativeStack;

module.exports = ReactNativeStackEntry;
}, 130, null, "ReactNativeStack-dev");
__d(/* View */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/View/View.js';
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var ReactNativeStyleAttributes = require(133                         ); // 133 = ReactNativeStyleAttributes
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var View = createReactClass({
  displayName: 'View',

  mixins: [NativeMethodsMixin],

  propTypes: ViewPropTypes,

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  render: function render() {
    invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');

    return React.createElement(RCTView, babelHelpers.extends({}, this.props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      }
    }));
  }
});

var RCTView = requireNativeComponent('RCTView', View, {
  nativeOnly: {
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true
  }
});

if (__DEV__) {
  var UIManager = require(125        ); // 125 = UIManager
  var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};
  for (var prop in viewConfig.nativeProps) {
    var viewAny = View;
    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
      throw new Error('View is missing propType for native prop `' + prop + '`');
    }
  }
}

var ViewToExport = RCTView;
if (__DEV__) {
  ViewToExport = View;
}

module.exports = ViewToExport;
}, 131, null, "View");
__d(/* React */function(global, require, module, exports) {

'use strict';

module.exports = require(13     ); // 13 = react
}, 132, null, "React");
__d(/* ReactNativeStyleAttributes */function(global, require, module, exports) {

'use strict';

var ImageStylePropTypes = require(134                  ); // 134 = ImageStylePropTypes
var TextStylePropTypes = require(141                 ); // 141 = TextStylePropTypes
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror
var processColor = require(115           ); // 115 = processColor
var processTransform = require(143               ); // 143 = processTransform
var sizesDiffer = require(145          ); // 145 = sizesDiffer

var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
}, 133, null, "ReactNativeStyleAttributes");
__d(/* ImageStylePropTypes */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(62             ); // 62 = ColorPropType
var ImageResizeMode = require(135              ); // 135 = ImageResizeMode
var LayoutPropTypes = require(137              ); // 137 = LayoutPropTypes
var ReactPropTypes = require(20          ); // 20 = prop-types
var ShadowPropTypesIOS = require(138                 ); // 138 = ShadowPropTypesIOS
var TransformPropTypes = require(139                 ); // 139 = TransformPropTypes

var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
}, 134, null, "ImageStylePropTypes");
__d(/* ImageResizeMode */function(global, require, module, exports) {
'use strict';

var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror

var ImageResizeMode = keyMirror({
  contain: null,

  cover: null,

  stretch: null,

  center: null,

  repeat: null
});

module.exports = ImageResizeMode;
}, 135, null, "ImageResizeMode");
__d(/* fbjs/lib/keyMirror.js */function(global, require, module, exports) {

'use strict';

var invariant = require(28           ); // 28 = ./invariant

var keyMirror = function keyMirror(obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}, 136, null, "fbjs/lib/keyMirror.js");
__d(/* LayoutPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(20          ); // 20 = prop-types

var LayoutPropTypes = {
  display: ReactPropTypes.oneOf(['none', 'flex']),

  width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  borderWidth: ReactPropTypes.number,

  borderTopWidth: ReactPropTypes.number,

  borderRightWidth: ReactPropTypes.number,

  borderBottomWidth: ReactPropTypes.number,

  borderLeftWidth: ReactPropTypes.number,

  position: ReactPropTypes.oneOf(['absolute', 'relative']),

  flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

  flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),

  justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),

  alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around']),

  overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),

  flex: ReactPropTypes.number,
  flexGrow: ReactPropTypes.number,
  flexShrink: ReactPropTypes.number,
  flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  aspectRatio: ReactPropTypes.number,

  zIndex: ReactPropTypes.number,

  direction: ReactPropTypes.oneOf(['inherit', 'ltr', 'rtl'])
};

module.exports = LayoutPropTypes;
}, 137, null, "LayoutPropTypes");
__d(/* ShadowPropTypesIOS */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(62             ); // 62 = ColorPropType
var ReactPropTypes = require(20          ); // 20 = prop-types

var ShadowPropTypesIOS = {
  shadowColor: ColorPropType,

  shadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),

  shadowOpacity: ReactPropTypes.number,

  shadowRadius: ReactPropTypes.number
};

module.exports = ShadowPropTypesIOS;
}, 138, null, "ShadowPropTypesIOS");
__d(/* TransformPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(20          ); // 20 = prop-types

var deprecatedPropType = require(140                 ); // 140 = deprecatedPropType

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({ perspective: ReactPropTypes.number }), ReactPropTypes.shape({ rotate: ReactPropTypes.string }), ReactPropTypes.shape({ rotateX: ReactPropTypes.string }), ReactPropTypes.shape({ rotateY: ReactPropTypes.string }), ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }), ReactPropTypes.shape({ scale: ReactPropTypes.number }), ReactPropTypes.shape({ scaleX: ReactPropTypes.number }), ReactPropTypes.shape({ scaleY: ReactPropTypes.number }), ReactPropTypes.shape({ translateX: ReactPropTypes.number }), ReactPropTypes.shape({ translateY: ReactPropTypes.number }), ReactPropTypes.shape({ skewX: ReactPropTypes.string }), ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),

  transformMatrix: TransformMatrixPropType,

  decomposedMatrix: DecomposedMatrixPropType,

  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};

module.exports = TransformPropTypes;
}, 139, null, "TransformPropTypes");
__d(/* deprecatedPropType */function(global, require, module, exports) {
'use strict';

var UIManager = require(125        ); // 125 = UIManager

function deprecatedPropType(propType, explanation) {
  return function validate(props, propName, componentName) {
    if (!UIManager[componentName] && props[propName] !== undefined) {
      console.warn('`' + propName + '` supplied to `' + componentName + '` has been deprecated. ' + explanation);
    }

    for (var _len = arguments.length, rest = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      rest[_key - 3] = arguments[_key];
    }

    return propType.apply(undefined, [props, propName, componentName].concat(rest));
  };
}

module.exports = deprecatedPropType;
}, 140, null, "deprecatedPropType");
__d(/* TextStylePropTypes */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(62             ); // 62 = ColorPropType
var ReactPropTypes = require(20          ); // 20 = prop-types
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
}, 141, null, "TextStylePropTypes");
__d(/* ViewStylePropTypes */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(62             ); // 62 = ColorPropType
var LayoutPropTypes = require(137              ); // 137 = LayoutPropTypes
var ReactPropTypes = require(20          ); // 20 = prop-types
var ShadowPropTypesIOS = require(138                 ); // 138 = ShadowPropTypesIOS
var TransformPropTypes = require(139                 ); // 139 = TransformPropTypes

var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,

  elevation: ReactPropTypes.number
});

module.exports = ViewStylePropTypes;
}, 142, null, "ViewStylePropTypes");
__d(/* processTransform */function(global, require, module, exports) {
'use strict';

var MatrixMath = require(144         ); // 144 = MatrixMath
var Platform = require(38        ); // 38 = Platform

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var stringifySafe = require(36             ); // 36 = stringifySafe

function processTransform(transform) {
  if (__DEV__) {
    _validateTransforms(transform);
  }

  if (Platform.OS === 'android' || Platform.OS === 'ios') {
    return transform;
  }

  var result = MatrixMath.createIdentityMatrix();

  transform.forEach(function (transformation) {
    var key = Object.keys(transformation)[0];
    var value = transformation[key];

    switch (key) {
      case 'matrix':
        MatrixMath.multiplyInto(result, result, value);
        break;
      case 'perspective':
        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);
        break;
      case 'rotateX':
        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);
        break;
      case 'rotateY':
        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);
        break;
      case 'rotate':
      case 'rotateZ':
        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);
        break;
      case 'scale':
        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);
        break;
      case 'scaleX':
        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);
        break;
      case 'scaleY':
        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);
        break;
      case 'translate':
        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);
        break;
      case 'translateX':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);
        break;
      case 'translateY':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);
        break;
      case 'skewX':
        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);
        break;
      case 'skewY':
        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);
        break;
      default:
        throw new Error('Invalid transform name: ' + key);
    }
  });

  return result;
}

function _multiplyTransform(result, matrixMathFunction, args) {
  var matrixToApply = MatrixMath.createIdentityMatrix();
  var argsWithIdentity = [matrixToApply].concat(args);
  matrixMathFunction.apply(this, argsWithIdentity);
  MatrixMath.multiplyInto(result, result, matrixToApply);
}

function _convertToRadians(value) {
  var floatValue = parseFloat(value);
  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
}

function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}

function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');

  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}

module.exports = processTransform;
}, 143, null, "processTransform");
__d(/* MatrixMath */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var MatrixMath = {
  createIdentityMatrix: function createIdentityMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },

  createCopy: function createCopy(m) {
    return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
  },

  createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
    var a = 2 / (right - left);
    var b = 2 / (top - bottom);
    var c = -2 / (far - near);

    var tx = -(right + left) / (right - left);
    var ty = -(top + bottom) / (top - bottom);
    var tz = -(far + near) / (far - near);

    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
  },

  createFrustum: function createFrustum(left, right, bottom, top, near, far) {
    var r_width = 1 / (right - left);
    var r_height = 1 / (top - bottom);
    var r_depth = 1 / (near - far);
    var x = 2 * (near * r_width);
    var y = 2 * (near * r_height);
    var A = (right + left) * r_width;
    var B = (top + bottom) * r_height;
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
  },

  createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
    var h = 1 / Math.tan(fovInRadians / 2);
    var r_depth = 1 / (near - far);
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
  },

  createTranslate2d: function createTranslate2d(x, y) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseTranslate2dCommand(mat, x, y);
    return mat;
  },

  reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
  },

  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
    matrixCommand[14] = z;
  },

  createScale: function createScale(factor) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseScaleCommand(mat, factor);
    return mat;
  },

  reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
    matrixCommand[5] = factor;
  },

  reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
    matrixCommand[0] = x;
    matrixCommand[5] = y;
    matrixCommand[10] = z;
  },

  reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
    matrixCommand[11] = -1 / p;
  },

  reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
  },
  reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
    matrixCommand[5] = factor;
  },
  reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
    matrixCommand[10] = factor;
  },


  reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
    matrixCommand[5] = Math.cos(radians);
    matrixCommand[6] = Math.sin(radians);
    matrixCommand[9] = -Math.sin(radians);
    matrixCommand[10] = Math.cos(radians);
  },

  reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
    matrixCommand[0] = Math.cos(amount);
    matrixCommand[2] = -Math.sin(amount);
    matrixCommand[8] = Math.sin(amount);
    matrixCommand[10] = Math.cos(amount);
  },

  reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
    matrixCommand[0] = Math.cos(radians);
    matrixCommand[1] = Math.sin(radians);
    matrixCommand[4] = -Math.sin(radians);
    matrixCommand[5] = Math.cos(radians);
  },

  createRotateZ: function createRotateZ(radians) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseRotateZCommand(mat, radians);
    return mat;
  },

  reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
    matrixCommand[4] = Math.tan(radians);
  },

  reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
    matrixCommand[1] = Math.tan(radians);
  },

  multiplyInto: function multiplyInto(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  },

  determinant: function determinant(matrix) {
    var _matrix = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix[0],
        m01 = _matrix[1],
        m02 = _matrix[2],
        m03 = _matrix[3],
        m10 = _matrix[4],
        m11 = _matrix[5],
        m12 = _matrix[6],
        m13 = _matrix[7],
        m20 = _matrix[8],
        m21 = _matrix[9],
        m22 = _matrix[10],
        m23 = _matrix[11],
        m30 = _matrix[12],
        m31 = _matrix[13],
        m32 = _matrix[14],
        m33 = _matrix[15];

    return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
  },
  inverse: function inverse(matrix) {
    var det = MatrixMath.determinant(matrix);
    if (!det) {
      return matrix;
    }

    var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix2[0],
        m01 = _matrix2[1],
        m02 = _matrix2[2],
        m03 = _matrix2[3],
        m10 = _matrix2[4],
        m11 = _matrix2[5],
        m12 = _matrix2[6],
        m13 = _matrix2[7],
        m20 = _matrix2[8],
        m21 = _matrix2[9],
        m22 = _matrix2[10],
        m23 = _matrix2[11],
        m30 = _matrix2[12],
        m31 = _matrix2[13],
        m32 = _matrix2[14],
        m33 = _matrix2[15];

    return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
  },
  transpose: function transpose(m) {
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
  },
  multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
    var _v = babelHelpers.slicedToArray(v, 4),
        vx = _v[0],
        vy = _v[1],
        vz = _v[2],
        vw = _v[3];

    return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
  },
  v3Length: function v3Length(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  },
  v3Normalize: function v3Normalize(vector, v3Length) {
    var im = 1 / (v3Length || MatrixMath.v3Length(vector));
    return [vector[0] * im, vector[1] * im, vector[2] * im];
  },
  v3Dot: function v3Dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  },
  v3Combine: function v3Combine(a, b, aScale, bScale) {
    return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
  },
  v3Cross: function v3Cross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  },
  quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
    var _q = babelHelpers.slicedToArray(q, 4),
        qx = _q[0],
        qy = _q[1],
        qz = _q[2],
        qw = _q[3];

    var qw2 = qw * qw;
    var qx2 = qx * qx;
    var qy2 = qy * qy;
    var qz2 = qz * qz;
    var test = qx * qy + qz * qw;
    var unit = qw2 + qx2 + qy2 + qz2;
    var conv = 180 / Math.PI;

    if (test > 0.49999 * unit) {
      return [0, 2 * Math.atan2(qx, qw) * conv, 90];
    }
    if (test < -0.49999 * unit) {
      return [0, -2 * Math.atan2(qx, qw) * conv, -90];
    }

    return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
  },
  roundTo3Places: function roundTo3Places(n) {
    var arr = n.toString().split('e');
    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
  },
  decomposeMatrix: function decomposeMatrix(transformMatrix) {

    invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);

    var perspective = [];
    var quaternion = [];
    var scale = [];
    var skew = [];
    var translation = [];

    if (!transformMatrix[15]) {
      return;
    }
    var matrix = [];
    var perspectiveMatrix = [];
    for (var i = 0; i < 4; i++) {
      matrix.push([]);
      for (var j = 0; j < 4; j++) {
        var value = transformMatrix[i * 4 + j] / transformMatrix[15];
        matrix[i].push(value);
        perspectiveMatrix.push(j === 3 ? 0 : value);
      }
    }
    perspectiveMatrix[15] = 1;

    if (!MatrixMath.determinant(perspectiveMatrix)) {
      return;
    }

    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
      var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];

      var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
      var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
      var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
    } else {
      perspective[0] = perspective[1] = perspective[2] = 0;
      perspective[3] = 1;
    }

    for (var i = 0; i < 3; i++) {
      translation[i] = matrix[3][i];
    }

    var row = [];
    for (i = 0; i < 3; i++) {
      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
    }

    scale[0] = MatrixMath.v3Length(row[0]);
    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    scale[1] = MatrixMath.v3Length(row[1]);
    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
    skew[0] /= scale[1];

    skew[1] = MatrixMath.v3Dot(row[0], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
    skew[2] = MatrixMath.v3Dot(row[1], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);

    scale[2] = MatrixMath.v3Length(row[2]);
    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
    skew[1] /= scale[2];
    skew[2] /= scale[2];

    var pdum3 = MatrixMath.v3Cross(row[1], row[2]);
    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
      for (i = 0; i < 3; i++) {
        scale[i] *= -1;
        row[i][0] *= -1;
        row[i][1] *= -1;
        row[i][2] *= -1;
      }
    }

    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

    if (row[2][1] > row[1][2]) {
      quaternion[0] = -quaternion[0];
    }
    if (row[0][2] > row[2][0]) {
      quaternion[1] = -quaternion[1];
    }
    if (row[1][0] > row[0][1]) {
      quaternion[2] = -quaternion[2];
    }

    var rotationDegrees;
    if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
      rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
    } else {
      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
    }

    return {
      rotationDegrees: rotationDegrees,
      perspective: perspective,
      quaternion: quaternion,
      scale: scale,
      skew: skew,
      translation: translation,

      rotate: rotationDegrees[2],
      rotateX: rotationDegrees[0],
      rotateY: rotationDegrees[1],
      scaleX: scale[0],
      scaleY: scale[1],
      translateX: translation[0],
      translateY: translation[1]
    };
  }
};

module.exports = MatrixMath;
}, 144, null, "MatrixMath");
__d(/* sizesDiffer */function(global, require, module, exports) {
'use strict';

var dummySize = { width: undefined, height: undefined };

var sizesDiffer = function sizesDiffer(one, two) {
  one = one || dummySize;
  two = two || dummySize;
  return one !== two && (one.width !== two.width || one.height !== two.height);
};

module.exports = sizesDiffer;
}, 145, null, "sizesDiffer");
__d(/* ReactNativeViewAttributes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(133                         ); // 133 = ReactNativeStyleAttributes

var ReactNativeViewAttributes = {};

ReactNativeViewAttributes.UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityLabel: true,
  accessibilityComponentType: true,
  accessibilityLiveRegion: true,
  accessibilityTraits: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
  removeClippedSubviews: true
});

module.exports = ReactNativeViewAttributes;
}, 146, null, "ReactNativeViewAttributes");
__d(/* ViewPropTypes */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var PlatformViewPropTypes = require(153                    ); // 153 = PlatformViewPropTypes
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var _require = require(156                ), // 156 = ViewAccessibility
    AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
    AccessibilityTraits = _require.AccessibilityTraits;

var stylePropType = StyleSheetPropType(ViewStylePropTypes);

module.exports = babelHelpers.extends({}, PlatformViewPropTypes, {
  accessible: PropTypes.bool,

  accessibilityLabel: PropTypes.node,

  accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),

  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),

  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),

  accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

  accessibilityViewIsModal: PropTypes.bool,

  onAccessibilityTap: PropTypes.func,

  onMagicTap: PropTypes.func,

  testID: PropTypes.string,

  nativeID: PropTypes.string,

  onResponderGrant: PropTypes.func,

  onResponderMove: PropTypes.func,

  onResponderReject: PropTypes.func,

  onResponderRelease: PropTypes.func,

  onResponderTerminate: PropTypes.func,

  onResponderTerminationRequest: PropTypes.func,

  onStartShouldSetResponder: PropTypes.func,

  onStartShouldSetResponderCapture: PropTypes.func,

  onMoveShouldSetResponder: PropTypes.func,

  onMoveShouldSetResponderCapture: PropTypes.func,

  hitSlop: EdgeInsetsPropType,

  onLayout: PropTypes.func,

  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,

  removeClippedSubviews: PropTypes.bool,

  renderToHardwareTextureAndroid: PropTypes.bool,

  shouldRasterizeIOS: PropTypes.bool,

  collapsable: PropTypes.bool,

  needsOffscreenAlphaCompositing: PropTypes.bool
});
}, 147, null, "ViewPropTypes");
__d(/* EdgeInsetsPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var createStrictShapeTypeChecker = require(149                           ); // 149 = createStrictShapeTypeChecker

var EdgeInsetsPropType = createStrictShapeTypeChecker({
  top: PropTypes.number,
  left: PropTypes.number,
  bottom: PropTypes.number,
  right: PropTypes.number
});

module.exports = EdgeInsetsPropType;
}, 148, null, "EdgeInsetsPropType");
__d(/* createStrictShapeTypeChecker */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var merge = require(150    ); // 150 = merge

function createStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, 'Required object `' + propName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';
    if (propType !== 'object') {
      invariant(false, 'Invalid ' + locationName + ' `' + propName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }

    var allKeys = merge(props[propName], shapeTypes);

    for (var _len = arguments.length, rest = Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, 'Invalid props.' + propName + ' key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker.apply(undefined, [propValue, key, componentName, location].concat(rest));
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = Array(_len2 > 4 ? _len2 - 4 : 0), _key2 = 4; _key2 < _len2; _key2++) {
      rest[_key2 - 4] = arguments[_key2];
    }

    return checkType.apply(undefined, [false, props, propName, componentName, location].concat(rest));
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = createStrictShapeTypeChecker;
}, 149, null, "createStrictShapeTypeChecker");
__d(/* merge */function(global, require, module, exports) {

"use strict";

var mergeInto = require(151        ); // 151 = mergeInto

var merge = function merge(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;
}, 150, null, "merge");
__d(/* mergeInto */function(global, require, module, exports) {

"use strict";

var mergeHelpers = require(152           ); // 152 = mergeHelpers

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

function mergeInto(one, two) {
  checkMergeIntoObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;
}, 151, null, "mergeInto");
__d(/* mergeHelpers */function(global, require, module, exports) {

'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o instanceof Date || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },

  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },

  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },

  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },

  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },

  ArrayStrategies: {
    Clobber: 'Clobber',
    Concat: 'Concat',
    IndexByIndex: 'IndexByIndex'
  }

};

module.exports = mergeHelpers;
}, 152, null, "mergeHelpers");
__d(/* PlatformViewPropTypes */function(global, require, module, exports) {

var Platform = require(38        ); // 38 = Platform

var TVViewPropTypes = {};
if (Platform.isTVOS) {
  TVViewPropTypes = require(154              ); // 154 = TVViewPropTypes
}

module.exports = TVViewPropTypes;
}, 153, null, "PlatformViewPropTypes");
__d(/* TVViewPropTypes */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var TVViewPropTypes = {
  isTVSelectable: PropTypes.bool,

  hasTVPreferredFocus: PropTypes.bool,

  tvParallaxProperties: PropTypes.object,

  tvParallaxShiftDistanceX: PropTypes.number,

  tvParallaxShiftDistanceY: PropTypes.number,

  tvParallaxTiltAngle: PropTypes.number,

  tvParallaxMagnification: PropTypes.number

};

module.exports = TVViewPropTypes;
}, 154, null, "TVViewPropTypes");
__d(/* StyleSheetPropType */function(global, require, module, exports) {
'use strict';

var createStrictShapeTypeChecker = require(149                           ); // 149 = createStrictShapeTypeChecker
var flattenStyle = require(119           ); // 119 = flattenStyle

function StyleSheetPropType(shape) {
  var shapePropType = createStrictShapeTypeChecker(shape);
  return function (props, propName, componentName, location) {
    var newProps = props;
    if (props[propName]) {
      newProps = {};
      newProps[propName] = flattenStyle(props[propName]);
    }

    for (var _len = arguments.length, rest = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
      rest[_key - 4] = arguments[_key];
    }

    return shapePropType.apply(undefined, [newProps, propName, componentName, location].concat(rest));
  };
}

module.exports = StyleSheetPropType;
}, 155, null, "StyleSheetPropType");
__d(/* ViewAccessibility */function(global, require, module, exports) {
'use strict';

module.exports = {
  AccessibilityTraits: ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'],
  AccessibilityComponentTypes: ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked']
};
}, 156, null, "ViewAccessibility");
__d(/* create-react-class/index.js */function(global, require, module, exports) {

'use strict';

var React = require(13     ); // 13 = react
var factory = require(25         ); // 25 = ./factory

if (typeof React === 'undefined') {
  throw Error('create-react-class could not find the React object. If you are using script tags, ' + 'make sure that React is being loaded before create-react-class.');
}

var ReactNoopUpdateQueue = new React.Component().updater;

module.exports = factory(React.Component, React.isValidElement, ReactNoopUpdateQueue);
}, 157, null, "create-react-class/index.js");
__d(/* requireNativeComponent */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(133                         ); // 133 = ReactNativeStyleAttributes
var UIManager = require(125        ); // 125 = UIManager
var UnimplementedView = require(159                ); // 159 = UnimplementedView

var createReactNativeComponentClass = require(165                              ); // 165 = createReactNativeComponentClass
var insetsDiffer = require(166           ); // 166 = insetsDiffer
var matricesDiffer = require(167             ); // 167 = matricesDiffer
var pointsDiffer = require(168           ); // 168 = pointsDiffer
var processColor = require(115           ); // 115 = processColor
var resolveAssetSource = require(169                 ); // 169 = resolveAssetSource
var sizesDiffer = require(145          ); // 145 = sizesDiffer
var verifyPropTypes = require(173              ); // 173 = verifyPropTypes
var warning = require(45                ); // 45 = fbjs/lib/warning

function requireNativeComponent(viewName, componentInterface, extraConfig) {
  var viewConfig = UIManager[viewName];
  if (!viewConfig || !viewConfig.NativeProps) {
    warning(false, 'Native component for "%s" does not exist', viewName);
    return UnimplementedView;
  }

  viewConfig.uiViewClassName = viewName;
  viewConfig.validAttributes = {};

  if (componentInterface) {
    viewConfig.propTypes = typeof componentInterface.__propTypesSecretDontUseThesePlease === 'object' ? componentInterface.__propTypesSecretDontUseThesePlease : componentInterface.propTypes;
  } else {
    viewConfig.propTypes = null;
  }

  var baseModuleName = viewConfig.baseModuleName;
  var nativeProps = babelHelpers.extends({}, viewConfig.NativeProps);
  while (baseModuleName) {
    var baseModule = UIManager[baseModuleName];
    if (!baseModule) {
      warning(false, 'Base module "%s" does not exist', baseModuleName);
      baseModuleName = null;
    } else {
      nativeProps = babelHelpers.extends({}, nativeProps, baseModule.NativeProps);
      baseModuleName = baseModule.baseModuleName;
    }
  }

  for (var key in nativeProps) {
    var useAttribute = false;
    var attribute = {};

    var differ = TypeToDifferMap[nativeProps[key]];
    if (differ) {
      attribute.diff = differ;
      useAttribute = true;
    }

    var processor = TypeToProcessorMap[nativeProps[key]];
    if (processor) {
      attribute.process = processor;
      useAttribute = true;
    }

    viewConfig.validAttributes[key] = useAttribute ? attribute : true;
  }

  viewConfig.validAttributes.style = ReactNativeStyleAttributes;

  if (__DEV__) {
    componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
  }

  return createReactNativeComponentClass(viewConfig);
}

var TypeToDifferMap = {
  CATransform3D: matricesDiffer,
  CGPoint: pointsDiffer,
  CGSize: sizesDiffer,
  UIEdgeInsets: insetsDiffer
};

function processColorArray(colors) {
  return colors && colors.map(processColor);
}

var TypeToProcessorMap = {
  CGColor: processColor,
  CGColorArray: processColorArray,
  UIColor: processColor,
  UIColorArray: processColorArray,
  CGImage: resolveAssetSource,
  UIImage: resolveAssetSource,
  RCTImageSource: resolveAssetSource,

  Color: processColor,
  ColorArray: processColorArray
};

module.exports = requireNativeComponent;
}, 158, null, "requireNativeComponent");
__d(/* UnimplementedView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js';
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet

var UnimplementedView = function (_React$Component) {
  babelHelpers.inherits(UnimplementedView, _React$Component);

  function UnimplementedView() {
    babelHelpers.classCallCheck(this, UnimplementedView);
    return babelHelpers.possibleConstructorReturn(this, (UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).apply(this, arguments));
  }

  babelHelpers.createClass(UnimplementedView, [{
    key: 'setNativeProps',
    value: function setNativeProps() {}
  }, {
    key: 'render',
    value: function render() {
      var View = require(131   ); // 131 = View
      return React.createElement(
        View,
        { style: [styles.unimplementedView, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 33
          }
        },
        this.props.children
      );
    }
  }]);
  return UnimplementedView;
}(React.Component);

var styles = StyleSheet.create({
  unimplementedView: __DEV__ ? {
    alignSelf: 'flex-start',
    borderColor: 'red',
    borderWidth: 1
  } : {}
});

module.exports = UnimplementedView;
}, 159, null, "UnimplementedView");
__d(/* StyleSheet */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(161         ); // 161 = PixelRatio
var ReactNativePropRegistry = require(120                      ); // 120 = ReactNativePropRegistry
var ReactNativeStyleAttributes = require(133                         ); // 133 = ReactNativeStyleAttributes
var StyleSheetValidation = require(164                   ); // 164 = StyleSheetValidation

var flatten = require(119           ); // 119 = flattenStyle

var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFillObject = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
module.exports = {
  hairlineWidth: hairlineWidth,

  absoluteFill: absoluteFill,

  absoluteFillObject: absoluteFillObject,

  flatten: flatten,

  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var value = void 0;

    if (typeof ReactNativeStyleAttributes[property] === 'string') {
      value = {};
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + ' is not a valid style attribute');
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn('Overwriting ' + property + ' style attribute preprocessor');
    }

    ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, { process: process });
  },
  create: function create(obj) {
    var result = {};
    for (var key in obj) {
      StyleSheetValidation.validateStyle(key, obj);
      result[key] = ReactNativePropRegistry.register(obj[key]);
    }
    return result;
  }
};
}, 160, null, "StyleSheet");
__d(/* PixelRatio */function(global, require, module, exports) {
'use strict';

var Dimensions = require(162         ); // 162 = Dimensions

var PixelRatio = function () {
  function PixelRatio() {
    babelHelpers.classCallCheck(this, PixelRatio);
  }

  babelHelpers.createClass(PixelRatio, null, [{
    key: 'get',
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: 'getFontScale',
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: 'getPixelSizeForLayoutSize',
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: 'roundToNearestPixel',
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: 'startDetecting',
    value: function startDetecting() {}
  }]);
  return PixelRatio;
}();

module.exports = PixelRatio;
}, 161, null, "PixelRatio");
__d(/* Dimensions */function(global, require, module, exports) {
'use strict';

var DeviceInfo = require(163         ); // 163 = DeviceInfo
var EventEmitter = require(57            ); // 57 = EventEmitter
var Platform = require(38        ); // 38 = Platform
var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var eventEmitter = new EventEmitter();
var dimensionsInitialized = false;
var dimensions = {};

var Dimensions = function () {
  function Dimensions() {
    babelHelpers.classCallCheck(this, Dimensions);
  }

  babelHelpers.createClass(Dimensions, null, [{
    key: 'set',
    value: function set(dims) {
      if (dims && dims.windowPhysicalPixels) {
        dims = JSON.parse(JSON.stringify(dims));

        var windowPhysicalPixels = dims.windowPhysicalPixels;
        dims.window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
        if (Platform.OS === 'android') {
          var screenPhysicalPixels = dims.screenPhysicalPixels;
          dims.screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };

          delete dims.screenPhysicalPixels;
        } else {
          dims.screen = dims.window;
        }

        delete dims.windowPhysicalPixels;
      }

      babelHelpers.extends(dimensions, dims);
      if (dimensionsInitialized) {
        eventEmitter.emit('change', {
          window: dimensions.window,
          screen: dimensions.screen
        });
      } else {
        dimensionsInitialized = true;
      }
    }
  }, {
    key: 'get',
    value: function get(dim) {
      invariant(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant('change' === type, 'Trying to subscribe to unknown event: "%s"', type);
      eventEmitter.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant('change' === type, 'Trying to remove listener for unknown event: "%s"', type);
      eventEmitter.removeListener(type, handler);
    }
  }]);
  return Dimensions;
}();

Dimensions.set(DeviceInfo.Dimensions);
RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
  Dimensions.set(update);
});

module.exports = Dimensions;
}, 162, null, "Dimensions");
__d(/* DeviceInfo */function(global, require, module, exports) {
'use strict';

var DeviceInfo = require(30             ).DeviceInfo; // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

invariant(DeviceInfo, 'DeviceInfo native module is not installed correctly');

module.exports = DeviceInfo;
}, 163, null, "DeviceInfo");
__d(/* StyleSheetValidation */function(global, require, module, exports) {
'use strict';

var ImageStylePropTypes = require(134                  ); // 134 = ImageStylePropTypes
var TextStylePropTypes = require(141                 ); // 141 = TextStylePropTypes
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    babelHelpers.classCallCheck(this, StyleSheetValidation);
  }

  babelHelpers.createClass(StyleSheetValidation, null, [{
    key: 'validateStyleProp',
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }
      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }
      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);
      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: 'validateStyle',
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }
      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: 'addValidStylePropTypes',
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);

module.exports = StyleSheetValidation;
}, 164, null, "StyleSheetValidation");
__d(/* createReactNativeComponentClass */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.createReactNativeComponentClass;
}, 165, null, "createReactNativeComponentClass");
__d(/* insetsDiffer */function(global, require, module, exports) {
'use strict';

var dummyInsets = {
  top: undefined,
  left: undefined,
  right: undefined,
  bottom: undefined
};

var insetsDiffer = function insetsDiffer(one, two) {
  one = one || dummyInsets;
  two = two || dummyInsets;
  return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};

module.exports = insetsDiffer;
}, 166, null, "insetsDiffer");
__d(/* matricesDiffer */function(global, require, module, exports) {
'use strict';

var matricesDiffer = function matricesDiffer(one, two) {
  if (one === two) {
    return false;
  }
  return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};

module.exports = matricesDiffer;
}, 167, null, "matricesDiffer");
__d(/* pointsDiffer */function(global, require, module, exports) {
'use strict';

var dummyPoint = { x: undefined, y: undefined };

var pointsDiffer = function pointsDiffer(one, two) {
  one = one || dummyPoint;
  two = two || dummyPoint;
  return one !== two && (one.x !== two.x || one.y !== two.y);
};

module.exports = pointsDiffer;
}, 168, null, "pointsDiffer");
__d(/* resolveAssetSource */function(global, require, module, exports) {
'use strict';

var AssetRegistry = require(170            ); // 170 = AssetRegistry
var AssetSourceResolver = require(171                  ); // 171 = AssetSourceResolver
var NativeModules = require(30             ); // 30 = NativeModules

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _bundleSourcePath = void 0;

function getDevServerURL() {
  if (_serverURL === undefined) {
    var scriptURL = NativeModules.SourceCode.scriptURL;
    var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function getBundleSourcePath() {
  if (_bundleSourcePath === undefined) {
    var scriptURL = NativeModules.SourceCode.scriptURL;
    if (!scriptURL) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('assets://')) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('file://')) {
      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);
    } else {
      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    }
  }

  return _bundleSourcePath;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
}, 169, null, "resolveAssetSource");
__d(/* AssetRegistry */function(global, require, module, exports) {
'use strict';

var assets = [];

function registerAsset(asset) {
  return assets.push(asset);
}

function getAssetByID(assetId) {
  return assets[assetId - 1];
}

module.exports = { registerAsset: registerAsset, getAssetByID: getAssetByID };
}, 170, null, "AssetRegistry");
__d(/* AssetSourceResolver */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(161         ); // 161 = PixelRatio
var Platform = require(38        ); // 38 = Platform

var assetPathUtils = require(172                                    ); // 172 = ../../local-cli/bundle/assetPathUtils
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, bundlePath, asset) {
    babelHelpers.classCallCheck(this, AssetSourceResolver);

    this.serverUrl = serverUrl;
    this.bundlePath = bundlePath;
    this.asset = asset;
  }

  babelHelpers.createClass(AssetSourceResolver, [{
    key: 'isLoadedFromServer',
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: 'isLoadedFromFileSystem',
    value: function isLoadedFromFileSystem() {
      return !!this.bundlePath;
    }
  }, {
    key: 'defaultAsset',
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetPathInBundle();
      }
    }
  }, {
    key: 'assetServerURL',
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: 'scaledAssetPath',
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: 'scaledAssetPathInBundle',
    value: function scaledAssetPathInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: 'resourceIdentifierWithoutScale',
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: 'drawableFolderInBundle',
    value: function drawableFolderInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource('file://' + path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: 'fromSource',
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: 'pickScale',
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);
  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
}, 171, null, "AssetSourceResolver");
__d(/* react-native/local-cli/bundle/assetPathUtils.js */function(global, require, module, exports) {

'use strict';

function getAndroidAssetSuffix(scale) {
  switch (scale) {
    case 0.75:
      return 'ldpi';
    case 1:
      return 'mdpi';
    case 1.5:
      return 'hdpi';
    case 2:
      return 'xhdpi';
    case 3:
      return 'xxhdpi';
    case 4:
      return 'xxxhdpi';
  }
  throw new Error('no such scale');
}

function getAndroidDrawableFolderName(asset, scale) {
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidDrawableFolderName: getAndroidDrawableFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
}, 172, null, "react-native/local-cli/bundle/assetPathUtils.js");
__d(/* verifyPropTypes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(133                         ); // 133 = ReactNativeStyleAttributes

function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
  if (!viewConfig) {
    return;
  }
  var componentName = componentInterface.displayName || componentInterface.name || 'unknown';

  var propTypes = componentInterface.__propTypesSecretDontUseThesePlease || componentInterface.propTypes;

  if (!propTypes) {
    throw new Error('`' + componentName + '` has no propTypes defined`');
  }

  var nativeProps = viewConfig.NativeProps;
  for (var prop in nativeProps) {
    if (!propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
      var message;
      if (propTypes.hasOwnProperty(prop)) {
        message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
      } else {
        message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
      }
      message += '\nIf you haven\'t changed this prop yourself, this usually means that ' + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
      throw new Error(message);
    }
  }
}

module.exports = verifyPropTypes;
}, 173, null, "verifyPropTypes");
__d(/* ReactNativeFiber-prod */function(global, require, module, exports) {
"use strict";

var invariant = require(28                  ), // 28 = fbjs/lib/invariant
    warning = require(45                ), // 45 = fbjs/lib/warning
    ExceptionsManager = require(68                 ); // 68 = ExceptionsManager

require(73              ); // 73 = InitializeCore

var RCTEventEmitter = require(124              ), // 124 = RCTEventEmitter
    emptyFunction = require(46                      ), // 46 = fbjs/lib/emptyFunction
    UIManager = require(125        ); // 125 = UIManager

require(23                         ); // 23 = prop-types/checkPropTypes

var emptyObject = require(126                   ), // 126 = fbjs/lib/emptyObject
    react = require(13     ), // 13 = react
    shallowEqual = require(127                    ), // 127 = fbjs/lib/shallowEqual
    deepDiffer = require(128         ), // 128 = deepDiffer
    flattenStyle = require(119           ), // 119 = flattenStyle
    TextInputState = require(129             ); // 129 = TextInputState

require(35                                 ); // 35 = deepFreezeAndThrowOnMutationInDev

var defaultShowDialog = function defaultShowDialog(capturedError) {
    return !0;
},
    showDialog = defaultShowDialog;

function logCapturedError(capturedError) {
    if (!1 !== showDialog(capturedError)) {
        var _error = capturedError.error;
        console.error("React caught an error thrown by one of your components.\n\n" + _error.stack);
    }
}

var injection = {
    injectDialog: function injectDialog(fn) {
        invariant(showDialog === defaultShowDialog, "The custom dialog was already injected."), invariant("function" == typeof fn, "Injected showDialog() must be a function."), showDialog = fn;
    }
},
    logCapturedError_1 = logCapturedError,
    ReactFiberErrorLogger = {
    injection: injection,
    logCapturedError: logCapturedError_1
},
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
},
    _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection$1 = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected;
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection$1
},
    EventPluginUtils_1 = EventPluginUtils,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching;

function ReactNativeFiberErrorDialog(capturedError) {
    var componentStack = capturedError.componentStack,
        error = capturedError.error,
        errorToHandle = void 0;
    if (error instanceof Error) {
        var message = error.message,
            name = error.name,
            summary = message ? name + ": " + message : name;
        errorToHandle = error;
        try {
            errorToHandle.message = summary + "\n\nThis error is located at:" + componentStack;
        } catch (e) {}
    } else errorToHandle = "string" == typeof error ? new Error(error + "\n\nThis error is located at:" + componentStack) : new Error("Unspecified error at:" + componentStack);
    return ExceptionsManager.handleException(errorToHandle, !1), !1;
}

var showDialog$1 = ReactNativeFiberErrorDialog,
    ReactNativeFiberErrorDialog_1 = {
    showDialog: showDialog$1
},
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: null,
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            this[propName] = null;
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = babelHelpers.extends({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent,
    _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin,
    instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt || (rootNodeID = target)), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (var i = 0; i < touchBank.length; i++) {
            var touchTrackToCheck = touchBank[i];
            if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
            }
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
},
    REACT_PORTAL_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.portal") || 60106,
    createPortal = function createPortal(children, containerInfo, implementation) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_PORTAL_TYPE,
        key: null == key ? null : "" + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
    };
},
    isPortal = function isPortal(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_PORTAL_TYPE;
},
    REACT_PORTAL_TYPE_1 = REACT_PORTAL_TYPE,
    ReactPortal = {
    createPortal: createPortal,
    isPortal: isPortal,
    REACT_PORTAL_TYPE: REACT_PORTAL_TYPE_1
},
    commonjsGlobal = "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {},
    ReactFeatureFlags = {
    disableNewFiberFeatures: !1,
    enableAsyncSubtreeAPI: !1
},
    ReactFeatureFlags_1 = ReactFeatureFlags,
    ReactTypeOfSideEffect = {
    NoEffect: 0,
    PerformedWork: 1,
    Placement: 2,
    Update: 4,
    PlacementAndUpdate: 6,
    Deletion: 8,
    ContentReset: 16,
    Callback: 32,
    Err: 64,
    Ref: 128
},
    ReactPriorityLevel = {
    NoWork: 0,
    SynchronousPriority: 1,
    TaskPriority: 2,
    HighPriority: 3,
    LowPriority: 4,
    OffscreenPriority: 5
},
    CallbackEffect = ReactTypeOfSideEffect.Callback,
    NoWork = ReactPriorityLevel.NoWork,
    SynchronousPriority = ReactPriorityLevel.SynchronousPriority,
    TaskPriority = ReactPriorityLevel.TaskPriority,
    ClassComponent = ReactTypeOfWork.ClassComponent,
    HostRoot = ReactTypeOfWork.HostRoot;

function comparePriority(a, b) {
    return a !== TaskPriority && a !== SynchronousPriority || b !== TaskPriority && b !== SynchronousPriority ? a === NoWork && b !== NoWork ? -255 : a !== NoWork && b === NoWork ? 255 : a - b : 0;
}

function createUpdateQueue() {
    return {
        first: null,
        last: null,
        hasForceUpdate: !1,
        callbackList: null
    };
}

function cloneUpdate(update) {
    return {
        priorityLevel: update.priorityLevel,
        partialState: update.partialState,
        callback: update.callback,
        isReplace: update.isReplace,
        isForced: update.isForced,
        isTopLevelUnmount: update.isTopLevelUnmount,
        next: null
    };
}

function insertUpdateIntoQueue(queue, update, insertAfter, insertBefore) {
    null !== insertAfter ? insertAfter.next = update : (update.next = queue.first, queue.first = update), null !== insertBefore ? update.next = insertBefore : queue.last = update;
}

function findInsertionPosition(queue, update) {
    var priorityLevel = update.priorityLevel,
        insertAfter = null,
        insertBefore = null;
    if (null !== queue.last && comparePriority(queue.last.priorityLevel, priorityLevel) <= 0) insertAfter = queue.last;else for (insertBefore = queue.first; null !== insertBefore && comparePriority(insertBefore.priorityLevel, priorityLevel) <= 0;) {
        insertAfter = insertBefore, insertBefore = insertBefore.next;
    }return insertAfter;
}

function ensureUpdateQueues(fiber) {
    var alternateFiber = fiber.alternate,
        queue1 = fiber.updateQueue;
    null === queue1 && (queue1 = fiber.updateQueue = createUpdateQueue());
    var queue2 = void 0;
    return null !== alternateFiber ? null === (queue2 = alternateFiber.updateQueue) && (queue2 = alternateFiber.updateQueue = createUpdateQueue()) : queue2 = null, [queue1, queue2 !== queue1 ? queue2 : null];
}

function insertUpdate(fiber, update) {
    var _ensureUpdateQueues = ensureUpdateQueues(fiber),
        queue1 = _ensureUpdateQueues[0],
        queue2 = _ensureUpdateQueues[1],
        insertAfter1 = findInsertionPosition(queue1, update),
        insertBefore1 = null !== insertAfter1 ? insertAfter1.next : queue1.first;
    if (null === queue2) return insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), null;
    var insertAfter2 = findInsertionPosition(queue2, update),
        insertBefore2 = null !== insertAfter2 ? insertAfter2.next : queue2.first;
    if (insertUpdateIntoQueue(queue1, update, insertAfter1, insertBefore1), insertBefore1 === insertBefore2 && null !== insertBefore1 || insertAfter1 === insertAfter2 && null !== insertAfter1) return null === insertAfter2 && (queue2.first = update), null === insertBefore2 && (queue2.last = null), null;
    var update2 = cloneUpdate(update);
    return insertUpdateIntoQueue(queue2, update2, insertAfter2, insertBefore2), update2;
}

function addUpdate(fiber, partialState, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addUpdate_1 = addUpdate;

function addReplaceUpdate(fiber, state, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: state,
        callback: callback,
        isReplace: !0,
        isForced: !1,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addReplaceUpdate_1 = addReplaceUpdate;

function addForceUpdate(fiber, callback, priorityLevel) {
    insertUpdate(fiber, {
        priorityLevel: priorityLevel,
        partialState: null,
        callback: callback,
        isReplace: !1,
        isForced: !0,
        isTopLevelUnmount: !1,
        next: null
    });
}

var addForceUpdate_1 = addForceUpdate;

function getUpdatePriority(fiber) {
    var updateQueue = fiber.updateQueue;
    return null === updateQueue ? NoWork : fiber.tag !== ClassComponent && fiber.tag !== HostRoot ? NoWork : null !== updateQueue.first ? updateQueue.first.priorityLevel : NoWork;
}

var getUpdatePriority_1 = getUpdatePriority;

function addTopLevelUpdate$1(fiber, partialState, callback, priorityLevel) {
    var isTopLevelUnmount = null === partialState.element,
        update = {
        priorityLevel: priorityLevel,
        partialState: partialState,
        callback: callback,
        isReplace: !1,
        isForced: !1,
        isTopLevelUnmount: isTopLevelUnmount,
        next: null
    },
        update2 = insertUpdate(fiber, update);
    if (isTopLevelUnmount) {
        var _ensureUpdateQueues2 = ensureUpdateQueues(fiber),
            queue1 = _ensureUpdateQueues2[0],
            queue2 = _ensureUpdateQueues2[1];
        null !== queue1 && null !== update.next && (update.next = null, queue1.last = update), null !== queue2 && null !== update2 && null !== update2.next && (update2.next = null, queue2.last = update);
    }
}

var addTopLevelUpdate_1 = addTopLevelUpdate$1;

function getStateFromUpdate(update, instance, prevState, props) {
    var partialState = update.partialState;
    if ("function" == typeof partialState) {
        return partialState.call(instance, prevState, props);
    }
    return partialState;
}

function beginUpdateQueue(current, workInProgress, queue, instance, prevState, props, priorityLevel) {
    if (null !== current && current.updateQueue === queue) {
        var currentQueue = queue;
        queue = workInProgress.updateQueue = {
            first: currentQueue.first,
            last: currentQueue.last,
            callbackList: null,
            hasForceUpdate: !1
        };
    }
    for (var callbackList = queue.callbackList, hasForceUpdate = queue.hasForceUpdate, state = prevState, dontMutatePrevState = !0, update = queue.first; null !== update && comparePriority(update.priorityLevel, priorityLevel) <= 0;) {
        queue.first = update.next, null === queue.first && (queue.last = null);
        var _partialState = void 0;
        update.isReplace ? (state = getStateFromUpdate(update, instance, state, props), dontMutatePrevState = !0) : (_partialState = getStateFromUpdate(update, instance, state, props)) && (state = dontMutatePrevState ? babelHelpers.extends({}, state, _partialState) : babelHelpers.extends(state, _partialState), dontMutatePrevState = !1), update.isForced && (hasForceUpdate = !0), null === update.callback || update.isTopLevelUnmount && null !== update.next || (callbackList = null !== callbackList ? callbackList : [], callbackList.push(update.callback), workInProgress.effectTag |= CallbackEffect), update = update.next;
    }
    return queue.callbackList = callbackList, queue.hasForceUpdate = hasForceUpdate, null !== queue.first || null !== callbackList || hasForceUpdate || (workInProgress.updateQueue = null), state;
}

var beginUpdateQueue_1 = beginUpdateQueue;

function commitCallbacks(finishedWork, queue, context) {
    var callbackList = queue.callbackList;
    if (null !== callbackList) {
        queue.callbackList = null;
        for (var i = 0; i < callbackList.length; i++) {
            var _callback = callbackList[i];
            invariant("function" == typeof _callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", _callback), _callback.call(context);
        }
    }
}

var commitCallbacks_1 = commitCallbacks,
    ReactFiberUpdateQueue = {
    addUpdate: addUpdate_1,
    addReplaceUpdate: addReplaceUpdate_1,
    addForceUpdate: addForceUpdate_1,
    getUpdatePriority: getUpdatePriority_1,
    addTopLevelUpdate: addTopLevelUpdate_1,
    beginUpdateQueue: beginUpdateQueue_1,
    commitCallbacks: commitCallbacks_1
};

function getComponentName$1(instanceOrFiber) {
    if ("function" == typeof instanceOrFiber.getName) {
        return instanceOrFiber.getName();
    }
    if ("number" == typeof instanceOrFiber.tag) {
        var fiber = instanceOrFiber,
            type = fiber.type;
        if ("string" == typeof type) return type;
        if ("function" == typeof type) return type.displayName || type.name;
    }
    return null;
}

var getComponentName_1 = getComponentName$1,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    ReactInternals = react.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
},
    ReactGlobalSharedState_1 = ReactGlobalSharedState,
    HostRoot$2 = ReactTypeOfWork.HostRoot,
    HostComponent$2 = ReactTypeOfWork.HostComponent,
    HostText = ReactTypeOfWork.HostText,
    NoEffect = ReactTypeOfSideEffect.NoEffect,
    Placement = ReactTypeOfSideEffect.Placement,
    MOUNTING = 1,
    MOUNTED = 2,
    UNMOUNTED = 3;

function isFiberMountedImpl(fiber) {
    var node = fiber;
    if (fiber.alternate) for (; node.return;) {
        node = node.return;
    } else {
        if ((node.effectTag & Placement) !== NoEffect) return MOUNTING;
        for (; node.return;) {
            if (node = node.return, (node.effectTag & Placement) !== NoEffect) return MOUNTING;
        }
    }
    return node.tag === HostRoot$2 ? MOUNTED : UNMOUNTED;
}

var isFiberMounted$1 = function isFiberMounted$1(fiber) {
    return isFiberMountedImpl(fiber) === MOUNTED;
},
    isMounted = function isMounted(component) {
    var fiber = ReactInstanceMap_1.get(component);
    return !!fiber && isFiberMountedImpl(fiber) === MOUNTED;
};

function assertIsMounted(fiber) {
    invariant(isFiberMountedImpl(fiber) === MOUNTED, "Unable to find node on an unmounted component.");
}

function findCurrentFiberUsingSlowPath(fiber) {
    var alternate = fiber.alternate;
    if (!alternate) {
        var state = isFiberMountedImpl(fiber);
        return invariant(state !== UNMOUNTED, "Unable to find node on an unmounted component."), state === MOUNTING ? null : fiber;
    }
    for (var a = fiber, b = alternate; !0;) {
        var parentA = a.return,
            parentB = parentA ? parentA.alternate : null;
        if (!parentA || !parentB) break;
        if (parentA.child === parentB.child) {
            for (var child = parentA.child; child;) {
                if (child === a) return assertIsMounted(parentA), fiber;
                if (child === b) return assertIsMounted(parentA), alternate;
                child = child.sibling;
            }
            invariant(!1, "Unable to find node on an unmounted component.");
        }
        if (a.return !== b.return) a = parentA, b = parentB;else {
            for (var didFindChild = !1, _child = parentA.child; _child;) {
                if (_child === a) {
                    didFindChild = !0, a = parentA, b = parentB;
                    break;
                }
                if (_child === b) {
                    didFindChild = !0, b = parentA, a = parentB;
                    break;
                }
                _child = _child.sibling;
            }
            if (!didFindChild) {
                for (_child = parentB.child; _child;) {
                    if (_child === a) {
                        didFindChild = !0, a = parentB, b = parentA;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = !0, b = parentB, a = parentA;
                        break;
                    }
                    _child = _child.sibling;
                }
                invariant(didFindChild, "Child was not found in either parent set. This indicates a bug " + "related to the return pointer.");
            }
        }
        invariant(a.alternate === b, "Return fibers should always be each others' alternates.");
    }
    return invariant(a.tag === HostRoot$2, "Unable to find node on an unmounted component."), a.stateNode.current === a ? fiber : alternate;
}

var findCurrentFiberUsingSlowPath_1 = findCurrentFiberUsingSlowPath,
    findCurrentHostFiber$1 = function findCurrentHostFiber$1(parent) {
    var currentParent = findCurrentFiberUsingSlowPath(parent);
    if (!currentParent) return null;
    for (var node = currentParent; !0;) {
        if (node.tag === HostComponent$2 || node.tag === HostText) return node;
        if (node.child) node.child.return = node, node = node.child;else {
            if (node === currentParent) return null;
            for (; !node.sibling;) {
                if (!node.return || node.return === currentParent) return null;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    return null;
},
    ReactFiberTreeReflection = {
    isFiberMounted: isFiberMounted$1,
    isMounted: isMounted,
    findCurrentFiberUsingSlowPath: findCurrentFiberUsingSlowPath_1,
    findCurrentHostFiber: findCurrentHostFiber$1
},
    valueStack = [],
    index = -1,
    createCursor$1 = function createCursor$1(defaultValue) {
    return {
        current: defaultValue
    };
},
    isEmpty = function isEmpty() {
    return -1 === index;
},
    pop$1 = function pop$1(cursor, fiber) {
    index < 0 || (cursor.current = valueStack[index], valueStack[index] = null, index--);
},
    push$1 = function push$1(cursor, value, fiber) {
    index++, valueStack[index] = cursor.current, cursor.current = value;
},
    reset = function reset() {
    for (; index > -1;) {
        valueStack[index] = null, index--;
    }
},
    ReactFiberStack = {
    createCursor: createCursor$1,
    isEmpty: isEmpty,
    pop: pop$1,
    push: push$1,
    reset: reset
},
    _extends$2 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    isFiberMounted = ReactFiberTreeReflection.isFiberMounted,
    ClassComponent$1 = ReactTypeOfWork.ClassComponent,
    HostRoot$1 = ReactTypeOfWork.HostRoot,
    createCursor = ReactFiberStack.createCursor,
    pop = ReactFiberStack.pop,
    push = ReactFiberStack.push,
    contextStackCursor = createCursor(emptyObject),
    didPerformWorkStackCursor = createCursor(!1),
    previousContext = emptyObject;

function getUnmaskedContext(workInProgress) {
    return isContextProvider$1(workInProgress) ? previousContext : contextStackCursor.current;
}

var getUnmaskedContext_1 = getUnmaskedContext;

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext, instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
}

var cacheContext_1 = cacheContext,
    getMaskedContext = function getMaskedContext(workInProgress, unmaskedContext) {
    var type = workInProgress.type,
        contextTypes = type.contextTypes;
    if (!contextTypes) return emptyObject;
    var instance = workInProgress.stateNode;
    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
    var context = {};
    for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
    }return instance && cacheContext(workInProgress, unmaskedContext, context), context;
},
    hasContextChanged = function hasContextChanged() {
    return didPerformWorkStackCursor.current;
};

function isContextConsumer(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.contextTypes;
}

var isContextConsumer_1 = isContextConsumer;

function isContextProvider$1(fiber) {
    return fiber.tag === ClassComponent$1 && null != fiber.type.childContextTypes;
}

var isContextProvider_1 = isContextProvider$1;

function popContextProvider(fiber) {
    isContextProvider$1(fiber) && (pop(didPerformWorkStackCursor, fiber), pop(contextStackCursor, fiber));
}

var popContextProvider_1 = popContextProvider,
    pushTopLevelContextObject = function pushTopLevelContextObject(fiber, context, didChange) {
    invariant(null == contextStackCursor.cursor, "Unexpected context found on stack"), push(contextStackCursor, context, fiber), push(didPerformWorkStackCursor, didChange, fiber);
};

function processChildContext$1(fiber, parentContext, isReconciling) {
    var instance = fiber.stateNode,
        childContextTypes = fiber.type.childContextTypes;
    if ("function" != typeof instance.getChildContext) return parentContext;
    var childContext = void 0;
    childContext = instance.getChildContext();
    for (var contextKey in childContext) {
        invariant(contextKey in childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName_1(fiber) || "Unknown", contextKey);
    }return _extends$2({}, parentContext, childContext);
}

var processChildContext_1 = processChildContext$1,
    pushContextProvider = function pushContextProvider(workInProgress) {
    if (!isContextProvider$1(workInProgress)) return !1;
    var instance = workInProgress.stateNode,
        memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyObject;
    return previousContext = contextStackCursor.current, push(contextStackCursor, memoizedMergedChildContext, workInProgress), push(didPerformWorkStackCursor, !1, workInProgress), !0;
},
    invalidateContextProvider = function invalidateContextProvider(workInProgress) {
    var instance = workInProgress.stateNode;
    invariant(instance, "Expected to have an instance by this point.");
    var mergedContext = processChildContext$1(workInProgress, previousContext, !0);
    instance.__reactInternalMemoizedMergedChildContext = mergedContext, pop(didPerformWorkStackCursor, workInProgress), pop(contextStackCursor, workInProgress), push(contextStackCursor, mergedContext, workInProgress), push(didPerformWorkStackCursor, !0, workInProgress);
},
    resetContext = function resetContext() {
    previousContext = emptyObject, contextStackCursor.current = emptyObject, didPerformWorkStackCursor.current = !1;
},
    findCurrentUnmaskedContext$1 = function findCurrentUnmaskedContext$1(fiber) {
    invariant(isFiberMounted(fiber) && fiber.tag === ClassComponent$1, "Expected subtree parent to be a mounted class component");
    for (var node = fiber; node.tag !== HostRoot$1;) {
        if (isContextProvider$1(node)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
        var parent = node.return;
        invariant(parent, "Found unexpected detached subtree parent"), node = parent;
    }
    return node.stateNode.context;
},
    ReactFiberContext = {
    getUnmaskedContext: getUnmaskedContext_1,
    cacheContext: cacheContext_1,
    getMaskedContext: getMaskedContext,
    hasContextChanged: hasContextChanged,
    isContextConsumer: isContextConsumer_1,
    isContextProvider: isContextProvider_1,
    popContextProvider: popContextProvider_1,
    pushTopLevelContextObject: pushTopLevelContextObject,
    processChildContext: processChildContext_1,
    pushContextProvider: pushContextProvider,
    invalidateContextProvider: invalidateContextProvider,
    resetContext: resetContext,
    findCurrentUnmaskedContext: findCurrentUnmaskedContext$1
},
    ReactTypeOfInternalContext = {
    NoContext: 0,
    AsyncUpdates: 1
},
    IndeterminateComponent = ReactTypeOfWork.IndeterminateComponent,
    ClassComponent$3 = ReactTypeOfWork.ClassComponent,
    HostRoot$3 = ReactTypeOfWork.HostRoot,
    HostComponent$3 = ReactTypeOfWork.HostComponent,
    HostText$1 = ReactTypeOfWork.HostText,
    HostPortal = ReactTypeOfWork.HostPortal,
    CoroutineComponent = ReactTypeOfWork.CoroutineComponent,
    YieldComponent = ReactTypeOfWork.YieldComponent,
    Fragment = ReactTypeOfWork.Fragment,
    NoWork$1 = ReactPriorityLevel.NoWork,
    NoContext = ReactTypeOfInternalContext.NoContext,
    NoEffect$1 = ReactTypeOfSideEffect.NoEffect,
    createFiber = function createFiber(tag, key, internalContextTag) {
    return {
        tag: tag,
        key: key,
        type: null,
        stateNode: null,
        return: null,
        child: null,
        sibling: null,
        index: 0,
        ref: null,
        pendingProps: null,
        memoizedProps: null,
        updateQueue: null,
        memoizedState: null,
        internalContextTag: internalContextTag,
        effectTag: NoEffect$1,
        nextEffect: null,
        firstEffect: null,
        lastEffect: null,
        pendingWorkPriority: NoWork$1,
        alternate: null
    };
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

var createWorkInProgress = function createWorkInProgress(current, renderPriority) {
    var workInProgress = current.alternate;
    return null === workInProgress ? (workInProgress = createFiber(current.tag, current.key, current.internalContextTag), workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.effectTag = NoWork$1, workInProgress.nextEffect = null, workInProgress.firstEffect = null, workInProgress.lastEffect = null), workInProgress.pendingWorkPriority = renderPriority, workInProgress.child = current.child, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.sibling = current.sibling, workInProgress.index = current.index, workInProgress.ref = current.ref, workInProgress;
},
    createHostRootFiber$1 = function createHostRootFiber$1() {
    return createFiber(HostRoot$3, null, NoContext);
},
    createFiberFromElement = function createFiberFromElement(element, internalContextTag, priorityLevel) {
    var owner = null,
        fiber = createFiberFromElementType(element.type, element.key, internalContextTag, owner);
    return fiber.pendingProps = element.props, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromFragment = function createFiberFromFragment(elements, internalContextTag, priorityLevel) {
    var fiber = createFiber(Fragment, null, internalContextTag);
    return fiber.pendingProps = elements, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromText = function createFiberFromText(content, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostText$1, null, internalContextTag);
    return fiber.pendingProps = content, fiber.pendingWorkPriority = priorityLevel, fiber;
};

function createFiberFromElementType(type, key, internalContextTag, debugOwner) {
    var fiber = void 0;
    if ("function" == typeof type) fiber = shouldConstruct(type) ? createFiber(ClassComponent$3, key, internalContextTag) : createFiber(IndeterminateComponent, key, internalContextTag), fiber.type = type;else if ("string" == typeof type) fiber = createFiber(HostComponent$3, key, internalContextTag), fiber.type = type;else if ("object" == typeof type && null !== type && "number" == typeof type.tag) fiber = type;else {
        var info = "";
        invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
    }
    return fiber;
}

var createFiberFromElementType_1 = createFiberFromElementType,
    createFiberFromHostInstanceForDeletion = function createFiberFromHostInstanceForDeletion() {
    var fiber = createFiber(HostComponent$3, null, NoContext);
    return fiber.type = "DELETED", fiber;
},
    createFiberFromCoroutine = function createFiberFromCoroutine(coroutine, internalContextTag, priorityLevel) {
    var fiber = createFiber(CoroutineComponent, coroutine.key, internalContextTag);
    return fiber.type = coroutine.handler, fiber.pendingProps = coroutine, fiber.pendingWorkPriority = priorityLevel, fiber;
},
    createFiberFromYield = function createFiberFromYield(yieldNode, internalContextTag, priorityLevel) {
    return createFiber(YieldComponent, null, internalContextTag);
},
    createFiberFromPortal = function createFiberFromPortal(portal, internalContextTag, priorityLevel) {
    var fiber = createFiber(HostPortal, portal.key, internalContextTag);
    return fiber.pendingProps = portal.children || [], fiber.pendingWorkPriority = priorityLevel, fiber.stateNode = {
        containerInfo: portal.containerInfo,
        implementation: portal.implementation
    }, fiber;
},
    largerPriority = function largerPriority(p1, p2) {
    return p1 !== NoWork$1 && (p2 === NoWork$1 || p2 > p1) ? p1 : p2;
},
    ReactFiber = {
    createWorkInProgress: createWorkInProgress,
    createHostRootFiber: createHostRootFiber$1,
    createFiberFromElement: createFiberFromElement,
    createFiberFromFragment: createFiberFromFragment,
    createFiberFromText: createFiberFromText,
    createFiberFromElementType: createFiberFromElementType_1,
    createFiberFromHostInstanceForDeletion: createFiberFromHostInstanceForDeletion,
    createFiberFromCoroutine: createFiberFromCoroutine,
    createFiberFromYield: createFiberFromYield,
    createFiberFromPortal: createFiberFromPortal,
    largerPriority: largerPriority
},
    createHostRootFiber = ReactFiber.createHostRootFiber,
    createFiberRoot$1 = function createFiberRoot$1(containerInfo) {
    var uninitializedFiber = createHostRootFiber(),
        root = {
        current: uninitializedFiber,
        containerInfo: containerInfo,
        isScheduled: !1,
        nextScheduledRoot: null,
        context: null,
        pendingContext: null
    };
    return uninitializedFiber.stateNode = root, root;
},
    ReactFiberRoot = {
    createFiberRoot: createFiberRoot$1
},
    IndeterminateComponent$1 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$5 = ReactTypeOfWork.ClassComponent,
    HostComponent$5 = ReactTypeOfWork.HostComponent;

function describeComponentFrame(name, source, ownerName) {
    return "\n    in " + (name || "Unknown") + (source ? " (at " + source.fileName.replace(/^.*[\\\/]/, "") + ":" + source.lineNumber + ")" : ownerName ? " (created by " + ownerName + ")" : "");
}

function describeFiber(fiber) {
    switch (fiber.tag) {
        case IndeterminateComponent$1:
        case FunctionalComponent:
        case ClassComponent$5:
        case HostComponent$5:
            var owner = fiber._debugOwner,
                source = fiber._debugSource,
                name = getComponentName_1(fiber),
                ownerName = null;
            return owner && (ownerName = getComponentName_1(owner)), describeComponentFrame(name, source, ownerName);

        default:
            return "";
    }
}

function getStackAddendumByWorkInProgressFiber$1(workInProgress) {
    var info = "",
        node = workInProgress;
    do {
        info += describeFiber(node), node = node.return;
    } while (node);
    return info;
}

var ReactFiberComponentTreeHook = {
    getStackAddendumByWorkInProgressFiber: getStackAddendumByWorkInProgressFiber$1,
    describeComponentFrame: describeComponentFrame
},
    REACT_COROUTINE_TYPE$1,
    REACT_YIELD_TYPE$1;

"function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") ? (REACT_COROUTINE_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.coroutine"), REACT_YIELD_TYPE$1 = (typeof Symbol === "function" ? Symbol.for : "@@for")("react.yield")) : (REACT_COROUTINE_TYPE$1 = 60104, REACT_YIELD_TYPE$1 = 60105);

var createCoroutine = function createCoroutine(children, handler, props) {
    var key = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null;
    return {
        $$typeof: REACT_COROUTINE_TYPE$1,
        key: null == key ? null : "" + key,
        children: children,
        handler: handler,
        props: props
    };
},
    createYield = function createYield(value) {
    return {
        $$typeof: REACT_YIELD_TYPE$1,
        value: value
    };
},
    isCoroutine = function isCoroutine(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_COROUTINE_TYPE$1;
},
    isYield = function isYield(object) {
    return "object" == typeof object && null !== object && object.$$typeof === REACT_YIELD_TYPE$1;
},
    REACT_YIELD_TYPE_1 = REACT_YIELD_TYPE$1,
    REACT_COROUTINE_TYPE_1 = REACT_COROUTINE_TYPE$1,
    ReactCoroutine = {
    createCoroutine: createCoroutine,
    createYield: createYield,
    isCoroutine: isCoroutine,
    isYield: isYield,
    REACT_YIELD_TYPE: REACT_YIELD_TYPE_1,
    REACT_COROUTINE_TYPE: REACT_COROUTINE_TYPE_1
},
    REACT_COROUTINE_TYPE = ReactCoroutine.REACT_COROUTINE_TYPE,
    REACT_YIELD_TYPE = ReactCoroutine.REACT_YIELD_TYPE,
    REACT_PORTAL_TYPE$1 = ReactPortal.REACT_PORTAL_TYPE,
    createWorkInProgress$2 = ReactFiber.createWorkInProgress,
    createFiberFromElement$1 = ReactFiber.createFiberFromElement,
    createFiberFromFragment$1 = ReactFiber.createFiberFromFragment,
    createFiberFromText$1 = ReactFiber.createFiberFromText,
    createFiberFromCoroutine$1 = ReactFiber.createFiberFromCoroutine,
    createFiberFromYield$1 = ReactFiber.createFiberFromYield,
    createFiberFromPortal$1 = ReactFiber.createFiberFromPortal,
    isArray = Array.isArray,
    FunctionalComponent$2 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$7 = ReactTypeOfWork.ClassComponent,
    HostText$3 = ReactTypeOfWork.HostText,
    HostPortal$3 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$2 = ReactTypeOfWork.CoroutineComponent,
    YieldComponent$2 = ReactTypeOfWork.YieldComponent,
    Fragment$2 = ReactTypeOfWork.Fragment,
    NoEffect$2 = ReactTypeOfSideEffect.NoEffect,
    Placement$3 = ReactTypeOfSideEffect.Placement,
    Deletion$1 = ReactTypeOfSideEffect.Deletion,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103;

function getIteratorFn(maybeIterable) {
    if (null === maybeIterable || void 0 === maybeIterable) return null;
    var iteratorFn = ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
    return "function" == typeof iteratorFn ? iteratorFn : null;
}

function coerceRef(current, element) {
    var mixedRef = element.ref;
    if (null !== mixedRef && "function" != typeof mixedRef && element._owner) {
        var owner = element._owner,
            inst = void 0;
        if (owner) if ("number" == typeof owner.tag) {
            var ownerFiber = owner;
            invariant(ownerFiber.tag === ClassComponent$7, "Stateless function components cannot have refs."), inst = ownerFiber.stateNode;
        } else inst = owner.getPublicInstance();
        invariant(inst, "Missing owner for string ref %s. This error is likely caused by a " + "bug in React. Please file an issue.", mixedRef);
        var stringRef = "" + mixedRef;
        if (null !== current && null !== current.ref && current.ref._stringRef === stringRef) return current.ref;
        var ref = function ref(value) {
            var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
            null === value ? delete refs[stringRef] : refs[stringRef] = value;
        };
        return ref._stringRef = stringRef, ref;
    }
    return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
    if ("textarea" !== returnFiber.type) {
        invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === Object.prototype.toString.call(newChild) ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild, "");
    }
}

function ChildReconciler(shouldClone, shouldTrackSideEffects) {
    function deleteChild(returnFiber, childToDelete) {
        if (shouldTrackSideEffects) {
            if (!shouldClone) {
                if (null === childToDelete.alternate) return;
                childToDelete = childToDelete.alternate;
            }
            var last = returnFiber.lastEffect;
            null !== last ? (last.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete, childToDelete.nextEffect = null, childToDelete.effectTag = Deletion$1;
        }
    }
    function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) return null;
        for (var childToDelete = currentFirstChild; null !== childToDelete;) {
            deleteChild(returnFiber, childToDelete), childToDelete = childToDelete.sibling;
        }return null;
    }
    function mapRemainingChildren(returnFiber, currentFirstChild) {
        for (var existingChildren = new Map(), existingChild = currentFirstChild; null !== existingChild;) {
            null !== existingChild.key ? existingChildren.set(existingChild.key, existingChild) : existingChildren.set(existingChild.index, existingChild), existingChild = existingChild.sibling;
        }return existingChildren;
    }
    function useFiber(fiber, priority) {
        if (shouldClone) {
            var clone = createWorkInProgress$2(fiber, priority);
            return clone.index = 0, clone.sibling = null, clone;
        }
        return fiber.pendingWorkPriority = priority, fiber.effectTag = NoEffect$2, fiber.index = 0, fiber.sibling = null, fiber;
    }
    function placeChild(newFiber, lastPlacedIndex, newIndex) {
        if (newFiber.index = newIndex, !shouldTrackSideEffects) return lastPlacedIndex;
        var current = newFiber.alternate;
        if (null !== current) {
            var oldIndex = current.index;
            return oldIndex < lastPlacedIndex ? (newFiber.effectTag = Placement$3, lastPlacedIndex) : oldIndex;
        }
        return newFiber.effectTag = Placement$3, lastPlacedIndex;
    }
    function placeSingleChild(newFiber) {
        return shouldTrackSideEffects && null === newFiber.alternate && (newFiber.effectTag = Placement$3), newFiber;
    }
    function updateTextNode(returnFiber, current, textContent, priority) {
        if (null === current || current.tag !== HostText$3) {
            var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = textContent, existing.return = returnFiber, existing;
    }
    function updateElement(returnFiber, current, element, priority) {
        if (null === current || current.type !== element.type) {
            var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
            return created.ref = coerceRef(current, element), created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.ref = coerceRef(current, element), existing.pendingProps = element.props, existing.return = returnFiber, existing;
    }
    function updateCoroutine(returnFiber, current, coroutine, priority) {
        if (null === current || current.tag !== CoroutineComponent$2) {
            var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
    }
    function updateYield(returnFiber, current, yieldNode, priority) {
        if (null === current || current.tag !== YieldComponent$2) {
            var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
            return created.type = yieldNode.value, created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.type = yieldNode.value, existing.return = returnFiber, existing;
    }
    function updatePortal(returnFiber, current, portal, priority) {
        if (null === current || current.tag !== HostPortal$3 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
    }
    function updateFragment(returnFiber, current, fragment, priority) {
        if (null === current || current.tag !== Fragment$2) {
            var created = createFiberFromFragment$1(fragment, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        var existing = useFiber(current, priority);
        return existing.pendingProps = fragment, existing.return = returnFiber, existing;
    }
    function createChild(returnFiber, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            var created = createFiberFromText$1("" + newChild, returnFiber.internalContextTag, priority);
            return created.return = returnFiber, created;
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    var _created = createFiberFromElement$1(newChild, returnFiber.internalContextTag, priority);
                    return _created.ref = coerceRef(null, newChild), _created.return = returnFiber, _created;

                case REACT_COROUTINE_TYPE:
                    var _created2 = createFiberFromCoroutine$1(newChild, returnFiber.internalContextTag, priority);
                    return _created2.return = returnFiber, _created2;

                case REACT_YIELD_TYPE:
                    var _created3 = createFiberFromYield$1(newChild, returnFiber.internalContextTag, priority);
                    return _created3.type = newChild.value, _created3.return = returnFiber, _created3;

                case REACT_PORTAL_TYPE$1:
                    var _created4 = createFiberFromPortal$1(newChild, returnFiber.internalContextTag, priority);
                    return _created4.return = returnFiber, _created4;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created5 = createFiberFromFragment$1(newChild, returnFiber.internalContextTag, priority);
                return _created5.return = returnFiber, _created5;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateSlot(returnFiber, oldFiber, newChild, priority) {
        var key = null !== oldFiber ? oldFiber.key : null;
        if ("string" == typeof newChild || "number" == typeof newChild) return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, priority);
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_COROUTINE_TYPE:
                    return newChild.key === key ? updateCoroutine(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_YIELD_TYPE:
                    return null === key ? updateYield(returnFiber, oldFiber, newChild, priority) : null;

                case REACT_PORTAL_TYPE$1:
                    return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, priority) : null;
            }
            if (isArray(newChild) || getIteratorFn(newChild)) return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, priority);
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function updateFromMap(existingChildren, returnFiber, newIdx, newChild, priority) {
        if ("string" == typeof newChild || "number" == typeof newChild) {
            return updateTextNode(returnFiber, existingChildren.get(newIdx) || null, "" + newChild, priority);
        }
        if ("object" == typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                    return updateElement(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_COROUTINE_TYPE:
                    return updateCoroutine(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);

                case REACT_YIELD_TYPE:
                    return updateYield(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);

                case REACT_PORTAL_TYPE$1:
                    return updatePortal(returnFiber, existingChildren.get(null === newChild.key ? newIdx : newChild.key) || null, newChild, priority);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
                return updateFragment(returnFiber, existingChildren.get(newIdx) || null, newChild, priority);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
        }
        return null;
    }
    function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, priority) {
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], priority);
            if (null === newFiber) {
                null === oldFiber && (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (newIdx === newChildren.length) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], priority);
                _newFiber && (lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber : previousNewFiber.sibling = _newFiber, previousNewFiber = _newFiber);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], priority);
            _newFiber2 && (shouldTrackSideEffects && null !== _newFiber2.alternate && existingChildren.delete(null === _newFiber2.key ? newIdx : _newFiber2.key), lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber2 : previousNewFiber.sibling = _newFiber2, previousNewFiber = _newFiber2);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, priority) {
        var iteratorFn = getIteratorFn(newChildrenIterable);
        invariant("function" == typeof iteratorFn, "An object is not an iterable. This error is likely caused by a bug in " + "React. Please file an issue.");
        var newChildren = iteratorFn.call(newChildrenIterable);
        invariant(null != newChildren, "An iterable object provided no iterator.");
        for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, lastPlacedIndex = 0, newIdx = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, priority);
            if (null === newFiber) {
                oldFiber || (oldFiber = nextOldFiber);
                break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber), lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber, previousNewFiber = newFiber, oldFiber = nextOldFiber;
        }
        if (step.done) return deleteRemainingChildren(returnFiber, oldFiber), resultingFirstChild;
        if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, priority);
                null !== _newFiber3 && (lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber3 : previousNewFiber.sibling = _newFiber3, previousNewFiber = _newFiber3);
            }
            return resultingFirstChild;
        }
        for (var existingChildren = mapRemainingChildren(returnFiber, oldFiber); !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, priority);
            null !== _newFiber4 && (shouldTrackSideEffects && null !== _newFiber4.alternate && existingChildren.delete(null === _newFiber4.key ? newIdx : _newFiber4.key), lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx), null === previousNewFiber ? resultingFirstChild = _newFiber4 : previousNewFiber.sibling = _newFiber4, previousNewFiber = _newFiber4);
        }
        return shouldTrackSideEffects && existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
        }), resultingFirstChild;
    }
    function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, priority) {
        if (null !== currentFirstChild && currentFirstChild.tag === HostText$3) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, priority);
            return existing.pendingProps = textContent, existing.return = returnFiber, existing;
        }
        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText$1(textContent, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleElement(returnFiber, currentFirstChild, element, priority) {
        for (var key = element.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.type === element.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.ref = coerceRef(child, element), existing.pendingProps = element.props, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromElement$1(element, returnFiber.internalContextTag, priority);
        return created.ref = coerceRef(currentFirstChild, element), created.return = returnFiber, created;
    }
    function reconcileSingleCoroutine(returnFiber, currentFirstChild, coroutine, priority) {
        for (var key = coroutine.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === CoroutineComponent$2) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = coroutine, existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromCoroutine$1(coroutine, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileSingleYield(returnFiber, currentFirstChild, yieldNode, priority) {
        var child = currentFirstChild;
        if (null !== child) {
            if (child.tag === YieldComponent$2) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, priority);
                return existing.type = yieldNode.value, existing.return = returnFiber, existing;
            }
            deleteRemainingChildren(returnFiber, child);
        }
        var created = createFiberFromYield$1(yieldNode, returnFiber.internalContextTag, priority);
        return created.type = yieldNode.value, created.return = returnFiber, created;
    }
    function reconcileSinglePortal(returnFiber, currentFirstChild, portal, priority) {
        for (var key = portal.key, child = currentFirstChild; null !== child;) {
            if (child.key === key) {
                if (child.tag === HostPortal$3 && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, priority);
                    return existing.pendingProps = portal.children || [], existing.return = returnFiber, existing;
                }
                deleteRemainingChildren(returnFiber, child);
                break;
            }
            deleteChild(returnFiber, child), child = child.sibling;
        }
        var created = createFiberFromPortal$1(portal, returnFiber.internalContextTag, priority);
        return created.return = returnFiber, created;
    }
    function reconcileChildFibers(returnFiber, currentFirstChild, newChild, priority) {
        var disableNewFiberFeatures = ReactFeatureFlags_1.disableNewFiberFeatures,
            isObject = "object" == typeof newChild && null !== newChild;
        if (isObject) if (disableNewFiberFeatures) switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        } else switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, priority));

            case REACT_COROUTINE_TYPE:
                return placeSingleChild(reconcileSingleCoroutine(returnFiber, currentFirstChild, newChild, priority));

            case REACT_YIELD_TYPE:
                return placeSingleChild(reconcileSingleYield(returnFiber, currentFirstChild, newChild, priority));

            case REACT_PORTAL_TYPE$1:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, priority));
        }
        if (disableNewFiberFeatures) switch (returnFiber.tag) {
            case ClassComponent$7:
                var Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s.render(): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", Component.displayName || Component.name || "Component");
                break;

            case FunctionalComponent$2:
                var _Component = returnFiber.type;
                invariant(null === newChild || !1 === newChild, "%s(...): A valid React element (or null) must be returned. " + "You may have returned undefined, an array or some other " + "invalid object.", _Component.displayName || _Component.name || "Component");
        }
        if ("string" == typeof newChild || "number" == typeof newChild) return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, priority));
        if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, priority);
        if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, priority);
        if (isObject && throwOnInvalidObjectType(returnFiber, newChild), !disableNewFiberFeatures && void 0 === newChild) switch (returnFiber.tag) {
            case ClassComponent$7:
            case FunctionalComponent$2:
                var _Component2 = returnFiber.type;
                invariant(!1, "%s(...): Nothing was returned from render. This usually means a " + "return statement is missing. Or, to render nothing, " + "return null.", _Component2.displayName || _Component2.name || "Component");
        }
        return deleteRemainingChildren(returnFiber, currentFirstChild);
    }
    return reconcileChildFibers;
}

var reconcileChildFibers$1 = ChildReconciler(!0, !0),
    reconcileChildFibersInPlace$1 = ChildReconciler(!1, !0),
    mountChildFibersInPlace$1 = ChildReconciler(!1, !1),
    cloneChildFibers$1 = function cloneChildFibers$1(current, workInProgress) {
    if (invariant(null === current || workInProgress.child === current.child, "Resuming work not yet implemented."), null !== workInProgress.child) {
        var currentChild = workInProgress.child,
            newChild = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority);
        for (newChild.pendingProps = currentChild.pendingProps, workInProgress.child = newChild, newChild.return = workInProgress; null !== currentChild.sibling;) {
            currentChild = currentChild.sibling, newChild = newChild.sibling = createWorkInProgress$2(currentChild, currentChild.pendingWorkPriority), newChild.pendingProps = currentChild.pendingProps, newChild.return = workInProgress;
        }newChild.sibling = null;
    }
},
    ReactChildFiber = {
    reconcileChildFibers: reconcileChildFibers$1,
    reconcileChildFibersInPlace: reconcileChildFibersInPlace$1,
    mountChildFibersInPlace: mountChildFibersInPlace$1,
    cloneChildFibers: cloneChildFibers$1
},
    Update$1 = ReactTypeOfSideEffect.Update,
    AsyncUpdates$1 = ReactTypeOfInternalContext.AsyncUpdates,
    cacheContext$1 = ReactFiberContext.cacheContext,
    getMaskedContext$2 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$2 = ReactFiberContext.getUnmaskedContext,
    isContextConsumer$1 = ReactFiberContext.isContextConsumer,
    addUpdate$1 = ReactFiberUpdateQueue.addUpdate,
    addReplaceUpdate$1 = ReactFiberUpdateQueue.addReplaceUpdate,
    addForceUpdate$1 = ReactFiberUpdateQueue.addForceUpdate,
    beginUpdateQueue$2 = ReactFiberUpdateQueue.beginUpdateQueue,
    _require5$1 = ReactFiberContext,
    hasContextChanged$2 = _require5$1.hasContextChanged,
    isMounted$1 = ReactFiberTreeReflection.isMounted,
    ReactFiberClassComponent = function ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState) {
    var updater = {
        isMounted: isMounted$1,
        enqueueSetState: function enqueueSetState(instance, partialState, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addUpdate$1(fiber, partialState, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addReplaceUpdate$1(fiber, state, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        },
        enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {
            var fiber = ReactInstanceMap_1.get(instance),
                priorityLevel = getPriorityContext(fiber, !1);
            callback = void 0 === callback ? null : callback, addForceUpdate$1(fiber, callback, priorityLevel), scheduleUpdate(fiber, priorityLevel);
        }
    };
    function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {
        if (null === oldProps || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate) return !0;
        var instance = workInProgress.stateNode,
            type = workInProgress.type;
        if ("function" == typeof instance.shouldComponentUpdate) {
            return instance.shouldComponentUpdate(newProps, newState, newContext);
        }
        return !type.prototype || !type.prototype.isPureReactComponent || !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
    }
    function resetInputPointers(workInProgress, instance) {
        instance.props = workInProgress.memoizedProps, instance.state = workInProgress.memoizedState;
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = updater, workInProgress.stateNode = instance, ReactInstanceMap_1.set(instance, workInProgress);
    }
    function constructClassInstance(workInProgress, props) {
        var ctor = workInProgress.type,
            unmaskedContext = getUnmaskedContext$2(workInProgress),
            needsContext = isContextConsumer$1(workInProgress),
            context = needsContext ? getMaskedContext$2(workInProgress, unmaskedContext) : emptyObject,
            instance = new ctor(props, context);
        return adoptClassInstance(workInProgress, instance), needsContext && cacheContext$1(workInProgress, unmaskedContext, context), instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        instance.componentWillMount(), oldState !== instance.state && updater.enqueueReplaceState(instance, instance.state, null);
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {
        var oldState = instance.state;
        instance.componentWillReceiveProps(newProps, newContext), instance.state !== oldState && updater.enqueueReplaceState(instance, instance.state, null);
    }
    function mountClassInstance(workInProgress, priorityLevel) {
        var current = workInProgress.alternate,
            instance = workInProgress.stateNode,
            state = instance.state || null,
            props = workInProgress.pendingProps;
        invariant(props, "There must be pending props for an initial mount. This error is " + "likely caused by a bug in React. Please file an issue.");
        var unmaskedContext = getUnmaskedContext$2(workInProgress);
        if (instance.props = props, instance.state = state, instance.refs = emptyObject, instance.context = getMaskedContext$2(workInProgress, unmaskedContext), ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != workInProgress.type && !0 === workInProgress.type.unstable_asyncUpdates && (workInProgress.internalContextTag |= AsyncUpdates$1), "function" == typeof instance.componentWillMount) {
            callComponentWillMount(workInProgress, instance);
            var updateQueue = workInProgress.updateQueue;
            null !== updateQueue && (instance.state = beginUpdateQueue$2(current, workInProgress, updateQueue, instance, state, props, priorityLevel));
        }
        "function" == typeof instance.componentDidMount && (workInProgress.effectTag |= Update$1);
    }
    function updateClassInstance(current, workInProgress, priorityLevel) {
        var instance = workInProgress.stateNode;
        resetInputPointers(workInProgress, instance);
        var oldProps = workInProgress.memoizedProps,
            newProps = workInProgress.pendingProps;
        newProps || (newProps = oldProps, invariant(null != newProps, "There should always be pending or memoized props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var oldContext = instance.context,
            newUnmaskedContext = getUnmaskedContext$2(workInProgress),
            newContext = getMaskedContext$2(workInProgress, newUnmaskedContext);
        "function" != typeof instance.componentWillReceiveProps || oldProps === newProps && oldContext === newContext || callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);
        var oldState = workInProgress.memoizedState,
            newState = void 0;
        if (newState = null !== workInProgress.updateQueue ? beginUpdateQueue$2(current, workInProgress, workInProgress.updateQueue, instance, oldState, newProps, priorityLevel) : oldState, !(oldProps !== newProps || oldState !== newState || hasContextChanged$2() || null !== workInProgress.updateQueue && workInProgress.updateQueue.hasForceUpdate)) return "function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), !1;
        var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);
        return shouldUpdate ? ("function" == typeof instance.componentWillUpdate && instance.componentWillUpdate(newProps, newState, newContext), "function" == typeof instance.componentDidUpdate && (workInProgress.effectTag |= Update$1)) : ("function" == typeof instance.componentDidUpdate && (oldProps === current.memoizedProps && oldState === current.memoizedState || (workInProgress.effectTag |= Update$1)), memoizeProps(workInProgress, newProps), memoizeState(workInProgress, newState)), instance.props = newProps, instance.state = newState, instance.context = newContext, shouldUpdate;
    }
    return {
        adoptClassInstance: adoptClassInstance,
        constructClassInstance: constructClassInstance,
        mountClassInstance: mountClassInstance,
        updateClassInstance: updateClassInstance
    };
},
    mountChildFibersInPlace = ReactChildFiber.mountChildFibersInPlace,
    reconcileChildFibers = ReactChildFiber.reconcileChildFibers,
    reconcileChildFibersInPlace = ReactChildFiber.reconcileChildFibersInPlace,
    cloneChildFibers = ReactChildFiber.cloneChildFibers,
    beginUpdateQueue$1 = ReactFiberUpdateQueue.beginUpdateQueue,
    getMaskedContext$1 = ReactFiberContext.getMaskedContext,
    getUnmaskedContext$1 = ReactFiberContext.getUnmaskedContext,
    hasContextChanged$1 = ReactFiberContext.hasContextChanged,
    pushContextProvider$1 = ReactFiberContext.pushContextProvider,
    pushTopLevelContextObject$1 = ReactFiberContext.pushTopLevelContextObject,
    invalidateContextProvider$1 = ReactFiberContext.invalidateContextProvider,
    IndeterminateComponent$2 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$1 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$6 = ReactTypeOfWork.ClassComponent,
    HostRoot$5 = ReactTypeOfWork.HostRoot,
    HostComponent$6 = ReactTypeOfWork.HostComponent,
    HostText$2 = ReactTypeOfWork.HostText,
    HostPortal$2 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$1 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$1 = ReactTypeOfWork.YieldComponent,
    Fragment$1 = ReactTypeOfWork.Fragment,
    NoWork$3 = ReactPriorityLevel.NoWork,
    OffscreenPriority$1 = ReactPriorityLevel.OffscreenPriority,
    PerformedWork$1 = ReactTypeOfSideEffect.PerformedWork,
    Placement$2 = ReactTypeOfSideEffect.Placement,
    ContentReset$1 = ReactTypeOfSideEffect.ContentReset,
    Err$1 = ReactTypeOfSideEffect.Err,
    Ref$1 = ReactTypeOfSideEffect.Ref,
    ReactCurrentOwner$2 = ReactGlobalSharedState_1.ReactCurrentOwner,
    ReactFiberBeginWork = function ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext) {
    var shouldSetTextContent = config.shouldSetTextContent,
        useSyncScheduling = config.useSyncScheduling,
        shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree,
        pushHostContext = hostContext.pushHostContext,
        pushHostContainer = hostContext.pushHostContainer,
        enterHydrationState = hydrationContext.enterHydrationState,
        resetHydrationState = hydrationContext.resetHydrationState,
        tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance,
        _ReactFiberClassCompo = ReactFiberClassComponent(scheduleUpdate, getPriorityContext, memoizeProps, memoizeState),
        adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,
        constructClassInstance = _ReactFiberClassCompo.constructClassInstance,
        mountClassInstance = _ReactFiberClassCompo.mountClassInstance,
        updateClassInstance = _ReactFiberClassCompo.updateClassInstance;
    function reconcileChildren(current, workInProgress, nextChildren) {
        reconcileChildrenAtPriority(current, workInProgress, nextChildren, workInProgress.pendingWorkPriority);
    }
    function reconcileChildrenAtPriority(current, workInProgress, nextChildren, priorityLevel) {
        null === current ? workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.child = reconcileChildFibers(workInProgress, workInProgress.child, nextChildren, priorityLevel) : workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel);
    }
    function updateFragment(current, workInProgress) {
        var nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = workInProgress.memoizedProps);else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren), workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        null === ref || current && current.ref === ref || (workInProgress.effectTag |= Ref$1);
    }
    function updateFunctionalComponent(current, workInProgress) {
        var fn = workInProgress.type,
            nextProps = workInProgress.pendingProps,
            memoizedProps = workInProgress.memoizedProps;
        if (hasContextChanged$1()) null === nextProps && (nextProps = memoizedProps);else {
            if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
            if ("function" == typeof fn.shouldComponentUpdate && !fn.shouldComponentUpdate(memoizedProps, nextProps)) return memoizeProps(workInProgress, nextProps), bailoutOnAlreadyFinishedWork(current, workInProgress);
        }
        var nextChildren,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        return nextChildren = fn(nextProps, context), workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, priorityLevel) {
        var hasContext = pushContextProvider$1(workInProgress),
            shouldUpdate = void 0;
        return null === current ? workInProgress.stateNode ? invariant(!1, "Resuming work not yet implemented.") : (constructClassInstance(workInProgress, workInProgress.pendingProps), mountClassInstance(workInProgress, priorityLevel), shouldUpdate = !0) : shouldUpdate = updateClassInstance(current, workInProgress, priorityLevel), finishClassComponent(current, workInProgress, shouldUpdate, hasContext);
    }
    function finishClassComponent(current, workInProgress, shouldUpdate, hasContext) {
        if (markRef(current, workInProgress), !shouldUpdate) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$2.current = workInProgress;
        var nextChildren = void 0;
        return nextChildren = instance.render(), workInProgress.effectTag |= PerformedWork$1, reconcileChildren(current, workInProgress, nextChildren), memoizeState(workInProgress, instance.state), memoizeProps(workInProgress, instance.props), hasContext && invalidateContextProvider$1(workInProgress), workInProgress.child;
    }
    function updateHostRoot(current, workInProgress, priorityLevel) {
        var root = workInProgress.stateNode;
        root.pendingContext ? pushTopLevelContextObject$1(workInProgress, root.pendingContext, root.pendingContext !== root.context) : root.context && pushTopLevelContextObject$1(workInProgress, root.context, !1), pushHostContainer(workInProgress, root.containerInfo);
        var updateQueue = workInProgress.updateQueue;
        if (null !== updateQueue) {
            var prevState = workInProgress.memoizedState,
                state = beginUpdateQueue$1(current, workInProgress, updateQueue, null, prevState, null, priorityLevel);
            if (prevState === state) return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
            var element = state.element;
            return null !== current && null !== current.child || !enterHydrationState(workInProgress) ? (resetHydrationState(), reconcileChildren(current, workInProgress, element)) : (workInProgress.effectTag |= Placement$2, workInProgress.child = mountChildFibersInPlace(workInProgress, workInProgress.child, element, priorityLevel)), memoizeState(workInProgress, state), workInProgress.child;
        }
        return resetHydrationState(), bailoutOnAlreadyFinishedWork(current, workInProgress);
    }
    function updateHostComponent(current, workInProgress, renderPriority) {
        pushHostContext(workInProgress), null === current && tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type,
            memoizedProps = workInProgress.memoizedProps,
            nextProps = workInProgress.pendingProps;
        null === nextProps && (nextProps = memoizedProps, invariant(null !== nextProps, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));
        var prevProps = null !== current ? current.memoizedProps : null;
        if (hasContextChanged$1()) ;else if (null === nextProps || memoizedProps === nextProps) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        var nextChildren = nextProps.children;
        return shouldSetTextContent(type, nextProps) ? nextChildren = null : prevProps && shouldSetTextContent(type, prevProps) && (workInProgress.effectTag |= ContentReset$1), markRef(current, workInProgress), renderPriority !== OffscreenPriority$1 && !useSyncScheduling && shouldDeprioritizeSubtree(type, nextProps) ? (workInProgress.pendingWorkPriority = OffscreenPriority$1, null) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextProps), workInProgress.child);
    }
    function updateHostText(current, workInProgress) {
        null === current && tryToClaimNextHydratableInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        return null === nextProps && (nextProps = workInProgress.memoizedProps), memoizeProps(workInProgress, nextProps), null;
    }
    function mountIndeterminateComponent(current, workInProgress, priorityLevel) {
        invariant(null === current, "An indeterminate component should never have mounted. This error is " + "likely caused by a bug in React. Please file an issue.");
        var value,
            fn = workInProgress.type,
            props = workInProgress.pendingProps,
            unmaskedContext = getUnmaskedContext$1(workInProgress),
            context = getMaskedContext$1(workInProgress, unmaskedContext);
        if (value = fn(props, context), workInProgress.effectTag |= PerformedWork$1, "object" == typeof value && null !== value && "function" == typeof value.render) {
            workInProgress.tag = ClassComponent$6;
            var hasContext = pushContextProvider$1(workInProgress);
            return adoptClassInstance(workInProgress, value), mountClassInstance(workInProgress, priorityLevel), finishClassComponent(current, workInProgress, !0, hasContext);
        }
        return workInProgress.tag = FunctionalComponent$1, reconcileChildren(current, workInProgress, value), memoizeProps(workInProgress, props), workInProgress.child;
    }
    function updateCoroutineComponent(current, workInProgress) {
        var nextCoroutine = workInProgress.pendingProps;
        hasContextChanged$1() ? null === nextCoroutine && (nextCoroutine = current && current.memoizedProps, invariant(null !== nextCoroutine, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue.")) : null !== nextCoroutine && workInProgress.memoizedProps !== nextCoroutine || (nextCoroutine = workInProgress.memoizedProps);
        var nextChildren = nextCoroutine.children,
            priorityLevel = workInProgress.pendingWorkPriority;
        return null === current ? workInProgress.stateNode = mountChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : current.child === workInProgress.child ? workInProgress.stateNode = reconcileChildFibers(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel) : workInProgress.stateNode = reconcileChildFibersInPlace(workInProgress, workInProgress.stateNode, nextChildren, priorityLevel), memoizeProps(workInProgress, nextCoroutine), workInProgress.stateNode;
    }
    function updatePortalComponent(current, workInProgress) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var priorityLevel = workInProgress.pendingWorkPriority,
            nextChildren = workInProgress.pendingProps;
        if (hasContextChanged$1()) null === nextChildren && (nextChildren = current && current.memoizedProps, invariant(null != nextChildren, "We should always have pending or current props. This error is " + "likely caused by a bug in React. Please file an issue."));else if (null === nextChildren || workInProgress.memoizedProps === nextChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress);
        return null === current ? (workInProgress.child = reconcileChildFibersInPlace(workInProgress, workInProgress.child, nextChildren, priorityLevel), memoizeProps(workInProgress, nextChildren)) : (reconcileChildren(current, workInProgress, nextChildren), memoizeProps(workInProgress, nextChildren)), workInProgress.child;
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress) {
        return cloneChildFibers(current, workInProgress), workInProgress.child;
    }
    function bailoutOnLowPriority(current, workInProgress) {
        switch (workInProgress.tag) {
            case ClassComponent$6:
                pushContextProvider$1(workInProgress);
                break;

            case HostPortal$2:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        }
        return null;
    }
    function memoizeProps(workInProgress, nextProps) {
        workInProgress.memoizedProps = nextProps;
    }
    function memoizeState(workInProgress, nextState) {
        workInProgress.memoizedState = nextState;
    }
    function beginWork(current, workInProgress, priorityLevel) {
        if (workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        switch (workInProgress.tag) {
            case IndeterminateComponent$2:
                return mountIndeterminateComponent(current, workInProgress, priorityLevel);

            case FunctionalComponent$1:
                return updateFunctionalComponent(current, workInProgress);

            case ClassComponent$6:
                return updateClassComponent(current, workInProgress, priorityLevel);

            case HostRoot$5:
                return updateHostRoot(current, workInProgress, priorityLevel);

            case HostComponent$6:
                return updateHostComponent(current, workInProgress, priorityLevel);

            case HostText$2:
                return updateHostText(current, workInProgress);

            case CoroutineHandlerPhase:
                workInProgress.tag = CoroutineComponent$1;

            case CoroutineComponent$1:
                return updateCoroutineComponent(current, workInProgress);

            case YieldComponent$1:
                return null;

            case HostPortal$2:
                return updatePortalComponent(current, workInProgress);

            case Fragment$1:
                return updateFragment(current, workInProgress);

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function beginFailedWork(current, workInProgress, priorityLevel) {
        if (invariant(workInProgress.tag === ClassComponent$6 || workInProgress.tag === HostRoot$5, "Invalid type of work. This error is likely caused by a bug in React. " + "Please file an issue."), workInProgress.effectTag |= Err$1, null === current ? workInProgress.child = null : workInProgress.child !== current.child && (workInProgress.child = current.child), workInProgress.pendingWorkPriority === NoWork$3 || workInProgress.pendingWorkPriority > priorityLevel) return bailoutOnLowPriority(current, workInProgress);
        if (workInProgress.firstEffect = null, workInProgress.lastEffect = null, reconcileChildrenAtPriority(current, workInProgress, null, priorityLevel), workInProgress.tag === ClassComponent$6) {
            var instance = workInProgress.stateNode;
            workInProgress.memoizedProps = instance.props, workInProgress.memoizedState = instance.state;
        }
        return workInProgress.child;
    }
    return {
        beginWork: beginWork,
        beginFailedWork: beginFailedWork
    };
},
    reconcileChildFibers$2 = ReactChildFiber.reconcileChildFibers,
    popContextProvider$2 = ReactFiberContext.popContextProvider,
    IndeterminateComponent$3 = ReactTypeOfWork.IndeterminateComponent,
    FunctionalComponent$3 = ReactTypeOfWork.FunctionalComponent,
    ClassComponent$8 = ReactTypeOfWork.ClassComponent,
    HostRoot$6 = ReactTypeOfWork.HostRoot,
    HostComponent$7 = ReactTypeOfWork.HostComponent,
    HostText$4 = ReactTypeOfWork.HostText,
    HostPortal$4 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$3 = ReactTypeOfWork.CoroutineComponent,
    CoroutineHandlerPhase$1 = ReactTypeOfWork.CoroutineHandlerPhase,
    YieldComponent$3 = ReactTypeOfWork.YieldComponent,
    Fragment$3 = ReactTypeOfWork.Fragment,
    Placement$4 = ReactTypeOfSideEffect.Placement,
    Ref$2 = ReactTypeOfSideEffect.Ref,
    Update$2 = ReactTypeOfSideEffect.Update,
    OffscreenPriority$2 = ReactPriorityLevel.OffscreenPriority,
    ReactFiberCompleteWork = function ReactFiberCompleteWork(config, hostContext, hydrationContext) {
    var createInstance = config.createInstance,
        createTextInstance = config.createTextInstance,
        appendInitialChild = config.appendInitialChild,
        finalizeInitialChildren = config.finalizeInitialChildren,
        prepareUpdate = config.prepareUpdate,
        getRootHostContainer = hostContext.getRootHostContainer,
        popHostContext = hostContext.popHostContext,
        getHostContext = hostContext.getHostContext,
        popHostContainer = hostContext.popHostContainer,
        prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,
        popHydrationState = hydrationContext.popHydrationState;
    function markUpdate(workInProgress) {
        workInProgress.effectTag |= Update$2;
    }
    function markRef(workInProgress) {
        workInProgress.effectTag |= Ref$2;
    }
    function appendAllYields(yields, workInProgress) {
        var node = workInProgress.stateNode;
        for (node && (node.return = workInProgress); null !== node;) {
            if (node.tag === HostComponent$7 || node.tag === HostText$4 || node.tag === HostPortal$4) invariant(!1, "A coroutine cannot have host component children.");else if (node.tag === YieldComponent$3) yields.push(node.type);else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function moveCoroutineToHandlerPhase(current, workInProgress) {
        var coroutine = workInProgress.memoizedProps;
        invariant(coroutine, "Should be resolved by now. This error is likely caused by a bug in " + "React. Please file an issue."), workInProgress.tag = CoroutineHandlerPhase$1;
        var yields = [];
        appendAllYields(yields, workInProgress);
        var fn = coroutine.handler,
            props = coroutine.props,
            nextChildren = fn(props, yields),
            currentFirstChild = null !== current ? current.child : null,
            priority = workInProgress.pendingWorkPriority;
        return workInProgress.child = reconcileChildFibers$2(workInProgress, currentFirstChild, nextChildren, priority), workInProgress.child;
    }
    function appendAllChildren(parent, workInProgress) {
        for (var node = workInProgress.child; null !== node;) {
            if (node.tag === HostComponent$7 || node.tag === HostText$4) appendInitialChild(parent, node.stateNode);else if (node.tag === HostPortal$4) ;else if (null !== node.child) {
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === workInProgress) return;
                node = node.return;
            }
            node = node.sibling;
        }
    }
    function completeWork(current, workInProgress, renderPriority) {
        var newProps = workInProgress.pendingProps;
        switch (null === newProps ? newProps = workInProgress.memoizedProps : workInProgress.pendingWorkPriority === OffscreenPriority$2 && renderPriority !== OffscreenPriority$2 || (workInProgress.pendingProps = null), workInProgress.tag) {
            case FunctionalComponent$3:
                return null;

            case ClassComponent$8:
                return popContextProvider$2(workInProgress), null;

            case HostRoot$6:
                var fiberRoot = workInProgress.stateNode;
                return fiberRoot.pendingContext && (fiberRoot.context = fiberRoot.pendingContext, fiberRoot.pendingContext = null), null !== current && null !== current.child || (popHydrationState(workInProgress), workInProgress.effectTag &= ~Placement$4), null;

            case HostComponent$7:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer(),
                    type = workInProgress.type;
                if (null !== current && null != workInProgress.stateNode) {
                    var oldProps = current.memoizedProps,
                        instance = workInProgress.stateNode,
                        currentHostContext = getHostContext(),
                        updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
                    workInProgress.updateQueue = updatePayload, updatePayload && markUpdate(workInProgress), current.ref !== workInProgress.ref && markRef(workInProgress);
                } else {
                    if (!newProps) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _currentHostContext = getHostContext();
                    if (popHydrationState(workInProgress)) prepareToHydrateHostInstance(workInProgress, rootContainerInstance) && markUpdate(workInProgress);else {
                        var _instance = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);
                        appendAllChildren(_instance, workInProgress), finalizeInitialChildren(_instance, type, newProps, rootContainerInstance) && markUpdate(workInProgress), workInProgress.stateNode = _instance;
                    }
                    null !== workInProgress.ref && markRef(workInProgress);
                }
                return null;

            case HostText$4:
                var newText = newProps;
                if (current && null != workInProgress.stateNode) {
                    current.memoizedProps !== newText && markUpdate(workInProgress);
                } else {
                    if ("string" != typeof newText) return invariant(null !== workInProgress.stateNode, "We must have new props for new mounts. This error is likely " + "caused by a bug in React. Please file an issue."), null;
                    var _rootContainerInstance = getRootHostContainer(),
                        _currentHostContext2 = getHostContext();
                    popHydrationState(workInProgress) ? prepareToHydrateHostTextInstance(workInProgress) && markUpdate(workInProgress) : workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);
                }
                return null;

            case CoroutineComponent$3:
                return moveCoroutineToHandlerPhase(current, workInProgress);

            case CoroutineHandlerPhase$1:
                return workInProgress.tag = CoroutineComponent$3, null;

            case YieldComponent$3:
            case Fragment$3:
                return null;

            case HostPortal$4:
                return markUpdate(workInProgress), popHostContainer(workInProgress), null;

            case IndeterminateComponent$3:
                invariant(!1, "An indeterminate component should have become determinate before " + "completing. This error is likely caused by a bug in React. Please " + "file an issue.");

            default:
                invariant(!1, "Unknown unit of work tag. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    return {
        completeWork: completeWork
    };
},
    rendererID = null,
    injectInternals$1 = null,
    onCommitRoot$1 = null,
    onCommitUnmount$1 = null;

if ("undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && __REACT_DEVTOOLS_GLOBAL_HOOK__.supportsFiber) {
    var inject$1 = __REACT_DEVTOOLS_GLOBAL_HOOK__.inject,
        onCommitFiberRoot = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberRoot,
        onCommitFiberUnmount = __REACT_DEVTOOLS_GLOBAL_HOOK__.onCommitFiberUnmount;
    injectInternals$1 = function injectInternals$1(internals) {
        warning(null == rendererID, "Cannot inject into DevTools twice."), rendererID = inject$1(internals);
    }, onCommitRoot$1 = function onCommitRoot$1(root) {
        if (null != rendererID) try {
            onCommitFiberRoot(rendererID, root);
        } catch (err) {}
    }, onCommitUnmount$1 = function onCommitUnmount$1(fiber) {
        if (null != rendererID) try {
            onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {}
    };
}

var injectInternals_1 = injectInternals$1,
    onCommitRoot_1 = onCommitRoot$1,
    onCommitUnmount_1 = onCommitUnmount$1,
    ReactFiberDevToolsHook = {
    injectInternals: injectInternals_1,
    onCommitRoot: onCommitRoot_1,
    onCommitUnmount: onCommitUnmount_1
},
    ClassComponent$9 = ReactTypeOfWork.ClassComponent,
    HostRoot$7 = ReactTypeOfWork.HostRoot,
    HostComponent$8 = ReactTypeOfWork.HostComponent,
    HostText$5 = ReactTypeOfWork.HostText,
    HostPortal$5 = ReactTypeOfWork.HostPortal,
    CoroutineComponent$4 = ReactTypeOfWork.CoroutineComponent,
    commitCallbacks$1 = ReactFiberUpdateQueue.commitCallbacks,
    onCommitUnmount = ReactFiberDevToolsHook.onCommitUnmount,
    Placement$5 = ReactTypeOfSideEffect.Placement,
    Update$3 = ReactTypeOfSideEffect.Update,
    Callback$1 = ReactTypeOfSideEffect.Callback,
    ContentReset$2 = ReactTypeOfSideEffect.ContentReset,
    ReactFiberCommitWork = function ReactFiberCommitWork(config, captureError) {
    var commitMount = config.commitMount,
        commitUpdate = config.commitUpdate,
        resetTextContent = config.resetTextContent,
        commitTextUpdate = config.commitTextUpdate,
        appendChild = config.appendChild,
        appendChildToContainer = config.appendChildToContainer,
        insertBefore = config.insertBefore,
        insertInContainerBefore = config.insertInContainerBefore,
        removeChild = config.removeChild,
        removeChildFromContainer = config.removeChildFromContainer,
        getPublicInstance = config.getPublicInstance;
    function safelyCallComponentWillUnmount(current, instance) {
        try {
            instance.componentWillUnmount();
        } catch (unmountError) {
            captureError(current, unmountError);
        }
    }
    function safelyDetachRef(current) {
        var ref = current.ref;
        if (null !== ref) {
            try {
                ref(null);
            } catch (refError) {
                captureError(current, refError);
            }
        }
    }
    function getHostParentFiber(fiber) {
        for (var parent = fiber.return; null !== parent;) {
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        invariant(!1, "Expected to find a host parent. This error is likely caused by a bug " + "in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent$8 || fiber.tag === HostRoot$7 || fiber.tag === HostPortal$5;
    }
    function getHostSibling(fiber) {
        var node = fiber;
        siblings: for (; !0;) {
            for (; null === node.sibling;) {
                if (null === node.return || isHostParent(node.return)) return null;
                node = node.return;
            }
            for (node.sibling.return = node.return, node = node.sibling; node.tag !== HostComponent$8 && node.tag !== HostText$5;) {
                if (node.effectTag & Placement$5) continue siblings;
                if (null === node.child || node.tag === HostPortal$5) continue siblings;
                node.child.return = node, node = node.child;
            }
            if (!(node.effectTag & Placement$5)) return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork),
            parent = void 0,
            isContainer = void 0;
        switch (parentFiber.tag) {
            case HostComponent$8:
                parent = parentFiber.stateNode, isContainer = !1;
                break;

            case HostRoot$7:
            case HostPortal$5:
                parent = parentFiber.stateNode.containerInfo, isContainer = !0;
                break;

            default:
                invariant(!1, "Invalid host parent fiber. This error is likely caused by a bug " + "in React. Please file an issue.");
        }
        parentFiber.effectTag & ContentReset$2 && (resetTextContent(parent), parentFiber.effectTag &= ~ContentReset$2);
        for (var before = getHostSibling(finishedWork), node = finishedWork; !0;) {
            if (node.tag === HostComponent$8 || node.tag === HostText$5) before ? isContainer ? insertInContainerBefore(parent, node.stateNode, before) : insertBefore(parent, node.stateNode, before) : isContainer ? appendChildToContainer(parent, node.stateNode) : appendChild(parent, node.stateNode);else if (node.tag === HostPortal$5) ;else if (null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === finishedWork) return;
                node = node.return;
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitNestedUnmounts(root) {
        for (var node = root; !0;) {
            if (commitUnmount(node), null === node.child || node.tag === HostPortal$5) {
                if (node === root) return;
                for (; null === node.sibling;) {
                    if (null === node.return || node.return === root) return;
                    node = node.return;
                }
                node.sibling.return = node.return, node = node.sibling;
            } else node.child.return = node, node = node.child;
        }
    }
    function unmountHostComponents(current) {
        for (var node = current, currentParentIsValid = !1, currentParent = void 0, currentParentIsContainer = void 0; !0;) {
            if (!currentParentIsValid) {
                var parent = node.return;
                findParent: for (; !0;) {
                    switch (invariant(null !== parent, "Expected to find a host parent. This error is likely caused by " + "a bug in React. Please file an issue."), parent.tag) {
                        case HostComponent$8:
                            currentParent = parent.stateNode, currentParentIsContainer = !1;
                            break findParent;

                        case HostRoot$7:
                        case HostPortal$5:
                            currentParent = parent.stateNode.containerInfo, currentParentIsContainer = !0;
                            break findParent;
                    }
                    parent = parent.return;
                }
                currentParentIsValid = !0;
            }
            if (node.tag === HostComponent$8 || node.tag === HostText$5) commitNestedUnmounts(node), currentParentIsContainer ? removeChildFromContainer(currentParent, node.stateNode) : removeChild(currentParent, node.stateNode);else if (node.tag === HostPortal$5) {
                if (currentParent = node.stateNode.containerInfo, null !== node.child) {
                    node.child.return = node, node = node.child;
                    continue;
                }
            } else if (commitUnmount(node), null !== node.child) {
                node.child.return = node, node = node.child;
                continue;
            }
            if (node === current) return;
            for (; null === node.sibling;) {
                if (null === node.return || node.return === current) return;
                node = node.return, node.tag === HostPortal$5 && (currentParentIsValid = !1);
            }
            node.sibling.return = node.return, node = node.sibling;
        }
    }
    function commitDeletion(current) {
        unmountHostComponents(current), current.return = null, current.child = null, current.alternate && (current.alternate.child = null, current.alternate.return = null);
    }
    function commitUnmount(current) {
        switch ("function" == typeof onCommitUnmount && onCommitUnmount(current), current.tag) {
            case ClassComponent$9:
                safelyDetachRef(current);
                var instance = current.stateNode;
                return void ("function" == typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(current, instance));

            case HostComponent$8:
                return void safelyDetachRef(current);

            case CoroutineComponent$4:
                return void commitNestedUnmounts(current.stateNode);

            case HostPortal$5:
                return void unmountHostComponents(current);
        }
    }
    function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                return;

            case HostComponent$8:
                var instance = finishedWork.stateNode;
                if (null != instance) {
                    var newProps = finishedWork.memoizedProps,
                        oldProps = null !== current ? current.memoizedProps : newProps,
                        type = finishedWork.type,
                        updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null, null !== updatePayload && commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
                }
                return;

            case HostText$5:
                invariant(null !== finishedWork.stateNode, "This should have a text node initialized. This error is likely " + "caused by a bug in React. Please file an issue.");
                var textInstance = finishedWork.stateNode,
                    newText = finishedWork.memoizedProps,
                    oldText = null !== current ? current.memoizedProps : newText;
                return void commitTextUpdate(textInstance, oldText, newText);

            case HostRoot$7:
            case HostPortal$5:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
            case ClassComponent$9:
                var instance = finishedWork.stateNode;
                if (finishedWork.effectTag & Update$3) if (null === current) instance.componentDidMount();else {
                    var prevProps = current.memoizedProps,
                        prevState = current.memoizedState;
                    instance.componentDidUpdate(prevProps, prevState);
                }
                return void (finishedWork.effectTag & Callback$1 && null !== finishedWork.updateQueue && commitCallbacks$1(finishedWork, finishedWork.updateQueue, instance));

            case HostRoot$7:
                var updateQueue = finishedWork.updateQueue;
                if (null !== updateQueue) {
                    var _instance = finishedWork.child && finishedWork.child.stateNode;
                    commitCallbacks$1(finishedWork, updateQueue, _instance);
                }
                return;

            case HostComponent$8:
                var _instance2 = finishedWork.stateNode;
                if (null === current && finishedWork.effectTag & Update$3) {
                    var type = finishedWork.type,
                        props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props, finishedWork);
                }
                return;

            case HostText$5:
            case HostPortal$5:
                return;

            default:
                invariant(!1, "This unit of work tag should not have side-effects. This error is " + "likely caused by a bug in React. Please file an issue.");
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (null !== ref) {
            var instance = finishedWork.stateNode;
            switch (finishedWork.tag) {
                case HostComponent$8:
                    ref(getPublicInstance(instance));
                    break;

                default:
                    ref(instance);
            }
        }
    }
    function commitDetachRef(current) {
        var currentRef = current.ref;
        null !== currentRef && currentRef(null);
    }
    return {
        commitPlacement: commitPlacement,
        commitDeletion: commitDeletion,
        commitWork: commitWork,
        commitLifeCycles: commitLifeCycles,
        commitAttachRef: commitAttachRef,
        commitDetachRef: commitDetachRef
    };
},
    createCursor$2 = ReactFiberStack.createCursor,
    pop$2 = ReactFiberStack.pop,
    push$2 = ReactFiberStack.push,
    NO_CONTEXT = {},
    ReactFiberHostContext = function ReactFiberHostContext(config) {
    var getChildHostContext = config.getChildHostContext,
        getRootHostContext = config.getRootHostContext,
        contextStackCursor = createCursor$2(NO_CONTEXT),
        contextFiberStackCursor = createCursor$2(NO_CONTEXT),
        rootInstanceStackCursor = createCursor$2(NO_CONTEXT);
    function requiredContext(c) {
        return invariant(c !== NO_CONTEXT, "Expected host context to exist. This error is likely caused by a bug " + "in React. Please file an issue."), c;
    }
    function getRootHostContainer() {
        return requiredContext(rootInstanceStackCursor.current);
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push$2(rootInstanceStackCursor, nextRootInstance, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber), pop$2(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        return requiredContext(contextStackCursor.current);
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current),
            context = requiredContext(contextStackCursor.current),
            nextContext = getChildHostContext(context, fiber.type, rootInstance);
        context !== nextContext && (push$2(contextFiberStackCursor, fiber, fiber), push$2(contextStackCursor, nextContext, fiber));
    }
    function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop$2(contextStackCursor, fiber), pop$2(contextFiberStackCursor, fiber));
    }
    function resetHostContainer() {
        contextStackCursor.current = NO_CONTEXT, rootInstanceStackCursor.current = NO_CONTEXT;
    }
    return {
        getHostContext: getHostContext,
        getRootHostContainer: getRootHostContainer,
        popHostContainer: popHostContainer,
        popHostContext: popHostContext,
        pushHostContainer: pushHostContainer,
        pushHostContext: pushHostContext,
        resetHostContainer: resetHostContainer
    };
},
    HostComponent$9 = ReactTypeOfWork.HostComponent,
    HostText$6 = ReactTypeOfWork.HostText,
    HostRoot$8 = ReactTypeOfWork.HostRoot,
    Deletion$2 = ReactTypeOfSideEffect.Deletion,
    Placement$6 = ReactTypeOfSideEffect.Placement,
    createFiberFromHostInstanceForDeletion$1 = ReactFiber.createFiberFromHostInstanceForDeletion,
    ReactFiberHydrationContext = function ReactFiberHydrationContext(config) {
    var shouldSetTextContent = config.shouldSetTextContent,
        canHydrateInstance = config.canHydrateInstance,
        canHydrateTextInstance = config.canHydrateTextInstance,
        getNextHydratableSibling = config.getNextHydratableSibling,
        getFirstHydratableChild = config.getFirstHydratableChild,
        hydrateInstance = config.hydrateInstance,
        hydrateTextInstance = config.hydrateTextInstance,
        didNotHydrateInstance = config.didNotHydrateInstance,
        didNotFindHydratableInstance = config.didNotFindHydratableInstance,
        didNotFindHydratableTextInstance = config.didNotFindHydratableTextInstance;
    if (!(canHydrateInstance && canHydrateTextInstance && getNextHydratableSibling && getFirstHydratableChild && hydrateInstance && hydrateTextInstance && didNotHydrateInstance && didNotFindHydratableInstance && didNotFindHydratableTextInstance)) return {
        enterHydrationState: function enterHydrationState() {
            return !1;
        },
        resetHydrationState: function resetHydrationState() {},
        tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},
        prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {
            invariant(!1, "React bug.");
        },
        prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {
            invariant(!1, "React bug.");
        },
        popHydrationState: function popHydrationState(fiber) {
            return !1;
        }
    };
    var hydrationParentFiber = null,
        nextHydratableInstance = null,
        isHydrating = !1;
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        return nextHydratableInstance = getFirstHydratableChild(parentInstance), hydrationParentFiber = fiber, isHydrating = !0, !0;
    }
    function deleteHydratableInstance(returnFiber, instance) {
        var childToDelete = createFiberFromHostInstanceForDeletion$1();
        childToDelete.stateNode = instance, childToDelete.return = returnFiber, childToDelete.effectTag = Deletion$2, null !== returnFiber.lastEffect ? (returnFiber.lastEffect.nextEffect = childToDelete, returnFiber.lastEffect = childToDelete) : returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.effectTag |= Placement$6;
    }
    function canHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
            case HostComponent$9:
                var type = fiber.type,
                    props = fiber.pendingProps;
                return canHydrateInstance(nextInstance, type, props);

            case HostText$6:
                var text = fiber.pendingProps;
                return canHydrateTextInstance(nextInstance, text);

            default:
                return !1;
        }
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (isHydrating) {
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
            if (!canHydrate(fiber, nextInstance)) {
                if (!(nextInstance = getNextHydratableSibling(nextInstance)) || !canHydrate(fiber, nextInstance)) return insertNonHydratedInstance(hydrationParentFiber, fiber), isHydrating = !1, void (hydrationParentFiber = fiber);
                deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);
            }
            fiber.stateNode = nextInstance, hydrationParentFiber = fiber, nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance) {
        var instance = fiber.stateNode,
            updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, fiber);
        return fiber.updateQueue = updatePayload, null !== updatePayload;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        return hydrateTextInstance(textInstance, fiber.memoizedProps, fiber);
    }
    function popToNextHostParent(fiber) {
        for (var parent = fiber.return; null !== parent && parent.tag !== HostComponent$9 && parent.tag !== HostRoot$8;) {
            parent = parent.return;
        }hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return !1;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = !0, !1;
        var type = fiber.type;
        if (fiber.tag !== HostComponent$9 || "head" !== type && "body" !== type && !shouldSetTextContent(type, fiber.memoizedProps)) for (var nextInstance = nextHydratableInstance; nextInstance;) {
            deleteHydratableInstance(fiber, nextInstance), nextInstance = getNextHydratableSibling(nextInstance);
        }return popToNextHostParent(fiber), nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null, !0;
    }
    function resetHydrationState() {
        hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = !1;
    }
    return {
        enterHydrationState: enterHydrationState,
        resetHydrationState: resetHydrationState,
        tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,
        prepareToHydrateHostInstance: prepareToHydrateHostInstance,
        prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,
        popHydrationState: popHydrationState
    };
},
    popContextProvider$1 = ReactFiberContext.popContextProvider,
    reset$1 = ReactFiberStack.reset,
    getStackAddendumByWorkInProgressFiber = ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber,
    logCapturedError$1 = ReactFiberErrorLogger.logCapturedError,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner,
    createWorkInProgress$1 = ReactFiber.createWorkInProgress,
    largerPriority$1 = ReactFiber.largerPriority,
    onCommitRoot = ReactFiberDevToolsHook.onCommitRoot,
    NoWork$2 = ReactPriorityLevel.NoWork,
    SynchronousPriority$1 = ReactPriorityLevel.SynchronousPriority,
    TaskPriority$1 = ReactPriorityLevel.TaskPriority,
    HighPriority = ReactPriorityLevel.HighPriority,
    LowPriority = ReactPriorityLevel.LowPriority,
    OffscreenPriority = ReactPriorityLevel.OffscreenPriority,
    AsyncUpdates = ReactTypeOfInternalContext.AsyncUpdates,
    PerformedWork = ReactTypeOfSideEffect.PerformedWork,
    Placement$1 = ReactTypeOfSideEffect.Placement,
    Update = ReactTypeOfSideEffect.Update,
    PlacementAndUpdate = ReactTypeOfSideEffect.PlacementAndUpdate,
    Deletion = ReactTypeOfSideEffect.Deletion,
    ContentReset = ReactTypeOfSideEffect.ContentReset,
    Callback = ReactTypeOfSideEffect.Callback,
    Err = ReactTypeOfSideEffect.Err,
    Ref = ReactTypeOfSideEffect.Ref,
    HostRoot$4 = ReactTypeOfWork.HostRoot,
    HostComponent$4 = ReactTypeOfWork.HostComponent,
    HostPortal$1 = ReactTypeOfWork.HostPortal,
    ClassComponent$4 = ReactTypeOfWork.ClassComponent,
    getUpdatePriority$1 = ReactFiberUpdateQueue.getUpdatePriority,
    _require14 = ReactFiberContext,
    resetContext$1 = _require14.resetContext,
    ReactFiberInstrumentation$1,
    timeHeuristicForUnitOfWork = 1,
    ReactFiberScheduler = function ReactFiberScheduler(config) {
    var hostContext = ReactFiberHostContext(config),
        hydrationContext = ReactFiberHydrationContext(config),
        popHostContainer = hostContext.popHostContainer,
        popHostContext = hostContext.popHostContext,
        resetHostContainer = hostContext.resetHostContainer,
        _ReactFiberBeginWork = ReactFiberBeginWork(config, hostContext, hydrationContext, scheduleUpdate, getPriorityContext),
        beginWork = _ReactFiberBeginWork.beginWork,
        beginFailedWork = _ReactFiberBeginWork.beginFailedWork,
        _ReactFiberCompleteWo = ReactFiberCompleteWork(config, hostContext, hydrationContext),
        completeWork = _ReactFiberCompleteWo.completeWork,
        _ReactFiberCommitWork = ReactFiberCommitWork(config, captureError),
        commitPlacement = _ReactFiberCommitWork.commitPlacement,
        commitDeletion = _ReactFiberCommitWork.commitDeletion,
        commitWork = _ReactFiberCommitWork.commitWork,
        commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,
        commitAttachRef = _ReactFiberCommitWork.commitAttachRef,
        commitDetachRef = _ReactFiberCommitWork.commitDetachRef,
        scheduleDeferredCallback = config.scheduleDeferredCallback,
        useSyncScheduling = config.useSyncScheduling,
        prepareForCommit = config.prepareForCommit,
        resetAfterCommit = config.resetAfterCommit,
        priorityContext = NoWork$2,
        priorityContextBeforeReconciliation = NoWork$2,
        isPerformingWork = !1,
        deadlineHasExpired = !1,
        isBatchingUpdates = !1,
        isUnbatchingUpdates = !1,
        nextUnitOfWork = null,
        nextPriorityLevel = NoWork$2,
        nextEffect = null,
        pendingCommit = null,
        nextScheduledRoot = null,
        lastScheduledRoot = null,
        isCallbackScheduled = !1,
        capturedErrors = null,
        failedBoundaries = null,
        commitPhaseBoundaries = null,
        firstUncaughtError = null,
        fatalError = null,
        isCommitting = !1,
        isUnmounting = !1;
    function resetContextStack() {
        reset$1(), resetContext$1(), resetHostContainer();
    }
    function findNextUnitOfWork() {
        for (; null !== nextScheduledRoot && nextScheduledRoot.current.pendingWorkPriority === NoWork$2;) {
            nextScheduledRoot.isScheduled = !1;
            var next = nextScheduledRoot.nextScheduledRoot;
            if (nextScheduledRoot.nextScheduledRoot = null, nextScheduledRoot === lastScheduledRoot) return nextScheduledRoot = null, lastScheduledRoot = null, nextPriorityLevel = NoWork$2, null;
            nextScheduledRoot = next;
        }
        for (var root = nextScheduledRoot, highestPriorityRoot = null, highestPriorityLevel = NoWork$2; null !== root;) {
            root.current.pendingWorkPriority !== NoWork$2 && (highestPriorityLevel === NoWork$2 || highestPriorityLevel > root.current.pendingWorkPriority) && (highestPriorityLevel = root.current.pendingWorkPriority, highestPriorityRoot = root), root = root.nextScheduledRoot;
        }return null !== highestPriorityRoot ? (nextPriorityLevel = highestPriorityLevel, priorityContext = nextPriorityLevel, resetContextStack(), createWorkInProgress$1(highestPriorityRoot.current, highestPriorityLevel)) : (nextPriorityLevel = NoWork$2, null);
    }
    function commitAllHostEffects() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & ContentReset && config.resetTextContent(nextEffect.stateNode), effectTag & Ref) {
                var current = nextEffect.alternate;
                null !== current && commitDetachRef(current);
            }
            switch (effectTag & ~(Callback | Err | ContentReset | Ref | PerformedWork)) {
                case Placement$1:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    break;

                case PlacementAndUpdate:
                    commitPlacement(nextEffect), nextEffect.effectTag &= ~Placement$1;
                    var _current = nextEffect.alternate;
                    commitWork(_current, nextEffect);
                    break;

                case Update:
                    var _current2 = nextEffect.alternate;
                    commitWork(_current2, nextEffect);
                    break;

                case Deletion:
                    isUnmounting = !0, commitDeletion(nextEffect), isUnmounting = !1;
            }
            nextEffect = nextEffect.nextEffect;
        }
    }
    function commitAllLifeCycles() {
        for (; null !== nextEffect;) {
            var effectTag = nextEffect.effectTag;
            if (effectTag & (Update | Callback)) {
                var current = nextEffect.alternate;
                commitLifeCycles(current, nextEffect);
            }
            effectTag & Ref && commitAttachRef(nextEffect), effectTag & Err && commitErrorHandling(nextEffect);
            var next = nextEffect.nextEffect;
            nextEffect.nextEffect = null, nextEffect = next;
        }
    }
    function commitAllWork(finishedWork) {
        isCommitting = !0, pendingCommit = null;
        var root = finishedWork.stateNode;
        invariant(root.current !== finishedWork, "Cannot commit the same tree as before. This is probably a bug " + "related to the return field. This error is likely caused by a bug " + "in React. Please file an issue."), ReactCurrentOwner$1.current = null;
        var previousPriorityContext = priorityContext;
        priorityContext = TaskPriority$1;
        var firstEffect = void 0;
        for (finishedWork.effectTag > PerformedWork ? null !== finishedWork.lastEffect ? (finishedWork.lastEffect.nextEffect = finishedWork, firstEffect = finishedWork.firstEffect) : firstEffect = finishedWork : firstEffect = finishedWork.firstEffect, prepareForCommit(), nextEffect = firstEffect; null !== nextEffect;) {
            var _error = null;
            try {
                commitAllHostEffects();
            } catch (e) {
                _error = e;
            }
            null !== _error && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        for (resetAfterCommit(), root.current = finishedWork, nextEffect = firstEffect; null !== nextEffect;) {
            var _error2 = null;
            try {
                commitAllLifeCycles();
            } catch (e) {
                _error2 = e;
            }
            null !== _error2 && (invariant(null !== nextEffect, "Should have next effect. This error is likely caused by a bug " + "in React. Please file an issue."), captureError(nextEffect, _error2), null !== nextEffect && (nextEffect = nextEffect.nextEffect));
        }
        isCommitting = !1, "function" == typeof onCommitRoot && onCommitRoot(finishedWork.stateNode), !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCommitWork(finishedWork), commitPhaseBoundaries && (commitPhaseBoundaries.forEach(scheduleErrorRecovery), commitPhaseBoundaries = null), priorityContext = previousPriorityContext;
    }
    function resetWorkPriority(workInProgress, renderPriority) {
        if (!(workInProgress.pendingWorkPriority !== NoWork$2 && workInProgress.pendingWorkPriority > renderPriority)) {
            for (var newPriority = getUpdatePriority$1(workInProgress), child = workInProgress.child; null !== child;) {
                newPriority = largerPriority$1(newPriority, child.pendingWorkPriority), child = child.sibling;
            }workInProgress.pendingWorkPriority = newPriority;
        }
    }
    function completeUnitOfWork(workInProgress) {
        for (; !0;) {
            var current = workInProgress.alternate,
                next = completeWork(current, workInProgress, nextPriorityLevel),
                returnFiber = workInProgress.return,
                siblingFiber = workInProgress.sibling;
            if (resetWorkPriority(workInProgress, nextPriorityLevel), null !== next) return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), next;
            if (null !== returnFiber) {
                null === returnFiber.firstEffect && (returnFiber.firstEffect = workInProgress.firstEffect), null !== workInProgress.lastEffect && (null !== returnFiber.lastEffect && (returnFiber.lastEffect.nextEffect = workInProgress.firstEffect), returnFiber.lastEffect = workInProgress.lastEffect);
                workInProgress.effectTag > PerformedWork && (null !== returnFiber.lastEffect ? returnFiber.lastEffect.nextEffect = workInProgress : returnFiber.firstEffect = workInProgress, returnFiber.lastEffect = workInProgress);
            }
            if (!1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onCompleteWork(workInProgress), null !== siblingFiber) return siblingFiber;
            if (null === returnFiber) return nextPriorityLevel < HighPriority ? commitAllWork(workInProgress) : pendingCommit = workInProgress, null;
            workInProgress = returnFiber;
        }
        return null;
    }
    function performUnitOfWork(workInProgress) {
        var current = workInProgress.alternate,
            next = beginWork(current, workInProgress, nextPriorityLevel);
        return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, next;
    }
    function performFailedUnitOfWork(workInProgress) {
        var current = workInProgress.alternate,
            next = beginFailedWork(current, workInProgress, nextPriorityLevel);
        return !1 && ReactFiberInstrumentation$1.debugTool && ReactFiberInstrumentation$1.debugTool.onBeginWork(workInProgress), null === next && (next = completeUnitOfWork(workInProgress)), ReactCurrentOwner$1.current = null, next;
    }
    function clearErrors() {
        for (null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()); null !== capturedErrors && capturedErrors.size && null !== nextUnitOfWork && nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= TaskPriority$1;) {
            null === (nextUnitOfWork = hasCapturedError(nextUnitOfWork) ? performFailedUnitOfWork(nextUnitOfWork) : performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork());
        }
    }
    function workLoopAsync(minPriorityLevel, deadline) {
        for (; null !== nextUnitOfWork && !deadlineHasExpired;) {
            if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                if (null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && null !== pendingCommit) if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
                    if (commitAllWork(pendingCommit), nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel < HighPriority) break;
                } else deadlineHasExpired = !0;
            } else deadlineHasExpired = !0;
        }
    }
    function workLoopSync(minPriorityLevel) {
        for (; null !== nextUnitOfWork && !(null === (nextUnitOfWork = performUnitOfWork(nextUnitOfWork)) && (nextUnitOfWork = findNextUnitOfWork(), clearErrors(), nextPriorityLevel === NoWork$2 || nextPriorityLevel > minPriorityLevel || nextPriorityLevel > TaskPriority$1));) {}
    }
    function workLoop(minPriorityLevel, deadline) {
        clearErrors(), null === nextUnitOfWork && (nextUnitOfWork = findNextUnitOfWork()), nextPriorityLevel !== NoWork$2 && nextPriorityLevel <= minPriorityLevel && (nextPriorityLevel <= TaskPriority$1 ? workLoopSync(minPriorityLevel) : null !== deadline && workLoopAsync(minPriorityLevel, deadline));
    }
    function performDeferredWork(deadline) {
        performWork(OffscreenPriority, deadline);
    }
    function performWork(minPriorityLevel, deadline) {
        invariant(!isPerformingWork, "performWork was called recursively. This error is likely caused " + "by a bug in React. Please file an issue."), isPerformingWork = !0;
        for (var hasRemainingAsyncWork = !1; null === fatalError;) {
            null === pendingCommit || deadlineHasExpired || commitAllWork(pendingCommit), priorityContextBeforeReconciliation = priorityContext;
            var _error3 = null;
            try {
                workLoop(minPriorityLevel, deadline);
            } catch (e) {
                _error3 = e;
            }
            if (priorityContext = priorityContextBeforeReconciliation, null === _error3) {
                switch (nextPriorityLevel) {
                    case SynchronousPriority$1:
                    case TaskPriority$1:
                        if (nextPriorityLevel <= minPriorityLevel) continue;
                        break;

                    case HighPriority:
                    case LowPriority:
                    case OffscreenPriority:
                        if (null === deadline) hasRemainingAsyncWork = !0;else {
                            if (!deadlineHasExpired && nextPriorityLevel <= minPriorityLevel) continue;
                            hasRemainingAsyncWork = !0;
                        }
                        break;

                    case NoWork$2:
                        break;

                    default:
                        invariant(!1, "Switch statement should be exhuastive.");
                }
                break;
            }
            var failedWork = nextUnitOfWork;
            if (null === failedWork) null === fatalError && (fatalError = _error3);else {
                var maybeBoundary = captureError(failedWork, _error3);
                if (null !== maybeBoundary) {
                    var boundary = maybeBoundary;
                    beginFailedWork(boundary.alternate, boundary, nextPriorityLevel), unwindContexts(failedWork, boundary), nextUnitOfWork = completeUnitOfWork(boundary);
                }
            }
        }
        null !== deadline && (isCallbackScheduled = !1), hasRemainingAsyncWork && !isCallbackScheduled && (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
        var errorToThrow = null !== fatalError ? fatalError : firstUncaughtError;
        if (isPerformingWork = !1, deadlineHasExpired = !1, fatalError = null, firstUncaughtError = null, capturedErrors = null, failedBoundaries = null, null !== errorToThrow) throw errorToThrow;
    }
    function captureError(failedWork, error) {
        ReactCurrentOwner$1.current = null, nextUnitOfWork = null;
        var boundary = null,
            errorBoundaryFound = !1,
            willRetry = !1,
            errorBoundaryName = null;
        if (failedWork.tag === HostRoot$4) boundary = failedWork, isFailedBoundary(failedWork) && (fatalError = error);else for (var node = failedWork.return; null !== node && null === boundary;) {
            if (node.tag === ClassComponent$4) {
                var instance = node.stateNode;
                "function" == typeof instance.unstable_handleError && (errorBoundaryFound = !0, errorBoundaryName = getComponentName_1(node), boundary = node, willRetry = !0);
            } else node.tag === HostRoot$4 && (boundary = node);
            if (isFailedBoundary(node)) {
                if (isUnmounting) return null;
                if (null !== commitPhaseBoundaries && (commitPhaseBoundaries.has(node) || null !== node.alternate && commitPhaseBoundaries.has(node.alternate))) return null;
                boundary = null, willRetry = !1;
            }
            node = node.return;
        }
        if (null !== boundary) {
            null === failedBoundaries && (failedBoundaries = new Set()), failedBoundaries.add(boundary);
            var _componentStack = getStackAddendumByWorkInProgressFiber(failedWork),
                _componentName = getComponentName_1(failedWork);
            return null === capturedErrors && (capturedErrors = new Map()), capturedErrors.set(boundary, {
                componentName: _componentName,
                componentStack: _componentStack,
                error: error,
                errorBoundary: errorBoundaryFound ? boundary.stateNode : null,
                errorBoundaryFound: errorBoundaryFound,
                errorBoundaryName: errorBoundaryName,
                willRetry: willRetry
            }), isCommitting ? (null === commitPhaseBoundaries && (commitPhaseBoundaries = new Set()), commitPhaseBoundaries.add(boundary)) : scheduleErrorRecovery(boundary), boundary;
        }
        return null === firstUncaughtError && (firstUncaughtError = error), null;
    }
    function hasCapturedError(fiber) {
        return null !== capturedErrors && (capturedErrors.has(fiber) || null !== fiber.alternate && capturedErrors.has(fiber.alternate));
    }
    function isFailedBoundary(fiber) {
        return null !== failedBoundaries && (failedBoundaries.has(fiber) || null !== fiber.alternate && failedBoundaries.has(fiber.alternate));
    }
    function commitErrorHandling(effectfulFiber) {
        var capturedError = void 0;
        null !== capturedErrors && (capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber), null == capturedError && null !== effectfulFiber.alternate && (effectfulFiber = effectfulFiber.alternate, capturedError = capturedErrors.get(effectfulFiber), capturedErrors.delete(effectfulFiber))), invariant(null != capturedError, "No error for given unit of work. This error is likely caused by a " + "bug in React. Please file an issue.");
        var error = capturedError.error;
        try {
            logCapturedError$1(capturedError);
        } catch (e) {
            console.error(e);
        }
        switch (effectfulFiber.tag) {
            case ClassComponent$4:
                var instance = effectfulFiber.stateNode,
                    info = {
                    componentStack: capturedError.componentStack
                };
                return void instance.unstable_handleError(error, info);

            case HostRoot$4:
                return void (null === firstUncaughtError && (firstUncaughtError = error));

            default:
                invariant(!1, "Invalid type of work. This error is likely caused by a bug in " + "React. Please file an issue.");
        }
    }
    function unwindContexts(from, to) {
        for (var node = from; null !== node && node !== to && node.alternate !== to;) {
            switch (node.tag) {
                case ClassComponent$4:
                    popContextProvider$1(node);
                    break;

                case HostComponent$4:
                    popHostContext(node);
                    break;

                case HostRoot$4:
                case HostPortal$1:
                    popHostContainer(node);
            }
            node = node.return;
        }
    }
    function scheduleRoot(root, priorityLevel) {
        priorityLevel !== NoWork$2 && (root.isScheduled || (root.isScheduled = !0, lastScheduledRoot ? (lastScheduledRoot.nextScheduledRoot = root, lastScheduledRoot = root) : (nextScheduledRoot = root, lastScheduledRoot = root)));
    }
    function scheduleUpdate(fiber, priorityLevel) {
        priorityLevel <= nextPriorityLevel && (nextUnitOfWork = null);
        for (var node = fiber, shouldContinue = !0; null !== node && shouldContinue;) {
            if (shouldContinue = !1, (node.pendingWorkPriority === NoWork$2 || node.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.pendingWorkPriority = priorityLevel), null !== node.alternate && (node.alternate.pendingWorkPriority === NoWork$2 || node.alternate.pendingWorkPriority > priorityLevel) && (shouldContinue = !0, node.alternate.pendingWorkPriority = priorityLevel), null === node.return) {
                if (node.tag !== HostRoot$4) return;
                if (scheduleRoot(node.stateNode, priorityLevel), !isPerformingWork) switch (priorityLevel) {
                    case SynchronousPriority$1:
                        isUnbatchingUpdates ? performWork(SynchronousPriority$1, null) : performWork(TaskPriority$1, null);
                        break;

                    case TaskPriority$1:
                        invariant(isBatchingUpdates, "Task updates can only be scheduled as a nested update or " + "inside batchedUpdates.");
                        break;

                    default:
                        isCallbackScheduled || (scheduleDeferredCallback(performDeferredWork), isCallbackScheduled = !0);
                }
            }
            node = node.return;
        }
    }
    function getPriorityContext(fiber, forceAsync) {
        var priorityLevel = priorityContext;
        return priorityLevel === NoWork$2 && (priorityLevel = !useSyncScheduling || fiber.internalContextTag & AsyncUpdates || forceAsync ? LowPriority : SynchronousPriority$1), priorityLevel === SynchronousPriority$1 && (isPerformingWork || isBatchingUpdates) ? TaskPriority$1 : priorityLevel;
    }
    function scheduleErrorRecovery(fiber) {
        scheduleUpdate(fiber, TaskPriority$1);
    }
    function performWithPriority(priorityLevel, fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = priorityLevel;
        try {
            fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function batchedUpdates(fn, a) {
        var previousIsBatchingUpdates = isBatchingUpdates;
        isBatchingUpdates = !0;
        try {
            return fn(a);
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isPerformingWork || isBatchingUpdates || performWork(TaskPriority$1, null);
        }
    }
    function unbatchedUpdates(fn) {
        var previousIsUnbatchingUpdates = isUnbatchingUpdates,
            previousIsBatchingUpdates = isBatchingUpdates;
        isUnbatchingUpdates = isBatchingUpdates, isBatchingUpdates = !1;
        try {
            return fn();
        } finally {
            isBatchingUpdates = previousIsBatchingUpdates, isUnbatchingUpdates = previousIsUnbatchingUpdates;
        }
    }
    function syncUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = SynchronousPriority$1;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    function deferredUpdates(fn) {
        var previousPriorityContext = priorityContext;
        priorityContext = LowPriority;
        try {
            return fn();
        } finally {
            priorityContext = previousPriorityContext;
        }
    }
    return {
        scheduleUpdate: scheduleUpdate,
        getPriorityContext: getPriorityContext,
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates
    };
},
    getContextFiber = function getContextFiber(arg) {
    invariant(!1, "Missing injection for fiber getContextForSubtree");
};

function getContextForSubtree(parentComponent) {
    if (!parentComponent) return emptyObject;
    var instance = ReactInstanceMap_1.get(parentComponent);
    return "number" == typeof instance.tag ? getContextFiber(instance) : instance._processChildContext(instance._context);
}

getContextForSubtree._injectFiber = function (fn) {
    getContextFiber = fn;
};

var getContextForSubtree_1 = getContextForSubtree,
    addTopLevelUpdate = ReactFiberUpdateQueue.addTopLevelUpdate,
    findCurrentUnmaskedContext = ReactFiberContext.findCurrentUnmaskedContext,
    isContextProvider = ReactFiberContext.isContextProvider,
    processChildContext = ReactFiberContext.processChildContext,
    createFiberRoot = ReactFiberRoot.createFiberRoot,
    HostComponent$1 = ReactTypeOfWork.HostComponent,
    findCurrentHostFiber = ReactFiberTreeReflection.findCurrentHostFiber;

getContextForSubtree_1._injectFiber(function (fiber) {
    var parentContext = findCurrentUnmaskedContext(fiber);
    return isContextProvider(fiber) ? processChildContext(fiber, parentContext, !1) : parentContext;
});

var ReactFiberReconciler = function ReactFiberReconciler(config) {
    var getPublicInstance = config.getPublicInstance,
        _ReactFiberScheduler = ReactFiberScheduler(config),
        scheduleUpdate = _ReactFiberScheduler.scheduleUpdate,
        getPriorityContext = _ReactFiberScheduler.getPriorityContext,
        performWithPriority = _ReactFiberScheduler.performWithPriority,
        batchedUpdates = _ReactFiberScheduler.batchedUpdates,
        unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,
        syncUpdates = _ReactFiberScheduler.syncUpdates,
        deferredUpdates = _ReactFiberScheduler.deferredUpdates;
    function scheduleTopLevelUpdate(current, element, callback) {
        var forceAsync = ReactFeatureFlags_1.enableAsyncSubtreeAPI && null != element && null != element.type && !0 === element.type.unstable_asyncUpdates,
            priorityLevel = getPriorityContext(current, forceAsync),
            nextState = {
            element: element
        };
        callback = void 0 === callback ? null : callback, addTopLevelUpdate(current, nextState, callback, priorityLevel), scheduleUpdate(current, priorityLevel);
    }
    return {
        createContainer: function createContainer(containerInfo) {
            return createFiberRoot(containerInfo);
        },
        updateContainer: function updateContainer(element, container, parentComponent, callback) {
            var current = container.current,
                context = getContextForSubtree_1(parentComponent);
            null === container.context ? container.context = context : container.pendingContext = context, scheduleTopLevelUpdate(current, element, callback);
        },
        performWithPriority: performWithPriority,
        batchedUpdates: batchedUpdates,
        unbatchedUpdates: unbatchedUpdates,
        syncUpdates: syncUpdates,
        deferredUpdates: deferredUpdates,
        getPublicRootInstance: function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) return null;
            switch (containerFiber.child.tag) {
                case HostComponent$1:
                    return getPublicInstance(containerFiber.child.stateNode);

                default:
                    return containerFiber.child.stateNode;
            }
        },
        findHostInstance: function findHostInstance(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            return null === hostFiber ? null : hostFiber.stateNode;
        }
    };
};

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps$1(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps$1
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    ReactNativeFiberHostComponent = function () {
    function ReactNativeFiberHostComponent(tag, viewConfig) {
        _classCallCheck$1(this, ReactNativeFiberHostComponent), this._nativeTag = tag, this._children = [], this.viewConfig = viewConfig;
    }
    return ReactNativeFiberHostComponent.prototype.blur = function () {
        TextInputState.blurTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.focus = function () {
        TextInputState.focusTextInput(this._nativeTag);
    }, ReactNativeFiberHostComponent.prototype.measure = function (callback) {
        UIManager.measure(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(this._nativeTag, mountSafeCallback(this, callback));
    }, ReactNativeFiberHostComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(this._nativeTag, relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeFiberHostComponent.prototype.setNativeProps = function (nativeProps) {
        var updatePayload = ReactNativeAttributePayload_1.create(nativeProps, this.viewConfig.validAttributes);
        UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);
    }, ReactNativeFiberHostComponent;
}(),
    ReactNativeFiberHostComponent_1 = ReactNativeFiberHostComponent,
    viewConfigs = new Map(),
    ReactNativeViewConfigRegistry = {
    register: function register(viewConfig) {
        var name = viewConfig.uiViewClassName;
        return invariant(!viewConfigs.has(name), "Tried to register two views with the same name %s", name), viewConfigs.set(name, viewConfig), name;
    },
    get: function get(name) {
        var config = viewConfigs.get(name);
        return invariant(config, "View config not found for name %s", name), config;
    }
},
    ReactNativeViewConfigRegistry_1 = ReactNativeViewConfigRegistry,
    precacheFiberNode$1 = ReactNativeComponentTree_1.precacheFiberNode,
    uncacheFiberNode$1 = ReactNativeComponentTree_1.uncacheFiberNode,
    updateFiberProps$1 = ReactNativeComponentTree_1.updateFiberProps;

function recursivelyUncacheFiberNode(node) {
    "number" == typeof node ? uncacheFiberNode$1(node) : (uncacheFiberNode$1(node._nativeTag), node._children.forEach(recursivelyUncacheFiberNode));
}

var NativeRenderer = ReactFiberReconciler({
    appendChild: function appendChild(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag,
            children = parentInstance._children,
            index = children.indexOf(child);
        index >= 0 ? (children.splice(index, 1), children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], [])) : (children.push(child), UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []));
    },
    appendChildToContainer: function appendChildToContainer(parentInstance, child) {
        var childTag = "number" == typeof child ? child : child._nativeTag;
        UIManager.setChildren(parentInstance, [childTag]);
    },
    appendInitialChild: function appendInitialChild(parentInstance, child) {
        parentInstance._children.push(child);
    },
    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {
        UIManager.updateView(textInstance, "RCTRawText", {
            text: newText
        });
    },
    commitMount: function commitMount(instance, type, newProps, internalInstanceHandle) {},
    commitUpdate: function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {
        var viewConfig = instance.viewConfig;
        updateFiberProps$1(instance._nativeTag, newProps);
        var updatePayload = ReactNativeAttributePayload_1.diff(oldProps, newProps, viewConfig.validAttributes);
        UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    },
    createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag(),
            viewConfig = ReactNativeViewConfigRegistry_1.get(type),
            updatePayload = ReactNativeAttributePayload_1.create(props, viewConfig.validAttributes);
        UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);
        var component = new ReactNativeFiberHostComponent_1(tag, viewConfig);
        return precacheFiberNode$1(internalInstanceHandle, tag), updateFiberProps$1(tag, props), component;
    },
    createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        return UIManager.createView(tag, "RCTRawText", rootContainerInstance, {
            text: text
        }), precacheFiberNode$1(internalInstanceHandle, tag), tag;
    },
    finalizeInitialChildren: function finalizeInitialChildren(parentInstance, type, props, rootContainerInstance) {
        if (0 === parentInstance._children.length) return !1;
        var nativeTags = parentInstance._children.map(function (child) {
            return "number" == typeof child ? child : child._nativeTag;
        });
        return UIManager.setChildren(parentInstance._nativeTag, nativeTags), !1;
    },
    getRootHostContext: function getRootHostContext() {
        return emptyObject;
    },
    getChildHostContext: function getChildHostContext() {
        return emptyObject;
    },
    getPublicInstance: function getPublicInstance(instance) {
        return instance;
    },
    insertBefore: function insertBefore(parentInstance, child, beforeChild) {
        var children = parentInstance._children,
            index = children.indexOf(child);
        if (index >= 0) {
            children.splice(index, 1);
            var beforeChildIndex = children.indexOf(beforeChild);
            children.splice(beforeChildIndex, 0, child), UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);
        } else {
            var _beforeChildIndex = children.indexOf(beforeChild);
            children.splice(_beforeChildIndex, 0, child);
            var childTag = "number" == typeof child ? child : child._nativeTag;
            UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);
        }
    },
    insertInContainerBefore: function insertInContainerBefore(parentInstance, child, beforeChild) {
        invariant("number" != typeof parentInstance, "Container does not support insertBefore operation");
    },
    prepareForCommit: function prepareForCommit() {},
    prepareUpdate: function prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, hostContext) {
        return emptyObject;
    },
    removeChild: function removeChild(parentInstance, child) {
        recursivelyUncacheFiberNode(child);
        var children = parentInstance._children,
            index = children.indexOf(child);
        children.splice(index, 1), UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);
    },
    removeChildFromContainer: function removeChildFromContainer(parentInstance, child) {
        recursivelyUncacheFiberNode(child), UIManager.manageChildren(parentInstance, [], [], [], [], [0]);
    },
    resetAfterCommit: function resetAfterCommit() {},
    resetTextContent: function resetTextContent(instance) {},
    shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {
        return !1;
    },
    scheduleDeferredCallback: commonjsGlobal.requestIdleCallback,
    shouldSetTextContent: function shouldSetTextContent(type, props) {
        return !1;
    },
    useSyncScheduling: !0
}),
    ReactNativeFiberRenderer = NativeRenderer,
    getInspectorDataForViewTag = void 0;

getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
};

var ReactNativeFiberInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    ReactVersion = "16.0.0-alpha.13",
    ReactNativeFeatureFlags = require(66                       ), // 66 = ReactNativeFeatureFlags
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return ReactNativeFiberRenderer.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    findNumericNodeHandleFiber = function findNumericNodeHandleFiber(componentOrHandle) {
    var instance = findNodeHandle_1(componentOrHandle);
    return null == instance || "number" == typeof instance ? instance : instance._nativeTag;
},
    DevOnlyStubShim = null;

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$2(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback$2(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(react.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$3 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$3(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$3(this, onFail), mountSafeCallback$3(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath,
    createReactNativeComponentClassFiber = function createReactNativeComponentClassFiber(viewConfig) {
    return ReactNativeViewConfigRegistry_1.register(viewConfig);
},
    createReactNativeComponentClassFiber_1 = createReactNativeComponentClassFiber,
    ReactNativeFeatureFlags$3 = require(66                       ), // 66 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? createReactNativeComponentClassFiber_1 : DevOnlyStubShim,
    ReactNativeFeatureFlags$4 = require(66                       ), // 66 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? findNumericNodeHandleFiber : DevOnlyStubShim;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot,
    injectInternals = ReactFiberDevToolsHook.injectInternals;

ReactNativeInjection.inject(), ReactGenericBatching_1.injection.injectFiberBatchedUpdates(ReactNativeFiberRenderer.batchedUpdates);

var roots = new Map();

ReactFiberErrorLogger.injection.injectDialog(ReactNativeFiberErrorDialog_1.showDialog);

var ReactNativeFiber = {
    NativeComponent: ReactNativeComponent_1,
    findNodeHandle: findNumericNodeHandleFiber,
    render: function render(element, containerTag, callback) {
        var root = roots.get(containerTag);
        return root || (root = ReactNativeFiberRenderer.createContainer(containerTag), roots.set(containerTag, root)), ReactNativeFiberRenderer.updateContainer(element, root, null, callback), ReactNativeFiberRenderer.getPublicRootInstance(root);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        var root = roots.get(containerTag);
        root && ReactNativeFiberRenderer.updateContainer(null, root, null, function () {
            roots.delete(containerTag);
        });
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeFiber.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unstable_createPortal: function unstable_createPortal(children, containerTag) {
        var key = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null;
        return ReactPortal.createPortal(children, containerTag, null, key);
    },
    unstable_batchedUpdates: ReactGenericBatching_1.batchedUpdates,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

"function" == typeof injectInternals && injectInternals({
    findFiberByHostInstance: ReactNativeComponentTree_1.getClosestInstanceFromNode,
    findHostInstanceByFiber: ReactNativeFiberRenderer.findHostInstance,
    getInspectorDataForViewTag: ReactNativeFiberInspector.getInspectorDataForViewTag,
    bundleType: 0,
    version: ReactVersion
});

var ReactNativeFiberEntry = ReactNativeFiber;

module.exports = ReactNativeFiberEntry;
}, 174, null, "ReactNativeFiber-prod");
__d(/* ReactNativeStack-prod */function(global, require, module, exports) {
"use strict";

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

require(73              ); // 73 = InitializeCore

var warning = require(45                ), // 45 = fbjs/lib/warning
    RCTEventEmitter = require(124              ), // 124 = RCTEventEmitter
    emptyFunction = require(46                      ), // 46 = fbjs/lib/emptyFunction
    UIManager = require(125        ), // 125 = UIManager
    React = require(13     ), // 13 = react
    emptyObject = require(126                   ); // 126 = fbjs/lib/emptyObject

require(23                         ); // 23 = prop-types/checkPropTypes

var shallowEqual = require(127                    ), // 127 = fbjs/lib/shallowEqual
    deepDiffer = require(128         ), // 128 = deepDiffer
    flattenStyle = require(119           ), // 119 = flattenStyle
    TextInputState = require(129             ); // 129 = TextInputState

require(35                                 ); // 35 = deepFreezeAndThrowOnMutationInDev

var instanceCache = {},
    instanceProps = {};

function getRenderedHostOrTextFromComponent(component) {
    for (var rendered; rendered = component._renderedComponent;) {
        component = rendered;
    }return component;
}

function precacheNode(inst, tag) {
    var nativeInst = getRenderedHostOrTextFromComponent(inst);
    instanceCache[tag] = nativeInst;
}

function precacheFiberNode(hostInst, tag) {
    instanceCache[tag] = hostInst;
}

function uncacheNode(inst) {
    var tag = inst._rootNodeID;
    tag && delete instanceCache[tag];
}

function uncacheFiberNode(tag) {
    delete instanceCache[tag], delete instanceProps[tag];
}

function getInstanceFromTag(tag) {
    return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
    var tag = "number" != typeof inst.tag ? inst._rootNodeID : inst.stateNode._nativeTag;
    return invariant(tag, "All native instances should have a tag."), tag;
}

function getFiberCurrentPropsFromNode(stateNode) {
    return instanceProps[stateNode._nativeTag] || null;
}

function updateFiberProps(tag, props) {
    instanceProps[tag] = props;
}

var ReactNativeComponentTree = {
    getClosestInstanceFromNode: getInstanceFromTag,
    getInstanceFromNode: getInstanceFromTag,
    getNodeFromInstance: getTagFromInstance,
    precacheFiberNode: precacheFiberNode,
    precacheNode: precacheNode,
    uncacheFiberNode: uncacheFiberNode,
    uncacheNode: uncacheNode,
    getFiberCurrentPropsFromNode: getFiberCurrentPropsFromNode,
    updateFiberProps: updateFiberProps
},
    ReactNativeComponentTree_1 = ReactNativeComponentTree,
    eventPluginOrder = null,
    namesToPlugins = {};

function recomputePluginOrdering() {
    if (eventPluginOrder) for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName],
            pluginIndex = eventPluginOrder.indexOf(pluginName);
        if (invariant(pluginIndex > -1, "EventPluginRegistry: Cannot inject event plugins that do not exist in " + "the plugin ordering, `%s`.", pluginName), !EventPluginRegistry.plugins[pluginIndex]) {
            invariant(pluginModule.extractEvents, "EventPluginRegistry: Event plugins must implement an `extractEvents` " + "method, but `%s` does not.", pluginName), EventPluginRegistry.plugins[pluginIndex] = pluginModule;
            var publishedEvents = pluginModule.eventTypes;
            for (var eventName in publishedEvents) {
                invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), "EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.", eventName, pluginName);
            }
        }
    }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
    invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), "EventPluginHub: More than one plugin attempted to publish the same " + "event name, `%s`.", eventName), EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
    var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
    if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
            if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
                var phasedRegistrationName = phasedRegistrationNames[phaseName];
                publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
            }
        }return !0;
    }
    return !!dispatchConfig.registrationName && (publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName), !0);
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
    invariant(!EventPluginRegistry.registrationNameModules[registrationName], "EventPluginHub: More than one plugin attempted to publish the same " + "registration name, `%s`.", registrationName), EventPluginRegistry.registrationNameModules[registrationName] = pluginModule, EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
}

var EventPluginRegistry = {
    plugins: [],
    eventNameDispatchConfigs: {},
    registrationNameModules: {},
    registrationNameDependencies: {},
    possibleRegistrationNames: null,
    injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
        invariant(!eventPluginOrder, "EventPluginRegistry: Cannot inject event plugin ordering more than " + "once. You are likely trying to load more than one copy of React."), eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder), recomputePluginOrdering();
    },
    injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
        var isOrderingDirty = !1;
        for (var pluginName in injectedNamesToPlugins) {
            if (injectedNamesToPlugins.hasOwnProperty(pluginName)) {
                var pluginModule = injectedNamesToPlugins[pluginName];
                namesToPlugins.hasOwnProperty(pluginName) && namesToPlugins[pluginName] === pluginModule || (invariant(!namesToPlugins[pluginName], "EventPluginRegistry: Cannot inject two different event plugins " + "using the same name, `%s`.", pluginName), namesToPlugins[pluginName] = pluginModule, isOrderingDirty = !0);
            }
        }isOrderingDirty && recomputePluginOrdering();
    }
},
    EventPluginRegistry_1 = EventPluginRegistry,
    caughtError = null,
    _invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
    var funcArgs = Array.prototype.slice.call(arguments, 3);
    try {
        func.apply(context, funcArgs);
    } catch (error) {
        return error;
    }
    return null;
},
    _rethrowCaughtError = function _rethrowCaughtError() {
    if (caughtError) {
        var error = caughtError;
        throw caughtError = null, error;
    }
},
    ReactErrorUtils = {
    injection: {
        injectErrorUtils: function injectErrorUtils(injectedErrorUtils) {
            invariant("function" == typeof injectedErrorUtils.invokeGuardedCallback, "Injected invokeGuardedCallback() must be a function."), _invokeGuardedCallback = injectedErrorUtils.invokeGuardedCallback;
        }
    },
    invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        return _invokeGuardedCallback.apply(this, arguments);
    },
    invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        var error = ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);
        null !== error && null === caughtError && (caughtError = error);
    },
    rethrowCaughtError: function rethrowCaughtError() {
        return _rethrowCaughtError.apply(this, arguments);
    }
},
    ReactErrorUtils_1 = ReactErrorUtils,
    ComponentTree,
    injection = {
    injectComponentTree: function injectComponentTree(Injected) {
        ComponentTree = Injected;
    }
};

function isEndish(topLevelType) {
    return "topMouseUp" === topLevelType || "topTouchEnd" === topLevelType || "topTouchCancel" === topLevelType;
}

function isMoveish(topLevelType) {
    return "topMouseMove" === topLevelType || "topTouchMove" === topLevelType;
}

function isStartish(topLevelType) {
    return "topMouseDown" === topLevelType || "topTouchStart" === topLevelType;
}

function executeDispatch(event, simulated, listener, inst) {
    var type = event.type || "unknown-event";
    event.currentTarget = EventPluginUtils.getNodeFromInstance(inst), ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event), event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
        executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    } else dispatchListeners && executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
    event._dispatchListeners = null, event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
    var dispatchListeners = event._dispatchListeners,
        dispatchInstances = event._dispatchInstances;
    if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length && !event.isPropagationStopped(); i++) {
            if (dispatchListeners[i](event, dispatchInstances[i])) return dispatchInstances[i];
        }
    } else if (dispatchListeners && dispatchListeners(event, dispatchInstances)) return dispatchInstances;
    return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
    var ret = executeDispatchesInOrderStopAtTrueImpl(event);
    return event._dispatchInstances = null, event._dispatchListeners = null, ret;
}

function executeDirectDispatch(event) {
    var dispatchListener = event._dispatchListeners,
        dispatchInstance = event._dispatchInstances;
    invariant(!Array.isArray(dispatchListener), "executeDirectDispatch(...): Invalid `event`."), event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
    var res = dispatchListener ? dispatchListener(event) : null;
    return event.currentTarget = null, event._dispatchListeners = null, event._dispatchInstances = null, res;
}

function hasDispatches(event) {
    return !!event._dispatchListeners;
}

var EventPluginUtils = {
    isEndish: isEndish,
    isMoveish: isMoveish,
    isStartish: isStartish,
    executeDirectDispatch: executeDirectDispatch,
    executeDispatchesInOrder: executeDispatchesInOrder,
    executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
    hasDispatches: hasDispatches,
    getFiberCurrentPropsFromNode: function getFiberCurrentPropsFromNode(node) {
        return ComponentTree.getFiberCurrentPropsFromNode(node);
    },
    getInstanceFromNode: function getInstanceFromNode(node) {
        return ComponentTree.getInstanceFromNode(node);
    },
    getNodeFromInstance: function getNodeFromInstance(node) {
        return ComponentTree.getNodeFromInstance(node);
    },
    injection: injection
},
    EventPluginUtils_1 = EventPluginUtils;

function accumulateInto(current, next) {
    return invariant(null != next, "accumulateInto(...): Accumulated items must not be null or undefined."), null == current ? next : Array.isArray(current) ? Array.isArray(next) ? (current.push.apply(current, next), current) : (current.push(next), current) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulateInto_1 = accumulateInto;

function forEachAccumulated(arr, cb, scope) {
    Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);
}

var forEachAccumulated_1 = forEachAccumulated,
    eventQueue = null,
    executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
    event && (EventPluginUtils_1.executeDispatchesInOrder(event, simulated), event.isPersistent() || event.constructor.release(event));
},
    executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
    return executeDispatchesAndRelease(e, !0);
},
    executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
    return executeDispatchesAndRelease(e, !1);
};

function isInteractive(tag) {
    return "button" === tag || "input" === tag || "select" === tag || "textarea" === tag;
}

function shouldPreventMouseEvent(name, type, props) {
    switch (name) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
            return !(!props.disabled || !isInteractive(type));

        default:
            return !1;
    }
}

var EventPluginHub = {
    injection: {
        injectEventPluginOrder: EventPluginRegistry_1.injectEventPluginOrder,
        injectEventPluginsByName: EventPluginRegistry_1.injectEventPluginsByName
    },
    getListener: function getListener(inst, registrationName) {
        var listener;
        if ("number" == typeof inst.tag) {
            var stateNode = inst.stateNode;
            if (!stateNode) return null;
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(stateNode);
            if (!props) return null;
            if (listener = props[registrationName], shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        } else {
            var currentElement = inst._currentElement;
            if ("string" == typeof currentElement || "number" == typeof currentElement) return null;
            if (!inst._rootNodeID) return null;
            var _props = currentElement.props;
            if (listener = _props[registrationName], shouldPreventMouseEvent(registrationName, currentElement.type, _props)) return null;
        }
        return invariant(!listener || "function" == typeof listener, "Expected %s listener to be a function, instead got type %s", registrationName, typeof listener), listener;
    },
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        for (var events, plugins = EventPluginRegistry_1.plugins, i = 0; i < plugins.length; i++) {
            var possiblePlugin = plugins[i];
            if (possiblePlugin) {
                var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
                extractedEvents && (events = accumulateInto_1(events, extractedEvents));
            }
        }
        return events;
    },
    enqueueEvents: function enqueueEvents(events) {
        events && (eventQueue = accumulateInto_1(eventQueue, events));
    },
    processEventQueue: function processEventQueue(simulated) {
        var processingEventQueue = eventQueue;
        eventQueue = null, simulated ? forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseSimulated) : forEachAccumulated_1(processingEventQueue, executeDispatchesAndReleaseTopLevel), invariant(!eventQueue, "processEventQueue(): Additional events were enqueued while processing " + "an event queue. Support for this has not yet been implemented."), ReactErrorUtils_1.rethrowCaughtError();
    }
},
    EventPluginHub_1 = EventPluginHub,
    ReactTypeOfWork = {
    IndeterminateComponent: 0,
    FunctionalComponent: 1,
    ClassComponent: 2,
    HostRoot: 3,
    HostPortal: 4,
    HostComponent: 5,
    HostText: 6,
    CoroutineComponent: 7,
    CoroutineHandlerPhase: 8,
    YieldComponent: 9,
    Fragment: 10
},
    HostComponent = ReactTypeOfWork.HostComponent;

function getParent(inst) {
    if (void 0 !== inst._hostParent) return inst._hostParent;
    if ("number" == typeof inst.tag) {
        do {
            inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) return inst;
    }
    return null;
}

function getLowestCommonAncestor(instA, instB) {
    for (var depthA = 0, tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
    }for (var depthB = 0, tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
    }for (; depthA - depthB > 0;) {
        instA = getParent(instA), depthA--;
    }for (; depthB - depthA > 0;) {
        instB = getParent(instB), depthB--;
    }for (var depth = depthA; depth--;) {
        if (instA === instB || instA === instB.alternate) return instA;
        instA = getParent(instA), instB = getParent(instB);
    }
    return null;
}

function isAncestor(instA, instB) {
    for (; instB;) {
        if (instA === instB || instA === instB.alternate) return !0;
        instB = getParent(instB);
    }
    return !1;
}

function getParentInstance(inst) {
    return getParent(inst);
}

function traverseTwoPhase(inst, fn, arg) {
    for (var path = []; inst;) {
        path.push(inst), inst = getParent(inst);
    }var i;
    for (i = path.length; i-- > 0;) {
        fn(path[i], "captured", arg);
    }for (i = 0; i < path.length; i++) {
        fn(path[i], "bubbled", arg);
    }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    for (var common = from && to ? getLowestCommonAncestor(from, to) : null, pathFrom = []; from && from !== common;) {
        pathFrom.push(from), from = getParent(from);
    }for (var pathTo = []; to && to !== common;) {
        pathTo.push(to), to = getParent(to);
    }var i;
    for (i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], "bubbled", argFrom);
    }for (i = pathTo.length; i-- > 0;) {
        fn(pathTo[i], "captured", argTo);
    }
}

var ReactTreeTraversal = {
    isAncestor: isAncestor,
    getLowestCommonAncestor: getLowestCommonAncestor,
    getParentInstance: getParentInstance,
    traverseTwoPhase: traverseTwoPhase,
    traverseEnterLeave: traverseEnterLeave
},
    getListener = EventPluginHub_1.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
    var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
    return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
    var listener = listenerAtPhase(inst, event, phase);
    listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
}

function accumulateTwoPhaseDispatchesSingle(event) {
    event && event.dispatchConfig.phasedRegistrationNames && ReactTreeTraversal.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
    if (event && event.dispatchConfig.phasedRegistrationNames) {
        var targetInst = event._targetInst,
            parentInst = targetInst ? ReactTreeTraversal.getParentInstance(targetInst) : null;
        ReactTreeTraversal.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
    }
}

function accumulateDispatches(inst, ignoredDirection, event) {
    if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName,
            listener = getListener(inst, registrationName);
        listener && (event._dispatchListeners = accumulateInto_1(event._dispatchListeners, listener), event._dispatchInstances = accumulateInto_1(event._dispatchInstances, inst));
    }
}

function accumulateDirectDispatchesSingle(event) {
    event && event.dispatchConfig.registrationName && accumulateDispatches(event._targetInst, null, event);
}

function accumulateTwoPhaseDispatches(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
    forEachAccumulated_1(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
    ReactTreeTraversal.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
    forEachAccumulated_1(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
    accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
    accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
    accumulateDirectDispatches: accumulateDirectDispatches,
    accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
},
    EventPropagators_1 = EventPropagators,
    oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, copyFieldsFrom), instance;
    }
    return new Klass(copyFieldsFrom);
},
    twoArgumentPooler = function twoArgumentPooler(a1, a2) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2), instance;
    }
    return new Klass(a1, a2);
},
    threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3), instance;
    }
    return new Klass(a1, a2, a3);
},
    fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
    var Klass = this;
    if (Klass.instancePool.length) {
        var instance = Klass.instancePool.pop();
        return Klass.call(instance, a1, a2, a3, a4), instance;
    }
    return new Klass(a1, a2, a3, a4);
},
    standardReleaser = function standardReleaser(instance) {
    var Klass = this;
    invariant(instance instanceof Klass, "Trying to release an instance into a pool of a different type."), instance.destructor(), Klass.instancePool.length < Klass.poolSize && Klass.instancePool.push(instance);
},
    DEFAULT_POOL_SIZE = 10,
    DEFAULT_POOLER = oneArgumentPooler,
    addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
    var NewKlass = CopyConstructor;
    return NewKlass.instancePool = [], NewKlass.getPooled = pooler || DEFAULT_POOLER, NewKlass.poolSize || (NewKlass.poolSize = DEFAULT_POOL_SIZE), NewKlass.release = standardReleaser, NewKlass;
},
    PooledClass = {
    addPoolingTo: addPoolingTo,
    oneArgumentPooler: oneArgumentPooler,
    twoArgumentPooler: twoArgumentPooler,
    threeArgumentPooler: threeArgumentPooler,
    fourArgumentPooler: fourArgumentPooler
},
    PooledClass_1 = PooledClass,
    shouldBeReleasedProperties = ["dispatchConfig", "_targetInst", "nativeEvent", "isDefaultPrevented", "isPropagationStopped", "_dispatchListeners", "_dispatchInstances"],
    EventInterface = {
    type: null,
    target: null,
    currentTarget: emptyFunction.thatReturnsNull,
    eventPhase: null,
    bubbles: null,
    cancelable: null,
    timeStamp: function timeStamp(event) {
        return event.timeStamp || Date.now();
    },
    defaultPrevented: null,
    isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
    this.dispatchConfig = dispatchConfig, this._targetInst = targetInst, this.nativeEvent = nativeEvent;
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
        if (Interface.hasOwnProperty(propName)) {
            var normalize = Interface[propName];
            normalize ? this[propName] = normalize(nativeEvent) : "target" === propName ? this.target = nativeEventTarget : this[propName] = nativeEvent[propName];
        }
    }var defaultPrevented = null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : !1 === nativeEvent.returnValue;
    return this.isDefaultPrevented = defaultPrevented ? emptyFunction.thatReturnsTrue : emptyFunction.thatReturnsFalse, this.isPropagationStopped = emptyFunction.thatReturnsFalse, this;
}

babelHelpers.extends(SyntheticEvent.prototype, {
    preventDefault: function preventDefault() {
        this.defaultPrevented = !0;
        var event = this.nativeEvent;
        event && (event.preventDefault ? event.preventDefault() : "unknown" != typeof event.returnValue && (event.returnValue = !1), this.isDefaultPrevented = emptyFunction.thatReturnsTrue);
    },
    stopPropagation: function stopPropagation() {
        var event = this.nativeEvent;
        event && (event.stopPropagation ? event.stopPropagation() : "unknown" != typeof event.cancelBubble && (event.cancelBubble = !0), this.isPropagationStopped = emptyFunction.thatReturnsTrue);
    },
    persist: function persist() {
        this.isPersistent = emptyFunction.thatReturnsTrue;
    },
    isPersistent: emptyFunction.thatReturnsFalse,
    destructor: function destructor() {
        var Interface = this.constructor.Interface;
        for (var propName in Interface) {
            this[propName] = null;
        }for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
            this[shouldBeReleasedProperties[i]] = null;
        }
    }
}), SyntheticEvent.Interface = EventInterface, SyntheticEvent.augmentClass = function (Class, Interface) {
    var Super = this,
        E = function E() {};
    E.prototype = Super.prototype;
    var prototype = new E();
    babelHelpers.extends(prototype, Class.prototype), Class.prototype = prototype, Class.prototype.constructor = Class, Class.Interface = babelHelpers.extends({}, Super.Interface, Interface), Class.augmentClass = Super.augmentClass, PooledClass_1.addPoolingTo(Class, PooledClass_1.fourArgumentPooler);
}, PooledClass_1.addPoolingTo(SyntheticEvent, PooledClass_1.fourArgumentPooler);

var SyntheticEvent_1 = SyntheticEvent,
    _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    customBubblingEventTypes = UIManager.customBubblingEventTypes,
    customDirectEventTypes = UIManager.customDirectEventTypes,
    allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
    allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}for (var directTypeName in customDirectEventTypes) {
    warning(!customBubblingEventTypes[directTypeName], "Event cannot be both direct and bubbling: %s", directTypeName), allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}var ReactNativeBridgeEventPlugin = {
    eventTypes: _extends({}, customBubblingEventTypes, customDirectEventTypes),
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType],
            directDispatchConfig = customDirectEventTypes[topLevelType],
            event = SyntheticEvent_1.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        if (bubbleDispatchConfig) EventPropagators_1.accumulateTwoPhaseDispatches(event);else {
            if (!directDispatchConfig) return null;
            EventPropagators_1.accumulateDirectDispatches(event);
        }
        return event;
    }
},
    ReactNativeBridgeEventPlugin_1 = ReactNativeBridgeEventPlugin;

function runEventQueueInBatch(events) {
    EventPluginHub_1.enqueueEvents(events), EventPluginHub_1.processEventQueue(!1);
}

var ReactEventEmitterMixin = {
    handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        runEventQueueInBatch(EventPluginHub_1.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget));
    }
},
    ReactEventEmitterMixin_1 = ReactEventEmitterMixin,
    INITIAL_TAG_COUNT = 1,
    ReactNativeTagHandles = {
    tagsStartAt: INITIAL_TAG_COUNT,
    tagCount: INITIAL_TAG_COUNT,
    allocateTag: function allocateTag() {
        for (; this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount);) {
            ReactNativeTagHandles.tagCount++;
        }var tag = ReactNativeTagHandles.tagCount;
        return ReactNativeTagHandles.tagCount++, tag;
    },
    assertRootTag: function assertRootTag(tag) {
        invariant(this.reactTagIsNativeTopRootID(tag), "Expect a native root tag, instead got %s", tag);
    },
    reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
        return reactTag % 10 == 1;
    }
},
    ReactNativeTagHandles_1 = ReactNativeTagHandles,
    fiberHostComponent = null,
    ReactControlledComponentInjection = {
    injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {
        fiberHostComponent = hostComponentImpl;
    }
},
    restoreTarget = null,
    restoreQueue = null;

function restoreStateOfTarget(target) {
    var internalInstance = EventPluginUtils_1.getInstanceFromNode(target);
    if (internalInstance) {
        if ("number" == typeof internalInstance.tag) {
            invariant(fiberHostComponent && "function" == typeof fiberHostComponent.restoreControlledState, "Fiber needs to be injected to handle a fiber target for controlled " + "events.");
            var props = EventPluginUtils_1.getFiberCurrentPropsFromNode(internalInstance.stateNode);
            return void fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);
        }
        invariant("function" == typeof internalInstance.restoreControlledState, "The internal instance must be a React host component."), internalInstance.restoreControlledState();
    }
}

var ReactControlledComponent = {
    injection: ReactControlledComponentInjection,
    enqueueStateRestore: function enqueueStateRestore(target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
    },
    restoreStateIfNeeded: function restoreStateIfNeeded() {
        if (restoreTarget) {
            var target = restoreTarget,
                queuedTargets = restoreQueue;
            if (restoreTarget = null, restoreQueue = null, restoreStateOfTarget(target), queuedTargets) for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
            }
        }
    }
},
    ReactControlledComponent_1 = ReactControlledComponent,
    stackBatchedUpdates = function stackBatchedUpdates(fn, a, b, c, d, e) {
    return fn(a, b, c, d, e);
},
    fiberBatchedUpdates = function fiberBatchedUpdates(fn, bookkeeping) {
    return fn(bookkeeping);
};

function performFiberBatchedUpdates(fn, bookkeeping) {
    return fiberBatchedUpdates(fn, bookkeeping);
}

function batchedUpdates(fn, bookkeeping) {
    return stackBatchedUpdates(performFiberBatchedUpdates, fn, bookkeeping);
}

var isNestingBatched = !1;

function batchedUpdatesWithControlledComponents(fn, bookkeeping) {
    if (isNestingBatched) return batchedUpdates(fn, bookkeeping);
    isNestingBatched = !0;
    try {
        return batchedUpdates(fn, bookkeeping);
    } finally {
        isNestingBatched = !1, ReactControlledComponent_1.restoreStateIfNeeded();
    }
}

var ReactGenericBatchingInjection = {
    injectStackBatchedUpdates: function injectStackBatchedUpdates(_batchedUpdates) {
        stackBatchedUpdates = _batchedUpdates;
    },
    injectFiberBatchedUpdates: function injectFiberBatchedUpdates(_batchedUpdates) {
        fiberBatchedUpdates = _batchedUpdates;
    }
},
    ReactGenericBatching = {
    batchedUpdates: batchedUpdatesWithControlledComponents,
    injection: ReactGenericBatchingInjection
},
    ReactGenericBatching_1 = ReactGenericBatching,
    _extends$1 = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
            Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);
        }
    }
    return target;
},
    EMPTY_NATIVE_EVENT = {},
    touchSubsequence = function touchSubsequence(touches, indices) {
    for (var ret = [], i = 0; i < indices.length; i++) {
        ret.push(touches[indices[i]]);
    }return ret;
},
    removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
    for (var rippedOut = [], temp = touches, i = 0; i < indices.length; i++) {
        var index = indices[i];
        rippedOut.push(touches[index]), temp[index] = null;
    }
    for (var fillAt = 0, j = 0; j < temp.length; j++) {
        var cur = temp[j];
        null !== cur && (temp[fillAt++] = cur);
    }
    return temp.length = fillAt, rippedOut;
},
    ReactNativeEventEmitter = _extends$1({}, ReactEventEmitterMixin_1, {
    registrationNames: EventPluginRegistry_1.registrationNameModules,
    getListener: EventPluginHub_1.getListener,
    _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
        var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT,
            inst = ReactNativeComponentTree_1.getInstanceFromNode(rootNodeID);
        ReactGenericBatching_1.batchedUpdates(function () {
            ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
        });
    },
    receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
        var rootNodeID = tag;
        ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
    },
    receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
        for (var changedTouches = "topTouchEnd" === eventTopLevelType || "topTouchCancel" === eventTopLevelType ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices), jj = 0; jj < changedTouches.length; jj++) {
            var touch = changedTouches[jj];
            touch.changedTouches = changedTouches, touch.touches = touches;
            var nativeEvent = touch,
                rootNodeID = null,
                target = nativeEvent.target;
            null !== target && void 0 !== target && (target < ReactNativeTagHandles_1.tagsStartAt || (rootNodeID = target)), ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
        }
    }
}),
    ReactNativeEventEmitter_1 = ReactNativeEventEmitter,
    ReactNativeEventPluginOrder = ["ResponderEventPlugin", "ReactNativeBridgeEventPlugin"],
    ReactNativeEventPluginOrder_1 = ReactNativeEventPluginOrder,
    ReactNativeGlobalResponderHandler = {
    onChange: function onChange(from, to, blockNativeResponder) {
        if (null !== to) {
            var tag = "number" != typeof to.tag ? to._rootNodeID : to.stateNode._nativeTag;
            UIManager.setJSResponder(tag, blockNativeResponder);
        } else UIManager.clearJSResponder();
    }
},
    ReactNativeGlobalResponderHandler_1 = ReactNativeGlobalResponderHandler,
    ResponderEventInterface = {
    touchHistory: function touchHistory(nativeEvent) {
        return null;
    }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
    return SyntheticEvent_1.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent_1.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

var ResponderSyntheticEvent_1 = ResponderSyntheticEvent,
    isEndish$2 = EventPluginUtils_1.isEndish,
    isMoveish$2 = EventPluginUtils_1.isMoveish,
    isStartish$2 = EventPluginUtils_1.isStartish,
    MAX_TOUCH_BANK = 20,
    touchBank = [],
    touchHistory = {
    touchBank: touchBank,
    numberActiveTouches: 0,
    indexOfSingleActiveTouch: -1,
    mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
    return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
    return {
        touchActive: !0,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
    };
}

function resetTouchRecord(touchRecord, touch) {
    touchRecord.touchActive = !0, touchRecord.startPageX = touch.pageX, touchRecord.startPageY = touch.pageY, touchRecord.startTimeStamp = timestampForTouch(touch), touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchRecord.previousPageX = touch.pageX, touchRecord.previousPageY = touch.pageY, touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
    var identifier = _ref.identifier;
    return invariant(null != identifier, "Touch object is missing identifier."), warning(identifier <= MAX_TOUCH_BANK, "Touch identifier %s is greater than maximum supported %s which causes " + "performance issues backfilling array locations for all of the indices.", identifier, MAX_TOUCH_BANK), identifier;
}

function recordTouchStart(touch) {
    var identifier = getTouchIdentifier(touch),
        touchRecord = touchBank[identifier];
    touchRecord ? resetTouchRecord(touchRecord, touch) : touchBank[identifier] = createTouchRecord(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !0, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch move without a touch start.\n" + "Touch Move: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function recordTouchEnd(touch) {
    var touchRecord = touchBank[getTouchIdentifier(touch)];
    touchRecord ? (touchRecord.touchActive = !1, touchRecord.previousPageX = touchRecord.currentPageX, touchRecord.previousPageY = touchRecord.currentPageY, touchRecord.previousTimeStamp = touchRecord.currentTimeStamp, touchRecord.currentPageX = touch.pageX, touchRecord.currentPageY = touch.pageY, touchRecord.currentTimeStamp = timestampForTouch(touch), touchHistory.mostRecentTimeStamp = timestampForTouch(touch)) : console.error("Cannot record touch end without a touch start.\n" + "Touch End: %s\n", "Touch Bank: %s", printTouch(touch), printTouchBank());
}

function printTouch(touch) {
    return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
    });
}

function printTouchBank() {
    var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
    return touchBank.length > MAX_TOUCH_BANK && (printed += " (original size: " + touchBank.length + ")"), printed;
}

var ResponderTouchHistoryStore = {
    recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
        if (isMoveish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchMove);else if (isStartish$2(topLevelType)) nativeEvent.changedTouches.forEach(recordTouchStart), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches && (touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier);else if (isEndish$2(topLevelType) && (nativeEvent.changedTouches.forEach(recordTouchEnd), touchHistory.numberActiveTouches = nativeEvent.touches.length, 1 === touchHistory.numberActiveTouches)) for (var i = 0; i < touchBank.length; i++) {
            var touchTrackToCheck = touchBank[i];
            if (null != touchTrackToCheck && touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
            }
        }
    },
    touchHistory: touchHistory
},
    ResponderTouchHistoryStore_1 = ResponderTouchHistoryStore;

function accumulate(current, next) {
    return invariant(null != next, "accumulate(...): Accumulated items must be not be null or undefined."), null == current ? next : Array.isArray(current) ? current.concat(next) : Array.isArray(next) ? [current].concat(next) : [current, next];
}

var accumulate_1 = accumulate,
    isStartish$1 = EventPluginUtils_1.isStartish,
    isMoveish$1 = EventPluginUtils_1.isMoveish,
    isEndish$1 = EventPluginUtils_1.isEndish,
    executeDirectDispatch$1 = EventPluginUtils_1.executeDirectDispatch,
    hasDispatches$1 = EventPluginUtils_1.hasDispatches,
    executeDispatchesInOrderStopAtTrue$1 = EventPluginUtils_1.executeDispatchesInOrderStopAtTrue,
    responderInst = null,
    trackedTouchCount = 0,
    previousActiveTouches = 0,
    changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
    var oldResponderInst = responderInst;
    responderInst = nextResponderInst, null !== ResponderEventPlugin.GlobalResponderHandler && ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
},
    eventTypes = {
    startShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onStartShouldSetResponder",
            captured: "onStartShouldSetResponderCapture"
        }
    },
    scrollShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onScrollShouldSetResponder",
            captured: "onScrollShouldSetResponderCapture"
        }
    },
    selectionChangeShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onSelectionChangeShouldSetResponder",
            captured: "onSelectionChangeShouldSetResponderCapture"
        }
    },
    moveShouldSetResponder: {
        phasedRegistrationNames: {
            bubbled: "onMoveShouldSetResponder",
            captured: "onMoveShouldSetResponderCapture"
        }
    },
    responderStart: {
        registrationName: "onResponderStart"
    },
    responderMove: {
        registrationName: "onResponderMove"
    },
    responderEnd: {
        registrationName: "onResponderEnd"
    },
    responderRelease: {
        registrationName: "onResponderRelease"
    },
    responderTerminationRequest: {
        registrationName: "onResponderTerminationRequest"
    },
    responderGrant: {
        registrationName: "onResponderGrant"
    },
    responderReject: {
        registrationName: "onResponderReject"
    },
    responderTerminate: {
        registrationName: "onResponderTerminate"
    }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var shouldSetEventType = isStartish$1(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish$1(topLevelType) ? eventTypes.moveShouldSetResponder : "topSelectionChange" === topLevelType ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder,
        bubbleShouldSetFrom = responderInst ? ReactTreeTraversal.getLowestCommonAncestor(responderInst, targetInst) : targetInst,
        skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst,
        shouldSetEvent = ResponderSyntheticEvent_1.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
    shouldSetEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, skipOverBubbleShouldSetFrom ? EventPropagators_1.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent) : EventPropagators_1.accumulateTwoPhaseDispatches(shouldSetEvent);
    var wantsResponderInst = executeDispatchesInOrderStopAtTrue$1(shouldSetEvent);
    if (shouldSetEvent.isPersistent() || shouldSetEvent.constructor.release(shouldSetEvent), !wantsResponderInst || wantsResponderInst === responderInst) return null;
    var extracted,
        grantEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
    grantEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(grantEvent);
    var blockHostResponder = !0 === executeDirectDispatch$1(grantEvent);
    if (responderInst) {
        var terminationRequestEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminationRequestEvent);
        var shouldSwitch = !hasDispatches$1(terminationRequestEvent) || executeDirectDispatch$1(terminationRequestEvent);
        if (terminationRequestEvent.isPersistent() || terminationRequestEvent.constructor.release(terminationRequestEvent), shouldSwitch) {
            var terminateEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
            terminateEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(terminateEvent), extracted = accumulate_1(extracted, [grantEvent, terminateEvent]), changeResponder(wantsResponderInst, blockHostResponder);
        } else {
            var rejectEvent = ResponderSyntheticEvent_1.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
            rejectEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(rejectEvent), extracted = accumulate_1(extracted, rejectEvent);
        }
    } else extracted = accumulate_1(extracted, grantEvent), changeResponder(wantsResponderInst, blockHostResponder);
    return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
    return topLevelInst && ("topScroll" === topLevelType && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && "topSelectionChange" === topLevelType || isStartish$1(topLevelType) || isMoveish$1(topLevelType));
}

function noResponderTouches(nativeEvent) {
    var touches = nativeEvent.touches;
    if (!touches || 0 === touches.length) return !0;
    for (var i = 0; i < touches.length; i++) {
        var activeTouch = touches[i],
            target = activeTouch.target;
        if (null !== target && void 0 !== target && 0 !== target) {
            var targetInst = EventPluginUtils_1.getInstanceFromNode(target);
            if (ReactTreeTraversal.isAncestor(responderInst, targetInst)) return !1;
        }
    }
    return !0;
}

var ResponderEventPlugin = {
    _getResponder: function _getResponder() {
        return responderInst;
    },
    eventTypes: eventTypes,
    extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        if (isStartish$1(topLevelType)) trackedTouchCount += 1;else if (isEndish$1(topLevelType)) {
            if (!(trackedTouchCount >= 0)) return console.error("Ended a touch event which was not counted in `trackedTouchCount`."), null;
            trackedTouchCount -= 1;
        }
        ResponderTouchHistoryStore_1.recordTouchTrack(topLevelType, nativeEvent);
        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null,
            isResponderTouchStart = responderInst && isStartish$1(topLevelType),
            isResponderTouchMove = responderInst && isMoveish$1(topLevelType),
            isResponderTouchEnd = responderInst && isEndish$1(topLevelType),
            incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;
        if (incrementalTouch) {
            var gesture = ResponderSyntheticEvent_1.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
            gesture.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(gesture), extracted = accumulate_1(extracted, gesture);
        }
        var isResponderTerminate = responderInst && "topTouchCancel" === topLevelType,
            isResponderRelease = responderInst && !isResponderTerminate && isEndish$1(topLevelType) && noResponderTouches(nativeEvent),
            finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
        if (finalTouch) {
            var finalEvent = ResponderSyntheticEvent_1.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
            finalEvent.touchHistory = ResponderTouchHistoryStore_1.touchHistory, EventPropagators_1.accumulateDirectDispatches(finalEvent), extracted = accumulate_1(extracted, finalEvent), changeResponder(null);
        }
        var numberActiveTouches = ResponderTouchHistoryStore_1.touchHistory.numberActiveTouches;
        return ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches && ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches), previousActiveTouches = numberActiveTouches, extracted;
    },
    GlobalResponderHandler: null,
    GlobalInteractionHandler: null,
    injection: {
        injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
            ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
        },
        injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
            ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
        }
    }
},
    ResponderEventPlugin_1 = ResponderEventPlugin;

function inject() {
    RCTEventEmitter.register(ReactNativeEventEmitter_1), EventPluginHub_1.injection.injectEventPluginOrder(ReactNativeEventPluginOrder_1), EventPluginUtils_1.injection.injectComponentTree(ReactNativeComponentTree_1), ResponderEventPlugin_1.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler_1), EventPluginHub_1.injection.injectEventPluginsByName({
        ResponderEventPlugin: ResponderEventPlugin_1,
        ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin_1
    });
}

var ReactNativeInjection = {
    inject: inject
};

function ReactNativeContainerInfo(tag) {
    return {
        _tag: tag
    };
}

var ReactNativeContainerInfo_1 = ReactNativeContainerInfo,
    ClassComponent = ReactTypeOfWork.ClassComponent;

function isValidOwner(object) {
    return !(!object || "function" != typeof object.attachRef || "function" != typeof object.detachRef);
}

var ReactOwner = {
    addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = component.getPublicInstance();
        } else invariant(isValidOwner(owner), "addComponentAsRefTo(...): Only a ReactOwner can have refs. You might " + "be adding a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner)."), owner.attachRef(ref, component);
    },
    removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
        if (owner && owner.tag === ClassComponent) {
            var inst = owner.stateNode;
            inst && inst.refs[ref] === component.getPublicInstance() && delete inst.refs[ref];
        } else {
            invariant(isValidOwner(owner), "removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might " + "be removing a ref to a component that was not created inside a component's " + "`render` method, or you have multiple copies of React loaded " + "(details: https://fb.me/react-refs-must-have-owner).");
            var ownerPublicInstance = owner.getPublicInstance();
            ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance() && owner.detachRef(ref);
        }
    }
},
    ReactOwner_1 = ReactOwner,
    ReactRef = {};

function attachRef(ref, component, owner) {
    "function" == typeof ref ? ref(component.getPublicInstance()) : ReactOwner_1.addComponentAsRefTo(component, ref, owner);
}

function detachRef(ref, component, owner) {
    "function" == typeof ref ? ref(null) : ReactOwner_1.removeComponentAsRefFrom(component, ref, owner);
}

ReactRef.attachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && attachRef(ref, instance, element._owner);
    }
}, ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
    var prevRef = null,
        prevOwner = null;
    null !== prevElement && "object" == typeof prevElement && (prevRef = prevElement.ref, prevOwner = prevElement._owner);
    var nextRef = null,
        nextOwner = null;
    return null !== nextElement && "object" == typeof nextElement && (nextRef = nextElement.ref, nextOwner = nextElement._owner), prevRef !== nextRef || "string" == typeof nextRef && nextOwner !== prevOwner;
}, ReactRef.detachRefs = function (instance, element) {
    if (null !== element && "object" == typeof element) {
        var ref = element.ref;
        null != ref && detachRef(ref, instance, element._owner);
    }
};

var ReactRef_1 = ReactRef;

function attachRefs() {
    ReactRef_1.attachRefs(this, this._currentElement);
}

var ReactReconciler = {
    mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
        return internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance), markup;
    },
    getHostNode: function getHostNode(internalInstance) {
        return internalInstance.getHostNode();
    },
    unmountComponent: function unmountComponent(internalInstance, safely, skipLifecycle) {
        ReactRef_1.detachRefs(internalInstance, internalInstance._currentElement), internalInstance.unmountComponent(safely, skipLifecycle);
    },
    receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
        var prevElement = internalInstance._currentElement;
        if (nextElement !== prevElement || context !== internalInstance._context) {
            var refsChanged = ReactRef_1.shouldUpdateRefs(prevElement, nextElement);
            refsChanged && ReactRef_1.detachRefs(internalInstance, prevElement), internalInstance.receiveComponent(nextElement, transaction, context), refsChanged && internalInstance._currentElement && null != internalInstance._currentElement.ref && transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
        }
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
        if (internalInstance._updateBatchNumber !== updateBatchNumber) return void warning(null == internalInstance._updateBatchNumber || internalInstance._updateBatchNumber === updateBatchNumber + 1, "performUpdateIfNecessary: Unexpected batch number (current %s, " + "pending %s)", updateBatchNumber, internalInstance._updateBatchNumber);
        internalInstance.performUpdateIfNecessary(transaction);
    }
},
    ReactReconciler_1 = ReactReconciler,
    ReactInstanceMap = {
    remove: function remove(key) {
        key._reactInternalInstance = void 0;
    },
    get: function get(key) {
        return key._reactInternalInstance;
    },
    has: function has(key) {
        return void 0 !== key._reactInternalInstance;
    },
    set: function set(key, value) {
        key._reactInternalInstance = value;
    }
},
    ReactInstanceMap_1 = ReactInstanceMap,
    OBSERVED_ERROR = {},
    TransactionImpl = {
    reinitializeTransaction: function reinitializeTransaction() {
        this.transactionWrappers = this.getTransactionWrappers(), this.wrapperInitData ? this.wrapperInitData.length = 0 : this.wrapperInitData = [], this._isInTransaction = !1;
    },
    _isInTransaction: !1,
    getTransactionWrappers: null,
    isInTransaction: function isInTransaction() {
        return !!this._isInTransaction;
    },
    perform: function perform(method, scope, a, b, c, d, e, f) {
        invariant(!this.isInTransaction(), "Transaction.perform(...): Cannot initialize a transaction when there " + "is already an outstanding transaction.");
        var errorThrown, ret;
        try {
            this._isInTransaction = !0, errorThrown = !0, this.initializeAll(0), ret = method.call(scope, a, b, c, d, e, f), errorThrown = !1;
        } finally {
            try {
                if (errorThrown) try {
                    this.closeAll(0);
                } catch (err) {} else this.closeAll(0);
            } finally {
                this._isInTransaction = !1;
            }
        }
        return ret;
    },
    initializeAll: function initializeAll(startIndex) {
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var wrapper = transactionWrappers[i];
            try {
                this.wrapperInitData[i] = OBSERVED_ERROR, this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
            } finally {
                if (this.wrapperInitData[i] === OBSERVED_ERROR) try {
                    this.initializeAll(i + 1);
                } catch (err) {}
            }
        }
    },
    closeAll: function closeAll(startIndex) {
        invariant(this.isInTransaction(), "Transaction.closeAll(): Cannot close transaction when none are open.");
        for (var transactionWrappers = this.transactionWrappers, i = startIndex; i < transactionWrappers.length; i++) {
            var errorThrown,
                wrapper = transactionWrappers[i],
                initData = this.wrapperInitData[i];
            try {
                errorThrown = !0, initData !== OBSERVED_ERROR && wrapper.close && wrapper.close.call(this, initData), errorThrown = !1;
            } finally {
                if (errorThrown) try {
                    this.closeAll(i + 1);
                } catch (e) {}
            }
        }
        this.wrapperInitData.length = 0;
    }
},
    Transaction = TransactionImpl,
    dirtyComponents = [],
    updateBatchNumber = 0,
    batchingStrategy = null;

function ensureInjected() {
    invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, "ReactUpdates: must inject a reconcile transaction class and batching " + "strategy");
}

var NESTED_UPDATES = {
    initialize: function initialize() {
        this.dirtyComponentsLength = dirtyComponents.length;
    },
    close: function close() {
        this.dirtyComponentsLength !== dirtyComponents.length ? (dirtyComponents.splice(0, this.dirtyComponentsLength), flushBatchedUpdates()) : dirtyComponents.length = 0;
    }
},
    TRANSACTION_WRAPPERS = [NESTED_UPDATES];

function ReactUpdatesFlushTransaction() {
    this.reinitializeTransaction(), this.dirtyComponentsLength = null, this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(!0);
}

babelHelpers.extends(ReactUpdatesFlushTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS;
    },
    destructor: function destructor() {
        this.dirtyComponentsLength = null, ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction), this.reconcileTransaction = null;
    },
    perform: function perform(method, scope, a) {
        return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
    }
}), PooledClass_1.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates$1(callback, a, b, c, d, e) {
    return ensureInjected(), batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
    return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
    var len = transaction.dirtyComponentsLength;
    invariant(len === dirtyComponents.length, "Expected flush transaction's stored dirty-components length (%s) to " + "match dirty-components array length (%s).", len, dirtyComponents.length), dirtyComponents.sort(mountOrderComparator), updateBatchNumber++;
    for (var i = 0; i < len; i++) {
        var component = dirtyComponents[i];
        ReactReconciler_1.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);
    }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
    for (; dirtyComponents.length;) {
        var transaction = ReactUpdatesFlushTransaction.getPooled();
        transaction.perform(runBatchedUpdates, null, transaction), ReactUpdatesFlushTransaction.release(transaction);
    }
};

function enqueueUpdate$1(component) {
    if (ensureInjected(), !batchingStrategy.isBatchingUpdates) return void batchingStrategy.batchedUpdates(enqueueUpdate$1, component);
    dirtyComponents.push(component), null == component._updateBatchNumber && (component._updateBatchNumber = updateBatchNumber + 1);
}

var ReactUpdatesInjection = {
    injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
        invariant(ReconcileTransaction, "ReactUpdates: must provide a reconcile transaction class"), ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
    },
    injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
        invariant(_batchingStrategy, "ReactUpdates: must provide a batching strategy"), invariant("function" == typeof _batchingStrategy.batchedUpdates, "ReactUpdates: must provide a batchedUpdates() function"), invariant("boolean" == typeof _batchingStrategy.isBatchingUpdates, "ReactUpdates: must provide an isBatchingUpdates boolean attribute"), batchingStrategy = _batchingStrategy;
    },
    getBatchingStrategy: function getBatchingStrategy() {
        return batchingStrategy;
    }
},
    ReactUpdates = {
    ReactReconcileTransaction: null,
    batchedUpdates: batchedUpdates$1,
    enqueueUpdate: enqueueUpdate$1,
    flushBatchedUpdates: flushBatchedUpdates,
    injection: ReactUpdatesInjection
},
    ReactUpdates_1 = ReactUpdates,
    ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
    ReactGlobalSharedState = {
    ReactCurrentOwner: ReactInternals.ReactCurrentOwner
},
    ReactGlobalSharedState_1 = ReactGlobalSharedState;

function enqueueUpdate(internalInstance) {
    ReactUpdates_1.enqueueUpdate(internalInstance);
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
    var internalInstance = ReactInstanceMap_1.get(publicInstance);
    return internalInstance || null;
}

var ReactUpdateQueue = {
    isMounted: function isMounted(publicInstance) {
        var internalInstance = ReactInstanceMap_1.get(publicInstance);
        return !!internalInstance && !!internalInstance._renderedComponent;
    },
    enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
        internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback], enqueueUpdate(internalInstance);
    },
    enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), internalInstance._pendingForceUpdate = !0, enqueueUpdate(internalInstance));
    },
    enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        internalInstance && (internalInstance._pendingStateQueue = [completeState], internalInstance._pendingReplaceState = !0, callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance));
    },
    enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
        if (internalInstance) {
            (internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = [])).push(partialState), callback = void 0 === callback ? null : callback, null !== callback && (internalInstance._pendingCallbacks ? internalInstance._pendingCallbacks.push(callback) : internalInstance._pendingCallbacks = [callback]), enqueueUpdate(internalInstance);
        }
    },
    enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
        internalInstance._pendingElement = nextElement, internalInstance._context = nextContext, enqueueUpdate(internalInstance);
    }
},
    ReactUpdateQueue_1 = ReactUpdateQueue,
    injected = !1,
    ReactComponentEnvironment = {
    replaceNodeWithMarkup: null,
    processChildrenUpdates: null,
    injection: {
        injectEnvironment: function injectEnvironment(environment) {
            invariant(!injected, "ReactCompositeComponent: injectEnvironment() can only be called once."), ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup, ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates, injected = !0;
        }
    }
},
    ReactComponentEnvironment_1 = ReactComponentEnvironment,
    ReactCompositeComponentTypes$1 = {
    ImpureClass: 0,
    PureClass: 1,
    StatelessFunctional: 2
},
    ReactNodeTypes = {
    HOST: 0,
    COMPOSITE: 1,
    EMPTY: 2,
    getType: function getType(node) {
        return null === node || !1 === node ? ReactNodeTypes.EMPTY : React.isValidElement(node) ? "function" == typeof node.type ? ReactNodeTypes.COMPOSITE : ReactNodeTypes.HOST : void invariant(!1, "Unexpected node: %s", node);
    }
},
    ReactNodeTypes_1 = ReactNodeTypes;

function shouldUpdateReactComponent(prevElement, nextElement) {
    var prevEmpty = null === prevElement || !1 === prevElement,
        nextEmpty = null === nextElement || !1 === nextElement;
    if (prevEmpty || nextEmpty) return prevEmpty === nextEmpty;
    var prevType = typeof prevElement,
        nextType = typeof nextElement;
    return "string" === prevType || "number" === prevType ? "string" === nextType || "number" === nextType : "object" === nextType && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
}

var shouldUpdateReactComponent_1 = shouldUpdateReactComponent,
    ReactCurrentOwner$1 = ReactGlobalSharedState_1.ReactCurrentOwner;

function StatelessComponent(Component) {}

StatelessComponent.prototype.render = function () {
    return (0, ReactInstanceMap_1.get(this)._currentElement.type)(this.props, this.context, this.updater);
};

function shouldConstruct(Component) {
    return !(!Component.prototype || !Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
    return !(!Component.prototype || !Component.prototype.isPureReactComponent);
}

var nextMountID = 1,
    ReactCompositeComponent = {
    construct: function construct(element) {
        this._currentElement = element, this._rootNodeID = 0, this._compositeType = null, this._instance = null, this._hostParent = null, this._hostContainerInfo = null, this._updateBatchNumber = null, this._pendingElement = null, this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._renderedNodeType = null, this._renderedComponent = null, this._context = null, this._mountOrder = 0, this._topLevelWrapper = null, this._pendingCallbacks = null, this._calledComponentWillUnmount = !1;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        this._context = context, this._mountOrder = nextMountID++, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var renderedElement,
            publicProps = this._currentElement.props,
            publicContext = this._processContext(context),
            Component = this._currentElement.type,
            updateQueue = transaction.getUpdateQueue(),
            doConstruct = shouldConstruct(Component),
            inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
        doConstruct || null != inst && null != inst.render ? isPureComponent(Component) ? this._compositeType = ReactCompositeComponentTypes$1.PureClass : this._compositeType = ReactCompositeComponentTypes$1.ImpureClass : (renderedElement = inst, invariant(null === inst || !1 === inst || React.isValidElement(inst), "%s(...): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", Component.displayName || Component.name || "Component"), inst = new StatelessComponent(Component), this._compositeType = ReactCompositeComponentTypes$1.StatelessFunctional), inst.props = publicProps, inst.context = publicContext, inst.refs = emptyObject, inst.updater = updateQueue, this._instance = inst, ReactInstanceMap_1.set(inst, this);
        var initialState = inst.state;
        void 0 === initialState && (inst.state = initialState = null), invariant("object" == typeof initialState && !Array.isArray(initialState), "%s.state: must be set to an object or null", this.getName() || "ReactCompositeComponent"), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, inst.componentWillMount && (inst.componentWillMount(), this._pendingStateQueue && (inst.state = this._processPendingState(inst.props, inst.context)));
        var markup;
        markup = inst.unstable_handleError ? this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) : this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context), inst.componentDidMount && transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
        var callbacks = this._pendingCallbacks;
        if (callbacks) {
            this._pendingCallbacks = null;
            for (var i = 0; i < callbacks.length; i++) {
                transaction.getReactMountReady().enqueue(callbacks[i], inst);
            }
        }
        return markup;
    },
    _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    },
    _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
        var Component = this._currentElement.type;
        return doConstruct ? new Component(publicProps, publicContext, updateQueue) : Component(publicProps, publicContext, updateQueue);
    },
    performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        var markup,
            checkpoint = transaction.checkpoint();
        try {
            markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._renderedComponent.unmountComponent(!0, !0), transaction.rollback(checkpoint), markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
        }
        return markup;
    },
    performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
        void 0 === renderedElement && (renderedElement = this._renderValidatedComponent());
        var nodeType = ReactNodeTypes_1.getType(renderedElement);
        this._renderedNodeType = nodeType;
        var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
        return this._renderedComponent = child, ReactReconciler_1.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), 0);
    },
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        if (this._renderedComponent) {
            var inst = this._instance;
            if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) if (inst._calledComponentWillUnmount = !0, safely) {
                if (!skipLifecycle) {
                    var name = this.getName() + ".componentWillUnmount()";
                    ReactErrorUtils_1.invokeGuardedCallbackAndCatchFirstError(name, inst.componentWillUnmount, inst);
                }
            } else inst.componentWillUnmount();
            this._renderedComponent && (ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedNodeType = null, this._renderedComponent = null, this._instance = null), this._pendingStateQueue = null, this._pendingReplaceState = !1, this._pendingForceUpdate = !1, this._pendingCallbacks = null, this._pendingElement = null, this._context = null, this._rootNodeID = 0, this._topLevelWrapper = null, ReactInstanceMap_1.remove(inst);
        }
    },
    _maskContext: function _maskContext(context) {
        var Component = this._currentElement.type,
            contextTypes = Component.contextTypes;
        if (!contextTypes) return emptyObject;
        var maskedContext = {};
        for (var contextName in contextTypes) {
            maskedContext[contextName] = context[contextName];
        }return maskedContext;
    },
    _processContext: function _processContext(context) {
        return this._maskContext(context);
    },
    _processChildContext: function _processChildContext(currentContext) {
        var childContext,
            Component = this._currentElement.type,
            inst = this._instance;
        if ("function" == typeof inst.getChildContext) {
            childContext = inst.getChildContext(), invariant("object" == typeof Component.childContextTypes, "%s.getChildContext(): childContextTypes must be defined in order to " + "use getChildContext().", this.getName() || "ReactCompositeComponent");
            for (var name in childContext) {
                invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || "ReactCompositeComponent", name);
            }return babelHelpers.extends({}, currentContext, childContext);
        }
        return currentContext;
    },
    _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {},
    receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
        var prevElement = this._currentElement,
            prevContext = this._context;
        this._pendingElement = null, this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
    },
    performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
        if (null != this._pendingElement) ReactReconciler_1.receiveComponent(this, this._pendingElement, transaction, this._context);else if (null !== this._pendingStateQueue || this._pendingForceUpdate) this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);else {
            var callbacks = this._pendingCallbacks;
            if (this._pendingCallbacks = null, callbacks) for (var j = 0; j < callbacks.length; j++) {
                transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
            }this._updateBatchNumber = null;
        }
    },
    updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
        var inst = this._instance;
        invariant(null != inst, "Attempted to update component `%s` that has already been unmounted " + "(or failed to mount).", this.getName() || "ReactCompositeComponent");
        var nextContext,
            willReceive = !1;
        this._context === nextUnmaskedContext ? nextContext = inst.context : (nextContext = this._processContext(nextUnmaskedContext), willReceive = !0);
        var prevProps = prevParentElement.props,
            nextProps = nextParentElement.props;
        if (prevParentElement !== nextParentElement && (willReceive = !0), willReceive && inst.componentWillReceiveProps) {
            var beforeState = inst.state;
            inst.componentWillReceiveProps(nextProps, nextContext);
            var afterState = inst.state;
            beforeState !== afterState && (inst.state = beforeState, inst.updater.enqueueReplaceState(inst, afterState));
        }
        var callbacks = this._pendingCallbacks;
        this._pendingCallbacks = null;
        var nextState = this._processPendingState(nextProps, nextContext),
            shouldUpdate = !0;
        if (!this._pendingForceUpdate) {
            var prevState = inst.state;
            shouldUpdate = willReceive || nextState !== prevState, inst.shouldComponentUpdate ? shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext) : this._compositeType === ReactCompositeComponentTypes$1.PureClass && (shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState));
        }
        if (this._updateBatchNumber = null, shouldUpdate ? (this._pendingForceUpdate = !1, this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext)) : (this._currentElement = nextParentElement, this._context = nextUnmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext), callbacks) for (var j = 0; j < callbacks.length; j++) {
            transaction.getReactMountReady().enqueue(callbacks[j], this.getPublicInstance());
        }
    },
    _processPendingState: function _processPendingState(props, context) {
        var inst = this._instance,
            queue = this._pendingStateQueue,
            replace = this._pendingReplaceState;
        if (this._pendingReplaceState = !1, this._pendingStateQueue = null, !queue) return inst.state;
        if (replace && 1 === queue.length) return queue[0];
        for (var nextState = replace ? queue[0] : inst.state, dontMutate = !0, i = replace ? 1 : 0; i < queue.length; i++) {
            var partial = queue[i],
                partialState = "function" == typeof partial ? partial.call(inst, nextState, props, context) : partial;
            partialState && (dontMutate ? (dontMutate = !1, nextState = babelHelpers.extends({}, nextState, partialState)) : babelHelpers.extends(nextState, partialState));
        }
        return nextState;
    },
    _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
        var prevProps,
            prevState,
            inst = this._instance,
            hasComponentDidUpdate = !!inst.componentDidUpdate;
        hasComponentDidUpdate && (prevProps = inst.props, prevState = inst.state), inst.componentWillUpdate && inst.componentWillUpdate(nextProps, nextState, nextContext), this._currentElement = nextElement, this._context = unmaskedContext, inst.props = nextProps, inst.state = nextState, inst.context = nextContext, inst.unstable_handleError ? this._updateRenderedComponentWithErrorHandling(transaction, unmaskedContext) : this._updateRenderedComponent(transaction, unmaskedContext), hasComponentDidUpdate && transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState), inst);
    },
    _updateRenderedComponentWithErrorHandling: function _updateRenderedComponentWithErrorHandling(transaction, context) {
        var checkpoint = transaction.checkpoint();
        try {
            this._updateRenderedComponent(transaction, context);
        } catch (e) {
            transaction.rollback(checkpoint), this._instance.unstable_handleError(e), this._pendingStateQueue && (this._instance.state = this._processPendingState(this._instance.props, this._instance.context)), checkpoint = transaction.checkpoint(), this._updateRenderedComponentWithNextElement(transaction, context, null, !0), this._updateRenderedComponent(transaction, context);
        }
    },
    _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
        var nextRenderedElement = this._renderValidatedComponent();
        this._updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, !1);
    },
    _updateRenderedComponentWithNextElement: function _updateRenderedComponentWithNextElement(transaction, context, nextRenderedElement, safely) {
        var prevComponentInstance = this._renderedComponent,
            prevRenderedElement = prevComponentInstance._currentElement;
        if (shouldUpdateReactComponent_1(prevRenderedElement, nextRenderedElement)) ReactReconciler_1.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));else {
            var oldHostNode = ReactReconciler_1.getHostNode(prevComponentInstance),
                nodeType = ReactNodeTypes_1.getType(nextRenderedElement);
            this._renderedNodeType = nodeType;
            var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes_1.EMPTY);
            this._renderedComponent = child;
            var nextMarkup = ReactReconciler_1.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), 0);
            ReactReconciler_1.unmountComponent(prevComponentInstance, safely, !1), this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
        }
    },
    _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
        ReactComponentEnvironment_1.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
    },
    _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
        var inst = this._instance;
        return inst.render();
    },
    _renderValidatedComponent: function _renderValidatedComponent() {
        var renderedElement;
        if (1 && this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional) renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();else {
            ReactCurrentOwner$1.current = this;
            try {
                renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
            } finally {
                ReactCurrentOwner$1.current = null;
            }
        }
        return invariant(null === renderedElement || !1 === renderedElement || React.isValidElement(renderedElement), "%s.render(): A valid React element (or null) must be returned. You may have " + "returned undefined, an array or some other invalid object.", this.getName() || "ReactCompositeComponent"), renderedElement;
    },
    attachRef: function attachRef(ref, component) {
        var inst = this.getPublicInstance();
        invariant(null != inst, "Stateless function components cannot have refs.");
        var publicComponentInstance = component.getPublicInstance();
        (inst.refs === emptyObject ? inst.refs = {} : inst.refs)[ref] = publicComponentInstance;
    },
    detachRef: function detachRef(ref) {
        delete this.getPublicInstance().refs[ref];
    },
    getName: function getName() {
        var type = this._currentElement.type,
            constructor = this._instance && this._instance.constructor;
        return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    },
    getPublicInstance: function getPublicInstance() {
        var inst = this._instance;
        return this._compositeType === ReactCompositeComponentTypes$1.StatelessFunctional ? null : inst;
    },
    _instantiateReactComponent: null
},
    ReactCompositeComponent_1 = ReactCompositeComponent,
    emptyComponentFactory,
    ReactEmptyComponentInjection = {
    injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
        emptyComponentFactory = factory;
    }
},
    ReactEmptyComponent = {
    create: function create(instantiate) {
        return emptyComponentFactory(instantiate);
    }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

var ReactEmptyComponent_1 = ReactEmptyComponent,
    genericComponentClass = null,
    textComponentClass = null,
    ReactHostComponentInjection = {
    injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
        genericComponentClass = componentClass;
    },
    injectTextComponentClass: function injectTextComponentClass(componentClass) {
        textComponentClass = componentClass;
    }
};

function createInternalComponent(element) {
    return invariant(genericComponentClass, "There is no registered component for the tag %s", element.type), new genericComponentClass(element);
}

function createInstanceForText(text) {
    return new textComponentClass(text);
}

function isTextComponent(component) {
    return component instanceof textComponentClass;
}

var ReactHostComponent = {
    createInternalComponent: createInternalComponent,
    createInstanceForText: createInstanceForText,
    isTextComponent: isTextComponent,
    injection: ReactHostComponentInjection
},
    ReactHostComponent_1 = ReactHostComponent,
    ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
    this.construct(element);
};

function getDeclarationErrorAddendum(owner) {
    if (owner) {
        var name = owner.getName();
        if (name) return "\n\nCheck the render method of `" + name + "`.";
    }
    return "";
}

function isInternalComponentType(type) {
    return "function" == typeof type && void 0 !== type.prototype && "function" == typeof type.prototype.mountComponent && "function" == typeof type.prototype.receiveComponent;
}

function instantiateReactComponent(node, shouldHaveDebugID) {
    var instance;
    if (null === node || !1 === node) instance = ReactEmptyComponent_1.create(instantiateReactComponent);else if ("object" == typeof node) {
        var element = node,
            type = element.type;
        if ("function" != typeof type && "string" != typeof type) {
            var info = "";
            info += getDeclarationErrorAddendum(element._owner), invariant(!1, "Element type is invalid: expected a string (for built-in components) " + "or a class/function (for composite components) but got: %s.%s", null == type ? type : typeof type, info);
        }
        "string" == typeof element.type ? instance = ReactHostComponent_1.createInternalComponent(element) : isInternalComponentType(element.type) ? (instance = new element.type(element), instance.getHostNode || (instance.getHostNode = instance.getNativeNode)) : instance = new ReactCompositeComponentWrapper(element);
    } else "string" == typeof node || "number" == typeof node ? instance = ReactHostComponent_1.createInstanceForText(node) : invariant(!1, "Encountered invalid React node of type %s", typeof node);
    return instance._mountIndex = 0, instance._mountImage = null, instance;
}

babelHelpers.extends(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent_1, {
    _instantiateReactComponent: instantiateReactComponent
});

var instantiateReactComponent_1 = instantiateReactComponent,
    DevOnlyStubShim = null,
    ReactNativeFeatureFlags = require(66                       ), // 66 = ReactNativeFeatureFlags
    injectedFindNode = ReactNativeFeatureFlags.useFiber ? function (fiber) {
    return DevOnlyStubShim.findHostInstance(fiber);
} : function (instance) {
    return instance;
};

function findNodeHandle(componentOrHandle) {
    if (null == componentOrHandle) return null;
    if ("number" == typeof componentOrHandle) return componentOrHandle;
    var component = componentOrHandle,
        internalInstance = ReactInstanceMap_1.get(component);
    return internalInstance ? injectedFindNode(internalInstance) : component || (invariant("object" == typeof component && ("_rootNodeID" in component || "_nativeTag" in component) || null != component.render && "function" == typeof component.render, "findNodeHandle(...): Argument is not a component " + "(type: %s, keys: %s)", typeof component, Object.keys(component)), void invariant(!1, "findNodeHandle(...): Unable to find node handle for unmounted " + "component."));
}

var findNodeHandle_1 = findNodeHandle,
    TopLevelWrapper = function TopLevelWrapper() {};

TopLevelWrapper.prototype.isReactComponent = {}, TopLevelWrapper.prototype.render = function () {
    return this.props.child;
}, TopLevelWrapper.isReactTopLevelWrapper = !0;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
    var markup = ReactReconciler_1.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo_1(containerTag), emptyObject, 0);
    componentInstance._renderedComponent._topLevelWrapper = componentInstance, ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
    var transaction = ReactUpdates_1.ReactReconcileTransaction.getPooled();
    transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction), ReactUpdates_1.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
    _instancesByContainerID: {},
    findNodeHandle: findNodeHandle_1,
    renderComponent: function renderComponent(nextElement, containerTag, callback) {
        var nextWrappedElement = React.createElement(TopLevelWrapper, {
            child: nextElement
        }),
            topRootNodeID = containerTag,
            prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
        if (prevComponent) {
            var prevWrappedElement = prevComponent._currentElement,
                prevElement = prevWrappedElement.props.child;
            if (shouldUpdateReactComponent_1(prevElement, nextElement)) return ReactUpdateQueue_1.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject), callback && ReactUpdateQueue_1.enqueueCallbackInternal(prevComponent, callback), prevComponent;
            ReactNativeMount.unmountComponentAtNode(containerTag);
        }
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), null;
        ReactNativeTagHandles_1.assertRootTag(containerTag);
        var instance = instantiateReactComponent_1(nextWrappedElement, !1);
        if (ReactNativeMount._instancesByContainerID[containerTag] = instance, callback) {
            var nonNullCallback = callback;
            instance._pendingCallbacks = [function () {
                nonNullCallback.call(instance._renderedComponent.getPublicInstance());
            }];
        }
        return ReactUpdates_1.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag), instance._renderedComponent.getPublicInstance();
    },
    _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
        var childTag = mountImage;
        UIManager.setChildren(containerID, [childTag]);
    },
    unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
        ReactNativeMount.unmountComponentAtNode(containerTag), UIManager.removeRootView(containerTag);
    },
    unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
        if (!ReactNativeTagHandles_1.reactTagIsNativeTopRootID(containerTag)) return console.error("You cannot render into anything but a top root"), !1;
        var instance = ReactNativeMount._instancesByContainerID[containerTag];
        return !!instance && (ReactNativeMount.unmountComponentFromNode(instance, containerTag), delete ReactNativeMount._instancesByContainerID[containerTag], !0);
    },
    unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
        ReactReconciler_1.unmountComponent(instance), UIManager.removeSubviewsFromContainerWithID(containerID);
    }
},
    ReactNativeMount_1 = ReactNativeMount,
    RESET_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: function close() {
        ReactDefaultBatchingStrategy.isBatchingUpdates = !1;
    }
},
    FLUSH_BATCHED_UPDATES = {
    initialize: emptyFunction,
    close: ReactUpdates_1.flushBatchedUpdates.bind(ReactUpdates_1)
},
    TRANSACTION_WRAPPERS$1 = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
    this.reinitializeTransaction();
}

babelHelpers.extends(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$1;
    }
});

var transaction = new ReactDefaultBatchingStrategyTransaction(),
    ReactDefaultBatchingStrategy = {
    isBatchingUpdates: !1,
    batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
        var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
        return ReactDefaultBatchingStrategy.isBatchingUpdates = !0, alreadyBatchingUpdates ? callback(a, b, c, d, e) : transaction.perform(callback, null, a, b, c, d, e);
    }
},
    ReactDefaultBatchingStrategy_1 = ReactDefaultBatchingStrategy,
    dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
    if (childrenUpdates.length) {
        for (var moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices, containerTag = ReactNativeComponentTree_1.getNodeFromInstance(inst), i = 0; i < childrenUpdates.length; i++) {
            var update = childrenUpdates[i];
            if ("MOVE_EXISTING" === update.type) (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex), (moveToIndices || (moveToIndices = [])).push(update.toIndex);else if ("REMOVE_NODE" === update.type) (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);else if ("INSERT_MARKUP" === update.type) {
                var mountImage = update.content,
                    tag = mountImage;
                (addAtIndices || (addAtIndices = [])).push(update.toIndex), (addChildTags || (addChildTags = [])).push(tag);
            }
        }
        UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
    }
},
    ReactNativeDOMIDOperations = {
    dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,
    dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
        var oldTag = id;
        UIManager.replaceExistingNonRootView(oldTag, mountImage);
    }
},
    ReactNativeDOMIDOperations_1 = ReactNativeDOMIDOperations;

function validateCallback(callback) {
    invariant(!callback || "function" == typeof callback, "Invalid argument passed as callback. Expected a function. Instead " + "received: %s", callback);
}

var validateCallback_1 = validateCallback;

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var CallbackQueue = function () {
    function CallbackQueue() {
        _classCallCheck(this, CallbackQueue), this._callbacks = null, this._contexts = null;
    }
    return CallbackQueue.prototype.enqueue = function (callback, context) {
        this._callbacks = this._callbacks || [], this._callbacks.push(callback), this._contexts = this._contexts || [], this._contexts.push(context);
    }, CallbackQueue.prototype.notifyAll = function () {
        var callbacks = this._callbacks,
            contexts = this._contexts;
        if (callbacks && contexts) {
            invariant(callbacks.length === contexts.length, "Mismatched list of contexts in callback queue"), this._callbacks = null, this._contexts = null;
            for (var i = 0; i < callbacks.length; i++) {
                validateCallback_1(callbacks[i]), callbacks[i].call(contexts[i]);
            }callbacks.length = 0, contexts.length = 0;
        }
    }, CallbackQueue.prototype.checkpoint = function () {
        return this._callbacks ? this._callbacks.length : 0;
    }, CallbackQueue.prototype.rollback = function (len) {
        this._callbacks && this._contexts && (this._callbacks.length = len, this._contexts.length = len);
    }, CallbackQueue.prototype.reset = function () {
        this._callbacks = null, this._contexts = null;
    }, CallbackQueue.prototype.destructor = function () {
        this.reset();
    }, CallbackQueue;
}(),
    CallbackQueue_1 = PooledClass_1.addPoolingTo(CallbackQueue),
    ON_DOM_READY_QUEUEING = {
    initialize: function initialize() {
        this.reactMountReady.reset();
    },
    close: function close() {
        this.reactMountReady.notifyAll();
    }
},
    TRANSACTION_WRAPPERS$2 = [ON_DOM_READY_QUEUEING];

function ReactNativeReconcileTransaction() {
    this.reinitializeTransaction(), this.reactMountReady = CallbackQueue_1.getPooled();
}

var Mixin = {
    getTransactionWrappers: function getTransactionWrappers() {
        return TRANSACTION_WRAPPERS$2;
    },
    getReactMountReady: function getReactMountReady() {
        return this.reactMountReady;
    },
    getUpdateQueue: function getUpdateQueue() {
        return ReactUpdateQueue_1;
    },
    checkpoint: function checkpoint() {
        return this.reactMountReady.checkpoint();
    },
    rollback: function rollback(checkpoint) {
        this.reactMountReady.rollback(checkpoint);
    },
    destructor: function destructor() {
        CallbackQueue_1.release(this.reactMountReady), this.reactMountReady = null;
    }
};

babelHelpers.extends(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin), PooledClass_1.addPoolingTo(ReactNativeReconcileTransaction);

var ReactNativeReconcileTransaction_1 = ReactNativeReconcileTransaction,
    ReactNativeComponentEnvironment = {
    processChildrenUpdates: ReactNativeDOMIDOperations_1.dangerouslyProcessChildrenUpdates,
    replaceNodeWithMarkup: ReactNativeDOMIDOperations_1.dangerouslyReplaceNodeWithMarkupByID,
    clearNode: function clearNode() {},
    ReactReconcileTransaction: ReactNativeReconcileTransaction_1
},
    ReactNativeComponentEnvironment_1 = ReactNativeComponentEnvironment,
    ReactNativeTextComponent = function ReactNativeTextComponent(text) {
    this._currentElement = text, this._stringText = "" + text, this._hostParent = null, this._rootNodeID = 0;
};

babelHelpers.extends(ReactNativeTextComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText), this._hostParent = hostParent;
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag;
        var nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, "RCTRawText", nativeTopRootTag, {
            text: this._stringText
        }), ReactNativeComponentTree_1.precacheNode(this, tag), tag;
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    receiveComponent: function receiveComponent(nextText, transaction, context) {
        if (nextText !== this._currentElement) {
            this._currentElement = nextText;
            var nextStringText = "" + nextText;
            nextStringText !== this._stringText && (this._stringText = nextStringText, UIManager.updateView(this._rootNodeID, "RCTRawText", {
                text: this._stringText
            }));
        }
    },
    unmountComponent: function unmountComponent() {
        ReactNativeComponentTree_1.uncacheNode(this), this._currentElement = null, this._stringText = null, this._rootNodeID = 0;
    }
});

var ReactNativeTextComponent_1 = ReactNativeTextComponent,
    ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
    this._currentElement = null, this._renderedComponent = instantiate(placeholderElement);
};

babelHelpers.extends(ReactSimpleEmptyComponent.prototype, {
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
        return ReactReconciler_1.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
    },
    receiveComponent: function receiveComponent() {},
    getHostNode: function getHostNode() {
        return ReactReconciler_1.getHostNode(this._renderedComponent);
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactReconciler_1.unmountComponent(this._renderedComponent, safely, skipLifecycle), this._renderedComponent = null;
    }
});

var ReactSimpleEmptyComponent_1 = ReactSimpleEmptyComponent;

function inject$1() {
    ReactGenericBatching_1.injection.injectStackBatchedUpdates(ReactUpdates_1.batchedUpdates), ReactUpdates_1.injection.injectReconcileTransaction(ReactNativeComponentEnvironment_1.ReactReconcileTransaction), ReactUpdates_1.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy_1), ReactComponentEnvironment_1.injection.injectEnvironment(ReactNativeComponentEnvironment_1);
    var EmptyComponent = function EmptyComponent(instantiate) {
        var View = require(131   ); // 131 = View
        return new ReactSimpleEmptyComponent_1(React.createElement(View, {
            collapsable: !0,
            style: {
                position: "absolute"
            }
        }), instantiate);
    };
    ReactEmptyComponent_1.injection.injectEmptyComponentFactory(EmptyComponent), ReactHostComponent_1.injection.injectTextComponentClass(ReactNativeTextComponent_1), ReactHostComponent_1.injection.injectGenericComponentClass(function (tag) {
        var info = "";
        "string" == typeof tag && /^[a-z]/.test(tag) && (info += " Each component name should start with an uppercase letter."), invariant(!1, "Expected a component class, got %s.%s", tag, info);
    });
}

var ReactNativeStackInjection = {
    inject: inject$1
},
    getInspectorDataForViewTag = void 0;

getInspectorDataForViewTag = function getInspectorDataForViewTag() {
    invariant(!1, "getInspectorDataForViewTag() is not available in production");
};

var ReactNativeStackInspector = {
    getInspectorDataForViewTag: getInspectorDataForViewTag
},
    findNumericNodeHandleStack = function findNumericNodeHandleStack(componentOrHandle) {
    var nodeHandle = findNodeHandle_1(componentOrHandle);
    return null == nodeHandle || "number" == typeof nodeHandle ? nodeHandle : nodeHandle.getHostNode();
};

function _classCallCheck$2(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var objects = {},
    uniqueID = 1,
    emptyObject$3 = {},
    ReactNativePropRegistry = function () {
    function ReactNativePropRegistry() {
        _classCallCheck$2(this, ReactNativePropRegistry);
    }
    return ReactNativePropRegistry.register = function (object) {
        var id = ++uniqueID;
        return objects[id] = object, id;
    }, ReactNativePropRegistry.getByID = function (id) {
        if (!id) return emptyObject$3;
        var object = objects[id];
        return object || (console.warn("Invalid style with id `" + id + "`. Skipping ..."), emptyObject$3);
    }, ReactNativePropRegistry;
}(),
    ReactNativePropRegistry_1 = ReactNativePropRegistry,
    emptyObject$2 = {},
    removedKeys = null,
    removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
    return "object" != typeof nextProp || null === nextProp || deepDiffer(prevProp, nextProp);
}

function resolveObject(idOrObject) {
    return "number" == typeof idOrObject ? ReactNativePropRegistry_1.getByID(idOrObject) : idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
    if (Array.isArray(node)) for (var i = node.length; i-- && removedKeyCount > 0;) {
        restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    } else if (node && removedKeyCount > 0) {
        var obj = resolveObject(node);
        for (var propKey in removedKeys) {
            if (removedKeys[propKey]) {
                var nextProp = obj[propKey];
                if (void 0 !== nextProp) {
                    var attributeConfig = validAttributes[propKey];
                    if (attributeConfig) {
                        if ("function" == typeof nextProp && (nextProp = !0), void 0 === nextProp && (nextProp = null), "object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                            var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                            updatePayload[propKey] = nextValue;
                        }
                        removedKeys[propKey] = !1, removedKeyCount--;
                    }
                }
            }
        }
    }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
    var i,
        minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
    for (i = 0; i < minLength; i++) {
        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
    }for (; i < prevArray.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
    }for (; i < nextArray.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
    }return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {
    return updatePayload || prevProp !== nextProp ? prevProp && nextProp ? Array.isArray(prevProp) || Array.isArray(nextProp) ? Array.isArray(prevProp) && Array.isArray(nextProp) ? diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes) : Array.isArray(prevProp) ? diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes) : diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes) : nextProp ? addNestedProperty(updatePayload, nextProp, validAttributes) : prevProp ? clearNestedProperty(updatePayload, prevProp, validAttributes) : updatePayload : updatePayload;
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
    if (!nextProp) return updatePayload;
    if (!Array.isArray(nextProp)) return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
    for (var i = 0; i < nextProp.length; i++) {
        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
    }return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
    if (!prevProp) return updatePayload;
    if (!Array.isArray(prevProp)) return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
    for (var i = 0; i < prevProp.length; i++) {
        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
    }return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
    var attributeConfig, nextProp, prevProp;
    for (var propKey in nextProps) {
        if (attributeConfig = validAttributes[propKey]) if (prevProp = prevProps[propKey], nextProp = nextProps[propKey], "function" == typeof nextProp && (nextProp = !0, "function" == typeof prevProp && (prevProp = !0)), void 0 === nextProp && (nextProp = null, void 0 === prevProp && (prevProp = null)), removedKeys && (removedKeys[propKey] = !1), updatePayload && void 0 !== updatePayload[propKey]) {
            if ("object" != typeof attributeConfig) updatePayload[propKey] = nextProp;else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
                var nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp;
                updatePayload[propKey] = nextValue;
            }
        } else if (prevProp !== nextProp) if ("object" != typeof attributeConfig) defaultDiffer(prevProp, nextProp) && ((updatePayload || (updatePayload = {}))[propKey] = nextProp);else if ("function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process) {
            var shouldUpdate = void 0 === prevProp || ("function" == typeof attributeConfig.diff ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
            shouldUpdate && (nextValue = "function" == typeof attributeConfig.process ? attributeConfig.process(nextProp) : nextProp, (updatePayload || (updatePayload = {}))[propKey] = nextValue);
        } else removedKeys = null, removedKeyCount = 0, updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig), removedKeyCount > 0 && updatePayload && (restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig), removedKeys = null);
    }for (propKey in prevProps) {
        void 0 === nextProps[propKey] && (attributeConfig = validAttributes[propKey]) && (updatePayload && void 0 !== updatePayload[propKey] || void 0 !== (prevProp = prevProps[propKey]) && ("object" != typeof attributeConfig || "function" == typeof attributeConfig.diff || "function" == typeof attributeConfig.process ? ((updatePayload || (updatePayload = {}))[propKey] = null, removedKeys || (removedKeys = {}), removedKeys[propKey] || (removedKeys[propKey] = !0, removedKeyCount++)) : updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig)));
    }return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
    return diffProperties(updatePayload, emptyObject$2, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
    return diffProperties(updatePayload, prevProps, emptyObject$2, validAttributes);
}

var ReactNativeAttributePayload = {
    create: function create(props, validAttributes) {
        return addProperties(null, props, validAttributes);
    },
    diff: function diff(prevProps, nextProps, validAttributes) {
        return diffProperties(null, prevProps, nextProps, validAttributes);
    }
},
    ReactNativeAttributePayload_1 = ReactNativeAttributePayload;

function mountSafeCallback$1(context, callback) {
    return function () {
        if (callback) {
            if ("boolean" == typeof context.__isMounted) {
                if (!context.__isMounted) return;
            } else if ("function" == typeof context.isMounted && !context.isMounted()) return;
            return callback.apply(context, arguments);
        }
    };
}

function throwOnStylesProp(component, props) {
    if (void 0 !== props.styles) {
        var owner = component._owner || null,
            name = component.constructor.displayName,
            msg = "`styles` is not a supported property of `" + name + "`, did " + "you mean `style` (singular)?";
        throw owner && owner.constructor && owner.constructor.displayName && (msg += "\n\nCheck the `" + owner.constructor.displayName + "` parent " + " component."), new Error(msg);
    }
}

function warnForStyleProps(props, validAttributes) {
    for (var key in validAttributes.style) {
        validAttributes[key] || void 0 === props[key] || console.error("You are setting the style `{ " + key + ": ... }` as a prop. You " + "should nest it in a style object. " + "E.g. `{ style: { " + key + ": ... } }`");
    }
}

var NativeMethodsMixinUtils = {
    mountSafeCallback: mountSafeCallback$1,
    throwOnStylesProp: throwOnStylesProp,
    warnForStyleProps: warnForStyleProps
};

function _classCallCheck$1(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

function _possibleConstructorReturn(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !call || "object" != typeof call && "function" != typeof call ? self : call;
}

function _inherits(subClass, superClass) {
    if ("function" != typeof superClass && null !== superClass) throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: !1,
            writable: !0,
            configurable: !0
        }
    }), superClass && (Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass);
}

var ReactNativeFeatureFlags$1 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle = ReactNativeFeatureFlags$1.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    ReactNativeComponent = function (_React$Component) {
    _inherits(ReactNativeComponent, _React$Component);
    function ReactNativeComponent() {
        return _classCallCheck$1(this, ReactNativeComponent), _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    return ReactNativeComponent.prototype.blur = function () {
        TextInputState.blurTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.focus = function () {
        TextInputState.focusTextInput(findNumericNodeHandle(this));
    }, ReactNativeComponent.prototype.measure = function (callback) {
        UIManager.measure(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureInWindow = function (callback) {
        UIManager.measureInWindow(findNumericNodeHandle(this), mountSafeCallback(this, callback));
    }, ReactNativeComponent.prototype.measureLayout = function (relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
    }, ReactNativeComponent.prototype.setNativeProps = function (nativeProps) {
        injectedSetNativeProps(this, nativeProps);
    }, ReactNativeComponent;
}(React.Component);

function setNativePropsFiber(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps = void 0;

injectedSetNativeProps = ReactNativeFeatureFlags$1.useFiber ? setNativePropsFiber : setNativePropsStack;

var ReactNativeComponent_1 = ReactNativeComponent,
    ReactNativeFeatureFlags$2 = require(66                       ), // 66 = ReactNativeFeatureFlags
    mountSafeCallback$2 = NativeMethodsMixinUtils.mountSafeCallback,
    findNumericNodeHandle$1 = ReactNativeFeatureFlags$2.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack,
    NativeMethodsMixin = {
    measure: function measure(callback) {
        UIManager.measure(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureInWindow: function measureInWindow(callback) {
        UIManager.measureInWindow(findNumericNodeHandle$1(this), mountSafeCallback$2(this, callback));
    },
    measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
        UIManager.measureLayout(findNumericNodeHandle$1(this), relativeToNativeNode, mountSafeCallback$2(this, onFail), mountSafeCallback$2(this, onSuccess));
    },
    setNativeProps: function setNativeProps(nativeProps) {
        injectedSetNativeProps$1(this, nativeProps);
    },
    focus: function focus() {
        TextInputState.focusTextInput(findNumericNodeHandle$1(this));
    },
    blur: function blur() {
        TextInputState.blurTextInput(findNumericNodeHandle$1(this));
    }
};

function setNativePropsFiber$1(componentOrHandle, nativeProps) {
    var maybeInstance = void 0;
    try {
        maybeInstance = findNodeHandle_1(componentOrHandle);
    } catch (error) {}
    if (null != maybeInstance) {
        var viewConfig = maybeInstance.viewConfig,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(maybeInstance._nativeTag, viewConfig.uiViewClassName, updatePayload);
    }
}

function setNativePropsStack$1(componentOrHandle, nativeProps) {
    var maybeInstance = findNodeHandle_1(componentOrHandle);
    if (null != maybeInstance) {
        var viewConfig = void 0;
        if (void 0 !== maybeInstance.viewConfig) viewConfig = maybeInstance.viewConfig;else if (void 0 !== maybeInstance._instance && void 0 !== maybeInstance._instance.viewConfig) viewConfig = maybeInstance._instance.viewConfig;else {
            for (; void 0 !== maybeInstance._renderedComponent;) {
                maybeInstance = maybeInstance._renderedComponent;
            }viewConfig = maybeInstance.viewConfig;
        }
        var tag = "function" == typeof maybeInstance.getHostNode ? maybeInstance.getHostNode() : maybeInstance._rootNodeID,
            updatePayload = ReactNativeAttributePayload_1.create(nativeProps, viewConfig.validAttributes);
        UIManager.updateView(tag, viewConfig.uiViewClassName, updatePayload);
    }
}

var injectedSetNativeProps$1 = void 0;

injectedSetNativeProps$1 = ReactNativeFeatureFlags$2.useFiber ? setNativePropsFiber$1 : setNativePropsStack$1;

var NativeMethodsMixin_1 = NativeMethodsMixin,
    TouchHistoryMath = {
    centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
        var touchBank = touchHistory.touchBank,
            total = 0,
            count = 0,
            oneTouchData = 1 === touchHistory.numberActiveTouches ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;
        if (null !== oneTouchData) oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter && (total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY, count = 1);else for (var i = 0; i < touchBank.length; i++) {
            var touchTrack = touchBank[i];
            if (null !== touchTrack && void 0 !== touchTrack && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
                var toAdd;
                toAdd = ofCurrent && isXAxis ? touchTrack.currentPageX : ofCurrent && !isXAxis ? touchTrack.currentPageY : !ofCurrent && isXAxis ? touchTrack.previousPageX : touchTrack.previousPageY, total += toAdd, count++;
            }
        }
        return count > 0 ? total / count : TouchHistoryMath.noCentroid;
    },
    currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !0);
    },
    currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !0);
    },
    previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !0, !1);
    },
    previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
        return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, !1, !1);
    },
    currentCentroidX: function currentCentroidX(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !0, !0);
    },
    currentCentroidY: function currentCentroidY(touchHistory) {
        return TouchHistoryMath.centroidDimension(touchHistory, 0, !1, !0);
    },
    noCentroid: -1
},
    TouchHistoryMath_1 = TouchHistoryMath;

function escape(key) {
    var escaperLookup = {
        "=": "=0",
        ":": "=2"
    };
    return "$" + ("" + key).replace(/[=:]/g, function (match) {
        return escaperLookup[match];
    });
}

var unescapeInDev = emptyFunction,
    KeyEscapeUtils = {
    escape: escape,
    unescapeInDev: unescapeInDev
},
    KeyEscapeUtils_1 = KeyEscapeUtils,
    ITERATOR_SYMBOL = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.iterator : "@@iterator"),
    FAUX_ITERATOR_SYMBOL = "@@iterator",
    REACT_ELEMENT_TYPE = "function" == typeof Symbol && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 60103,
    SEPARATOR = ".",
    SUBSEPARATOR = ":";

function getComponentKey(component, index) {
    return component && "object" == typeof component && null != component.key ? KeyEscapeUtils_1.escape(component.key) : index.toString(36);
}

function traverseStackChildrenImpl(children, nameSoFar, callback, traverseContext) {
    var type = typeof children;
    if ("undefined" !== type && "boolean" !== type || (children = null), null === children || "string" === type || "number" === type || "object" === type && children.$$typeof === REACT_ELEMENT_TYPE) return callback(traverseContext, children, "" === nameSoFar ? SEPARATOR + getComponentKey(children, 0) : nameSoFar), 1;
    var child,
        nextName,
        subtreeCount = 0,
        nextNamePrefix = "" === nameSoFar ? SEPARATOR : nameSoFar + SUBSEPARATOR;
    if (Array.isArray(children)) for (var i = 0; i < children.length; i++) {
        child = children[i], nextName = nextNamePrefix + getComponentKey(child, i), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
    } else {
        var iteratorFn = ITERATOR_SYMBOL && children[ITERATOR_SYMBOL] || children[FAUX_ITERATOR_SYMBOL];
        if ("function" == typeof iteratorFn) for (var step, iterator = iteratorFn.call(children), ii = 0; !(step = iterator.next()).done;) {
            child = step.value, nextName = nextNamePrefix + getComponentKey(child, ii++), subtreeCount += traverseStackChildrenImpl(child, nextName, callback, traverseContext);
        } else if ("object" === type) {
            var addendum = "",
                childrenString = "" + children;
            invariant(!1, "Objects are not valid as a React child (found: %s).%s", "[object Object]" === childrenString ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString, addendum);
        }
    }
    return subtreeCount;
}

function traverseStackChildren(children, callback, traverseContext) {
    return null == children ? 0 : traverseStackChildrenImpl(children, "", callback, traverseContext);
}

var traverseStackChildren_1 = traverseStackChildren,
    ReactComponentTreeHook$1;

"undefined" != typeof process && process.env && "production" == "test" && (ReactComponentTreeHook$1 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function instantiateChild(childInstances, child, name, selfDebugID) {
    var keyUnique = void 0 === childInstances[name];
    null != child && keyUnique && (childInstances[name] = instantiateReactComponent_1(child, !0));
}

var ReactChildReconciler = {
    instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
        if (null == nestedChildNodes) return null;
        var childInstances = {};
        return traverseStackChildren_1(nestedChildNodes, instantiateChild, childInstances), childInstances;
    },
    updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
        if (nextChildren || prevChildren) {
            var name, prevChild;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    prevChild = prevChildren && prevChildren[name];
                    var prevElement = prevChild && prevChild._currentElement,
                        nextElement = nextChildren[name];
                    if (null != prevChild && shouldUpdateReactComponent_1(prevElement, nextElement)) ReactReconciler_1.receiveComponent(prevChild, nextElement, transaction, context), nextChildren[name] = prevChild;else {
                        var nextChildInstance = instantiateReactComponent_1(nextElement, !0);
                        nextChildren[name] = nextChildInstance;
                        var nextChildMountImage = ReactReconciler_1.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
                        mountImages.push(nextChildMountImage), prevChild && (removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
                    }
                }
            }for (name in prevChildren) {
                !prevChildren.hasOwnProperty(name) || nextChildren && nextChildren.hasOwnProperty(name) || (prevChild = prevChildren[name], removedNodes[name] = ReactReconciler_1.getHostNode(prevChild), ReactReconciler_1.unmountComponent(prevChild, !1, !1));
            }
        }
    },
    unmountChildren: function unmountChildren(renderedChildren, safely, skipLifecycle) {
        for (var name in renderedChildren) {
            if (renderedChildren.hasOwnProperty(name)) {
                var renderedChild = renderedChildren[name];
                ReactReconciler_1.unmountComponent(renderedChild, safely, skipLifecycle);
            }
        }
    }
},
    ReactChildReconciler_1 = ReactChildReconciler,
    ReactComponentTreeHook$2;

"undefined" != typeof process && process.env && "production" == "test" && (ReactComponentTreeHook$2 = ReactGlobalSharedState_1.ReactComponentTreeHook);

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
    if (traverseContext && "object" == typeof traverseContext) {
        var result = traverseContext;
        void 0 === result[name] && null != child && (result[name] = child);
    }
}

function flattenStackChildren(children, selfDebugID) {
    if (null == children) return children;
    var result = {};
    return traverseStackChildren_1(children, flattenSingleChildIntoContext, result), result;
}

var flattenStackChildren_1 = flattenStackChildren;

function makeInsertMarkup(markup, afterNode, toIndex) {
    return {
        type: "INSERT_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeMove(child, afterNode, toIndex) {
    return {
        type: "MOVE_EXISTING",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: ReactReconciler_1.getHostNode(child),
        toIndex: toIndex,
        afterNode: afterNode
    };
}

function makeRemove(child, node) {
    return {
        type: "REMOVE_NODE",
        content: null,
        fromIndex: child._mountIndex,
        fromNode: node,
        toIndex: null,
        afterNode: null
    };
}

function makeSetMarkup(markup) {
    return {
        type: "SET_MARKUP",
        content: markup,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function makeTextContent(textContent) {
    return {
        type: "TEXT_CONTENT",
        content: textContent,
        fromIndex: null,
        fromNode: null,
        toIndex: null,
        afterNode: null
    };
}

function enqueue(queue, update) {
    return update && (queue = queue || [], queue.push(update)), queue;
}

function processQueue(inst, updateQueue) {
    ReactComponentEnvironment_1.processChildrenUpdates(inst, updateQueue);
}

var ReactMultiChild = {
    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
        return ReactChildReconciler_1.instantiateChildren(nestedChildren, transaction, context);
    },
    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
        var nextChildren,
            selfDebugID = 0;
        return nextChildren = flattenStackChildren_1(nextNestedChildrenElements, selfDebugID), ReactChildReconciler_1.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID), nextChildren;
    },
    mountChildren: function mountChildren(nestedChildren, transaction, context) {
        var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
        this._renderedChildren = children;
        var mountImages = [],
            index = 0;
        for (var name in children) {
            if (children.hasOwnProperty(name)) {
                var child = children[name],
                    selfDebugID = 0,
                    mountImage = ReactReconciler_1.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
                child._mountIndex = index++, mountImages.push(mountImage);
            }
        }return mountImages;
    },
    updateTextContent: function updateTextContent(nextContent) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeTextContent(nextContent)]);
    },
    updateMarkup: function updateMarkup(nextMarkup) {
        var prevChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(prevChildren, !1, !1);
        for (var name in prevChildren) {
            prevChildren.hasOwnProperty(name) && invariant(!1, "updateTextContent called on non-empty component.");
        }processQueue(this, [makeSetMarkup(nextMarkup)]);
    },
    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
        this._updateChildren(nextNestedChildrenElements, transaction, context);
    },
    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
        var prevChildren = this._renderedChildren,
            removedNodes = {},
            mountImages = [],
            nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
        if (nextChildren || prevChildren) {
            var name,
                updates = null,
                nextIndex = 0,
                lastIndex = 0,
                nextMountIndex = 0,
                lastPlacedNode = null;
            for (name in nextChildren) {
                if (nextChildren.hasOwnProperty(name)) {
                    var prevChild = prevChildren && prevChildren[name],
                        nextChild = nextChildren[name];
                    prevChild === nextChild ? (updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)), lastIndex = Math.max(prevChild._mountIndex, lastIndex), prevChild._mountIndex = nextIndex) : (prevChild && (lastIndex = Math.max(prevChild._mountIndex, lastIndex)), updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context)), nextMountIndex++), nextIndex++, lastPlacedNode = ReactReconciler_1.getHostNode(nextChild);
                }
            }for (name in removedNodes) {
                removedNodes.hasOwnProperty(name) && (updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name])));
            }updates && processQueue(this, updates), this._renderedChildren = nextChildren;
        }
    },
    unmountChildren: function unmountChildren(safely, skipLifecycle) {
        var renderedChildren = this._renderedChildren;
        ReactChildReconciler_1.unmountChildren(renderedChildren, safely, skipLifecycle), this._renderedChildren = null;
    },
    moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
        if (child._mountIndex < lastIndex) return makeMove(child, afterNode, toIndex);
    },
    createChild: function createChild(child, afterNode, mountImage) {
        return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
    },
    removeChild: function removeChild(child, node) {
        return makeRemove(child, node);
    },
    _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
        return child._mountIndex = index, this.createChild(child, afterNode, mountImage);
    },
    _unmountChild: function _unmountChild(child, node) {
        var update = this.removeChild(child, node);
        return child._mountIndex = null, update;
    }
},
    ReactMultiChild_1 = ReactMultiChild,
    ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
    this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
    getPublicInstance: function getPublicInstance() {
        return this;
    },
    unmountComponent: function unmountComponent(safely, skipLifecycle) {
        ReactNativeComponentTree_1.uncacheNode(this), this.unmountChildren(safely, skipLifecycle), this._rootNodeID = 0;
    },
    initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
        var mountImages = this.mountChildren(children, transaction, context);
        if (mountImages.length) {
            for (var createdTags = [], i = 0, l = mountImages.length; i < l; i++) {
                var mountImage = mountImages[i],
                    childTag = mountImage;
                createdTags[i] = childTag;
            }
            UIManager.setChildren(containerTag, createdTags);
        }
    },
    receiveComponent: function receiveComponent(nextElement, transaction, context) {
        var prevElement = this._currentElement;
        this._currentElement = nextElement;
        var updatePayload = ReactNativeAttributePayload_1.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);
        updatePayload && UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload), this.updateChildren(nextElement.props.children, transaction, context);
    },
    getName: function getName() {
        return this.constructor.displayName || this.constructor.name || "Unknown";
    },
    getHostNode: function getHostNode() {
        return this._rootNodeID;
    },
    mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
        var tag = ReactNativeTagHandles_1.allocateTag();
        this._rootNodeID = tag, this._hostParent = hostParent, this._hostContainerInfo = hostContainerInfo;
        var updatePayload = ReactNativeAttributePayload_1.create(this._currentElement.props, this.viewConfig.validAttributes),
            nativeTopRootTag = hostContainerInfo._tag;
        return UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload), ReactNativeComponentTree_1.precacheNode(this, tag), this.initializeChildren(this._currentElement.props.children, tag, transaction, context), tag;
    }
}, babelHelpers.extends(ReactNativeBaseComponent.prototype, ReactMultiChild_1, ReactNativeBaseComponent.Mixin, NativeMethodsMixin_1);

var ReactNativeBaseComponent_1 = ReactNativeBaseComponent,
    createReactNativeComponentClassStack = function createReactNativeComponentClassStack(viewConfig) {
    var Constructor = function Constructor(element) {
        this._currentElement = element, this._topLevelWrapper = null, this._hostParent = null, this._hostContainerInfo = null, this._rootNodeID = 0, this._renderedChildren = null;
    };
    return Constructor.displayName = viewConfig.uiViewClassName, Constructor.viewConfig = viewConfig, Constructor.propTypes = viewConfig.propTypes, Constructor.prototype = new ReactNativeBaseComponent_1(viewConfig), Constructor.prototype.constructor = Constructor, Constructor;
},
    createReactNativeComponentClassStack_1 = createReactNativeComponentClassStack,
    ReactNativeFeatureFlags$3 = require(66                       ), // 66 = ReactNativeFeatureFlags
    createReactNativeComponentClass = ReactNativeFeatureFlags$3.useFiber ? DevOnlyStubShim : createReactNativeComponentClassStack_1,
    ReactNativeFeatureFlags$4 = require(66                       ), // 66 = ReactNativeFeatureFlags
    findNumericNodeHandle$2 = ReactNativeFeatureFlags$4.useFiber ? DevOnlyStubShim : findNumericNodeHandleStack;

function takeSnapshot(view, options) {
    return "number" != typeof view && "window" !== view && (view = findNumericNodeHandle$2(view) || "window"), UIManager.__takeSnapshot(view, options);
}

var takeSnapshot_1 = takeSnapshot;

ReactNativeInjection.inject(), ReactNativeStackInjection.inject();

var render = function render(element, mountInto, callback) {
    return ReactNativeMount_1.renderComponent(element, mountInto, callback);
},
    ReactNativeStack = {
    NativeComponent: ReactNativeComponent_1,
    hasReactNativeInitialized: !1,
    findNodeHandle: findNumericNodeHandleStack,
    render: render,
    unmountComponentAtNode: ReactNativeMount_1.unmountComponentAtNode,
    unstable_batchedUpdates: ReactUpdates_1.batchedUpdates,
    unmountComponentAtNodeAndRemoveContainer: ReactNativeMount_1.unmountComponentAtNodeAndRemoveContainer,
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        NativeMethodsMixin: NativeMethodsMixin_1,
        ReactGlobalSharedState: ReactGlobalSharedState_1,
        ReactNativeComponentTree: ReactNativeComponentTree_1,
        ReactNativePropRegistry: ReactNativePropRegistry_1,
        TouchHistoryMath: TouchHistoryMath_1,
        createReactNativeComponentClass: createReactNativeComponentClass,
        takeSnapshot: takeSnapshot_1
    }
};

"undefined" != typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" == typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject && __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
            return ReactNativeComponentTree_1.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
            for (; inst._renderedComponent;) {
                inst = inst._renderedComponent;
            }return inst ? ReactNativeComponentTree_1.getNodeFromInstance(inst) : null;
        }
    },
    Mount: ReactNativeMount_1,
    Reconciler: ReactReconciler_1,
    getInspectorDataForViewTag: ReactNativeStackInspector.getInspectorDataForViewTag
});

var ReactNativeStackEntry = ReactNativeStack;

module.exports = ReactNativeStackEntry;
}, 175, null, "ReactNativeStack-prod");
__d(/* ReactNativeART */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/ART/ReactNativeART.js';
var Color = require(177             ); // 177 = art/core/color
var Path = require(178                  ); // 178 = ARTSerializablePath
var Transform = require(181                 ); // 181 = art/core/transform

var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes

var createReactNativeComponentClass = require(165                              ); // 165 = createReactNativeComponentClass
var merge = require(150    ); // 150 = merge
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

function arrayDiffer(a, b) {
  if (a == null || b == null) {
    return true;
  }
  if (a.length !== b.length) {
    return true;
  }
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return true;
    }
  }
  return false;
}

function fontAndLinesDiffer(a, b) {
  if (a === b) {
    return false;
  }
  if (a.font !== b.font) {
    if (a.font === null) {
      return true;
    }
    if (b.font === null) {
      return true;
    }

    if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
      return true;
    }
  }
  return arrayDiffer(a.lines, b.lines);
}

var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});

var NodeAttributes = {
  transform: { diff: arrayDiffer },
  opacity: true
};

var GroupAttributes = merge(NodeAttributes, {
  clipping: { diff: arrayDiffer }
});

var RenderableAttributes = merge(NodeAttributes, {
  fill: { diff: arrayDiffer },
  stroke: { diff: arrayDiffer },
  strokeWidth: true,
  strokeCap: true,
  strokeJoin: true,
  strokeDash: { diff: arrayDiffer }
});

var ShapeAttributes = merge(RenderableAttributes, {
  d: { diff: arrayDiffer }
});

var TextAttributes = merge(RenderableAttributes, {
  alignment: true,
  frame: { diff: fontAndLinesDiffer },
  path: { diff: arrayDiffer }
});

var NativeSurfaceView = createReactNativeComponentClass({
  validAttributes: SurfaceViewAttributes,
  uiViewClassName: 'ARTSurfaceView'
});

var NativeGroup = createReactNativeComponentClass({
  validAttributes: GroupAttributes,
  uiViewClassName: 'ARTGroup'
});

var NativeShape = createReactNativeComponentClass({
  validAttributes: ShapeAttributes,
  uiViewClassName: 'ARTShape'
});

var NativeText = createReactNativeComponentClass({
  validAttributes: TextAttributes,
  uiViewClassName: 'ARTText'
});

function childrenAsString(children) {
  if (!children) {
    return '';
  }
  if (typeof children === 'string') {
    return children;
  }
  if (children.length) {
    return children.join('\n');
  }
  return '';
}

var Surface = function (_React$Component) {
  babelHelpers.inherits(Surface, _React$Component);

  function Surface() {
    babelHelpers.classCallCheck(this, Surface);
    return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
  }

  babelHelpers.createClass(Surface, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { isInSurface: true };
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      return React.createElement(
        NativeSurfaceView,
        { style: [props.style, { width: w, height: h }], __source: {
            fileName: _jsxFileName,
            lineNumber: 155
          }
        },
        this.props.children
      );
    }
  }]);
  return Surface;
}(React.Component);

Surface.childContextTypes = {
  isInSurface: PropTypes.bool
};


function extractNumber(value, defaultValue) {
  if (value == null) {
    return defaultValue;
  }
  return +value;
}

var pooledTransform = new Transform();

function extractTransform(props) {
  var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
  var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;

  pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

  if (props.transform != null) {
    pooledTransform.transform(props.transform);
  }

  return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
}

function extractOpacity(props) {
  if (props.visible === false) {
    return 0;
  }
  if (props.opacity == null) {
    return 1;
  }
  return +props.opacity;
}

var Group = function (_React$Component2) {
  babelHelpers.inherits(Group, _React$Component2);

  function Group() {
    babelHelpers.classCallCheck(this, Group);
    return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
  }

  babelHelpers.createClass(Group, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
      return React.createElement(
        NativeGroup,
        {
          opacity: extractOpacity(props),
          transform: extractTransform(props), __source: {
            fileName: _jsxFileName,
            lineNumber: 227
          }
        },
        this.props.children
      );
    }
  }]);
  return Group;
}(React.Component);

Group.contextTypes = {
  isInSurface: PropTypes.bool.isRequired
};

var ClippingRectangle = function (_React$Component3) {
  babelHelpers.inherits(ClippingRectangle, _React$Component3);

  function ClippingRectangle() {
    babelHelpers.classCallCheck(this, ClippingRectangle);
    return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
  }

  babelHelpers.createClass(ClippingRectangle, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var x = extractNumber(props.x, 0);
      var y = extractNumber(props.y, 0);
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      var clipping = [x, y, w, h];

      var propsExcludingXAndY = merge(props);
      delete propsExcludingXAndY.x;
      delete propsExcludingXAndY.y;
      return React.createElement(
        NativeGroup,
        {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY), __source: {
            fileName: _jsxFileName,
            lineNumber: 249
          }
        },
        this.props.children
      );
    }
  }]);
  return ClippingRectangle;
}(React.Component);

var SOLID_COLOR = 0;
var LINEAR_GRADIENT = 1;
var RADIAL_GRADIENT = 2;
var PATTERN = 3;

function insertColorIntoArray(color, targetArray, atIndex) {
  var c = new Color(color);
  targetArray[atIndex + 0] = c.red / 255;
  targetArray[atIndex + 1] = c.green / 255;
  targetArray[atIndex + 2] = c.blue / 255;
  targetArray[atIndex + 3] = c.alpha;
}

function insertColorsIntoArray(stops, targetArray, atIndex) {
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
      i++;
    }
  } else {
    for (var offset in stops) {
      insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
      i++;
    }
  }
  return atIndex + i * 4;
}

function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
  var offsetNumber;
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      offsetNumber = i / (stops.length - 1) * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  } else {
    for (var offsetString in stops) {
      offsetNumber = +offsetString * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  }
  return atIndex + i;
}

function insertColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
}

function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
  lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
}

function applyBoundingBoxToBrushData(brushData, props) {
  var type = brushData[0];
  var width = +props.width;
  var height = +props.height;
  if (type === LINEAR_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
  } else if (type === RADIAL_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
    brushData[5] *= width;
    brushData[6] *= height;
  } else if (type === PATTERN) {}
}

function extractBrush(colorOrBrush, props) {
  if (colorOrBrush == null) {
    return null;
  }
  if (colorOrBrush._brush) {
    if (colorOrBrush._bb) {
      applyBoundingBoxToBrushData(colorOrBrush._brush, props);
      colorOrBrush._bb = false;
    }
    return colorOrBrush._brush;
  }
  var c = new Color(colorOrBrush);
  return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractColor(color) {
  if (color == null) {
    return null;
  }
  var c = new Color(color);
  return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractStrokeCap(strokeCap) {
  switch (strokeCap) {
    case 'butt':
      return 0;
    case 'square':
      return 2;
    default:
      return 1;}
}

function extractStrokeJoin(strokeJoin) {
  switch (strokeJoin) {
    case 'miter':
      return 0;
    case 'bevel':
      return 2;
    default:
      return 1;}
}

var Shape = function (_React$Component4) {
  babelHelpers.inherits(Shape, _React$Component4);

  function Shape() {
    babelHelpers.classCallCheck(this, Shape);
    return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
  }

  babelHelpers.createClass(Shape, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.d || childrenAsString(props.children);
      var d = (path instanceof Path ? path : new Path(path)).toJSON();
      return React.createElement(NativeShape, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        d: d,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 397
        }
      });
    }
  }]);
  return Shape;
}(React.Component);

var cachedFontObjectsFromString = {};

var fontFamilyPrefix = /^[\s"']*/;
var fontFamilySuffix = /[\s"']*$/;

function extractSingleFontFamily(fontFamilyString) {
  return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
}

function parseFontString(font) {
  if (cachedFontObjectsFromString.hasOwnProperty(font)) {
    return cachedFontObjectsFromString[font];
  }
  var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
  var match = regexp.exec(font);
  if (!match) {
    return null;
  }
  var fontFamily = extractSingleFontFamily(match[3]);
  var fontSize = +match[2] || 12;
  var isBold = /bold/.exec(match[1]);
  var isItalic = /italic/.exec(match[1]);
  cachedFontObjectsFromString[font] = {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: isBold ? 'bold' : 'normal',
    fontStyle: isItalic ? 'italic' : 'normal'
  };
  return cachedFontObjectsFromString[font];
}

function extractFont(font) {
  if (font == null) {
    return null;
  }
  if (typeof font === 'string') {
    return parseFontString(font);
  }
  var fontFamily = extractSingleFontFamily(font.fontFamily);
  var fontSize = +font.fontSize || 12;
  var fontWeight = font.fontWeight != null ? font.fontWeight.toString() : '400';
  return {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: fontWeight,
    fontStyle: font.fontStyle
  };
}

var newLine = /\n/g;
function extractFontAndLines(font, text) {
  return { font: extractFont(font), lines: text.split(newLine) };
}

function extractAlignment(alignment) {
  switch (alignment) {
    case 'right':
      return 1;
    case 'center':
      return 2;
    default:
      return 0;
  }
}

var Text = function (_React$Component5) {
  babelHelpers.inherits(Text, _React$Component5);

  function Text() {
    babelHelpers.classCallCheck(this, Text);
    return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  babelHelpers.createClass(Text, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.path;
      var textPath = path ? (path instanceof Path ? path : new Path(path)).toJSON() : null;
      var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
      return React.createElement(NativeText, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        alignment: extractAlignment(props.alignment),
        frame: textFrame,
        path: textPath,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 496
        }
      });
    }
  }]);
  return Text;
}(React.Component);

function LinearGradient(stops, x1, y1, x2, y2) {
  var type = LINEAR_GRADIENT;

  if (arguments.length < 5) {
    var angle = (x1 == null ? 270 : x1) * Math.PI / 180;

    var x = Math.cos(angle);
    var y = -Math.sin(angle);
    var l = (Math.abs(x) + Math.abs(y)) / 2;

    x *= l;y *= l;

    x1 = 0.5 - x;
    x2 = 0.5 + x;
    y1 = 0.5 - y;
    y2 = 0.5 + y;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [type, +x1, +y1, +x2, +y2];
  insertColorStopsIntoArray(stops, brushData, 5);
  this._brush = brushData;
}

function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
  if (ry == null) {
    ry = rx;
  }
  if (cx == null) {
    cx = fx;
  }
  if (cy == null) {
    cy = fy;
  }
  if (fx == null) {
    fx = fy = rx = ry = cx = cy = 0.5;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
  insertDoubleColorStopsIntoArray(stops, brushData, 7);
  this._brush = brushData;
}

function Pattern(url, width, height, left, top) {
  this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
}

var ReactART = {
  LinearGradient: LinearGradient,
  RadialGradient: RadialGradient,
  Pattern: Pattern,
  Transform: Transform,
  Path: Path,
  Surface: Surface,
  Group: Group,
  ClippingRectangle: ClippingRectangle,
  Shape: Shape,
  Text: Text
};

module.exports = ReactART;
}, 176, null, "ReactNativeART");
__d(/* art/core/color.js */function(global, require, module, exports) {var colors = {
	maroon: '#800000', red: '#ff0000', orange: '#ffA500', yellow: '#ffff00', olive: '#808000',
	purple: '#800080', fuchsia: "#ff00ff", white: '#ffffff', lime: '#00ff00', green: '#008000',
	navy: '#000080', blue: '#0000ff', aqua: '#00ffff', teal: '#008080',
	black: '#000000', silver: '#c0c0c0', gray: '#808080'
};

var map = function map(array, fn) {
	var results = [];
	for (var i = 0, l = array.length; i < l; i++) {
		results[i] = fn(array[i], i);
	}return results;
};

var Color = function Color(color, type) {

	if (color.isColor) {

		this.red = color.red;
		this.green = color.green;
		this.blue = color.blue;
		this.alpha = color.alpha;
	} else {

		var namedColor = colors[color];
		if (namedColor) {
			color = namedColor;
			type = 'hex';
		}

		switch (typeof color) {
			case 'string':
				if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';break;
			case 'object':
				type = type || 'rgb';color = color.toString();break;
			case 'number':
				type = 'hex';color = color.toString(16);break;
		}

		color = Color['parse' + type.toUpperCase()](color);
		this.red = color[0];
		this.green = color[1];
		this.blue = color[2];
		this.alpha = color[3];
	}

	this.isColor = true;
};

var limit = function limit(number, min, max) {
	return Math.min(max, Math.max(min, number));
};

var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

Color.parseRGB = function (color) {
	return map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
		return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
	});
};

Color.parseHEX = function (color) {
	if (color.length == 1) color = color + color + color;
	return map(color.match(hexMatch).slice(1), function (bit, i) {
		if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
		return parseInt(bit.length == 1 ? bit + bit : bit, 16);
	});
};

Color.parseHSB = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var a = hsb[3];
	var br = Math.round(hsb[2] / 100 * 255);
	if (hsb[1] == 0) return [br, br, br, a];

	var hue = hsb[0];
	var f = hue % 60;
	var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
	var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
	var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

	switch (Math.floor(hue / 60)) {
		case 0:
			return [br, t, p, a];
		case 1:
			return [q, br, p, a];
		case 2:
			return [p, br, t, a];
		case 3:
			return [p, q, br, a];
		case 4:
			return [t, p, br, a];
		default:
			return [br, p, q, a];
	}
};

Color.parseHSL = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var h = hsb[0] / 60;
	var s = hsb[1] / 100;
	var l = hsb[2] / 100;
	var a = hsb[3];

	var c = (1 - Math.abs(2 * l - 1)) * s;
	var x = c * (1 - Math.abs(h % 2 - 1));
	var m = l - c / 2;

	var p = Math.round((c + m) * 255);
	var q = Math.round((x + m) * 255);
	var t = Math.round(m * 255);

	switch (Math.floor(h)) {
		case 0:
			return [p, q, t, a];
		case 1:
			return [q, p, t, a];
		case 2:
			return [t, p, q, a];
		case 3:
			return [t, q, p, a];
		case 4:
			return [q, t, p, a];
		default:
			return [p, t, q, a];
	}
};

var toString = function toString(type, array) {
	if (array[3] != 1) type += 'a';else array.pop();
	return type + '(' + array.join(', ') + ')';
};

Color.prototype = {

	toHSB: function toHSB(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / max : 0,
		    brightness = max / 255;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];

		return array ? hsb : toString('hsb', hsb);
	},

	toHSL: function toHSL(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
		    lightness = (max + min) / 512;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];

		return array ? hsl : toString('hsl', hsl);
	},

	toHEX: function toHEX(array) {

		var a = this.alpha;
		var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;

		var hex = map([this.red, this.green, this.blue], function (bit) {
			bit = bit.toString(16);
			return bit.length == 1 ? '0' + bit : bit;
		});

		return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
	},

	toRGB: function toRGB(array) {
		var rgb = [this.red, this.green, this.blue, this.alpha];
		return array ? rgb : toString('rgb', rgb);
	}

};

Color.prototype.toString = Color.prototype.toRGB;

Color.hex = function (hex) {
	return new Color(hex, 'hex');
};

if (this.hex == null) this.hex = Color.hex;

Color.hsb = function (h, s, b, a) {
	return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
};

if (this.hsb == null) this.hsb = Color.hsb;

Color.hsl = function (h, s, l, a) {
	return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
};

if (this.hsl == null) this.hsl = Color.hsl;

Color.rgb = function (r, g, b, a) {
	return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
};

if (this.rgb == null) this.rgb = Color.rgb;

Color.detach = function (color) {
	color = new Color(color);
	return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
};

module.exports = Color;
}, 177, null, "art/core/color.js");
__d(/* ARTSerializablePath */function(global, require, module, exports) {
'use strict';

var Class = require(179                ); // 179 = art/core/class.js
var Path = require(180               ); // 180 = art/core/path.js

var MOVE_TO = 0;
var CLOSE = 1;
var LINE_TO = 2;
var CURVE_TO = 3;
var ARC = 4;

var SerializablePath = Class(Path, {

  initialize: function initialize(path) {
    this.reset();
    if (path instanceof SerializablePath) {
      this.path = path.path.slice(0);
    } else if (path) {
      if (path.applyToPath) {
        path.applyToPath(this);
      } else {
        this.push(path);
      }
    }
  },

  onReset: function onReset() {
    this.path = [];
  },

  onMove: function onMove(sx, sy, x, y) {
    this.path.push(MOVE_TO, x, y);
  },

  onLine: function onLine(sx, sy, x, y) {
    this.path.push(LINE_TO, x, y);
  },

  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
    this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
  },

  _arcToBezier: Path.prototype.onArc,

  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
    if (rx !== ry || rotation) {
      return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
    }
    this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
  },

  onClose: function onClose() {
    this.path.push(CLOSE);
  },

  toJSON: function toJSON() {
    return this.path;
  }

});

module.exports = SerializablePath;
}, 178, null, "ARTSerializablePath");
__d(/* art/core/class.js */function(global, require, module, exports) {module.exports = function (mixins) {
	var proto = {};
	for (var i = 0, l = arguments.length; i < l; i++) {
		var mixin = arguments[i];
		if (typeof mixin == 'function') mixin = mixin.prototype;
		for (var key in mixin) {
			proto[key] = mixin[key];
		}
	}
	if (!proto.initialize) proto.initialize = function () {};
	proto.constructor = function (a, b, c, d, e, f, g, h) {
		return new proto.initialize(a, b, c, d, e, f, g, h);
	};
	proto.constructor.prototype = proto.initialize.prototype = proto;
	return proto.constructor;
};
}, 179, null, "art/core/class.js");
__d(/* art/core/path.js */function(global, require, module, exports) {var Class = require(179      ); // 179 = ./class

module.exports = Class({

	initialize: function initialize(path) {
		this.reset().push(path);
	},

	push: function push() {
		var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
		if (!p) return this;

		var last,
		    cmd = p[0],
		    i = 1;
		while (cmd) {
			switch (cmd) {
				case 'm':
					this.move(p[i++], p[i++]);break;
				case 'l':
					this.line(p[i++], p[i++]);break;
				case 'c':
					this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 's':
					this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'q':
					this.curve(p[i++], p[i++], p[i++], p[i++]);break;
				case 't':
					this.curve(p[i++], p[i++]);break;
				case 'a':
					this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'h':
					this.line(p[i++], 0);break;
				case 'v':
					this.line(0, p[i++]);break;

				case 'M':
					this.moveTo(p[i++], p[i++]);break;
				case 'L':
					this.lineTo(p[i++], p[i++]);break;
				case 'C':
					this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 'S':
					this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'Q':
					this.curveTo(p[i++], p[i++], p[i++], p[i++]);break;
				case 'T':
					this.curveTo(p[i++], p[i++]);break;
				case 'A':
					this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'H':
					this.lineTo(p[i++], this.penY);break;
				case 'V':
					this.lineTo(this.penX, p[i++]);break;

				case 'Z':case 'z':
					this.close();break;
				default:
					cmd = last;i--;continue;
			}

			last = cmd;
			if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
			cmd = p[i++];
		}
		return this;
	},

	reset: function reset() {
		this.penX = this.penY = 0;
		this.penDownX = this.penDownY = null;
		this._pivotX = this._pivotY = 0;
		this.onReset();
		return this;
	},

	move: function move(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
		return this;
	},
	moveTo: function moveTo(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	line: function line(x, y) {
		return this.lineTo(this.penX + +x, this.penY + +y);
	},
	lineTo: function lineTo(x, y) {
		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
	},
	curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		if (c2x == null) {
			c2x = +c1x;c2y = +c1y;
			c1x = x * 2 - (this._pivotX || 0);c1y = y * 2 - (this._pivotY || 0);
		}
		if (ex == null) {
			this._pivotX = +c1x;this._pivotY = +c1y;
			ex = +c2x;ey = +c2y;
			c2x = (ex + +c1x * 2) / 3;c2y = (ey + +c1y * 2) / 3;
			c1x = (x + +c1x * 2) / 3;c1y = (y + +c1y * 2) / 3;
		} else {
			this._pivotX = +c2x;this._pivotY = +c2y;
		}
		if (this.penDownX == null) {
			this.penDownX = x;this.penDownY = y;
		}
		this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
		return this;
	},

	arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
		return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
	},
	arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
		ry = Math.abs(+ry || +rx || +y - this.penY);
		rx = Math.abs(+rx || +x - this.penX);

		if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);

		var tX = this.penX,
		    tY = this.penY,
		    clockwise = !+counterClockwise,
		    large = !!+outer;

		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad);
		x -= tX;y -= tY;

		var cx = cos * x / 2 + sin * y / 2,
		    cy = -sin * x / 2 + cos * y / 2,
		    rxry = rx * rx * ry * ry,
		    rycx = ry * ry * cx * cx,
		    rxcy = rx * rx * cy * cy,
		    a = rxry - rxcy - rycx;

		if (a < 0) {
			a = Math.sqrt(1 - a / rxry);
			rx *= a;ry *= a;
			cx = x / 2;cy = y / 2;
		} else {
			a = Math.sqrt(a / (rxcy + rycx));
			if (large == clockwise) a = -a;
			var cxd = -a * cy * rx / ry,
			    cyd = a * cx * ry / rx;
			cx = cos * cxd - sin * cyd + x / 2;
			cy = sin * cxd + cos * cyd + y / 2;
		}

		var xx = cos / rx,
		    yx = sin / rx,
		    xy = -sin / ry,
		    yy = cos / ry;

		var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
		    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));

		cx += tX;cy += tY;
		x += tX;y += tY;

		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
		return this;
	},

	counterArc: function counterArc(x, y, rx, ry, outer) {
		return this.arc(x, y, rx, ry, outer, true);
	},
	counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
		return this.arcTo(x, y, rx, ry, outer, true);
	},

	close: function close() {
		if (this.penDownX != null) {
			this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
			this.penDownX = null;
		}
		return this;
	},

	onReset: function onReset() {},

	onMove: function onMove(sx, sy, ex, ey) {},

	onLine: function onLine(sx, sy, ex, ey) {
		this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
	},

	onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
		var gx = ex - sx,
		    gy = ey - sy,
		    g = gx * gx + gy * gy,
		    v1,
		    v2,
		    cx,
		    cy,
		    u;

		cx = c1x - sx;cy = c1y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v1 = cx * cx + cy * cy;

		cx = c2x - sx;cy = c2y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v2 = cx * cx + cy * cy;

		if (v1 < 0.01 && v2 < 0.01) {
			this.onLine(sx, sy, ex, ey);
			return;
		}

		if (isNaN(v1) || isNaN(v2)) {
			throw new Error('Bad input');
		}

		var s1x = (c1x + c2x) * 0.5,
		    s1y = (c1y + c2y) * 0.5,
		    l1x = (c1x + sx) * 0.5,
		    l1y = (c1y + sy) * 0.5,
		    l2x = (l1x + s1x) * 0.5,
		    l2y = (l1y + s1y) * 0.5,
		    r2x = (ex + c2x) * 0.5,
		    r2y = (ey + c2y) * 0.5,
		    r1x = (r2x + s1x) * 0.5,
		    r1y = (r2y + s1y) * 0.5,
		    l2r1x = (l2x + r1x) * 0.5,
		    l2r1y = (l2y + r1y) * 0.5;

		this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
		this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
	},

	onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad),
		    xx = cos * rx,
		    yx = -sin * ry,
		    xy = sin * rx,
		    yy = cos * ry;

		var arc = ea - sa;
		if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;

		var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
		    step = arc / n,
		    k = 4 / 3 * Math.tan(step / 4);

		var x = Math.cos(sa),
		    y = Math.sin(sa);

		for (var i = 0; i < n; i++) {
			var cp1x = x - k * y,
			    cp1y = y + k * x;

			sa += step;
			x = Math.cos(sa);y = Math.sin(sa);

			var cp2x = x + k * y,
			    cp2y = y - k * x;

			this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
		}
	},

	onClose: function onClose(sx, sy, ex, ey) {
		this.onLine(sx, sy, ex, ey);
	}

});
}, 180, null, "art/core/path.js");
__d(/* art/core/transform.js */function(global, require, module, exports) {var Class = require(179      ); // 179 = ./class

function Transform(xx, yx, xy, yy, x, y) {
	if (xx && typeof xx == 'object') {
		yx = xx.yx;yy = xx.yy;y = xx.y;
		xy = xx.xy;x = xx.x;xx = xx.xx;
	}
	this.xx = xx == null ? 1 : xx;
	this.yx = yx || 0;
	this.xy = xy || 0;
	this.yy = yy == null ? 1 : yy;
	this.x = (x == null ? this.x : x) || 0;
	this.y = (y == null ? this.y : y) || 0;
	this._transform();
	return this;
};

module.exports = Class({

	initialize: Transform,

	_transform: function _transform() {},

	xx: 1, yx: 0, x: 0,
	xy: 0, yy: 1, y: 0,

	transform: function transform(xx, yx, xy, yy, x, y) {
		var m = this;
		if (xx && typeof xx == 'object') {
			yx = xx.yx;yy = xx.yy;y = xx.y;
			xy = xx.xy;x = xx.x;xx = xx.xx;
		}
		if (!x) x = 0;
		if (!y) y = 0;
		return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
	},

	transformTo: Transform,

	translate: function translate(x, y) {
		return this.transform(1, 0, 0, 1, x, y);
	},

	move: function move(x, y) {
		this.x += x || 0;
		this.y += y || 0;
		this._transform();
		return this;
	},

	scale: function scale(x, y) {
		if (y == null) y = x;
		return this.transform(x, 0, 0, y, 0, 0);
	},

	rotate: function rotate(deg, x, y) {
		if (x == null || y == null) {
			x = (this.left || 0) + (this.width || 0) / 2;
			y = (this.top || 0) + (this.height || 0) / 2;
		}

		var rad = deg * Math.PI / 180,
		    sin = Math.sin(rad),
		    cos = Math.cos(rad);

		this.transform(1, 0, 0, 1, x, y);
		var m = this;

		return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
	},

	moveTo: function moveTo(x, y) {
		var m = this;
		return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
	},

	rotateTo: function rotateTo(deg, x, y) {
		var m = this;
		var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
		return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
	},

	scaleTo: function scaleTo(x, y) {
		var m = this;

		var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
		m.xx /= h;m.yx /= h;

		h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
		m.yy /= h;m.xy /= h;

		return this.scale(x, y);
	},

	resizeTo: function resizeTo(width, height) {
		var w = this.width,
		    h = this.height;
		if (!w || !h) return this;
		return this.scaleTo(width / w, height / h);
	},

	inversePoint: function inversePoint(x, y) {
		var a = this.xx,
		    b = this.yx,
		    c = this.xy,
		    d = this.yy,
		    e = this.x,
		    f = this.y;
		var det = b * c - a * d;
		if (det == 0) return null;
		return {
			x: (d * (e - x) + c * (y - f)) / det,
			y: (a * (f - y) + b * (x - e)) / det
		};
	},

	point: function point(x, y) {
		var m = this;
		return {
			x: m.xx * x + m.xy * y + m.x,
			y: m.yx * x + m.yy * y + m.y
		};
	}

});
}, 181, null, "art/core/transform.js");
__d(/* Button */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Button.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableNativeFeedback = require(191                      ); // 191 = TouchableNativeFeedback
var TouchableOpacity = require(192               ); // 192 = TouchableOpacity
var View = require(131   ); // 131 = View

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var Button = function (_React$Component) {
  babelHelpers.inherits(Button, _React$Component);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          accessibilityLabel = _props.accessibilityLabel,
          color = _props.color,
          onPress = _props.onPress,
          title = _props.title,
          disabled = _props.disabled,
          testID = _props.testID;

      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      if (color) {
        if (Platform.OS === 'ios') {
          textStyles.push({ color: color });
        } else {
          buttonStyles.push({ backgroundColor: color });
        }
      }
      var accessibilityTraits = ['button'];
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
        accessibilityTraits.push('disabled');
      }
      invariant(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
      return React.createElement(
        Touchable,
        {
          accessibilityComponentType: 'button',
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: accessibilityTraits,
          testID: testID,
          disabled: disabled,
          onPress: onPress, __source: {
            fileName: _jsxFileName,
            lineNumber: 120
          }
        },
        React.createElement(
          View,
          { style: buttonStyles, __source: {
              fileName: _jsxFileName,
              lineNumber: 127
            }
          },
          React.createElement(
            Text,
            { style: textStyles, disabled: disabled, __source: {
                fileName: _jsxFileName,
                lineNumber: 128
              }
            },
            formattedTitle
          )
        )
      );
    }
  }]);
  return Button;
}(React.Component);

Button.propTypes = {
  title: PropTypes.string.isRequired,

  accessibilityLabel: PropTypes.string,

  color: ColorPropType,

  disabled: PropTypes.bool,

  onPress: PropTypes.func.isRequired,

  testID: PropTypes.string
};


var styles = StyleSheet.create({
  button: Platform.select({
    ios: {},
    android: {
      elevation: 4,

      backgroundColor: '#2196F3',
      borderRadius: 2
    }
  }),
  text: Platform.select({
    ios: {
      color: '#007AFF',
      textAlign: 'center',
      padding: 8,
      fontSize: 18
    },
    android: {
      color: 'white',
      textAlign: 'center',
      padding: 8,
      fontWeight: '500'
    }
  }),
  buttonDisabled: Platform.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: Platform.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});

module.exports = Button;
}, 182, null, "Button");
__d(/* Text */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Text/Text.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType
var TextStylePropTypes = require(141                 ); // 141 = TextStylePropTypes
var Touchable = require(184        ); // 184 = Touchable

var createReactClass = require(157                 ); // 157 = create-react-class
var createReactNativeComponentClass = require(165                              ); // 165 = createReactNativeComponentClass
var mergeFast = require(190        ); // 190 = mergeFast
var processColor = require(115           ); // 115 = processColor

var stylePropType = StyleSheetPropType(TextStylePropTypes);

var viewConfig = {
  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    disabled: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true
  }),
  uiViewClassName: 'RCTText'
};

var Text = createReactClass({
  displayName: 'Text',
  propTypes: {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),

    numberOfLines: PropTypes.number,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onLayout: PropTypes.func,

    onPress: PropTypes.func,

    onLongPress: PropTypes.func,

    pressRetentionOffset: EdgeInsetsPropType,

    selectable: PropTypes.bool,

    selectionColor: ColorPropType,

    suppressHighlighting: PropTypes.bool,
    style: stylePropType,

    testID: PropTypes.string,

    nativeID: PropTypes.string,

    allowFontScaling: PropTypes.bool,

    accessible: PropTypes.bool,

    adjustsFontSizeToFit: PropTypes.bool,

    minimumFontScale: PropTypes.number,

    disabled: PropTypes.bool
  },
  getDefaultProps: function getDefaultProps() {
    return {
      accessible: true,
      allowFontScaling: true,
      ellipsizeMode: 'tail',
      disabled: false
    };
  },

  getInitialState: function getInitialState() {
    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false
    });
  },
  mixins: [NativeMethodsMixin],
  viewConfig: viewConfig,
  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },
  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  _handlers: null,
  _hasPressHandler: function _hasPressHandler() {
    return !!this.props.onPress || !!this.props.onLongPress;
  },

  touchableHandleActivePressIn: null,
  touchableHandleActivePressOut: null,
  touchableHandlePress: null,
  touchableHandleLongPress: null,
  touchableGetPressRectOffset: null,
  render: function render() {
    var _this = this;

    var newProps = this.props;
    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
      if (!this._handlers) {
        this._handlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();
            var setResponder = shouldSetFromProps || _this._hasPressHandler();
            if (setResponder && !_this.touchableHandleActivePressIn) {
              for (var key in Touchable.Mixin) {
                if (typeof Touchable.Mixin[key] === 'function') {
                  _this[key] = Touchable.Mixin[key].bind(_this);
                }
              }
              _this.touchableHandleActivePressIn = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: true
                });
              };

              _this.touchableHandleActivePressOut = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: false
                });
              };

              _this.touchableHandlePress = function (e) {
                _this.props.onPress && _this.props.onPress(e);
              };

              _this.touchableHandleLongPress = function (e) {
                _this.props.onLongPress && _this.props.onLongPress(e);
              };

              _this.touchableGetPressRectOffset = function () {
                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
              };
            }

            return setResponder;
          },
          onResponderGrant: function (e, dispatchID) {
            this.touchableHandleResponderGrant(e, dispatchID);
            this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
          }.bind(this),
          onResponderMove: function (e) {
            this.touchableHandleResponderMove(e);
            this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
          }.bind(this),
          onResponderRelease: function (e) {
            this.touchableHandleResponderRelease(e);
            this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
          }.bind(this),
          onResponderTerminate: function (e) {
            this.touchableHandleResponderTerminate(e);
            this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
          }.bind(this),
          onResponderTerminationRequest: function () {
            var allowTermination = this.touchableHandleResponderTerminationRequest();
            if (allowTermination && this.props.onResponderTerminationRequest) {
              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
            }
            return allowTermination;
          }.bind(this)
        };
      }
      newProps = babelHelpers.extends({}, this.props, this._handlers, {
        isHighlighted: this.state.isHighlighted
      });
    }
    if (newProps.selectionColor != null) {
      newProps = babelHelpers.extends({}, newProps, {
        selectionColor: processColor(newProps.selectionColor)
      });
    }
    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
      newProps = babelHelpers.extends({}, newProps, {
        style: [this.props.style, { color: 'magenta' }]
      });
    }
    if (this.context.isInAParentText) {
      return React.createElement(RCTVirtualText, babelHelpers.extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 368
        }
      }));
    } else {
      return React.createElement(RCTText, babelHelpers.extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 370
        }
      }));
    }
  }
});

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var RCTText = createReactNativeComponentClass(viewConfig);
var RCTVirtualText = RCTText;

if (Platform.OS === 'android') {
  RCTVirtualText = createReactNativeComponentClass({
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true
    }),
    uiViewClassName: 'RCTVirtualText'
  });
}

module.exports = Text;
}, 183, null, "Text");
__d(/* Touchable */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Touchable/Touchable.js';
var BoundingDimensions = require(185                 ); // 185 = BoundingDimensions
var Platform = require(38        ); // 38 = Platform
var Position = require(187       ); // 187 = Position
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var TVEventHandler = require(188             ); // 188 = TVEventHandler
var TouchEventUtils = require(189                       ); // 189 = fbjs/lib/TouchEventUtils
var UIManager = require(125        ); // 125 = UIManager
var View = require(131   ); // 131 = View

var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror
var normalizeColor = require(63              ); // 63 = normalizeColor

var States = keyMirror({
  NOT_RESPONDER: null,
  RESPONDER_INACTIVE_PRESS_IN: null,
  RESPONDER_INACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_PRESS_IN: null,
  RESPONDER_ACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_LONG_PRESS_IN: null,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
  ERROR: null
});

var IsActive = {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
};

var IsPressingIn = {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var IsLongPressingIn = {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var Signals = keyMirror({
  DELAY: null,
  RESPONDER_GRANT: null,
  RESPONDER_RELEASE: null,
  RESPONDER_TERMINATED: null,
  ENTER_PRESS_RECT: null,
  LEAVE_PRESS_RECT: null,
  LONG_PRESS_DETECTED: null
});

var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};

var HIGHLIGHT_DELAY_MS = 130;

var PRESS_EXPAND_PX = 20;

var LONG_PRESS_THRESHOLD = 500;

var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;

var LONG_PRESS_ALLOWED_MOVEMENT = 10;

var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!Platform.isTVOS) {
      return;
    }

    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      var myTag = ReactNative.findNodeHandle(cmp);
      evt.dispatchConfig = {};
      if (myTag === evt.tag) {
        if (evt.eventType === 'focus') {
          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
        } else if (evt.eventType === 'blur') {
          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
        } else if (evt.eventType === 'select') {
          cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
        }
      }
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },

  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: { touchState: undefined, responderID: null }
    };
  },

  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },

  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },

  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },

  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;

    e.persist();

    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;

    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;
    this._receiveSignal(Signals.RESPONDER_GRANT, e);
    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }

    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },

  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },

  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },

  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
      return;
    }

    if (!this.state.touchable.positionOnActivate) {
      return;
    }

    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };

    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;

    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

    if (hitSlop) {
      pressExpandLeft += hitSlop.left;
      pressExpandTop += hitSlop.top;
      pressExpandRight += hitSlop.right;
      pressExpandBottom += hitSlop.bottom;
    }

    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;

    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }

    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
    if (isTouchWithinActive) {
      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();
      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },

  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var tag = this.state.touchable.responderID;
    if (tag == null) {
      return;
    }

    UIManager.measure(tag, this._handleQueryLayout);
  },

  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    if (!l && !t && !w && !h && !globalX && !globalY) {
      return;
    }
    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
  },

  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;
    this._receiveSignal(Signals.DELAY, e);
  },

  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;
    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
    } else {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },

  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];
    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }
    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
    }
    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
    }
    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);
      this.state.touchable.touchState = nextState;
    }
  },

  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },

  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },

  _savePressInLocation: function _savePressInLocation(e) {
    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = { pageX: pageX, pageY: pageY, locationX: locationX, locationY: locationY };
  },

  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },

  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);
    var newIsHighlight = this._isHighlight(nextState);

    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }

    if (!IsActive[curState] && IsActive[nextState]) {
      this._remeasureMetricsOnActivation();
    }

    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }

    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }

    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());

      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);
          this._endHighlight(e);
        }
        this.touchableHandlePress(e);
      }
    }

    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },

  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);
    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },

  _endHighlight: function _endHighlight(e) {
    var _this = this;

    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  }

};

var Touchable = {
  Mixin: TouchableMixin,
  TOUCH_TARGET_DEBUG: false,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (!Touchable.TOUCH_TARGET_DEBUG) {
      return null;
    }
    if (!__DEV__) {
      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
    }
    var debugHitSlopStyle = {};
    hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };
    for (var key in hitSlop) {
      debugHitSlopStyle[key] = -hitSlop[key];
    }
    var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
    return React.createElement(View, {
      pointerEvents: 'none',
      style: babelHelpers.extends({
        position: 'absolute',
        borderColor: hexColor.slice(0, -2) + '55',
        borderWidth: 1,
        borderStyle: 'dashed',
        backgroundColor: hexColor.slice(0, -2) + '0F' }, debugHitSlopStyle),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 793
      }
    });
  }
};

module.exports = Touchable;
}, 184, null, "Touchable");
__d(/* BoundingDimensions */function(global, require, module, exports) {

'use strict';

var PooledClass = require(186          ); // 186 = PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function BoundingDimensions(width, height) {
  this.width = width;
  this.height = height;
}

BoundingDimensions.prototype.destructor = function () {
  this.width = null;
  this.height = null;
};

BoundingDimensions.getPooledFromElement = function (element) {
  return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};

PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);

module.exports = BoundingDimensions;
}, 185, null, "BoundingDimensions");
__d(/* PooledClass */function(global, require, module, exports) {

'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}, 186, null, "PooledClass");
__d(/* Position */function(global, require, module, exports) {

'use strict';

var PooledClass = require(186          ); // 186 = PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function Position(left, top) {
  this.left = left;
  this.top = top;
}

Position.prototype.destructor = function () {
  this.left = null;
  this.top = null;
};

PooledClass.addPoolingTo(Position, twoArgumentPooler);

module.exports = Position;
}, 187, null, "Position");
__d(/* TVEventHandler */function(global, require, module, exports) {
'use strict';

var React = require(132    ); // 132 = React
var TVNavigationEventEmitter = require(30             ).TVNavigationEventEmitter; // 30 = NativeModules
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter

function TVEventHandler() {
  this.__nativeTVNavigationEventListener = null;
  this.__nativeTVNavigationEventEmitter = null;
}

TVEventHandler.prototype.enable = function (component, callback) {
  if (!TVNavigationEventEmitter) {
    return;
  }

  this.__nativeTVNavigationEventEmitter = new NativeEventEmitter(TVNavigationEventEmitter);
  this.__nativeTVNavigationEventListener = this.__nativeTVNavigationEventEmitter.addListener('onTVNavEvent', function (data) {
    if (callback) {
      callback(component, data);
    }
  });
};

TVEventHandler.prototype.disable = function () {
  if (this.__nativeTVNavigationEventListener) {
    this.__nativeTVNavigationEventListener.remove();
    delete this.__nativeTVNavigationEventListener;
  }
  if (this.__nativeTVNavigationEventEmitter) {
    delete this.__nativeTVNavigationEventEmitter;
  }
};

module.exports = TVEventHandler;
}, 188, null, "TVEventHandler");
__d(/* fbjs/lib/TouchEventUtils.js */function(global, require, module, exports) {"use strict";

var TouchEventUtils = {
  extractSingleTouch: function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  }
};

module.exports = TouchEventUtils;
}, 189, null, "fbjs/lib/TouchEventUtils.js");
__d(/* mergeFast */function(global, require, module, exports) {
'use strict';

var mergeFast = function mergeFast(one, two) {
  var ret = {};
  for (var keyOne in one) {
    ret[keyOne] = one[keyOne];
  }
  for (var keyTwo in two) {
    ret[keyTwo] = two[keyTwo];
  }
  return ret;
};

module.exports = mergeFast;
}, 190, null, "mergeFast");
__d(/* TouchableNativeFeedback */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Touchable/TouchableNativeFeedback.ios.js';
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(131   ); // 131 = View

var DummyTouchableNativeFeedback = function (_React$Component) {
  babelHelpers.inherits(DummyTouchableNativeFeedback, _React$Component);

  function DummyTouchableNativeFeedback() {
    babelHelpers.classCallCheck(this, DummyTouchableNativeFeedback);
    return babelHelpers.possibleConstructorReturn(this, (DummyTouchableNativeFeedback.__proto__ || Object.getPrototypeOf(DummyTouchableNativeFeedback)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyTouchableNativeFeedback, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.container, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        },
        React.createElement(
          Text,
          { style: styles.info, __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          'TouchableNativeFeedback is not supported on this platform!'
        )
      );
    }
  }]);
  return DummyTouchableNativeFeedback;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    height: 100,
    width: 300,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center',
    margin: 10
  },
  info: {
    color: '#333333',
    margin: 20
  }
});

module.exports = DummyTouchableNativeFeedback;
}, 191, null, "TouchableNativeFeedback");
__d(/* TouchableOpacity */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js';


var Animated = require(193       ); // 193 = Animated
var Easing = require(202     ); // 202 = Easing
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable
var TouchableWithoutFeedback = require(218                       ); // 218 = TouchableWithoutFeedback

var createReactClass = require(157                 ); // 157 = create-react-class
var ensurePositiveDelayProps = require(219                       ); // 219 = ensurePositiveDelayProps
var flattenStyle = require(119           ); // 119 = flattenStyle

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableOpacity = createReactClass({
  displayName: 'TouchableOpacity',
  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,

    tvParallaxProperties: PropTypes.object
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      activeOpacity: 0.2
    };
  },

  getInitialState: function getInitialState() {
    return babelHelpers.extends({}, this.touchableGetInitialState(), {
      anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
    });
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  setOpacityTo: function setOpacityTo(value, duration) {
    Animated.timing(this.state.anim, {
      toValue: value,
      duration: duration,
      easing: Easing.inOut(Easing.quad),
      useNativeDriver: true
    }).start();
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    if (e.dispatchConfig.registrationName === 'onResponderGrant') {
      this._opacityActive(0);
    } else {
      this._opacityActive(150);
    }
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this._opacityInactive(250);
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _opacityActive: function _opacityActive(duration) {
    this.setOpacityTo(this.props.activeOpacity, duration);
  },

  _opacityInactive: function _opacityInactive(duration) {
    this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
  },

  _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
    var childStyle = flattenStyle(this.props.style) || {};
    return childStyle.opacity == undefined ? 1 : childStyle.opacity;
  },

  render: function render() {
    return React.createElement(
      Animated.View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        style: [this.props.style, { opacity: this.state.anim }],
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate, __source: {
          fileName: _jsxFileName,
          lineNumber: 173
        }
      },
      this.props.children,
      Touchable.renderDebugView({ color: 'cyan', hitSlop: this.props.hitSlop })
    );
  }
});

module.exports = TouchableOpacity;
}, 192, null, "TouchableOpacity");
__d(/* Animated */function(global, require, module, exports) {
'use strict';

var AnimatedImplementation = require(194                     ); // 194 = AnimatedImplementation
var Image = require(204    ); // 204 = Image
var Text = require(183   ); // 183 = Text
var View = require(131   ); // 131 = View

var AnimatedScrollView = void 0;

var Animated = {
  View: AnimatedImplementation.createAnimatedComponent(View),
  Text: AnimatedImplementation.createAnimatedComponent(Text),
  Image: AnimatedImplementation.createAnimatedComponent(Image),
  get ScrollView() {
    if (!AnimatedScrollView) {
      AnimatedScrollView = AnimatedImplementation.createAnimatedComponent(require(206         )); // 206 = ScrollView
    }
    return AnimatedScrollView;
  }
};

babelHelpers.extends(Animated, AnimatedImplementation);

module.exports = Animated;
}, 193, null, "Animated");
__d(/* AnimatedImplementation */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Animated/src/AnimatedImplementation.js';
var InteractionManager = require(195                 ); // 195 = InteractionManager
var Interpolation = require(197            ); // 197 = Interpolation
var NativeAnimatedHelper = require(198                   ); // 198 = NativeAnimatedHelper
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var Set = require(79   ); // 79 = Set
var SpringConfig = require(199           ); // 199 = SpringConfig
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var flattenStyle = require(119           ); // 119 = flattenStyle
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var requestAnimationFrame = require(200                             ); // 200 = fbjs/lib/requestAnimationFrame

var NativeAnimatedAPI = NativeAnimatedHelper.API;

var warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver && !NativeAnimatedHelper.isNativeAnimatedAvailable()) {
    if (!warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      warnedMissingNativeAnimated = true;
    }
    return false;
  }

  return config.useNativeDriver || false;
}

var Animated = function () {
  function Animated() {
    babelHelpers.classCallCheck(this, Animated);
  }

  babelHelpers.createClass(Animated, [{
    key: '__attach',
    value: function __attach() {}
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this.__nativeTag != null) {
        NativeAnimatedAPI.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: '__getValue',
    value: function __getValue() {}
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {}
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {}
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return [];
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        throw new Error('This node cannot be made a "native" animated node');
      }
    }
  }, {
    key: '__getNativeTag',
    value: function __getNativeTag() {
      NativeAnimatedHelper.assertNativeAnimatedModule();
      invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
      if (this.__nativeTag == null) {
        var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
        NativeAnimatedAPI.createAnimatedNode(nativeTag, this.__getNativeConfig());
        this.__nativeTag = nativeTag;
      }
      return this.__nativeTag;
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.__getValue();
    }
  }]);
  return Animated;
}();

var Animation = function () {
  function Animation() {
    babelHelpers.classCallCheck(this, Animation);
  }

  babelHelpers.createClass(Animation, [{
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: 'stop',
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedAPI.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: '__debouncedOnEnd',
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: '__startNativeAnimation',
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedAPI.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

var AnimatedWithChildren = function (_Animated) {
  babelHelpers.inherits(AnimatedWithChildren, _Animated);

  function AnimatedWithChildren() {
    babelHelpers.classCallCheck(this, AnimatedWithChildren);

    var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

    _this._children = [];
    return _this;
  }

  babelHelpers.createClass(AnimatedWithChildren, [{
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var child = _ref;

          child.__makeNative();
          NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {
      if (this._children.length === 0) {
        this.__attach();
      }
      this._children.push(child);
      if (this.__isNative) {
        child.__makeNative();
        NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
    }
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {
      var index = this._children.indexOf(child);
      if (index === -1) {
        console.warn('Trying to remove a child that doesn\'t exist');
        return;
      }
      if (this.__isNative && child.__isNative) {
        NativeAnimatedAPI.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
      this._children.splice(index, 1);
      if (this._children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return this._children;
    }
  }]);
  return AnimatedWithChildren;
}(Animated);

function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);

  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}

var _easeInOut = void 0;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require(202     ); // 202 = Easing
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}

var TimingAnimation = function (_Animation) {
  babelHelpers.inherits(TimingAnimation, _Animation);

  function TimingAnimation(config) {
    babelHelpers.classCallCheck(this, TimingAnimation);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

    _this2._toValue = config.toValue;
    _this2._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this2._duration = config.duration !== undefined ? config.duration : 500;
    _this2._delay = config.delay !== undefined ? config.delay : 0;
    _this2.__iterations = config.iterations !== undefined ? config.iterations : 1;
    _this2.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this2._useNativeDriver = shouldUseNativeDriver(config);
    return _this2;
  }

  babelHelpers.createClass(TimingAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this3 = this;

      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {
        if (_this3._duration === 0 && !_this3._useNativeDriver) {
          _this3._onUpdate(_this3._toValue);
          _this3.__debouncedOnEnd({ finished: true });
        } else {
          _this3._startTime = Date.now();
          if (_this3._useNativeDriver) {
            _this3.__startNativeAnimation(animatedValue);
          } else {
            _this3._animationFrame = requestAnimationFrame(_this3.onUpdate.bind(_this3));
          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return TimingAnimation;
}(Animation);

var DecayAnimation = function (_Animation2) {
  babelHelpers.inherits(DecayAnimation, _Animation2);

  function DecayAnimation(config) {
    babelHelpers.classCallCheck(this, DecayAnimation);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

    _this4._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
    _this4._velocity = config.velocity;
    _this4._useNativeDriver = shouldUseNativeDriver(config);
    _this4.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this4.__iterations = config.iterations !== undefined ? config.iterations : 1;
    return _this4;
  }

  babelHelpers.createClass(DecayAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();

      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._lastValue = value;
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return DecayAnimation;
}(Animation);

function withDefault(value, defaultValue) {
  if (value === undefined || value === null) {
    return defaultValue;
  }
  return value;
}

var SpringAnimation = function (_Animation3) {
  babelHelpers.inherits(SpringAnimation, _Animation3);

  function SpringAnimation(config) {
    babelHelpers.classCallCheck(this, SpringAnimation);

    var _this5 = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

    _this5._overshootClamping = withDefault(config.overshootClamping, false);
    _this5._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
    _this5._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
    _this5._initialVelocity = config.velocity;
    _this5._lastVelocity = withDefault(config.velocity, 0);
    _this5._toValue = config.toValue;
    _this5._delay = withDefault(config.delay, 0);
    _this5._useNativeDriver = shouldUseNativeDriver(config);
    _this5.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this5.__iterations = config.iterations !== undefined ? config.iterations : 1;

    var springConfig;
    if (config.bounciness !== undefined || config.speed !== undefined) {
      invariant(config.tension === undefined && config.friction === undefined, 'You can only define bounciness/speed or tension/friction but not both');
      springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
    } else {
      springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));
    }
    _this5._tension = springConfig.tension;
    _this5._friction = springConfig.friction;
    return _this5;
  }

  babelHelpers.createClass(SpringAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'spring',
        overshootClamping: this._overshootClamping,
        restDisplacementThreshold: this._restDisplacementThreshold,
        restSpeedThreshold: this._restSpeedThreshold,
        tension: this._tension,
        friction: this._friction,
        initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
        toValue: this._toValue,
        iterations: this.__iterations
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this6 = this;

      this.__active = true;
      this._startPosition = fromValue;
      this._lastPosition = this._startPosition;

      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._lastTime = Date.now();

      if (previousAnimation instanceof SpringAnimation) {
        var internalState = previousAnimation.getInternalState();
        this._lastPosition = internalState.lastPosition;
        this._lastVelocity = internalState.lastVelocity;
        this._lastTime = internalState.lastTime;
      }
      if (this._initialVelocity !== undefined && this._initialVelocity !== null) {
        this._lastVelocity = this._initialVelocity;
      }

      var start = function start() {
        if (_this6._useNativeDriver) {
          _this6.__startNativeAnimation(animatedValue);
        } else {
          _this6.onUpdate();
        }
      };

      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'getInternalState',
    value: function getInternalState() {
      return {
        lastPosition: this._lastPosition,
        lastVelocity: this._lastVelocity,
        lastTime: this._lastTime
      };
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var position = this._lastPosition;
      var velocity = this._lastVelocity;

      var tempPosition = this._lastPosition;
      var tempVelocity = this._lastVelocity;

      var MAX_STEPS = 64;
      var now = Date.now();
      if (now > this._lastTime + MAX_STEPS) {
        now = this._lastTime + MAX_STEPS;
      }

      var TIMESTEP_MSEC = 1;
      var numSteps = Math.floor((now - this._lastTime) / TIMESTEP_MSEC);

      for (var i = 0; i < numSteps; ++i) {
        var step = TIMESTEP_MSEC / 1000;

        var aVelocity = velocity;
        var aAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        var tempPosition = position + aVelocity * step / 2;
        var tempVelocity = velocity + aAcceleration * step / 2;

        var bVelocity = tempVelocity;
        var bAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + bVelocity * step / 2;
        tempVelocity = velocity + bAcceleration * step / 2;

        var cVelocity = tempVelocity;
        var cAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dVelocity = tempVelocity;
        var dAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dxdt = (aVelocity + 2 * (bVelocity + cVelocity) + dVelocity) / 6;
        var dvdt = (aAcceleration + 2 * (bAcceleration + cAcceleration) + dAcceleration) / 6;

        position += dxdt * step;
        velocity += dvdt * step;
      }

      this._lastTime = now;
      this._lastPosition = position;
      this._lastVelocity = velocity;

      this._onUpdate(position);
      if (!this.__active) {
        return;
      }

      var isOvershooting = false;
      if (this._overshootClamping && this._tension !== 0) {
        if (this._startPosition < this._toValue) {
          isOvershooting = position > this._toValue;
        } else {
          isOvershooting = position < this._toValue;
        }
      }
      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
      var isDisplacement = true;
      if (this._tension !== 0) {
        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
      }

      if (isOvershooting || isVelocity && isDisplacement) {
        if (this._tension !== 0) {
          this._onUpdate(this._toValue);
        }

        this.__debouncedOnEnd({ finished: true });
        return;
      }
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return SpringAnimation;
}(Animation);

var _uniqueId = 1;

var AnimatedValue = function (_AnimatedWithChildren) {
  babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

  function AnimatedValue(value) {
    babelHelpers.classCallCheck(this, AnimatedValue);

    var _this7 = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

    _this7._startingValue = _this7._value = value;
    _this7._offset = 0;
    _this7._animation = null;
    _this7._listeners = {};
    return _this7;
  }

  babelHelpers.createClass(AnimatedValue, [{
    key: '__detach',
    value: function __detach() {
      this.stopAnimation();
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._value + this._offset;
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__makeNative', this).call(this);

      if (Object.keys(this._listeners).length) {
        this._startListeningToNativeValueUpdates();
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
      }
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      this._listeners[id] = callback;
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      delete this._listeners[id];
      if (this.__isNative && Object.keys(this._listeners).length === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this._listeners = {};
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: '_startListeningToNativeValueUpdates',
    value: function _startListeningToNativeValueUpdates() {
      var _this8 = this;

      if (this.__nativeAnimatedValueListener) {
        return;
      }

      NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this8.__getNativeTag()) {
          return;
        }
        _this8._updateValue(data.value, false);
      });
    }
  }, {
    key: '_stopListeningForNativeValueUpdates',
    value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }

      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      callback && callback(this.__getValue());
    }
  }, {
    key: 'resetAnimation',
    value: function resetAnimation(callback) {
      this.stopAnimation(callback);
      this._value = this._startingValue;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: 'animate',
    value: function animate(animation, callback) {
      var _this9 = this;

      var handle = null;
      if (animation.__isInteraction) {
        handle = InteractionManager.createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {
        _this9._updateValue(value, true);
      }, function (result) {
        _this9._animation = null;
        if (handle !== null) {
          InteractionManager.clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    }
  }, {
    key: 'stopTracking',
    value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    }
  }, {
    key: 'track',
    value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
    }
  }, {
    key: '_updateValue',
    value: function _updateValue(value, flush) {
      this._value = value;
      if (flush) {
        _flush(this);
      }
      for (var key in this._listeners) {
        this._listeners[key]({ value: this.__getValue() });
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset
      };
    }
  }]);
  return AnimatedValue;
}(AnimatedWithChildren);

var AnimatedValueXY = function (_AnimatedWithChildren2) {
  babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren2);

  function AnimatedValueXY(valueIn) {
    babelHelpers.classCallCheck(this, AnimatedValueXY);

    var _this10 = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

    var value = valueIn || { x: 0, y: 0 };
    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this10.x = new AnimatedValue(value.x);
      _this10.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
      _this10.x = value.x;
      _this10.y = value.y;
    }
    _this10._listeners = {};
    return _this10;
  }

  babelHelpers.createClass(AnimatedValueXY, [{
    key: 'setValue',
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this.x.extractOffset();
      this.y.extractOffset();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: 'resetAnimation',
    value: function resetAnimation(callback) {
      this.x.resetAnimation();
      this.y.resetAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var _this11 = this;

      var id = String(_uniqueId++);
      var jointCallback = function jointCallback(_ref2) {
        var number = _ref2.value;

        callback(_this11.__getValue());
      };
      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: 'getLayout',
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: 'getTranslateTransform',
    value: function getTranslateTransform() {
      return [{ translateX: this.x }, { translateY: this.y }];
    }
  }]);
  return AnimatedValueXY;
}(AnimatedWithChildren);

var AnimatedInterpolation = function (_AnimatedWithChildren3) {
  babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren3);

  function AnimatedInterpolation(parent, config) {
    babelHelpers.classCallCheck(this, AnimatedInterpolation);

    var _this12 = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

    _this12._parent = parent;
    _this12._config = config;
    _this12._interpolation = Interpolation.create(config);
    return _this12;
  }

  babelHelpers.createClass(AnimatedInterpolation, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._parent.__makeNative();
      babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var parentValue = this._parent.__getValue();
      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');
      return this._interpolation(parentValue);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__transformDataType',
    value: function __transformDataType(range) {
      return range.map(function (value) {
        if (typeof value !== 'string') {
          return value;
        }
        if (/deg$/.test(value)) {
          var degrees = parseFloat(value) || 0;
          var radians = degrees * Math.PI / 180.0;
          return radians;
        } else {
          return parseFloat(value) || 0;
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,

        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);
  return AnimatedInterpolation;
}(AnimatedWithChildren);

var AnimatedAddition = function (_AnimatedWithChildren4) {
  babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren4);

  function AnimatedAddition(a, b) {
    babelHelpers.classCallCheck(this, AnimatedAddition);

    var _this13 = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

    _this13._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this13._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this13;
  }

  babelHelpers.createClass(AnimatedAddition, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() + this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'addition',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedAddition;
}(AnimatedWithChildren);

var AnimatedDivision = function (_AnimatedWithChildren5) {
  babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren5);

  function AnimatedDivision(a, b) {
    babelHelpers.classCallCheck(this, AnimatedDivision);

    var _this14 = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

    _this14._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this14._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this14;
  }

  babelHelpers.createClass(AnimatedDivision, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        console.error('Detected division by zero in AnimatedDivision');
      }
      return a / b;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);

var AnimatedMultiplication = function (_AnimatedWithChildren6) {
  babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren6);

  function AnimatedMultiplication(a, b) {
    babelHelpers.classCallCheck(this, AnimatedMultiplication);

    var _this15 = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

    _this15._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this15._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this15;
  }

  babelHelpers.createClass(AnimatedMultiplication, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() * this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'multiplication',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedMultiplication;
}(AnimatedWithChildren);

var AnimatedModulo = function (_AnimatedWithChildren7) {
  babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren7);

  function AnimatedModulo(a, modulus) {
    babelHelpers.classCallCheck(this, AnimatedModulo);

    var _this16 = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

    _this16._a = a;
    _this16._modulus = modulus;
    return _this16;
  }

  babelHelpers.createClass(AnimatedModulo, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'modulus',
        input: this._a.__getNativeTag(),
        modulus: this._modulus
      };
    }
  }]);
  return AnimatedModulo;
}(AnimatedWithChildren);

var AnimatedDiffClamp = function (_AnimatedWithChildren8) {
  babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren8);

  function AnimatedDiffClamp(a, min, max) {
    babelHelpers.classCallCheck(this, AnimatedDiffClamp);

    var _this17 = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

    _this17._a = a;
    _this17._min = min;
    _this17._max = max;
    _this17._value = _this17._lastValue = _this17._a.__getValue();
    return _this17;
  }

  babelHelpers.createClass(AnimatedDiffClamp, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);
  return AnimatedDiffClamp;
}(AnimatedWithChildren);

var AnimatedTransform = function (_AnimatedWithChildren9) {
  babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren9);

  function AnimatedTransform(transforms) {
    babelHelpers.classCallCheck(this, AnimatedTransform);

    var _this18 = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

    _this18._transforms = transforms;
    return _this18;
  }

  babelHelpers.createClass(AnimatedTransform, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__makeNative', this).call(this);
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
      });
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__attach',
    value: function __attach() {
      var _this19 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__addChild(_this19);
          }
        }
      });
    }
  }, {
    key: '__detach',
    value: function __detach() {
      var _this20 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__removeChild(_this20);
          }
        }
      });
      babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value
            });
          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);
  return AnimatedTransform;
}(AnimatedWithChildren);

var AnimatedStyle = function (_AnimatedWithChildren10) {
  babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren10);

  function AnimatedStyle(style) {
    babelHelpers.classCallCheck(this, AnimatedStyle);

    var _this21 = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

    style = flattenStyle(style) || {};
    if (style.transform) {
      style = babelHelpers.extends({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this21._style = style;
    return _this21;
  }

  babelHelpers.createClass(AnimatedStyle, [{
    key: '__walkStyleAndGetValues',
    value: function __walkStyleAndGetValues(style) {
      var updatedStyle = {};
      for (var _key in style) {
        var _value = style[_key];
        if (_value instanceof Animated) {
          if (!_value.__isNative) {
            updatedStyle[_key] = _value.__getValue();
          }
        } else if (_value && !Array.isArray(_value) && typeof _value === 'object') {
          updatedStyle[_key] = this.__walkStyleAndGetValues(_value);
        } else {
          updatedStyle[_key] = _value;
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this.__walkStyleAndGetValues(this._style);
    }
  }, {
    key: '__walkStyleAndGetAnimatedValues',
    value: function __walkStyleAndGetAnimatedValues(style) {
      var updatedStyle = {};
      for (var _key2 in style) {
        var _value2 = style[_key2];
        if (_value2 instanceof Animated) {
          updatedStyle[_key2] = _value2.__getAnimatedValue();
        } else if (_value2 && !Array.isArray(_value2) && typeof _value2 === 'object') {
          updatedStyle[_key2] = this.__walkStyleAndGetAnimatedValues(_value2);
        }
      }
      return updatedStyle;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__walkStyleAndGetAnimatedValues(this._style);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__makeNative', this).call(this);
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__makeNative();
        }
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof Animated) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
  return AnimatedStyle;
}(AnimatedWithChildren);

var AnimatedProps = function (_Animated2) {
  babelHelpers.inherits(AnimatedProps, _Animated2);

  function AnimatedProps(props, callback) {
    babelHelpers.classCallCheck(this, AnimatedProps);

    var _this22 = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

    if (props.style) {
      props = babelHelpers.extends({}, props, {
        style: new AnimatedStyle(props.style)
      });
    }
    _this22._props = props;
    _this22._callback = callback;
    _this22.__attach();
    return _this22;
  }

  babelHelpers.createClass(AnimatedProps, [{
    key: '__getValue',
    value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._callback();
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: 'setNativeView',
    value: function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: '__connectAnimatedView',
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__disconnectAnimatedView',
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof Animated) {
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);
  return AnimatedProps;
}(Animated);

function createAnimatedComponent(Component) {
  var AnimatedComponent = function (_React$Component) {
    babelHelpers.inherits(AnimatedComponent, _React$Component);

    function AnimatedComponent(props) {
      babelHelpers.classCallCheck(this, AnimatedComponent);

      var _this23 = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

      _this23._eventDetachers = [];

      _this23._setComponentRef = _this23._setComponentRef.bind(_this23);
      return _this23;
    }

    babelHelpers.createClass(AnimatedComponent, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents();
      }
    }, {
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        this._component.setNativeProps(props);
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._attachProps(this.props);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._propsAnimated.setNativeView(this._component);
        this._attachNativeEvents();
      }
    }, {
      key: '_attachNativeEvents',
      value: function _attachNativeEvents() {
        var _this24 = this;

        var scrollableNode = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        var _loop = function _loop(_key3) {
          var prop = _this24.props[_key3];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, _key3);
            _this24._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, _key3);
            });
          }
        };

        for (var _key3 in this.props) {
          _loop(_key3);
        }
      }
    }, {
      key: '_detachNativeEvents',
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });
        this._eventDetachers = [];
      }
    }, {
      key: '_attachProps',
      value: function _attachProps(nextProps) {
        var _this25 = this;

        var oldPropsAnimated = this._propsAnimated;

        var callback = function callback() {
          if (_this25._component.setNativeProps) {
            if (!_this25._propsAnimated.__isNative) {
              _this25._component.setNativeProps(_this25._propsAnimated.__getAnimatedValue());
            } else {
              throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
          } else {
            _this25.forceUpdate();
          }
        };

        this._propsAnimated = new AnimatedProps(nextProps, callback);

        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(newProps) {
        this._attachProps(newProps);
      }
    }, {
      key: 'componentDidUpdate',
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }
        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();
          this._attachNativeEvents();
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var props = this._propsAnimated.__getValue();
        return React.createElement(Component, babelHelpers.extends({}, props, {
          ref: this._setComponentRef,

          collapsable: this._propsAnimated.__isNative ? false : props.collapsable,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1865
          }
        }));
      }
    }, {
      key: '_setComponentRef',
      value: function _setComponentRef(c) {
        this._prevComponent = this._component;
        this._component = c;
      }
    }, {
      key: 'getNode',
      value: function getNode() {
        return this._component;
      }
    }]);
    return AnimatedComponent;
  }(React.Component);

  var propTypes = Component.__propTypesSecretDontUseThesePlease || Component.propTypes;

  AnimatedComponent.propTypes = {
    style: function style(props, propName, componentName) {
      if (!propTypes) {
        return;
      }

      for (var key in ViewStylePropTypes) {
        if (!propTypes[key] && props[key] !== undefined) {
          console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
        }
      }
    }
  };

  return AnimatedComponent;
}

var AnimatedTracking = function (_Animated3) {
  babelHelpers.inherits(AnimatedTracking, _Animated3);

  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    babelHelpers.classCallCheck(this, AnimatedTracking);

    var _this26 = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

    _this26._value = value;
    _this26._parent = parent;
    _this26._animationClass = animationClass;
    _this26._animationConfig = animationConfig;
    _this26._callback = callback;
    _this26.__attach();
    return _this26;
  }

  babelHelpers.createClass(AnimatedTracking, [{
    key: '__getValue',
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }]);
  return AnimatedTracking;
}(Animated);

var add = function add(a, b) {
  return new AnimatedAddition(a, b);
};

var divide = function divide(a, b) {
  return new AnimatedDivision(a, b);
};

var multiply = function multiply(a, b) {
  return new AnimatedMultiplication(a, b);
};

var modulo = function modulo(a, modulus) {
  return new AnimatedModulo(a, modulus);
};

var diffClamp = function diffClamp(a, min, max) {
  return new AnimatedDiffClamp(a, min, max);
};

var _combineCallbacks = function _combineCallbacks(callback, config) {
  if (callback && config.onComplete) {
    return function () {
      config.onComplete && config.onComplete.apply(config, arguments);
      callback && callback.apply(undefined, arguments);
    };
  } else {
    return callback || config.onComplete;
  }
};

var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
  if (value instanceof AnimatedValueXY) {
    var configX = babelHelpers.extends({}, config);
    var configY = babelHelpers.extends({}, config);
    for (var key in config) {
      var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;

      if (x !== undefined && y !== undefined) {
        configX[key] = x;
        configY[key] = y;
      }
    }
    var aX = anim(value.x, configX);
    var aY = anim(value.y, configY);

    return parallel([aX, aY], { stopTogether: false });
  }
  return null;
};

var spring = function spring(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof Animated) {
      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, SpringAnimation, singleConfig, callback));
    } else {
      singleValue.animate(new SpringAnimation(singleConfig), callback);
    }
  };
  return maybeVectorAnim(value, config, spring) || {
    start: function (_start) {
      function start(_x) {
        return _start.apply(this, arguments);
      }

      start.toString = function () {
        return _start.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = babelHelpers.extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var timing = function timing(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    if (configuration.toValue instanceof Animated) {
      singleValue.track(new AnimatedTracking(singleValue, configuration.toValue, TimingAnimation, singleConfig, callback));
    } else {
      singleValue.animate(new TimingAnimation(singleConfig), callback);
    }
  };

  return maybeVectorAnim(value, config, timing) || {
    start: function (_start2) {
      function start(_x2) {
        return _start2.apply(this, arguments);
      }

      start.toString = function () {
        return _start2.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = babelHelpers.extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var decay = function decay(value, config) {
  var start = function start(animatedValue, configuration, callback) {
    callback = _combineCallbacks(callback, configuration);
    var singleValue = animatedValue;
    var singleConfig = configuration;
    singleValue.stopTracking();
    singleValue.animate(new DecayAnimation(singleConfig), callback);
  };

  return maybeVectorAnim(value, config, decay) || {
    start: function (_start3) {
      function start(_x3) {
        return _start3.apply(this, arguments);
      }

      start.toString = function () {
        return _start3.toString();
      };

      return start;
    }(function (callback) {
      start(value, config, callback);
    }),

    stop: function stop() {
      value.stopAnimation();
    },

    reset: function reset() {
      value.resetAnimation();
    },

    _startNativeLoop: function _startNativeLoop(iterations) {
      var singleConfig = babelHelpers.extends({}, config, { iterations: iterations });
      start(value, singleConfig);
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return config.useNativeDriver || false;
    }
  };
};

var sequence = function sequence(animations) {
  var current = 0;
  return {
    start: function start(callback) {
      var onComplete = function onComplete(result) {
        if (!result.finished) {
          callback && callback(result);
          return;
        }

        current++;

        if (current === animations.length) {
          callback && callback(result);
          return;
        }

        animations[current].start(onComplete);
      };

      if (animations.length === 0) {
        callback && callback({ finished: true });
      } else {
        animations[current].start(onComplete);
      }
    },

    stop: function stop() {
      if (current < animations.length) {
        animations[current].stop();
      }
    },

    reset: function reset() {
      animations.forEach(function (animation, idx) {
        if (idx <= current) {
          animation.reset();
        }
      });
      current = 0;
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.sequence animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };
};

var parallel = function parallel(animations, config) {
  var doneCount = 0;

  var hasEnded = {};
  var stopTogether = !(config && config.stopTogether === false);

  var result = {
    start: function start(callback) {
      if (doneCount === animations.length) {
        callback && callback({ finished: true });
        return;
      }

      animations.forEach(function (animation, idx) {
        var cb = function cb(endResult) {
          hasEnded[idx] = true;
          doneCount++;
          if (doneCount === animations.length) {
            doneCount = 0;
            callback && callback(endResult);
            return;
          }

          if (!endResult.finished && stopTogether) {
            result.stop();
          }
        };

        if (!animation) {
          cb({ finished: true });
        } else {
          animation.start(cb);
        }
      });
    },

    stop: function stop() {
      animations.forEach(function (animation, idx) {
        !hasEnded[idx] && animation.stop();
        hasEnded[idx] = true;
      });
    },

    reset: function reset() {
      animations.forEach(function (animation, idx) {
        animation.reset();
        hasEnded[idx] = false;
        doneCount = 0;
      });
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.parallel animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return false;
    }
  };

  return result;
};

var delay = function delay(time) {
  return timing(new AnimatedValue(0), { toValue: 0, delay: time, duration: 0 });
};

var stagger = function stagger(time, animations) {
  return parallel(animations.map(function (animation, i) {
    return sequence([delay(time * i), animation]);
  }));
};

var loop = function loop(animation) {
  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref3$iterations = _ref3.iterations,
      iterations = _ref3$iterations === undefined ? -1 : _ref3$iterations;

  var isFinished = false;
  var iterationsSoFar = 0;
  return {
    start: function start(callback) {
      var restart = function restart() {
        var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { finished: true };

        if (isFinished || iterationsSoFar === iterations || result.finished === false) {
          callback && callback(result);
        } else {
          iterationsSoFar++;
          animation.reset();
          animation.start(restart);
        }
      };
      if (!animation || iterations === 0) {
        callback && callback({ finished: true });
      } else {
        if (animation._isUsingNativeDriver()) {
          animation._startNativeLoop(iterations);
        } else {
          restart();
        }
      }
    },

    stop: function stop() {
      isFinished = true;
      animation.stop();
    },

    reset: function reset() {
      iterationsSoFar = 0;
      isFinished = false;
      animation.reset();
    },

    _startNativeLoop: function _startNativeLoop() {
      throw new Error('Loops run using the native driver cannot contain Animated.loop animations');
    },

    _isUsingNativeDriver: function _isUsingNativeDriver() {
      return animation._isUsingNativeDriver();
    }
  };
};

function attachNativeEvent(viewRef, eventName, argMapping) {
  var eventMappings = [];

  var traverse = function traverse(value, path) {
    if (value instanceof AnimatedValue) {
      value.__makeNative();

      eventMappings.push({
        nativeEventPath: path,
        animatedValueTag: value.__getNativeTag()
      });
    } else if (typeof value === 'object') {
      for (var _key4 in value) {
        traverse(value[_key4], path.concat(_key4));
      }
    }
  };

  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

  traverse(argMapping[0].nativeEvent, []);

  var viewTag = ReactNative.findNodeHandle(viewRef);

  eventMappings.forEach(function (mapping) {
    NativeAnimatedAPI.addAnimatedEventToView(viewTag, eventName, mapping);
  });

  return {
    detach: function detach() {
      eventMappings.forEach(function (mapping) {
        NativeAnimatedAPI.removeAnimatedEventFromView(viewTag, eventName, mapping.animatedValueTag);
      });
    }
  };
}

function forkEvent(event, listener) {
  if (!event) {
    return listener;
  } else if (event instanceof AnimatedEvent) {
    event.__addListener(listener);
    return event;
  } else {
    return function () {
      typeof event === 'function' && event.apply(undefined, arguments);
      listener.apply(undefined, arguments);
    };
  }
}

function unforkEvent(event, listener) {
  if (event && event instanceof AnimatedEvent) {
    event.__removeListener(listener);
  }
}

var AnimatedEvent = function () {
  function AnimatedEvent(argMapping) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, AnimatedEvent);
    this._listeners = [];

    this._argMapping = argMapping;
    if (config.listener) {
      this.__addListener(config.listener);
    }
    this._callListeners = this._callListeners.bind(this);
    this._attachedEvent = null;
    this.__isNative = shouldUseNativeDriver(config);

    if (__DEV__) {
      this._validateMapping();
    }
  }

  babelHelpers.createClass(AnimatedEvent, [{
    key: '__addListener',
    value: function __addListener(callback) {
      this._listeners.push(callback);
    }
  }, {
    key: '__removeListener',
    value: function __removeListener(callback) {
      this._listeners = this._listeners.filter(function (listener) {
        return listener !== callback;
      });
    }
  }, {
    key: '__attach',
    value: function __attach(viewRef, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be attached.');

      this._attachedEvent = attachNativeEvent(viewRef, eventName, this._argMapping);
    }
  }, {
    key: '__detach',
    value: function __detach(viewTag, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be detached.');

      this._attachedEvent && this._attachedEvent.detach();
    }
  }, {
    key: '__getHandler',
    value: function __getHandler() {
      var _this27 = this;

      if (this.__isNative) {
        return this._callListeners;
      }

      return function () {
        for (var _len = arguments.length, args = Array(_len), _key5 = 0; _key5 < _len; _key5++) {
          args[_key5] = arguments[_key5];
        }

        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
            recMapping.setValue(recEvt);
          } else if (typeof recMapping === 'object') {
            for (var mappingKey in recMapping) {
              traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
            }
          }
        };

        if (!_this27.__isNative) {
          _this27._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx], 'arg' + idx);
          });
        }
        _this27._callListeners.apply(_this27, args);
      };
    }
  }, {
    key: '_callListeners',
    value: function _callListeners() {
      for (var _len2 = arguments.length, args = Array(_len2), _key6 = 0; _key6 < _len2; _key6++) {
        args[_key6] = arguments[_key6];
      }

      this._listeners.forEach(function (listener) {
        return listener.apply(undefined, args);
      });
    }
  }, {
    key: '_validateMapping',
    value: function _validateMapping() {
      var traverse = function traverse(recMapping, recEvt, key) {
        if (typeof recEvt === 'number') {
          invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
          return;
        }
        invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for (var mappingKey in recMapping) {
          traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
      };
    }
  }]);
  return AnimatedEvent;
}();

var event = function event(argMapping, config) {
  var animatedEvent = new AnimatedEvent(argMapping, config);
  if (animatedEvent.__isNative) {
    return animatedEvent;
  } else {
    return animatedEvent.__getHandler();
  }
};

module.exports = {
  Value: AnimatedValue,

  ValueXY: AnimatedValueXY,

  Interpolation: AnimatedInterpolation,

  decay: decay,

  timing: timing,

  spring: spring,

  add: add,

  divide: divide,

  multiply: multiply,

  modulo: modulo,

  diffClamp: diffClamp,

  delay: delay,

  sequence: sequence,

  parallel: parallel,

  stagger: stagger,

  loop: loop,

  event: event,

  createAnimatedComponent: createAnimatedComponent,

  attachNativeEvent: attachNativeEvent,

  forkEvent: forkEvent,
  unforkEvent: unforkEvent,

  __PropsOnlyForTests: AnimatedProps
};
}, 194, null, "AnimatedImplementation");
__d(/* InteractionManager */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(31             ); // 31 = BatchedBridge
var EventEmitter = require(57            ); // 57 = EventEmitter
var Set = require(79   ); // 79 = Set
var TaskQueue = require(196        ); // 196 = TaskQueue

var infoLog = require(112      ); // 112 = infoLog
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror

var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;

var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true
  }),

  runAfterInteractions: function runAfterInteractions(task) {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();
      if (task) {
        tasks.push(task);
      }
      tasks.push({ run: resolve, name: 'resolve ' + (task && task.name || '?') });
      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn('Tried to call done when not supported by current Promise implementation.');
        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('create interaction handle');
    _scheduleUpdate();
    var handle = ++_inc;
    _addInteractionSet.add(handle);
    return handle;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('clear interaction handle');
    invariant(!!handle, 'Must provide a handle to clear.');
    _scheduleUpdate();
    _addInteractionSet.delete(handle);
    _deleteInteractionSet.add(handle);
  },


  addListener: _emitter.addListener.bind(_emitter),

  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  }
};

var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({ onMoreTasks: _scheduleUpdate });
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;

function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {
      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}

function _processUpdate() {
  _nextUpdateHandle = 0;

  var interactionCount = _interactionSet.size;
  _addInteractionSet.forEach(function (handle) {
    return _interactionSet.add(handle);
  });
  _deleteInteractionSet.forEach(function (handle) {
    return _interactionSet.delete(handle);
  });
  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {
    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {
    _emitter.emit(InteractionManager.Events.interactionStart);
  }

  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();
      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
        _scheduleUpdate();
        break;
      }
    }
  }
  _addInteractionSet.clear();
  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
}, 195, null, "InteractionManager");
__d(/* TaskQueue */function(global, require, module, exports) {
'use strict';

var infoLog = require(112      ); // 112 = infoLog
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var DEBUG = false;

var TaskQueue = function () {
  function TaskQueue(_ref) {
    var onMoreTasks = _ref.onMoreTasks;
    babelHelpers.classCallCheck(this, TaskQueue);

    this._onMoreTasks = onMoreTasks;
    this._queueStack = [{ tasks: [], popable: false }];
  }

  babelHelpers.createClass(TaskQueue, [{
    key: 'enqueue',
    value: function enqueue(task) {
      this._getCurrentQueue().push(task);
    }
  }, {
    key: 'enqueueTasks',
    value: function enqueueTasks(tasks) {
      var _this = this;

      tasks.forEach(function (task) {
        return _this.enqueue(task);
      });
    }
  }, {
    key: 'cancelTasks',
    value: function cancelTasks(tasksToCancel) {
      this._queueStack = this._queueStack.map(function (queue) {
        return babelHelpers.extends({}, queue, {
          tasks: queue.tasks.filter(function (task) {
            return tasksToCancel.indexOf(task) === -1;
          })
        });
      }).filter(function (queue, idx) {
        return queue.tasks.length > 0 || idx === 0;
      });
    }
  }, {
    key: 'hasTasksToProcess',
    value: function hasTasksToProcess() {
      return this._getCurrentQueue().length > 0;
    }
  }, {
    key: 'processNext',
    value: function processNext() {
      var queue = this._getCurrentQueue();
      if (queue.length) {
        var task = queue.shift();
        try {
          if (task.gen) {
            DEBUG && infoLog('genPromise for task ' + task.name);
            this._genPromise(task);
          } else if (task.run) {
            DEBUG && infoLog('run task ' + task.name);
            task.run();
          } else {
            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
            DEBUG && infoLog('run anonymous task');
            task();
          }
        } catch (e) {
          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
          throw e;
        }
      }
    }
  }, {
    key: '_getCurrentQueue',
    value: function _getCurrentQueue() {
      var stackIdx = this._queueStack.length - 1;
      var queue = this._queueStack[stackIdx];
      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
        this._queueStack.pop();
        DEBUG && infoLog('popped queue: ', { stackIdx: stackIdx, queueStackSize: this._queueStack.length });
        return this._getCurrentQueue();
      } else {
        return queue.tasks;
      }
    }
  }, {
    key: '_genPromise',
    value: function _genPromise(task) {
      var _this2 = this;

      this._queueStack.push({ tasks: [], popable: false });
      var stackIdx = this._queueStack.length - 1;
      DEBUG && infoLog('push new queue: ', { stackIdx: stackIdx });
      DEBUG && infoLog('exec gen task ' + task.name);
      task.gen().then(function () {
        DEBUG && infoLog('onThen for gen task ' + task.name, { stackIdx: stackIdx, queueStackSize: _this2._queueStack.length });
        _this2._queueStack[stackIdx].popable = true;
        _this2.hasTasksToProcess() && _this2._onMoreTasks();
      }).catch(function (ex) {
        ex.message = 'TaskQueue: Error resolving Promise in task ' + task.name + ': ' + ex.message;
        throw ex;
      }).done();
    }
  }]);
  return TaskQueue;
}();

module.exports = TaskQueue;
}, 196, null, "TaskQueue");
__d(/* Interpolation */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var normalizeColor = require(63              ); // 63 = normalizeColor

var linear = function linear(t) {
  return t;
};

var Interpolation = function () {
  function Interpolation() {
    babelHelpers.classCallCheck(this, Interpolation);
  }

  babelHelpers.createClass(Interpolation, null, [{
    key: 'create',
    value: function create(config) {

      if (config.outputRange && typeof config.outputRange[0] === 'string') {
        return createInterpolationFromStringOutputRange(config);
      }

      var outputRange = config.outputRange;
      checkInfiniteRange('outputRange', outputRange);

      var inputRange = config.inputRange;
      checkInfiniteRange('inputRange', inputRange);
      checkValidInputRange(inputRange);

      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');

      var easing = config.easing || linear;

      var extrapolateLeft = 'extend';
      if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
      } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
      }

      var extrapolateRight = 'extend';
      if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
      } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
      }

      return function (input) {
        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');

        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
      };
    }
  }]);
  return Interpolation;
}();

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var int32Color = normalizeColor(input);
  if (int32Color === null) {
    return input;
  }

  int32Color = int32Color || 0;

  var r = (int32Color & 0xff000000) >>> 24;
  var g = (int32Color & 0x00ff0000) >>> 16;
  var b = (int32Color & 0x0000ff00) >>> 8;
  var a = (int32Color & 0x000000ff) / 255;

  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

var stringShapeRegex = /[0-9\.-]+/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);

  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });

  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return Interpolation.create(babelHelpers.extends({}, config, {
      outputRange: outputRanges[i]
    }));
  });

  var shouldRound = isRgbOrRgba(outputRange[0]);

  return function (input) {
    var i = 0;

    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      return String(rounded);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');
  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');
  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

module.exports = Interpolation;
}, 197, null, "Interpolation");
__d(/* NativeAnimatedHelper */function(global, require, module, exports) {
'use strict';

var NativeAnimatedModule = require(30             ).NativeAnimatedModule; // 30 = NativeModules
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;

var nativeEventEmitter = void 0;

var API = {
  createAnimatedNode: function createAnimatedNode(tag, config) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName, animatedNodeTag);
  }
};

var STYLES_WHITELIST = {
  opacity: true,
  transform: true,

  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};

var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  perspective: true
};

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error('Property \'' + config.property + '\' is not supported by native animated module');
    }
  });
}

function validateStyles(styles) {
  for (var key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(key)) {
      throw new Error('Style property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function validateInterpolation(config) {
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  for (var key in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
      throw new Error('Interpolation property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  invariant(NativeAnimatedModule, 'Native animated module is not available');
}

function isNativeAnimatedAvailable() {
  return !!NativeAnimatedModule;
}

module.exports = {
  API: API,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  isNativeAnimatedAvailable: isNativeAnimatedAvailable,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
}, 198, null, "NativeAnimatedHelper");
__d(/* SpringConfig */function(global, require, module, exports) {

'use strict';

function tensionFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function frictionFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    tension: tensionFromOrigamiValue(tension),
    friction: frictionFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    tension: tensionFromOrigamiValue(bouncyTension),
    friction: frictionFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
}, 199, null, "SpringConfig");
__d(/* fbjs/lib/requestAnimationFrame.js */function(global, require, module, exports) {'use strict';

var emptyFunction = require(46               ); // 46 = ./emptyFunction
var nativeRequestAnimationFrame = require(201                            ); // 201 = ./nativeRequestAnimationFrame

var lastTime = 0;

var requestAnimationFrame = nativeRequestAnimationFrame || function (callback) {
  var currTime = Date.now();
  var timeDelay = Math.max(0, 16 - (currTime - lastTime));
  lastTime = currTime + timeDelay;
  return global.setTimeout(function () {
    callback(Date.now());
  }, timeDelay);
};

requestAnimationFrame(emptyFunction);

module.exports = requestAnimationFrame;
}, 200, null, "fbjs/lib/requestAnimationFrame.js");
__d(/* fbjs/lib/nativeRequestAnimationFrame.js */function(global, require, module, exports) {"use strict";

var nativeRequestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame;

module.exports = nativeRequestAnimationFrame;
}, 201, null, "fbjs/lib/nativeRequestAnimationFrame.js");
__d(/* Easing */function(global, require, module, exports) {
'use strict';

var _ease = void 0;

var Easing = function () {
  function Easing() {
    babelHelpers.classCallCheck(this, Easing);
  }

  babelHelpers.createClass(Easing, null, [{
    key: 'step0',
    value: function step0(n) {
      return n > 0 ? 1 : 0;
    }
  }, {
    key: 'step1',
    value: function step1(n) {
      return n >= 1 ? 1 : 0;
    }
  }, {
    key: 'linear',
    value: function linear(t) {
      return t;
    }
  }, {
    key: 'ease',
    value: function ease(t) {
      if (!_ease) {
        _ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return _ease(t);
    }
  }, {
    key: 'quad',
    value: function quad(t) {
      return t * t;
    }
  }, {
    key: 'cubic',
    value: function cubic(t) {
      return t * t * t;
    }
  }, {
    key: 'poly',
    value: function poly(n) {
      return function (t) {
        return Math.pow(t, n);
      };
    }
  }, {
    key: 'sin',
    value: function sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }
  }, {
    key: 'circle',
    value: function circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
  }, {
    key: 'exp',
    value: function exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }
  }, {
    key: 'elastic',
    value: function elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      var p = bounciness * Math.PI;
      return function (t) {
        return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
      };
    }
  }, {
    key: 'back',
    value: function back(s) {
      if (s === undefined) {
        s = 1.70158;
      }
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }
  }, {
    key: 'bounce',
    value: function bounce(t) {
      if (t < 1 / 2.75) {
        return 7.5625 * t * t;
      }

      if (t < 2 / 2.75) {
        t -= 1.5 / 2.75;
        return 7.5625 * t * t + 0.75;
      }

      if (t < 2.5 / 2.75) {
        t -= 2.25 / 2.75;
        return 7.5625 * t * t + 0.9375;
      }

      t -= 2.625 / 2.75;
      return 7.5625 * t * t + 0.984375;
    }
  }, {
    key: 'bezier',
    value: function bezier(x1, y1, x2, y2) {
      var _bezier = require(203     ); // 203 = bezier
      return _bezier(x1, y1, x2, y2);
    }
  }, {
    key: 'in',
    value: function _in(easing) {
      return easing;
    }
  }, {
    key: 'out',
    value: function out(easing) {
      return function (t) {
        return 1 - easing(1 - t);
      };
    }
  }, {
    key: 'inOut',
    value: function inOut(easing) {
      return function (t) {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  }]);
  return Easing;
}();

module.exports = Easing;
}, 202, null, "Easing");
__d(/* bezier */function(global, require, module, exports) {
'use strict';

var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};
}, 203, null, "bezier");
__d(/* Image */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Image/Image.ios.js';
var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var ImageResizeMode = require(135              ); // 135 = ImageResizeMode
var ImageSourcePropType = require(205                  ); // 205 = ImageSourcePropType
var ImageStylePropTypes = require(134                  ); // 134 = ImageStylePropTypes
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var NativeModules = require(30             ); // 30 = NativeModules
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes
var StyleSheet = require(160         ); // 160 = StyleSheet
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType

var createReactClass = require(157                 ); // 157 = create-react-class
var flattenStyle = require(119           ); // 119 = flattenStyle
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent
var resolveAssetSource = require(169                 ); // 169 = resolveAssetSource

var ImageViewManager = NativeModules.ImageViewManager;

var Image = createReactClass({
  displayName: 'Image',
  propTypes: {
    style: StyleSheetPropType(ImageStylePropTypes),

    source: ImageSourcePropType,

    defaultSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number,
      scale: PropTypes.number
    }), PropTypes.number]),

    accessible: PropTypes.bool,

    accessibilityLabel: PropTypes.node,

    blurRadius: PropTypes.number,

    capInsets: EdgeInsetsPropType,

    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),

    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'repeat', 'center']),

    testID: PropTypes.string,

    onLayout: PropTypes.func,

    onLoadStart: PropTypes.func,

    onProgress: PropTypes.func,

    onError: PropTypes.func,

    onPartialLoad: PropTypes.func,

    onLoad: PropTypes.func,

    onLoadEnd: PropTypes.func
  },

  statics: {
    resizeMode: ImageResizeMode,

    getSize: function getSize(uri, success, failure) {
      ImageViewManager.getSize(uri, success, failure || function () {
        console.warn('Failed to get size for image: ' + uri);
      });
    },
    prefetch: function prefetch(url) {
      return ImageViewManager.prefetchImage(url);
    },

    resolveAssetSource: resolveAssetSource
  },

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'UIView',
    validAttributes: ReactNativeViewAttributes.UIView
  },

  render: function render() {
    var source = resolveAssetSource(this.props.source) || { uri: undefined, width: undefined, height: undefined };

    var sources = void 0;
    var style = void 0;
    if (Array.isArray(source)) {
      style = flattenStyle([styles.base, this.props.style]) || {};
      sources = source;
    } else {
      var _width = source.width,
          _height = source.height,
          uri = source.uri;

      style = flattenStyle([{ width: _width, height: _height }, styles.base, this.props.style]) || {};
      sources = [source];

      if (uri === '') {
        console.warn('source.uri should not be an empty string');
      }
    }

    var resizeMode = this.props.resizeMode || (style || {}).resizeMode || 'cover';
    var tintColor = (style || {}).tintColor;

    if (this.props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    return React.createElement(RCTImageView, babelHelpers.extends({}, this.props, {
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 378
      }
    }));
  }
});

var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});

var RCTImageView = requireNativeComponent('RCTImageView', Image);

module.exports = Image;
}, 204, null, "Image");
__d(/* ImageSourcePropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var ImageURISourcePropType = PropTypes.shape({
  uri: PropTypes.string,

  bundle: PropTypes.string,

  method: PropTypes.string,

  headers: PropTypes.objectOf(PropTypes.string),

  body: PropTypes.string,

  cache: PropTypes.oneOf(['default', 'reload', 'force-cache', 'only-if-cached']),

  width: PropTypes.number,
  height: PropTypes.number,

  scale: PropTypes.number
});

var ImageSourcePropType = PropTypes.oneOfType([ImageURISourcePropType, PropTypes.number, PropTypes.arrayOf(ImageURISourcePropType)]);

module.exports = ImageSourcePropType;
}, 205, null, "ImageSourcePropType");
__d(/* ScrollView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js';
var Animated = require(193       ); // 193 = Animated
var ColorPropType = require(62             ); // 62 = ColorPropType
var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var Platform = require(38        ); // 38 = Platform
var PointPropType = require(207            ); // 207 = PointPropType
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var ScrollResponder = require(208              ); // 208 = ScrollResponder
var ScrollViewStickyHeader = require(215                     ); // 215 = ScrollViewStickyHeader
var StyleSheet = require(160         ); // 160 = StyleSheet
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var dismissKeyboard = require(211              ); // 211 = dismissKeyboard
var flattenStyle = require(119           ); // 119 = flattenStyle
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var processDecelerationRate = require(216                      ); // 216 = processDecelerationRate
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent
var warning = require(45                ); // 45 = fbjs/lib/warning

var ScrollView = createReactClass({
  displayName: 'ScrollView',
  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    automaticallyAdjustContentInsets: PropTypes.bool,

    contentInset: EdgeInsetsPropType,

    contentOffset: PointPropType,

    bounces: PropTypes.bool,

    bouncesZoom: PropTypes.bool,

    alwaysBounceHorizontal: PropTypes.bool,

    alwaysBounceVertical: PropTypes.bool,

    centerContent: PropTypes.bool,

    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),

    decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),

    horizontal: PropTypes.bool,

    indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),

    directionalLockEnabled: PropTypes.bool,

    canCancelContentTouches: PropTypes.bool,

    keyboardDismissMode: PropTypes.oneOf(['none', 'on-drag', 'interactive']),

    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),

    maximumZoomScale: PropTypes.number,

    minimumZoomScale: PropTypes.number,

    onMomentumScrollBegin: PropTypes.func,

    onMomentumScrollEnd: PropTypes.func,

    onScroll: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    pagingEnabled: PropTypes.bool,

    scrollEnabled: PropTypes.bool,

    scrollEventThrottle: PropTypes.number,

    scrollIndicatorInsets: EdgeInsetsPropType,

    scrollsToTop: PropTypes.bool,

    showsHorizontalScrollIndicator: PropTypes.bool,

    showsVerticalScrollIndicator: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
    style: StyleSheetPropType(ViewStylePropTypes),

    snapToInterval: PropTypes.number,

    snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),

    removeClippedSubviews: PropTypes.bool,

    zoomScale: PropTypes.number,

    contentInsetAdjustmentBehavior: PropTypes.oneOf(['automatic', 'scrollableAxes', 'never', 'always']),

    refreshControl: PropTypes.element,

    endFillColor: ColorPropType,

    scrollPerfTag: PropTypes.string,

    overScrollMode: PropTypes.oneOf(['auto', 'always', 'never']),

    DEPRECATED_sendUpdatedChildFrames: PropTypes.bool
  }),

  mixins: [ScrollResponder.Mixin],

  _scrollAnimatedValue: new Animated.Value(0),
  _scrollAnimatedValueAttachment: null,
  _stickyHeaderRefs: new Map(),
  _headerLayoutYs: new Map(),
  getInitialState: function getInitialState() {
    return this.scrollResponderMixinGetInitialState();
  },

  componentWillMount: function componentWillMount() {
    this._scrollAnimatedValue = new Animated.Value(0);
    this._stickyHeaderRefs = new Map();
    this._headerLayoutYs = new Map();
  },

  componentDidMount: function componentDidMount() {
    this._updateAnimatedNodeAttachment();
  },

  componentDidUpdate: function componentDidUpdate() {
    this._updateAnimatedNodeAttachment();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },

  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return ReactNative.findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return ReactNative.findNodeHandle(this._innerViewRef);
  },

  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === 'number') {
      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
    } else {
      var _ref = y || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({ x: x || 0, y: y || 0, animated: animated !== false });
  },

  scrollToEnd: function scrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated
    });
  },

  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
    this.scrollTo({ x: x, y: y, animated: false });
  },

  flashScrollIndicators: function flashScrollIndicators() {
    this.getScrollResponder().scrollResponderFlashScrollIndicators();
  },

  _getKeyForIndex: function _getKeyForIndex(index, childArray) {
    var child = childArray[index];
    return child && child.key;
  },

  _updateAnimatedNodeAttachment: function _updateAnimatedNodeAttachment() {
    if (this._scrollAnimatedValueAttachment) {
      this._scrollAnimatedValueAttachment.detach();
    }
    if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
      this._scrollAnimatedValueAttachment = Animated.attachNativeEvent(this._scrollViewRef, 'onScroll', [{ nativeEvent: { contentOffset: { y: this._scrollAnimatedValue } } }]);
    }
  },

  _setStickyHeaderRef: function _setStickyHeaderRef(key, ref) {
    if (ref) {
      this._stickyHeaderRefs.set(key, ref);
    } else {
      this._stickyHeaderRefs.delete(key);
    }
  },

  _onStickyHeaderLayout: function _onStickyHeaderLayout(index, event, key) {
    if (!this.props.stickyHeaderIndices) {
      return;
    }
    var childArray = React.Children.toArray(this.props.children);
    if (key !== this._getKeyForIndex(index, childArray)) {
      return;
    }

    var layoutY = event.nativeEvent.layout.y;
    this._headerLayoutYs.set(key, layoutY);

    var indexOfIndex = this.props.stickyHeaderIndices.indexOf(index);
    var previousHeaderIndex = this.props.stickyHeaderIndices[indexOfIndex - 1];
    if (previousHeaderIndex != null) {
      var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));
      previousHeader && previousHeader.setNextHeaderY(layoutY);
    }
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
        console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
      }
    }
    if (Platform.OS === 'android') {
      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;

    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {
    var _this = this;

    var ScrollViewClass = void 0;
    var ScrollContentContainerViewClass = void 0;
    if (Platform.OS === 'ios') {
      ScrollViewClass = RCTScrollView;
      ScrollContentContainerViewClass = RCTScrollContentView;
      warning(!this.props.snapToInterval || !this.props.pagingEnabled, 'snapToInterval is currently ignored when pagingEnabled is true.');
    } else if (Platform.OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
      } else {
        ScrollViewClass = AndroidScrollView;
      }
      ScrollContentContainerViewClass = View;
    }

    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

    invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');

    var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
    var style = void 0,
        childLayoutProps = void 0;
    if (__DEV__ && this.props.style) {
      style = flattenStyle(this.props.style);
      childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
        return style && style[prop] !== undefined;
      });
      invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout
      };
    }

    var stickyHeaderIndices = this.props.stickyHeaderIndices;

    var hasStickyHeaders = stickyHeaderIndices && stickyHeaderIndices.length > 0;
    var childArray = hasStickyHeaders && React.Children.toArray(this.props.children);
    var children = hasStickyHeaders ? childArray.map(function (child, index) {
      var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;
      if (indexOfIndex > -1) {
        var key = child.key;
        var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
        return React.createElement(
          ScrollViewStickyHeader,
          {
            key: key,
            ref: function ref(_ref2) {
              return _this._setStickyHeaderRef(key, _ref2);
            },
            nextHeaderLayoutY: _this._headerLayoutYs.get(_this._getKeyForIndex(nextIndex, childArray)),
            onLayout: function onLayout(event) {
              return _this._onStickyHeaderLayout(index, event, key);
            },
            scrollAnimatedValue: _this._scrollAnimatedValue, __source: {
              fileName: _jsxFileName,
              lineNumber: 690
            }
          },
          child
        );
      } else {
        return child;
      }
    }) : this.props.children;
    var contentContainer = React.createElement(
      ScrollContentContainerViewClass,
      babelHelpers.extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 707
        }
      }),
      children
    );

    var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;

    var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;

    var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;

    var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
    var props = babelHelpers.extends({}, this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],

      onContentSizeChange: null,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderReject: this.scrollResponderHandleResponderReject,
      onResponderRelease: this.scrollResponderHandleResponderRelease,
      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onScroll: this._handleScroll,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchStart: this.scrollResponderHandleTouchStart,
      scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
      DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames
    });

    var decelerationRate = this.props.decelerationRate;

    if (decelerationRate) {
      props.decelerationRate = processDecelerationRate(decelerationRate);
    }

    var refreshControl = this.props.refreshControl;

    if (refreshControl) {
      if (Platform.OS === 'ios') {
        return React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 778
            }
          }),
          Platform.isTVOS ? null : refreshControl,
          contentContainer
        );
      } else if (Platform.OS === 'android') {

        return React.cloneElement(refreshControl, { style: props.style }, React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { style: baseStyle, ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 793
            }
          }),
          contentContainer
        ));
      }
    }
    return React.createElement(
      ScrollViewClass,
      babelHelpers.extends({}, props, { ref: this._setScrollViewRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 800
        }
      }),
      contentContainer
    );
  }
});

var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

var nativeOnlyProps = void 0,
    AndroidScrollView = void 0,
    AndroidHorizontalScrollView = void 0,
    RCTScrollView = void 0,
    RCTScrollContentView = void 0;
if (Platform.OS === 'android') {
  nativeOnlyProps = {
    nativeOnly: {
      sendMomentumEvents: true
    }
  };
  AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
  AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
} else if (Platform.OS === 'ios') {
  nativeOnlyProps = {
    nativeOnly: {
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true
    }
  };
  RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);

  RCTScrollContentView = requireNativeComponent('RCTScrollContentView', View);
}

module.exports = ScrollView;
}, 206, null, "ScrollView");
__d(/* PointPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types

var createStrictShapeTypeChecker = require(149                           ); // 149 = createStrictShapeTypeChecker

var PointPropType = createStrictShapeTypeChecker({
  x: PropTypes.number,
  y: PropTypes.number
});

module.exports = PointPropType;
}, 207, null, "PointPropType");
__d(/* ScrollResponder */function(global, require, module, exports) {
'use strict';

var Dimensions = require(162         ); // 162 = Dimensions
var FrameRateLogger = require(209              ); // 209 = FrameRateLogger
var Keyboard = require(210       ); // 210 = Keyboard
var ReactNative = require(65           ); // 65 = ReactNative
var Subscribable = require(212           ); // 212 = Subscribable
var TextInputState = require(129             ); // 129 = TextInputState
var UIManager = require(125        ); // 125 = UIManager

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var nullthrows = require(213                  ); // 213 = fbjs/lib/nullthrows
var performanceNow = require(39                       ); // 39 = fbjs/lib/performanceNow
var warning = require(45                ); // 45 = fbjs/lib/warning

var _require = require(30             ), // 30 = NativeModules
    ScrollViewManager = _require.ScrollViewManager;

var _require2 = require(214                       ), // 214 = ReactNativeComponentTree
    getInstanceFromNode = _require2.getInstanceFromNode;

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

function isTagInstanceOfTextInput(tag) {
  var instance = getInstanceFromNode(tag);
  return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTTextView' || instance.viewConfig.uiViewClassName === 'RCTTextField');
}

var ScrollResponderMixin = {
  mixins: [Subscribable.Mixin],
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,

      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },

  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },

  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }
    return false;
  },

  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
      return true;
    }
    return this.scrollResponderIsAnimating();
  },

  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},

  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },

  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },

  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },

  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },

  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },

  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    FrameRateLogger.beginScroll();
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },

  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    var velocity = e.nativeEvent.velocity;

    if (!this.scrollResponderIsAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {
      FrameRateLogger.endScroll();
    }
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },

  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = performanceNow();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },

  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    FrameRateLogger.endScroll();
    this.state.lastMomentumScrollEndTime = performanceNow();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },

  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },

  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },

  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = performanceNow();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },

  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },

  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    UIManager.dispatchViewManagerCommand(nullthrows(this.scrollResponderGetScrollableNode()), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },

  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
  },

  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({ x: offsetX, y: offsetY, animated: false });
  },

  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');
    if ('animated' in rect) {
      var animated = rect.animated,
          rect = babelHelpers.objectWithoutProperties(rect, ['animated']);
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }
    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },

  scrollResponderFlashScrollIndicators: function scrollResponderFlashScrollIndicators() {
    invariant(ScrollViewManager && ScrollViewManager.flashScrollIndicators, 'flashScrollIndicators is not implemented');
    ScrollViewManager.flashScrollIndicators(this.scrollResponderGetScrollableNode());
  },

  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },

  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;
    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }
    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }
    this.scrollResponderScrollTo({ x: 0, y: scrollOffsetY, animated: true });

    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },

  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error('Error measuring text field: ', e);
  },

  componentWillMount: function componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    warning(typeof keyboardShouldPersistTaps !== 'boolean', '\'keyboardShouldPersistTaps={' + keyboardShouldPersistTaps + '}\' is deprecated. ' + ('Use \'keyboardShouldPersistTaps="' + (keyboardShouldPersistTaps ? "always" : "never") + '"\' instead'));

    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },

  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },

  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },

  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }
    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },

  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }

};

var ScrollResponder = {
  Mixin: ScrollResponderMixin
};

module.exports = ScrollResponder;
}, 208, null, "ScrollResponder");
__d(/* FrameRateLogger */function(global, require, module, exports) {
'use strict';

var NativeModules = require(30             ); // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var FrameRateLogger = {
  setGlobalOptions: function setGlobalOptions(options) {
    if (options.debug !== undefined) {
      invariant(NativeModules.FrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');
    }
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setGlobalOptions(options);
  },

  setContext: function setContext(context) {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.setContext(context);
  },

  beginScroll: function beginScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.beginScroll();
  },
  endScroll: function endScroll() {
    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();
  }
};

module.exports = FrameRateLogger;
}, 209, null, "FrameRateLogger");
__d(/* Keyboard */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var KeyboardObserver = require(30             ).KeyboardObserver; // 30 = NativeModules
var dismissKeyboard = require(211              ); // 211 = dismissKeyboard
var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);

var Keyboard = {
  addListener: function addListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeListener: function removeListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeAllListeners: function removeAllListeners(eventName) {
    invariant(false, 'Dummy method used for documentation');
  },
  dismiss: function dismiss() {
    invariant(false, 'Dummy method used for documentation');
  }
};

Keyboard = KeyboardEventEmitter;
Keyboard.dismiss = dismissKeyboard;

module.exports = Keyboard;
}, 210, null, "Keyboard");
__d(/* dismissKeyboard */function(global, require, module, exports) {
'use strict';

var TextInputState = require(129             ); // 129 = TextInputState

function dismissKeyboard() {
  TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
}

module.exports = dismissKeyboard;
}, 211, null, "dismissKeyboard");
__d(/* Subscribable */function(global, require, module, exports) {
'use strict';

var Subscribable = {};

Subscribable.Mixin = {

  componentWillMount: function componentWillMount() {
    this._subscribableSubscriptions = [];
  },

  componentWillUnmount: function componentWillUnmount() {
    this._subscribableSubscriptions.forEach(function (subscription) {
      return subscription.remove();
    });
    this._subscribableSubscriptions = null;
  },

  addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
    this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
  }
};

module.exports = Subscribable;
}, 212, null, "Subscribable");
__d(/* fbjs/lib/nullthrows.js */function(global, require, module, exports) {"use strict";

var nullthrows = function nullthrows(x) {
  if (x != null) {
    return x;
  }
  throw new Error("Got unexpected null or undefined");
};

module.exports = nullthrows;
}, 213, null, "fbjs/lib/nullthrows.js");
__d(/* ReactNativeComponentTree */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactNativeComponentTree;
}, 214, null, "ReactNativeComponentTree");
__d(/* ScrollViewStickyHeader */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/ScrollView/ScrollViewStickyHeader.js';
var Animated = require(193       ); // 193 = Animated
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet

var ScrollViewStickyHeader = function (_React$Component) {
  babelHelpers.inherits(ScrollViewStickyHeader, _React$Component);

  function ScrollViewStickyHeader(props, context) {
    babelHelpers.classCallCheck(this, ScrollViewStickyHeader);

    var _this = babelHelpers.possibleConstructorReturn(this, (ScrollViewStickyHeader.__proto__ || Object.getPrototypeOf(ScrollViewStickyHeader)).call(this, props, context));

    _this._onLayout = function (event) {
      _this.setState({
        measured: true,
        layoutY: event.nativeEvent.layout.y,
        layoutHeight: event.nativeEvent.layout.height
      });

      _this.props.onLayout(event);
      var child = React.Children.only(_this.props.children);
      if (child.props.onLayout) {
        child.props.onLayout(event);
      }
    };

    _this.state = {
      measured: false,
      layoutY: 0,
      layoutHeight: 0,
      nextHeaderLayoutY: props.nextHeaderLayoutY
    };
    return _this;
  }

  babelHelpers.createClass(ScrollViewStickyHeader, [{
    key: 'setNextHeaderY',
    value: function setNextHeaderY(y) {
      this.setState({ nextHeaderLayoutY: y });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          measured = _state.measured,
          layoutHeight = _state.layoutHeight,
          layoutY = _state.layoutY,
          nextHeaderLayoutY = _state.nextHeaderLayoutY;

      var inputRange = [-1, 0];
      var outputRange = [0, 0];

      if (measured) {
        inputRange.push(layoutY);
        outputRange.push(0);

        var collisionPoint = (nextHeaderLayoutY || 0) - layoutHeight;
        if (collisionPoint >= layoutY) {
          inputRange.push(collisionPoint, collisionPoint + 1);
          outputRange.push(collisionPoint - layoutY, collisionPoint - layoutY);
        } else {
          inputRange.push(layoutY + 1);
          outputRange.push(1);
        }
      }

      var translateY = this.props.scrollAnimatedValue.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });
      var child = React.Children.only(this.props.children);

      return React.createElement(
        Animated.View,
        {
          collapsable: false,
          onLayout: this._onLayout,
          style: [child.props.style, styles.header, { transform: [{ translateY: translateY }] }], __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        },
        React.cloneElement(child, {
          style: styles.fill,
          onLayout: undefined })
      );
    }
  }]);
  return ScrollViewStickyHeader;
}(React.Component);

var styles = StyleSheet.create({
  header: {
    zIndex: 10
  },
  fill: {
    flex: 1
  }
});

module.exports = ScrollViewStickyHeader;
}, 215, null, "ScrollViewStickyHeader");
__d(/* processDecelerationRate */function(global, require, module, exports) {
'use strict';

function processDecelerationRate(decelerationRate) {
  if (decelerationRate === 'normal') {
    decelerationRate = 0.998;
  } else if (decelerationRate === 'fast') {
    decelerationRate = 0.99;
  }
  return decelerationRate;
}

module.exports = processDecelerationRate;
}, 216, null, "processDecelerationRate");
__d(/* react-timer-mixin/TimerMixin.js */function(global, require, module, exports) {
'use strict';

var GLOBAL = typeof window === 'undefined' ? global : window;

var setter = function setter(_setter, _clearer, array) {
  return function (callback, delta) {
    var id = _setter(function () {
      _clearer.call(this, id);
      callback.apply(this, arguments);
    }.bind(this), delta);

    if (!this[array]) {
      this[array] = [id];
    } else {
      this[array].push(id);
    }
    return id;
  };
};

var clearer = function clearer(_clearer, array) {
  return function (id) {
    if (this[array]) {
      var index = this[array].indexOf(id);
      if (index !== -1) {
        this[array].splice(index, 1);
      }
    }
    _clearer(id);
  };
};

var _timeouts = 'TimerMixin_timeouts';
var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

var _intervals = 'TimerMixin_intervals';
var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

var _immediates = 'TimerMixin_immediates';
var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

var _rafs = 'TimerMixin_rafs';
var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

var TimerMixin = {
  componentWillUnmount: function componentWillUnmount() {
    this[_timeouts] && this[_timeouts].forEach(function (id) {
      GLOBAL.clearTimeout(id);
    });
    this[_timeouts] = null;
    this[_intervals] && this[_intervals].forEach(function (id) {
      GLOBAL.clearInterval(id);
    });
    this[_intervals] = null;
    this[_immediates] && this[_immediates].forEach(function (id) {
      GLOBAL.clearImmediate(id);
    });
    this[_immediates] = null;
    this[_rafs] && this[_rafs].forEach(function (id) {
      GLOBAL.cancelAnimationFrame(id);
    });
    this[_rafs] = null;
  },

  setTimeout: _setTimeout,
  clearTimeout: _clearTimeout,

  setInterval: _setInterval,
  clearInterval: _clearInterval,

  setImmediate: _setImmediate,
  clearImmediate: _clearImmediate,

  requestAnimationFrame: _requestAnimationFrame,
  cancelAnimationFrame: _cancelAnimationFrame
};

module.exports = TimerMixin;
}, 217, null, "react-timer-mixin/TimerMixin.js");
__d(/* TouchableWithoutFeedback */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable

var createReactClass = require(157                 ); // 157 = create-react-class
var ensurePositiveDelayProps = require(219                       ); // 219 = ensurePositiveDelayProps
var warning = require(45                ); // 45 = fbjs/lib/warning

var _require = require(156                ), // 156 = ViewAccessibility
    AccessibilityComponentTypes = _require.AccessibilityComponentTypes,
    AccessibilityTraits = _require.AccessibilityTraits;

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableWithoutFeedback = createReactClass({
  displayName: 'TouchableWithoutFeedback',
  mixins: [TimerMixin, Touchable.Mixin],

  propTypes: {
    accessible: PropTypes.bool,
    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentTypes),
    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

    disabled: PropTypes.bool,

    onPress: PropTypes.func,

    onPressIn: PropTypes.func,

    onPressOut: PropTypes.func,

    onLayout: PropTypes.func,

    onLongPress: PropTypes.func,

    delayPressIn: PropTypes.number,

    delayPressOut: PropTypes.number,

    delayLongPress: PropTypes.number,

    pressRetentionOffset: EdgeInsetsPropType,

    hitSlop: EdgeInsetsPropType
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {
    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));
    if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
      children = React.Children.toArray(children);
      children.push(Touchable.renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));
    }
    var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, { color: 'red' }] : child.props.style;
    return React.cloneElement(child, {
      accessible: this.props.accessible !== false,

      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityComponentType: this.props.accessibilityComponentType,
      accessibilityTraits: this.props.accessibilityTraits,

      nativeID: this.props.nativeID,

      testID: this.props.testID,
      onLayout: this.props.onLayout,
      hitSlop: this.props.hitSlop,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      style: style,
      children: children
    });
  }
});

module.exports = TouchableWithoutFeedback;
}, 218, null, "TouchableWithoutFeedback");
__d(/* ensurePositiveDelayProps */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
  invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
};

module.exports = ensurePositiveDelayProps;
}, 219, null, "ensurePositiveDelayProps");
__d(/* DatePickerIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.ios.js';
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var DatePickerIOS = createReactClass({
  displayName: 'DatePickerIOS',

  _picker: undefined,

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    date: PropTypes.instanceOf(Date).isRequired,

    onDateChange: PropTypes.func.isRequired,

    maximumDate: PropTypes.instanceOf(Date),

    minimumDate: PropTypes.instanceOf(Date),

    mode: PropTypes.oneOf(['date', 'time', 'datetime']),

    minuteInterval: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30]),

    timeZoneOffsetInMinutes: PropTypes.number
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      mode: 'datetime'
    };
  },

  _onChange: function _onChange(event) {
    var nativeTimeStamp = event.nativeEvent.timestamp;
    this.props.onDateChange && this.props.onDateChange(new Date(nativeTimeStamp));

    this.props.onChange && this.props.onChange(event);

    var propsTimeStamp = this.props.date.getTime();
    if (this._picker && nativeTimeStamp !== propsTimeStamp) {
      this._picker.setNativeProps({
        date: propsTimeStamp
      });
    }
  },

  render: function render() {
    var _this = this;

    var props = this.props;
    return React.createElement(
      View,
      { style: props.style, __source: {
          fileName: _jsxFileName,
          lineNumber: 126
        }
      },
      React.createElement(RCTDatePickerIOS, {
        ref: function ref(picker) {
          _this._picker = picker;
        },
        style: styles.datePickerIOS,
        date: props.date.getTime(),
        maximumDate: props.maximumDate ? props.maximumDate.getTime() : undefined,
        minimumDate: props.minimumDate ? props.minimumDate.getTime() : undefined,
        mode: props.mode,
        minuteInterval: props.minuteInterval,
        timeZoneOffsetInMinutes: props.timeZoneOffsetInMinutes,
        onChange: this._onChange,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 127
        }
      })
    );
  }
});

var styles = StyleSheet.create({
  datePickerIOS: {
    height: 216
  }
});

var RCTDatePickerIOS = requireNativeComponent('RCTDatePicker', {
  propTypes: babelHelpers.extends({}, DatePickerIOS.propTypes, {
    date: PropTypes.number,
    minimumDate: PropTypes.number,
    maximumDate: PropTypes.number,
    onDateChange: function onDateChange() {
      return null;
    },
    onChange: PropTypes.func
  })
});

module.exports = DatePickerIOS;
}, 220, null, "DatePickerIOS");
__d(/* DrawerLayoutAndroid */function(global, require, module, exports) {
'use strict';

module.exports = require(159                ); // 159 = UnimplementedView
}, 221, null, "DrawerLayoutAndroid");
__d(/* FlatList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/FlatList.js';
var MetroListView = require(223            ); // 223 = MetroListView
var React = require(132    ); // 132 = React
var View = require(131   ); // 131 = View
var VirtualizedList = require(230              ); // 230 = VirtualizedList

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
  numColumns: 1
});

var FlatList = function (_React$PureComponent) {
  babelHelpers.inherits(FlatList, _React$PureComponent);

  function FlatList() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, FlatList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = FlatList.__proto__ || Object.getPrototypeOf(FlatList)).call.apply(_ref, [this].concat(args))), _this), _this._hasWarnedLegacy = false, _this._captureRef = function (ref) {
      _this._listRef = ref;
    }, _this._getItem = function (data, index) {
      var numColumns = _this.props.numColumns;

      if (numColumns > 1) {
        var ret = [];
        for (var kk = 0; kk < numColumns; kk++) {
          var _item = data[index * numColumns + kk];
          _item && ret.push(_item);
        }
        return ret;
      } else {
        return data[index];
      }
    }, _this._getItemCount = function (data) {
      return data ? Math.ceil(data.length / _this.props.numColumns) : 0;
    }, _this._keyExtractor = function (items, index) {
      var _this$props = _this.props,
          keyExtractor = _this$props.keyExtractor,
          numColumns = _this$props.numColumns;

      if (numColumns > 1) {
        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);
        return items.map(function (it, kk) {
          return keyExtractor(it, index * numColumns + kk);
        }).join(':');
      } else {
        return keyExtractor(items, index);
      }
    }, _this._onViewableItemsChanged = function (info) {
      var _this$props2 = _this.props,
          numColumns = _this$props2.numColumns,
          onViewableItemsChanged = _this$props2.onViewableItemsChanged;

      if (!onViewableItemsChanged) {
        return;
      }
      if (numColumns > 1) {
        var _changed = [];
        var _viewableItems = [];
        info.viewableItems.forEach(function (v) {
          return _this._pushMultiColumnViewable(_viewableItems, v);
        });
        info.changed.forEach(function (v) {
          return _this._pushMultiColumnViewable(_changed, v);
        });
        onViewableItemsChanged({ viewableItems: _viewableItems, changed: _changed });
      } else {
        onViewableItemsChanged(info);
      }
    }, _this._renderItem = function (info) {
      var _this$props3 = _this.props,
          renderItem = _this$props3.renderItem,
          numColumns = _this$props3.numColumns,
          columnWrapperStyle = _this$props3.columnWrapperStyle;

      if (numColumns > 1) {
        var _item2 = info.item,
            _index = info.index;

        invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');
        return React.createElement(
          View,
          { style: [{ flexDirection: 'row' }, columnWrapperStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 530
            }
          },
          _item2.map(function (it, kk) {
            var element = renderItem({
              item: it,
              index: _index * numColumns + kk,
              separators: info.separators
            });
            return element && React.cloneElement(element, { key: kk });
          })
        );
      } else {
        return renderItem(info);
      }
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(FlatList, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      this._listRef.scrollToEnd(params);
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      this._listRef.scrollToIndex(params);
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      this._listRef.scrollToItem(params);
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      this._listRef.scrollToOffset(params);
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._listRef.recordInteraction();
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      this._listRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listRef) {
        return this._listRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      if (this._listRef) {
        return this._listRef.getScrollableNode();
      }
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._checkProps(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      invariant(nextProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');
      this._checkProps(nextProps);
    }
  }, {
    key: '_checkProps',
    value: function _checkProps(props) {
      var getItem = props.getItem,
          getItemCount = props.getItemCount,
          horizontal = props.horizontal,
          legacyImplementation = props.legacyImplementation,
          numColumns = props.numColumns,
          columnWrapperStyle = props.columnWrapperStyle;

      invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');
      if (numColumns > 1) {
        invariant(!horizontal, 'numColumns does not support horizontal.');
      } else {
        invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');
      }
      if (legacyImplementation) {
        invariant(numColumns === 1, 'Legacy list does not support multiple columns.');

        if (!this._hasWarnedLegacy) {
          console.warn('FlatList: Using legacyImplementation - some features not supported and performance ' + 'may suffer');
          this._hasWarnedLegacy = true;
        }
      }
    }
  }, {
    key: '_pushMultiColumnViewable',
    value: function _pushMultiColumnViewable(arr, v) {
      var _props = this.props,
          numColumns = _props.numColumns,
          keyExtractor = _props.keyExtractor;

      v.item.forEach(function (item, ii) {
        invariant(v.index != null, 'Missing index!');
        var index = v.index * numColumns + ii;
        arr.push(babelHelpers.extends({}, v, { item: item, key: keyExtractor(item, index), index: index }));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.legacyImplementation) {
        return React.createElement(MetroListView, babelHelpers.extends({}, this.props, {
          items: this.props.data,
          ref: this._captureRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 549
          }
        }));
      } else {
        return React.createElement(VirtualizedList, babelHelpers.extends({}, this.props, {
          renderItem: this._renderItem,
          getItem: this._getItem,
          getItemCount: this._getItemCount,
          keyExtractor: this._keyExtractor,
          ref: this._captureRef,
          onViewableItemsChanged: this.props.onViewableItemsChanged && this._onViewableItemsChanged,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 557
          }
        }));
      }
    }
  }]);
  return FlatList;
}(React.PureComponent);

FlatList.defaultProps = defaultProps;


module.exports = FlatList;
}, 222, null, "FlatList");
__d(/* MetroListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/MetroListView.js';
var ListView = require(224       ); // 224 = ListView
var React = require(132    ); // 132 = React
var RefreshControl = require(229             ); // 229 = RefreshControl
var ScrollView = require(206         ); // 206 = ScrollView

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var MetroListView = function (_React$Component) {
  babelHelpers.inherits(MetroListView, _React$Component);

  function MetroListView() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, MetroListView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MetroListView.__proto__ || Object.getPrototypeOf(MetroListView)).call.apply(_ref, [this].concat(args))), _this), _this.state = _this._computeState(_this.props, {
      ds: new ListView.DataSource({
        rowHasChanged: function rowHasChanged(itemA, itemB) {
          return true;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged() {
          return true;
        },
        getSectionHeaderData: function getSectionHeaderData(dataBlob, sectionID) {
          return _this.state.sectionHeaderData[sectionID];
        }
      }),
      sectionHeaderData: {}
    }), _this._captureRef = function (ref) {
      _this._listRef = ref;
    }, _this._renderFooter = function () {
      return React.createElement(_this2.props.FooterComponent, { key: '$footer', __source: {
          fileName: _jsxFileName,
          lineNumber: 174
        }
      });
    }, _this._renderRow = function (item, sectionID, rowID, highlightRow) {
      return _this.props.renderItem({ item: item, index: rowID });
    }, _this._renderSectionHeader = function (section, sectionID) {
      var renderSectionHeader = _this.props.renderSectionHeader;

      invariant(renderSectionHeader, 'Must provide renderSectionHeader with sections prop');
      return renderSectionHeader({ section: section });
    }, _this._renderSeparator = function (sID, rID) {
      return React.createElement(_this2.props.SeparatorComponent, { key: sID + rID, __source: {
          fileName: _jsxFileName,
          lineNumber: 187
        }
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(MetroListView, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      throw new Error('scrollToEnd not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      throw new Error('scrollToIndex not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      throw new Error('scrollToItem not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      throw new Error('scrollToLocation not supported in legacy ListView.');
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      this._listRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'getListRef',
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._listRef) {
        this._listRef.setNativeProps(props);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var _this3 = this;

      this.setState(function (state) {
        return _this3._computeState(newProps, state);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(ListView, babelHelpers.extends({}, this.props, {
        dataSource: this.state.ds,
        ref: this._captureRef,
        renderRow: this._renderRow,
        renderFooter: this.props.FooterComponent && this._renderFooter,
        renderSectionHeader: this.props.sections && this._renderSectionHeader,
        renderSeparator: this.props.SeparatorComponent && this._renderSeparator,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 137
        }
      }));
    }
  }, {
    key: '_computeState',
    value: function _computeState(props, state) {
      var sectionHeaderData = {};
      if (props.sections) {
        invariant(!props.items, 'Cannot have both sections and items props.');
        var _sections = {};
        props.sections.forEach(function (sectionIn, ii) {
          var sectionID = 's' + ii;
          _sections[sectionID] = sectionIn.data;
          sectionHeaderData[sectionID] = sectionIn;
        });
        return {
          ds: state.ds.cloneWithRowsAndSections(_sections),
          sectionHeaderData: sectionHeaderData
        };
      } else {
        invariant(!props.sections, 'Cannot have both sections and items props.');
        return {
          ds: state.ds.cloneWithRows(props.items),
          sectionHeaderData: sectionHeaderData
        };
      }
    }
  }]);
  return MetroListView;
}(React.Component);

MetroListView.defaultProps = {
  keyExtractor: function keyExtractor(item, index) {
    return item.key || String(index);
  },
  renderScrollComponent: function renderScrollComponent(props) {
    if (props.onRefresh) {
      return React.createElement(ScrollView, babelHelpers.extends({}, props, {
        refreshControl: React.createElement(RefreshControl, {
          refreshing: props.refreshing,
          onRefresh: props.onRefresh,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 108
        }
      }));
    } else {
      return React.createElement(ScrollView, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119
        }
      }));
    }
  }
};


module.exports = MetroListView;
}, 223, null, "MetroListView");
__d(/* ListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/ListView/ListView.js';
var ListViewDataSource = require(225                 ); // 225 = ListViewDataSource
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(65           ); // 65 = ReactNative
var RCTScrollViewManager = require(30             ).ScrollViewManager; // 30 = NativeModules
var ScrollView = require(206         ); // 206 = ScrollView
var ScrollResponder = require(208              ); // 208 = ScrollResponder
var StaticRenderer = require(227             ); // 227 = StaticRenderer
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var View = require(131   ); // 131 = View

var cloneReferencedElement = require(228                             ); // 228 = react-clone-referenced-element
var createReactClass = require(157                 ); // 157 = create-react-class
var isEmpty = require(226      ); // 226 = isEmpty
var merge = require(150    ); // 150 = merge

var DEFAULT_PAGE_SIZE = 1;
var DEFAULT_INITIAL_ROWS = 10;
var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
var DEFAULT_END_REACHED_THRESHOLD = 1000;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;

var ListView = createReactClass({
  displayName: 'ListView',
  _childFrames: [],
  _sentEndForContentLength: null,
  _scrollComponent: null,
  _prevRenderedRowsCount: 0,
  _visibleRows: {},
  scrollProperties: {},

  mixins: [ScrollResponder.Mixin, TimerMixin],

  statics: {
    DataSource: ListViewDataSource
  },

  propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,

    renderSeparator: PropTypes.func,

    renderRow: PropTypes.func.isRequired,

    initialListSize: PropTypes.number.isRequired,

    onEndReached: PropTypes.func,

    onEndReachedThreshold: PropTypes.number.isRequired,

    pageSize: PropTypes.number.isRequired,

    renderFooter: PropTypes.func,
    renderHeader: PropTypes.func,

    renderSectionHeader: PropTypes.func,

    renderScrollComponent: PropTypes.func.isRequired,

    scrollRenderAheadDistance: PropTypes.number.isRequired,

    onChangeVisibleRows: PropTypes.func,

    removeClippedSubviews: PropTypes.bool,

    stickySectionHeadersEnabled: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,

    enableEmptySections: PropTypes.bool
  }),

  getMetrics: function getMetrics() {
    return {
      contentLength: this.scrollProperties.contentLength,
      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
      renderedRows: this.state.curRenderedRowsCount,
      visibleRows: Object.keys(this._visibleRows).length
    };
  },

  getScrollResponder: function getScrollResponder() {
    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
      return this._scrollComponent.getScrollResponder();
    }
  },

  getScrollableNode: function getScrollableNode() {
    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
      return this._scrollComponent.getScrollableNode();
    } else {
      return ReactNative.findNodeHandle(this._scrollComponent);
    }
  },

  scrollTo: function scrollTo() {
    if (this._scrollComponent && this._scrollComponent.scrollTo) {
      var _scrollComponent;

      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
    }
  },

  scrollToEnd: function scrollToEnd(options) {
    if (this._scrollComponent) {
      if (this._scrollComponent.scrollToEnd) {
        this._scrollComponent.scrollToEnd(options);
      } else {
        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
      }
    }
  },

  flashScrollIndicators: function flashScrollIndicators() {
    if (this._scrollComponent && this._scrollComponent.flashScrollIndicators) {
      this._scrollComponent.flashScrollIndicators();
    }
  },

  setNativeProps: function setNativeProps(props) {
    if (this._scrollComponent) {
      this._scrollComponent.setNativeProps(props);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialListSize: DEFAULT_INITIAL_ROWS,
      pageSize: DEFAULT_PAGE_SIZE,
      renderScrollComponent: function renderScrollComponent(props) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 332
          }
        }));
      },
      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
      stickySectionHeadersEnabled: Platform.OS === 'ios',
      stickyHeaderIndices: []
    };
  },

  getInitialState: function getInitialState() {
    return {
      curRenderedRowsCount: this.props.initialListSize,
      highlightedRow: {}
    };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this._scrollComponent.getInnerViewNode();
  },

  componentWillMount: function componentWillMount() {
    this.scrollProperties = {
      visibleLength: null,
      contentLength: null,
      offset: 0
    };
    this._childFrames = [];
    this._visibleRows = {};
    this._prevRenderedRowsCount = 0;
    this._sentEndForContentLength = null;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this.requestAnimationFrame(function () {
      _this._measureAndUpdateScrollProps();
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
      this.setState(function (state, props) {
        _this2._prevRenderedRowsCount = 0;
        return {
          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
        };
      }, function () {
        return _this2._renderMoreRowsIfNeeded();
      });
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var _this3 = this;

    this.requestAnimationFrame(function () {
      _this3._measureAndUpdateScrollProps();
    });
  },

  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
  },

  render: function render() {
    var bodyComponents = [];

    var dataSource = this.props.dataSource;
    var allRowIDs = dataSource.rowIdentities;
    var rowCount = 0;
    var stickySectionHeaderIndices = [];

    var renderSectionHeader = this.props.renderSectionHeader;


    var header = this.props.renderHeader && this.props.renderHeader();
    var footer = this.props.renderFooter && this.props.renderFooter();
    var totalIndex = header ? 1 : 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        if (this.props.enableEmptySections === undefined) {
          var warning = require(45                ); // 45 = fbjs/lib/warning
          warning(false, 'In next release empty section headers will be rendered.' + " In this release you can use 'enableEmptySections' flag to render empty section headers.");
          continue;
        } else {
          var invariant = require(28                  ); // 28 = fbjs/lib/invariant
          invariant(this.props.enableEmptySections, "In next release 'enableEmptySections' flag will be deprecated, empty section headers will always be rendered." + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + " In this release 'enableEmptySections' may only have value 'true' to allow empty section headers rendering.");
        }
      }

      if (renderSectionHeader) {
        var element = renderSectionHeader(dataSource.getSectionHeaderData(sectionIdx), sectionID);
        if (element) {
          bodyComponents.push(React.cloneElement(element, { key: 's_' + sectionID }));
          if (this.props.stickySectionHeadersEnabled) {
            stickySectionHeaderIndices.push(totalIndex);
          }
          totalIndex++;
        }
      }

      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var comboID = sectionID + '_' + rowID;
        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
        var row = React.createElement(StaticRenderer, {
          key: 'r_' + comboID,
          shouldUpdate: !!shouldUpdateRow,
          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 464
          }
        });
        bodyComponents.push(row);
        totalIndex++;

        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);
          if (separator) {
            bodyComponents.push(React.createElement(
              View,
              { key: 's_' + comboID, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 494
                }
              },
              separator
            ));
            totalIndex++;
          }
        }
        if (++rowCount === this.state.curRenderedRowsCount) {
          break;
        }
      }
      if (rowCount >= this.state.curRenderedRowsCount) {
        break;
      }
    }

    var _props = this.props,
        renderScrollComponent = _props.renderScrollComponent,
        props = babelHelpers.objectWithoutProperties(_props, ['renderScrollComponent']);

    if (!props.scrollEventThrottle) {
      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
    }
    if (props.removeClippedSubviews === undefined) {
      props.removeClippedSubviews = true;
    }
    babelHelpers.extends(props, {
      onScroll: this._onScroll,
      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),

      onKeyboardWillShow: undefined,
      onKeyboardWillHide: undefined,
      onKeyboardDidShow: undefined,
      onKeyboardDidHide: undefined
    });

    return cloneReferencedElement(renderScrollComponent(props), {
      ref: this._setScrollComponentRef,
      onContentSizeChange: this._onContentSizeChange,
      onLayout: this._onLayout,
      DEPRECATED_sendUpdatedChildFrames: typeof props.onChangeVisibleRows !== undefined
    }, header, bodyComponents, footer);
  },

  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
    var scrollComponent = this.getScrollResponder();
    if (!scrollComponent || !scrollComponent.getInnerViewNode) {
      return;
    }

    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
  },

  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
    this._scrollComponent = scrollComponent;
  },

  _onContentSizeChange: function _onContentSizeChange(width, height) {
    var contentLength = !this.props.horizontal ? height : width;
    if (contentLength !== this.scrollProperties.contentLength) {
      this.scrollProperties.contentLength = contentLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _onLayout: function _onLayout(event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;

    var visibleLength = !this.props.horizontal ? height : width;
    if (visibleLength !== this.scrollProperties.visibleLength) {
      this.scrollProperties.visibleLength = visibleLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onLayout && this.props.onLayout(event);
  },

  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._sentEndForContentLength = this.scrollProperties.contentLength;
      this.props.onEndReached(event);
      return true;
    }
    return false;
  },

  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._maybeCallOnEndReached();
      return;
    }

    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);
    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
      this._pageInNewRows();
    }
  },

  _pageInNewRows: function _pageInNewRows() {
    var _this4 = this;

    this.setState(function (state, props) {
      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
      return {
        curRenderedRowsCount: rowsToRender
      };
    }, function () {
      _this4._measureAndUpdateScrollProps();
      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
    });
  },

  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
  },

  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
    var _this5 = this;

    if (!this.props.onChangeVisibleRows) {
      return;
    }
    if (updatedFrames) {
      updatedFrames.forEach(function (newFrame) {
        _this5._childFrames[newFrame.index] = merge(newFrame);
      });
    }
    var isVertical = !this.props.horizontal;
    var dataSource = this.props.dataSource;
    var visibleMin = this.scrollProperties.offset;
    var visibleMax = visibleMin + this.scrollProperties.visibleLength;
    var allRowIDs = dataSource.rowIdentities;

    var header = this.props.renderHeader && this.props.renderHeader();
    var totalIndex = header ? 1 : 0;
    var visibilityChanged = false;
    var changedRows = {};
    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        continue;
      }
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      if (this.props.renderSectionHeader) {
        totalIndex++;
      }
      var visibleSection = this._visibleRows[sectionID];
      if (!visibleSection) {
        visibleSection = {};
      }
      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var frame = this._childFrames[totalIndex];
        totalIndex++;
        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          totalIndex++;
        }
        if (!frame) {
          break;
        }
        var rowVisible = visibleSection[rowID];
        var min = isVertical ? frame.y : frame.x;
        var max = min + (isVertical ? frame.height : frame.width);
        if (!min && !max || min === max) {
          break;
        }
        if (min > visibleMax || max < visibleMin) {
          if (rowVisible) {
            visibilityChanged = true;
            delete visibleSection[rowID];
            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }
            changedRows[sectionID][rowID] = false;
          }
        } else if (!rowVisible) {
          visibilityChanged = true;
          visibleSection[rowID] = true;
          if (!changedRows[sectionID]) {
            changedRows[sectionID] = {};
          }
          changedRows[sectionID][rowID] = true;
        }
      }
      if (!isEmpty(visibleSection)) {
        this._visibleRows[sectionID] = visibleSection;
      } else if (this._visibleRows[sectionID]) {
        delete this._visibleRows[sectionID];
      }
    }
    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
  },

  _onScroll: function _onScroll(e) {
    var isVertical = !this.props.horizontal;
    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];
    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);
    if (!this._maybeCallOnEndReached(e)) {
      this._renderMoreRowsIfNeeded();
    }

    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
      this._sentEndForContentLength = null;
    }

    this.props.onScroll && this.props.onScroll(e);
  }
});

module.exports = ListView;
}, 224, null, "ListView");
__d(/* ListViewDataSource */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var isEmpty = require(226      ); // 226 = isEmpty
var warning = require(45                ); // 45 = fbjs/lib/warning

function defaultGetRowData(dataBlob, sectionID, rowID) {
  return dataBlob[sectionID][rowID];
}

function defaultGetSectionHeaderData(dataBlob, sectionID) {
  return dataBlob[sectionID];
}

var ListViewDataSource = function () {
  function ListViewDataSource(params) {
    babelHelpers.classCallCheck(this, ListViewDataSource);

    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
    this._rowHasChanged = params.rowHasChanged;
    this._getRowData = params.getRowData || defaultGetRowData;
    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;

    this._dataBlob = null;
    this._dirtyRows = [];
    this._dirtySections = [];
    this._cachedRowCount = 0;

    this.rowIdentities = [];
    this.sectionIdentities = [];
  }

  babelHelpers.createClass(ListViewDataSource, [{
    key: 'cloneWithRows',
    value: function cloneWithRows(dataBlob, rowIdentities) {
      var rowIds = rowIdentities ? [[].concat(babelHelpers.toConsumableArray(rowIdentities))] : null;
      if (!this._sectionHeaderHasChanged) {
        this._sectionHeaderHasChanged = function () {
          return false;
        };
      }
      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);
    }
  }, {
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');

      var newSource = new ListViewDataSource({
        getRowData: this._getRowData,
        getSectionHeaderData: this._getSectionHeaderData,
        rowHasChanged: this._rowHasChanged,
        sectionHeaderHasChanged: this._sectionHeaderHasChanged
      });
      newSource._dataBlob = dataBlob;
      if (sectionIdentities) {
        newSource.sectionIdentities = sectionIdentities;
      } else {
        newSource.sectionIdentities = Object.keys(dataBlob);
      }
      if (rowIdentities) {
        newSource.rowIdentities = rowIdentities;
      } else {
        newSource.rowIdentities = [];
        newSource.sectionIdentities.forEach(function (sectionID) {
          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
        });
      }
      newSource._cachedRowCount = countRows(newSource.rowIdentities);

      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return newSource;
    }
  }, {
    key: 'getRowCount',
    value: function getRowCount() {
      return this._cachedRowCount;
    }
  }, {
    key: 'getRowAndSectionCount',
    value: function getRowAndSectionCount() {
      return this._cachedRowCount + this.sectionIdentities.length;
    }
  }, {
    key: 'rowShouldUpdate',
    value: function rowShouldUpdate(sectionIndex, rowIndex) {
      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
      return needsUpdate;
    }
  }, {
    key: 'getRowData',
    value: function getRowData(sectionIndex, rowIndex) {
      var sectionID = this.sectionIdentities[sectionIndex];
      var rowID = this.rowIdentities[sectionIndex][rowIndex];
      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
      return this._getRowData(this._dataBlob, sectionID, rowID);
    }
  }, {
    key: 'getRowIDForFlatIndex',
    value: function getRowIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.rowIdentities[ii][accessIndex];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionIDForFlatIndex',
    value: function getSectionIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.sectionIdentities[ii];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionLengths',
    value: function getSectionLengths() {
      var results = [];
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        results.push(this.rowIdentities[ii].length);
      }
      return results;
    }
  }, {
    key: 'sectionHeaderShouldUpdate',
    value: function sectionHeaderShouldUpdate(sectionIndex) {
      var needsUpdate = this._dirtySections[sectionIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
      return needsUpdate;
    }
  }, {
    key: 'getSectionHeaderData',
    value: function getSectionHeaderData(sectionIndex) {
      if (!this._getSectionHeaderData) {
        return null;
      }
      var sectionID = this.sectionIdentities[sectionIndex];
      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
      return this._getSectionHeaderData(this._dataBlob, sectionID);
    }
  }, {
    key: '_calculateDirtyArrays',
    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
      var prevRowsHash = {};
      for (var ii = 0; ii < prevRowIDs.length; ii++) {
        var sectionID = prevSectionIDs[ii];
        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
      }

      this._dirtySections = [];
      this._dirtyRows = [];

      var dirty;
      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
        var sectionID = this.sectionIdentities[sIndex];

        dirty = !prevSectionsHash[sectionID];
        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;
        if (!dirty && sectionHeaderHasChanged) {
          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
        }
        this._dirtySections.push(!!dirty);

        this._dirtyRows[sIndex] = [];
        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
          var rowID = this.rowIdentities[sIndex][rIndex];

          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));
          this._dirtyRows[sIndex].push(!!dirty);
        }
      }
    }
  }]);
  return ListViewDataSource;
}();

function countRows(allRowIDs) {
  var totalRows = 0;
  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
    var rowIDs = allRowIDs[sectionIdx];
    totalRows += rowIDs.length;
  }
  return totalRows;
}

function keyedDictionaryFromArray(arr) {
  if (isEmpty(arr)) {
    return {};
  }
  var result = {};
  for (var ii = 0; ii < arr.length; ii++) {
    var key = arr[ii];
    warning(!result[key], 'Value appears more than once in array: ' + key);
    result[key] = true;
  }
  return result;
}

module.exports = ListViewDataSource;
}, 225, null, "ListViewDataSource");
__d(/* isEmpty */function(global, require, module, exports) {
'use strict';

function isEmpty(obj) {
  if (Array.isArray(obj)) {
    return obj.length === 0;
  } else if (typeof obj === 'object') {
    for (var i in obj) {
      return false;
    }
    return true;
  } else {
    return !obj;
  }
}

module.exports = isEmpty;
}, 226, null, "isEmpty");
__d(/* StaticRenderer */function(global, require, module, exports) {
'use strict';

var React = require(132    ); // 132 = React

var PropTypes = require(20          ); // 20 = prop-types

var StaticRenderer = function (_React$Component) {
  babelHelpers.inherits(StaticRenderer, _React$Component);

  function StaticRenderer() {
    babelHelpers.classCallCheck(this, StaticRenderer);
    return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
  }

  babelHelpers.createClass(StaticRenderer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render();
    }
  }]);
  return StaticRenderer;
}(React.Component);

StaticRenderer.propTypes = {
  shouldUpdate: PropTypes.bool.isRequired,
  render: PropTypes.func.isRequired
};


module.exports = StaticRenderer;
}, 227, null, "StaticRenderer");
__d(/* react-clone-referenced-element/cloneReferencedElement.js */function(global, require, module, exports) {'use strict';

var React = require(13     ); // 13 = react

function cloneReferencedElement(element, config) {
  var cloneRef = config.ref;
  var originalRef = element.ref;

  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (originalRef == null || cloneRef == null) {
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  if (typeof originalRef !== 'function') {
    if (__DEV__) {
      console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
    }
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
    ref: function ref(component) {
      cloneRef(component);
      originalRef(component);
    }
  })].concat(children));
}

module.exports = cloneReferencedElement;
}, 228, null, "react-clone-referenced-element/cloneReferencedElement.js");
__d(/* RefreshControl */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

if (Platform.OS === 'android') {
  var RefreshLayoutConsts = require(125        ).AndroidSwipeRefreshLayout.Constants; // 125 = UIManager
} else {
  var RefreshLayoutConsts = { SIZE: {} };
}

var RefreshControl = createReactClass({
  displayName: 'RefreshControl',
  statics: {
    SIZE: RefreshLayoutConsts.SIZE
  },

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    onRefresh: PropTypes.func,

    refreshing: PropTypes.bool.isRequired,

    tintColor: ColorPropType,

    titleColor: ColorPropType,

    title: PropTypes.string,

    enabled: PropTypes.bool,

    colors: PropTypes.arrayOf(ColorPropType),

    progressBackgroundColor: ColorPropType,

    size: PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),

    progressViewOffset: PropTypes.number
  }),

  _nativeRef: null,
  _lastNativeRefreshing: false,

  componentDidMount: function componentDidMount() {
    this._lastNativeRefreshing = this.props.refreshing;
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.refreshing !== prevProps.refreshing) {
      this._lastNativeRefreshing = this.props.refreshing;
    } else if (this.props.refreshing !== this._lastNativeRefreshing) {
      this._nativeRef.setNativeProps({ refreshing: this.props.refreshing });
      this._lastNativeRefreshing = this.props.refreshing;
    }
  },
  render: function render() {
    var _this = this;

    return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
      ref: function ref(_ref) {
        _this._nativeRef = _ref;
      },
      onRefresh: this._onRefresh,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 157
      }
    }));
  },
  _onRefresh: function _onRefresh() {
    this._lastNativeRefreshing = true;

    this.props.onRefresh && this.props.onRefresh();

    this.forceUpdate();
  }
});

if (Platform.OS === 'ios') {
  var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
} else if (Platform.OS === 'android') {
  var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
}

module.exports = RefreshControl;
}, 229, null, "RefreshControl");
__d(/* VirtualizedList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/VirtualizedList.js';
var Batchinator = require(231          ); // 231 = Batchinator
var FillRateHelper = require(232             ); // 232 = FillRateHelper
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var RefreshControl = require(229             ); // 229 = RefreshControl
var ScrollView = require(206         ); // 206 = ScrollView
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View
var ViewabilityHelper = require(233                ); // 233 = ViewabilityHelper

var flattenStyle = require(119           ); // 119 = flattenStyle
var infoLog = require(112      ); // 112 = infoLog
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var warning = require(45                ); // 45 = fbjs/lib/warning

var _require = require(234              ), // 234 = VirtualizeUtils
    computeWindowedRenderLimits = _require.computeWindowedRenderLimits;

var _usedIndexForKey = false;

var VirtualizedList = function (_React$PureComponent) {
  babelHelpers.inherits(VirtualizedList, _React$PureComponent);
  babelHelpers.createClass(VirtualizedList, [{
    key: 'scrollToEnd',
    value: function scrollToEnd(params) {
      var animated = params ? params.animated : true;
      var veryLast = this.props.getItemCount(this.props.data) - 1;
      var frame = this._getFrameMetricsApprox(veryLast);
      var offset = Math.max(0, frame.offset + frame.length + this._footerLength - this._scrollMetrics.visibleLength);
      this._scrollRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'scrollToIndex',
    value: function scrollToIndex(params) {
      var _props = this.props,
          data = _props.data,
          horizontal = _props.horizontal,
          getItemCount = _props.getItemCount,
          getItemLayout = _props.getItemLayout;
      var animated = params.animated,
          index = params.index,
          viewOffset = params.viewOffset,
          viewPosition = params.viewPosition;

      invariant(index >= 0 && index < getItemCount(data), 'scrollToIndex out of range: ' + index + ' vs ' + (getItemCount(data) - 1));
      invariant(getItemLayout || index <= this._highestMeasuredFrameIndex, 'scrollToIndex should be used in conjunction with getItemLayout, ' + 'otherwise there is no way to know the location of an arbitrary index.');
      var frame = this._getFrameMetricsApprox(index);
      var offset = Math.max(0, frame.offset - (viewPosition || 0) * (this._scrollMetrics.visibleLength - frame.length)) - (viewOffset || 0);
      this._scrollRef.scrollTo(horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'scrollToItem',
    value: function scrollToItem(params) {
      var item = params.item;
      var _props2 = this.props,
          data = _props2.data,
          getItem = _props2.getItem,
          getItemCount = _props2.getItemCount;

      var itemCount = getItemCount(data);
      for (var _index = 0; _index < itemCount; _index++) {
        if (getItem(data, _index) === item) {
          this.scrollToIndex(babelHelpers.extends({}, params, { index: _index }));
          break;
        }
      }
    }
  }, {
    key: 'scrollToOffset',
    value: function scrollToOffset(params) {
      var animated = params.animated,
          offset = params.offset;

      this._scrollRef.scrollTo(this.props.horizontal ? { x: offset, animated: animated } : { y: offset, animated: animated });
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._viewabilityHelper.recordInteraction();
      this._updateViewableItems(this.props.data);
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      this._scrollRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._scrollRef && this._scrollRef.getScrollResponder) {
        return this._scrollRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      if (this._scrollRef && this._scrollRef.getScrollableNode) {
        return this._scrollRef.getScrollableNode();
      } else {
        return ReactNative.findNodeHandle(this._scrollRef);
      }
    }
  }, {
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      if (this._scrollRef) {
        this._scrollRef.setNativeProps(props);
      }
    }
  }, {
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        virtualizedList: {
          horizontal: this.props.horizontal
        }
      };
    }
  }]);

  function VirtualizedList(props, context) {
    babelHelpers.classCallCheck(this, VirtualizedList);

    var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedList.__proto__ || Object.getPrototypeOf(VirtualizedList)).call(this, props, context));

    _initialiseProps.call(_this);

    invariant(!props.onScroll || !props.onScroll.__isNative, 'Components based on VirtualizedList must be wrapped with Animated.createAnimatedComponent ' + 'to support native onScroll events with useNativeDriver');
    invariant(!(_this._isNestedWithSameOrientation() && props.onViewableItemsChanged), 'Nesting lists that scroll in the same direction does not support onViewableItemsChanged' + 'on the inner list.');

    _this._fillRateHelper = new FillRateHelper(_this._getFrameMetrics);
    _this._updateCellsToRenderBatcher = new Batchinator(_this._updateCellsToRender, _this.props.updateCellsBatchingPeriod);
    _this._viewabilityHelper = new ViewabilityHelper(_this.props.viewabilityConfig);
    _this.state = {
      first: _this.props.initialScrollIndex || 0,
      last: Math.min(_this.props.getItemCount(_this.props.data), (_this.props.initialScrollIndex || 0) + _this.props.initialNumToRender) - 1
    };
    return _this;
  }

  babelHelpers.createClass(VirtualizedList, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.initialScrollIndex) {
        this._initialScrollIndexTimeout = setTimeout(function () {
          return _this2.scrollToIndex({
            animated: false,
            index: _this2.props.initialScrollIndex
          });
        }, 0);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._updateViewableItems(null);
      this._updateCellsToRenderBatcher.dispose();
      this._viewabilityHelper.dispose();
      this._fillRateHelper.deactivateAndFlush();
      clearTimeout(this._initialScrollIndexTimeout);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      var data = newProps.data,
          extraData = newProps.extraData,
          getItemCount = newProps.getItemCount,
          maxToRenderPerBatch = newProps.maxToRenderPerBatch;

      this.setState({
        first: Math.max(0, Math.min(this.state.first, getItemCount(data) - 1 - maxToRenderPerBatch)),
        last: Math.max(0, Math.min(this.state.last, getItemCount(data) - 1))
      });
      if (data !== this.props.data || extraData !== this.props.extraData) {
        this._hasDataChangedSinceEndReached = true;
      }
    }
  }, {
    key: '_pushCells',
    value: function _pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, first, last, inversionStyle) {
      var _this3 = this;

      var _props3 = this.props,
          ItemSeparatorComponent = _props3.ItemSeparatorComponent,
          data = _props3.data,
          getItem = _props3.getItem,
          getItemCount = _props3.getItemCount,
          keyExtractor = _props3.keyExtractor;

      var stickyOffset = this.props.ListHeaderComponent ? 1 : 0;
      var end = getItemCount(data) - 1;
      var prevCellKey = void 0;
      last = Math.min(end, last);

      var _loop = function _loop(ii) {
        var item = getItem(data, ii);
        invariant(item, 'No item for index ' + ii);
        var key = keyExtractor(item, ii);
        if (stickyIndicesFromProps.has(ii + stickyOffset)) {
          stickyHeaderIndices.push(cells.length);
        }
        cells.push(React.createElement(CellRenderer, {
          ItemSeparatorComponent: ii < end ? ItemSeparatorComponent : undefined,
          cellKey: key,
          fillRateHelper: _this3._fillRateHelper,
          index: ii,
          inversionStyle: inversionStyle,
          item: item,
          key: key,
          prevCellKey: prevCellKey,
          onUpdateSeparators: _this3._onUpdateSeparators,
          onLayout: function onLayout(e) {
            return _this3._onCellLayout(e, key, ii);
          },
          onUnmount: _this3._onCellUnmount,
          parentProps: _this3.props,
          ref: function ref(_ref) {
            _this3._cellRefs[key] = _ref;
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 463
          }
        }));
        prevCellKey = key;
      };

      for (var ii = first; ii <= last; ii++) {
        _loop(ii);
      }
    }
  }, {
    key: '_isVirtualizationDisabled',
    value: function _isVirtualizationDisabled() {
      return this.props.disableVirtualization || this._isNestedWithSameOrientation();
    }
  }, {
    key: '_isNestedWithSameOrientation',
    value: function _isNestedWithSameOrientation() {
      var nestedContext = this.context.virtualizedList;
      return !!(nestedContext && !!nestedContext.horizontal === !!this.props.horizontal);
    }
  }, {
    key: 'render',
    value: function render() {
      if (__DEV__) {
        var flatStyles = flattenStyle(this.props.contentContainerStyle);
        warning(flatStyles == null || flatStyles.flexWrap !== 'wrap', '`flexWrap: `wrap`` is not supported with the `VirtualizedList` components.' + 'Consider using `numColumns` with `FlatList` instead.');
      }

      var _props4 = this.props,
          ListEmptyComponent = _props4.ListEmptyComponent,
          ListFooterComponent = _props4.ListFooterComponent,
          ListHeaderComponent = _props4.ListHeaderComponent;
      var _props5 = this.props,
          data = _props5.data,
          horizontal = _props5.horizontal;

      var isVirtualizationDisabled = this._isVirtualizationDisabled();
      var inversionStyle = this.props.inverted ? this.props.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : null;
      var cells = [];
      var stickyIndicesFromProps = new Set(this.props.stickyHeaderIndices);
      var stickyHeaderIndices = [];
      if (ListHeaderComponent) {
        var element = React.isValidElement(ListHeaderComponent) ? ListHeaderComponent : React.createElement(ListHeaderComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 533
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$header',
            onLayout: this._onLayoutHeader,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 535
            }
          },
          element
        ));
      }
      var itemCount = this.props.getItemCount(data);
      if (itemCount > 0) {
        _usedIndexForKey = false;
        var spacerKey = !horizontal ? 'height' : 'width';
        var lastInitialIndex = this.props.initialScrollIndex ? -1 : this.props.initialNumToRender - 1;
        var _state = this.state,
            _first = _state.first,
            _last = _state.last;

        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, 0, lastInitialIndex, inversionStyle);
        var firstAfterInitial = Math.max(lastInitialIndex + 1, _first);
        if (!isVirtualizationDisabled && _first > lastInitialIndex + 1) {
          var insertedStickySpacer = false;
          if (stickyIndicesFromProps.size > 0) {
            var stickyOffset = ListHeaderComponent ? 1 : 0;

            for (var ii = firstAfterInitial - 1; ii > lastInitialIndex; ii--) {
              if (stickyIndicesFromProps.has(ii + stickyOffset)) {
                var initBlock = this._getFrameMetricsApprox(lastInitialIndex);
                var stickyBlock = this._getFrameMetricsApprox(ii);
                var leadSpace = stickyBlock.offset - (initBlock.offset + initBlock.length);
                cells.push(React.createElement(View, { key: '$sticky_lead', style: babelHelpers.defineProperty({}, spacerKey, leadSpace), __source: {
                    fileName: _jsxFileName,
                    lineNumber: 572
                  }
                }));
                this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, ii, ii, inversionStyle);
                var trailSpace = this._getFrameMetricsApprox(_first).offset - (stickyBlock.offset + stickyBlock.length);
                cells.push(React.createElement(View, { key: '$sticky_trail', style: babelHelpers.defineProperty({}, spacerKey, trailSpace), __source: {
                    fileName: _jsxFileName,
                    lineNumber: 586
                  }
                }));
                insertedStickySpacer = true;
                break;
              }
            }
          }
          if (!insertedStickySpacer) {
            var _initBlock = this._getFrameMetricsApprox(lastInitialIndex);
            var firstSpace = this._getFrameMetricsApprox(_first).offset - (_initBlock.offset + _initBlock.length);
            cells.push(React.createElement(View, { key: '$lead_spacer', style: babelHelpers.defineProperty({}, spacerKey, firstSpace), __source: {
                fileName: _jsxFileName,
                lineNumber: 599
              }
            }));
          }
        }
        this._pushCells(cells, stickyHeaderIndices, stickyIndicesFromProps, firstAfterInitial, _last, inversionStyle);
        if (!this._hasWarned.keys && _usedIndexForKey) {
          console.warn('VirtualizedList: missing keys for items, make sure to specify a key property on each ' + 'item or provide a custom keyExtractor.');
          this._hasWarned.keys = true;
        }
        if (!isVirtualizationDisabled && _last < itemCount - 1) {
          var lastFrame = this._getFrameMetricsApprox(_last);

          var end = this.props.getItemLayout ? itemCount - 1 : Math.min(itemCount - 1, this._highestMeasuredFrameIndex);
          var endFrame = this._getFrameMetricsApprox(end);
          var tailSpacerLength = endFrame.offset + endFrame.length - (lastFrame.offset + lastFrame.length);
          cells.push(React.createElement(View, { key: '$tail_spacer', style: babelHelpers.defineProperty({}, spacerKey, tailSpacerLength), __source: {
              fileName: _jsxFileName,
              lineNumber: 632
            }
          }));
        }
      } else if (ListEmptyComponent) {
        var _element = React.isValidElement(ListEmptyComponent) ? ListEmptyComponent : React.createElement(ListEmptyComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 638
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$empty',
            onLayout: this._onLayoutEmpty,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 640
            }
          },
          _element
        ));
      }
      if (ListFooterComponent) {
        var _element2 = React.isValidElement(ListFooterComponent) ? ListFooterComponent : React.createElement(ListFooterComponent, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 651
          }
        });
        cells.push(React.createElement(
          View,
          {
            key: '$footer',
            onLayout: this._onLayoutFooter,
            style: inversionStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 653
            }
          },
          _element2
        ));
      }
      var scrollProps = babelHelpers.extends({}, this.props, {
        onContentSizeChange: this._onContentSizeChange,
        onLayout: this._onLayout,
        onScroll: this._onScroll,
        onScrollBeginDrag: this._onScrollBeginDrag,
        onScrollEndDrag: this._onScrollEndDrag,
        onMomentumScrollEnd: this._onMomentumScrollEnd,
        scrollEventThrottle: this.props.scrollEventThrottle,
        stickyHeaderIndices: stickyHeaderIndices
      });
      if (inversionStyle) {
        scrollProps.style = [inversionStyle, this.props.style];
      }
      var ret = React.cloneElement((this.props.renderScrollComponent || this._defaultRenderScrollComponent)(scrollProps), {
        ref: this._captureScrollRef
      }, cells);
      if (this.props.debug) {
        return React.createElement(
          View,
          { style: { flex: 1 }, __source: {
              fileName: _jsxFileName,
              lineNumber: 686
            }
          },
          ret,
          this._renderDebugOverlay()
        );
      } else {
        return ret;
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._scheduleCellsToRenderUpdate();
    }
  }, {
    key: '_computeBlankness',
    value: function _computeBlankness() {
      this._fillRateHelper.computeBlankness(this.props, this.state, this._scrollMetrics);
    }
  }, {
    key: '_onCellLayout',
    value: function _onCellLayout(e, cellKey, index) {
      var layout = e.nativeEvent.layout;
      var next = {
        offset: this._selectOffset(layout),
        length: this._selectLength(layout),
        index: index,
        inLayout: true
      };
      var curr = this._frames[cellKey];
      if (!curr || next.offset !== curr.offset || next.length !== curr.length || index !== curr.index) {
        this._totalCellLength += next.length - (curr ? curr.length : 0);
        this._totalCellsMeasured += curr ? 0 : 1;
        this._averageCellLength = this._totalCellLength / this._totalCellsMeasured;
        this._frames[cellKey] = next;
        this._highestMeasuredFrameIndex = Math.max(this._highestMeasuredFrameIndex, index);
        this._scheduleCellsToRenderUpdate();
      } else {
        this._frames[cellKey].inLayout = true;
      }
      this._computeBlankness();
    }
  }, {
    key: '_renderDebugOverlay',
    value: function _renderDebugOverlay() {
      var normalize = this._scrollMetrics.visibleLength / this._scrollMetrics.contentLength;
      var framesInLayout = [];
      var itemCount = this.props.getItemCount(this.props.data);
      for (var ii = 0; ii < itemCount; ii++) {
        var frame = this._getFrameMetricsApprox(ii);
        if (frame.inLayout) {
          framesInLayout.push(frame);
        }
      }
      var windowTop = this._getFrameMetricsApprox(this.state.first).offset;
      var frameLast = this._getFrameMetricsApprox(this.state.last);
      var windowLen = frameLast.offset + frameLast.length - windowTop;
      var visTop = this._scrollMetrics.offset;
      var visLen = this._scrollMetrics.visibleLength;
      var baseStyle = { position: 'absolute', top: 0, right: 0 };
      return React.createElement(
        View,
        {
          style: babelHelpers.extends({}, baseStyle, {
            bottom: 0,
            width: 20,
            borderColor: 'blue',
            borderWidth: 1
          }), __source: {
            fileName: _jsxFileName,
            lineNumber: 842
          }
        },
        framesInLayout.map(function (f, ii) {
          return React.createElement(View, {
            key: 'f' + ii,
            style: babelHelpers.extends({}, baseStyle, {
              left: 0,
              top: f.offset * normalize,
              height: f.length * normalize,
              backgroundColor: 'orange'
            }),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 851
            }
          });
        }),
        React.createElement(View, {
          style: babelHelpers.extends({}, baseStyle, {
            left: 0,
            top: windowTop * normalize,
            height: windowLen * normalize,
            borderColor: 'green',
            borderWidth: 2
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 862
          }
        }),
        React.createElement(View, {
          style: babelHelpers.extends({}, baseStyle, {
            left: 0,
            top: visTop * normalize,
            height: visLen * normalize,
            borderColor: 'red',
            borderWidth: 2
          }),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 872
          }
        })
      );
    }
  }, {
    key: '_selectLength',
    value: function _selectLength(metrics) {
      return !this.props.horizontal ? metrics.height : metrics.width;
    }
  }, {
    key: '_selectOffset',
    value: function _selectOffset(metrics) {
      return !this.props.horizontal ? metrics.y : metrics.x;
    }
  }, {
    key: '_maybeCallOnEndReached',
    value: function _maybeCallOnEndReached() {
      var _props6 = this.props,
          data = _props6.data,
          getItemCount = _props6.getItemCount,
          onEndReached = _props6.onEndReached,
          onEndReachedThreshold = _props6.onEndReachedThreshold;
      var _scrollMetrics = this._scrollMetrics,
          contentLength = _scrollMetrics.contentLength,
          visibleLength = _scrollMetrics.visibleLength,
          offset = _scrollMetrics.offset;

      var distanceFromEnd = contentLength - visibleLength - offset;
      if (onEndReached && this.state.last === getItemCount(data) - 1 && distanceFromEnd < onEndReachedThreshold * visibleLength && (this._hasDataChangedSinceEndReached || this._scrollMetrics.contentLength !== this._sentEndForContentLength)) {
        this._hasDataChangedSinceEndReached = false;
        this._sentEndForContentLength = this._scrollMetrics.contentLength;
        onEndReached({ distanceFromEnd: distanceFromEnd });
      }
    }
  }, {
    key: '_scheduleCellsToRenderUpdate',
    value: function _scheduleCellsToRenderUpdate() {
      var _state2 = this.state,
          first = _state2.first,
          last = _state2.last;
      var _scrollMetrics2 = this._scrollMetrics,
          offset = _scrollMetrics2.offset,
          visibleLength = _scrollMetrics2.visibleLength,
          velocity = _scrollMetrics2.velocity;

      var itemCount = this.props.getItemCount(this.props.data);
      var hiPri = false;
      if (first > 0 || last < itemCount - 1) {
        var distTop = offset - this._getFrameMetricsApprox(first).offset;
        var distBottom = this._getFrameMetricsApprox(last).offset - (offset + visibleLength);
        var scrollingThreshold = this.props.onEndReachedThreshold * visibleLength / 2;
        hiPri = Math.min(distTop, distBottom) < 0 || velocity < -2 && distTop < scrollingThreshold || velocity > 2 && distBottom < scrollingThreshold;
      }

      if (hiPri && this._averageCellLength) {
        this._updateCellsToRenderBatcher.dispose({ abort: true });
        this._updateCellsToRender();
        return;
      } else {
        this._updateCellsToRenderBatcher.schedule();
      }
    }
  }, {
    key: '_updateViewableItems',
    value: function _updateViewableItems(data) {
      var _props7 = this.props,
          getItemCount = _props7.getItemCount,
          onViewableItemsChanged = _props7.onViewableItemsChanged;

      if (!onViewableItemsChanged) {
        return;
      }
      this._viewabilityHelper.onUpdate(getItemCount(data), this._scrollMetrics.offset, this._scrollMetrics.visibleLength, this._getFrameMetrics, this._createViewToken, onViewableItemsChanged, this.state);
    }
  }]);
  return VirtualizedList;
}(React.PureComponent);

VirtualizedList.defaultProps = {
  disableVirtualization: false,
  horizontal: false,
  initialNumToRender: 10,
  keyExtractor: function keyExtractor(item, index) {
    if (item.key != null) {
      return item.key;
    }
    _usedIndexForKey = true;
    return String(index);
  },
  maxToRenderPerBatch: 10,
  onEndReachedThreshold: 2,
  scrollEventThrottle: 50,
  updateCellsBatchingPeriod: 50,
  windowSize: 21 };
VirtualizedList.contextTypes = {
  virtualizedList: PropTypes.shape({
    horizontal: PropTypes.bool
  })
};
VirtualizedList.childContextTypes = {
  virtualizedList: PropTypes.shape({
    horizontal: PropTypes.bool
  })
};

var _initialiseProps = function _initialiseProps() {
  var _this5 = this;

  this._onUpdateSeparators = function (keys, newProps) {
    keys.forEach(function (key) {
      var ref = key != null && _this5._cellRefs[key];
      ref && ref.updateSeparatorProps(newProps);
    });
  };

  this._averageCellLength = 0;
  this._cellRefs = {};
  this._hasDataChangedSinceEndReached = true;
  this._hasWarned = {};
  this._highestMeasuredFrameIndex = 0;
  this._headerLength = 0;
  this._initialScrollIndexTimeout = 0;
  this._frames = {};
  this._footerLength = 0;
  this._scrollMetrics = {
    contentLength: 0,
    dOffset: 0,
    dt: 10,
    offset: 0,
    timestamp: 0,
    velocity: 0,
    visibleLength: 0
  };
  this._scrollRef = null;
  this._sentEndForContentLength = 0;
  this._totalCellLength = 0;
  this._totalCellsMeasured = 0;

  this._captureScrollRef = function (ref) {
    _this5._scrollRef = ref;
  };

  this._defaultRenderScrollComponent = function (props) {
    if (_this5._isNestedWithSameOrientation()) {
      return React.createElement(View, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 740
        }
      }));
    } else if (props.onRefresh) {
      invariant(typeof props.refreshing === 'boolean', '`refreshing` prop must be set as a boolean in order to use `onRefresh`, but got `' + JSON.stringify(props.refreshing) + '`');
      return React.createElement(ScrollView, babelHelpers.extends({}, props, {
        refreshControl: React.createElement(RefreshControl, {
          refreshing: props.refreshing,
          onRefresh: props.onRefresh,
          progressViewOffset: props.progressViewOffset,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 752
          }
        }),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 749
        }
      }));
    } else {
      return React.createElement(ScrollView, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 761
        }
      }));
    }
  };

  this._onCellUnmount = function (cellKey) {
    var curr = _this5._frames[cellKey];
    if (curr) {
      _this5._frames[cellKey] = babelHelpers.extends({}, curr, { inLayout: false });
    }
  };

  this._onLayout = function (e) {
    _this5._scrollMetrics.visibleLength = _this5._selectLength(e.nativeEvent.layout);
    _this5.props.onLayout && _this5.props.onLayout(e);
    _this5._scheduleCellsToRenderUpdate();
    _this5._maybeCallOnEndReached();
  };

  this._onLayoutEmpty = function (e) {
    _this5.props.onLayout && _this5.props.onLayout(e);
  };

  this._onLayoutFooter = function (e) {
    _this5._footerLength = _this5._selectLength(e.nativeEvent.layout);
  };

  this._onLayoutHeader = function (e) {
    _this5._headerLength = _this5._selectLength(e.nativeEvent.layout);
  };

  this._onContentSizeChange = function (width, height) {
    if (_this5.props.onContentSizeChange) {
      _this5.props.onContentSizeChange(width, height);
    }
    _this5._scrollMetrics.contentLength = _this5._selectLength({ height: height, width: width });
    _this5._scheduleCellsToRenderUpdate();
    _this5._maybeCallOnEndReached();
  };

  this._onScroll = function (e) {
    if (_this5.props.onScroll) {
      _this5.props.onScroll(e);
    }
    var timestamp = e.timeStamp;
    var visibleLength = _this5._selectLength(e.nativeEvent.layoutMeasurement);
    var contentLength = _this5._selectLength(e.nativeEvent.contentSize);
    var offset = _this5._selectOffset(e.nativeEvent.contentOffset);
    var dt = _this5._scrollMetrics.timestamp ? Math.max(1, timestamp - _this5._scrollMetrics.timestamp) : 1;
    if (dt > 500 && _this5._scrollMetrics.dt > 500 && contentLength > 5 * visibleLength && !_this5._hasWarned.perf) {
      infoLog('VirtualizedList: You have a large list that is slow to update - make sure your ' + 'renderItem function renders components that follow React performance best practices ' + 'like PureComponent, shouldComponentUpdate, etc.', { dt: dt, prevDt: _this5._scrollMetrics.dt, contentLength: contentLength });
      _this5._hasWarned.perf = true;
    }
    var dOffset = offset - _this5._scrollMetrics.offset;
    var velocity = dOffset / dt;
    _this5._scrollMetrics = {
      contentLength: contentLength,
      dt: dt,
      dOffset: dOffset,
      offset: offset,
      timestamp: timestamp,
      velocity: velocity,
      visibleLength: visibleLength
    };
    _this5._updateViewableItems(_this5.props.data);
    if (!_this5.props) {
      return;
    }
    _this5._maybeCallOnEndReached();
    if (velocity !== 0) {
      _this5._fillRateHelper.activate();
    }
    _this5._computeBlankness();
    _this5._scheduleCellsToRenderUpdate();
  };

  this._onScrollBeginDrag = function (e) {
    _this5._viewabilityHelper.recordInteraction();
    _this5.props.onScrollBeginDrag && _this5.props.onScrollBeginDrag(e);
  };

  this._onScrollEndDrag = function (e) {
    var velocity = e.nativeEvent.velocity;

    if (velocity) {
      _this5._scrollMetrics.velocity = _this5._selectOffset(velocity);
    }
    _this5._computeBlankness();
    _this5.props.onScrollEndDrag && _this5.props.onScrollEndDrag(e);
  };

  this._onMomentumScrollEnd = function (e) {
    _this5._scrollMetrics.velocity = 0;
    _this5._computeBlankness();
    _this5.props.onMomentumScrollEnd && _this5.props.onMomentumScrollEnd(e);
  };

  this._updateCellsToRender = function () {
    var _props9 = _this5.props,
        data = _props9.data,
        getItemCount = _props9.getItemCount,
        onEndReachedThreshold = _props9.onEndReachedThreshold;

    var isVirtualizationDisabled = _this5._isVirtualizationDisabled();
    _this5._updateViewableItems(data);
    if (!data) {
      return;
    }
    _this5.setState(function (state) {
      var newState = void 0;
      if (!isVirtualizationDisabled) {
        if (_this5._scrollMetrics.visibleLength) {
          if (!_this5.props.initialScrollIndex || _this5._scrollMetrics.offset) {
            newState = computeWindowedRenderLimits(_this5.props, state, _this5._getFrameMetricsApprox, _this5._scrollMetrics);
          }
        }
      } else {
        var _scrollMetrics3 = _this5._scrollMetrics,
            contentLength = _scrollMetrics3.contentLength,
            _offset = _scrollMetrics3.offset,
            visibleLength = _scrollMetrics3.visibleLength;

        var _distanceFromEnd = contentLength - visibleLength - _offset;
        var renderAhead = _distanceFromEnd < onEndReachedThreshold * visibleLength ? _this5.props.maxToRenderPerBatch : 0;
        newState = {
          first: 0,
          last: Math.min(state.last + renderAhead, getItemCount(data) - 1)
        };
      }
      return newState;
    });
  };

  this._createViewToken = function (index, isViewable) {
    var _props10 = _this5.props,
        data = _props10.data,
        getItem = _props10.getItem,
        keyExtractor = _props10.keyExtractor;

    var item = getItem(data, index);
    invariant(item, 'Missing item for index ' + index);
    return { index: index, item: item, key: keyExtractor(item, index), isViewable: isViewable };
  };

  this._getFrameMetricsApprox = function (index) {
    var frame = _this5._getFrameMetrics(index);
    if (frame && frame.index === index) {
      return frame;
    } else {
      var _getItemLayout = _this5.props.getItemLayout;

      invariant(!_getItemLayout, 'Should not have to estimate frames when a measurement metrics function is provided');
      return {
        length: _this5._averageCellLength,
        offset: _this5._averageCellLength * index
      };
    }
  };

  this._getFrameMetrics = function (index) {
    var _props11 = _this5.props,
        data = _props11.data,
        getItem = _props11.getItem,
        getItemCount = _props11.getItemCount,
        getItemLayout = _props11.getItemLayout,
        keyExtractor = _props11.keyExtractor;

    invariant(getItemCount(data) > index, 'Tried to get frame for out of range index ' + index);
    var item = getItem(data, index);
    var frame = item && _this5._frames[keyExtractor(item, index)];
    if (!frame || frame.index !== index) {
      if (getItemLayout) {
        frame = getItemLayout(data, index);
        if (__DEV__) {
          var frameType = PropTypes.shape({
            length: PropTypes.number.isRequired,
            offset: PropTypes.number.isRequired,
            index: PropTypes.number.isRequired
          }).isRequired;
          PropTypes.checkPropTypes({ frame: frameType }, { frame: frame }, 'frame', 'VirtualizedList.getItemLayout');
        }
      }
    }
    return frame;
  };
};

var CellRenderer = function (_React$Component) {
  babelHelpers.inherits(CellRenderer, _React$Component);

  function CellRenderer() {
    var _ref6;

    var _temp, _this4, _ret2;

    babelHelpers.classCallCheck(this, CellRenderer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret2 = (_temp = (_this4 = babelHelpers.possibleConstructorReturn(this, (_ref6 = CellRenderer.__proto__ || Object.getPrototypeOf(CellRenderer)).call.apply(_ref6, [this].concat(args))), _this4), _this4.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this4.props.item
      }
    }, _this4._separators = {
      highlight: function highlight() {
        var _this4$props = _this4.props,
            cellKey = _this4$props.cellKey,
            prevCellKey = _this4$props.prevCellKey;

        _this4.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: true
        });
      },
      unhighlight: function unhighlight() {
        var _this4$props2 = _this4.props,
            cellKey = _this4$props2.cellKey,
            prevCellKey = _this4$props2.prevCellKey;

        _this4.props.onUpdateSeparators([cellKey, prevCellKey], {
          highlighted: false
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this4$props3 = _this4.props,
            cellKey = _this4$props3.cellKey,
            prevCellKey = _this4$props3.prevCellKey;

        _this4.props.onUpdateSeparators([select === 'leading' ? prevCellKey : cellKey], newProps);
      }
    }, _temp), babelHelpers.possibleConstructorReturn(_this4, _ret2);
  }

  babelHelpers.createClass(CellRenderer, [{
    key: 'updateSeparatorProps',
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.props.onUnmount(this.props.cellKey);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props8 = this.props,
          ItemSeparatorComponent = _props8.ItemSeparatorComponent,
          fillRateHelper = _props8.fillRateHelper,
          item = _props8.item,
          index = _props8.index,
          inversionStyle = _props8.inversionStyle,
          parentProps = _props8.parentProps;
      var renderItem = parentProps.renderItem,
          getItemLayout = parentProps.getItemLayout;

      invariant(renderItem, 'no renderItem!');
      var element = renderItem({
        item: item,
        index: index,
        separators: this._separators
      });
      var onLayout = getItemLayout && !parentProps.debug && !fillRateHelper.enabled() ? undefined : this.props.onLayout;

      return React.createElement(
        View,
        { onLayout: onLayout, style: inversionStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 1238
          }
        },
        element,
        ItemSeparatorComponent && React.createElement(ItemSeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1241
          }
        }))
      );
    }
  }]);
  return CellRenderer;
}(React.Component);

var styles = StyleSheet.create({
  verticallyInverted: {
    transform: [{ scaleY: -1 }]
  },
  horizontallyInverted: {
    transform: [{ scaleX: -1 }]
  }
});

module.exports = VirtualizedList;
}, 230, null, "VirtualizedList");
__d(/* Batchinator */function(global, require, module, exports) {
'use strict';

var InteractionManager = require(195                 ); // 195 = InteractionManager

var Batchinator = function () {
  function Batchinator(callback, delayMS) {
    babelHelpers.classCallCheck(this, Batchinator);

    this._delay = delayMS;
    this._callback = callback;
  }

  babelHelpers.createClass(Batchinator, [{
    key: 'dispose',
    value: function dispose() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { abort: false };

      if (this._taskHandle) {
        this._taskHandle.cancel();
        if (!options.abort) {
          this._callback();
        }
        this._taskHandle = null;
      }
    }
  }, {
    key: 'schedule',
    value: function schedule() {
      var _this = this;

      if (this._taskHandle) {
        return;
      }
      var timeoutHandle = setTimeout(function () {
        _this._taskHandle = InteractionManager.runAfterInteractions(function () {
          _this._taskHandle = null;
          _this._callback();
        });
      }, this._delay);
      this._taskHandle = { cancel: function cancel() {
          return clearTimeout(timeoutHandle);
        } };
    }
  }]);
  return Batchinator;
}();

module.exports = Batchinator;
}, 231, null, "Batchinator");
__d(/* FillRateHelper */function(global, require, module, exports) {

'use strict';

var performanceNow = require(39                       ); // 39 = fbjs/lib/performanceNow
var warning = require(45                ); // 45 = fbjs/lib/warning

var Info = function Info() {
  babelHelpers.classCallCheck(this, Info);
  this.any_blank_count = 0;
  this.any_blank_ms = 0;
  this.any_blank_speed_sum = 0;
  this.mostly_blank_count = 0;
  this.mostly_blank_ms = 0;
  this.pixels_blank = 0;
  this.pixels_sampled = 0;
  this.pixels_scrolled = 0;
  this.total_time_spent = 0;
  this.sample_count = 0;
};

var DEBUG = false;

var _listeners = [];
var _minSampleCount = 10;
var _sampleRate = DEBUG ? 1 : null;

var FillRateHelper = function () {
  babelHelpers.createClass(FillRateHelper, null, [{
    key: 'addListener',
    value: function addListener(callback) {
      warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');
      _listeners.push(callback);
      return {
        remove: function remove() {
          _listeners = _listeners.filter(function (listener) {
            return callback !== listener;
          });
        }
      };
    }
  }, {
    key: 'setSampleRate',
    value: function setSampleRate(sampleRate) {
      _sampleRate = sampleRate;
    }
  }, {
    key: 'setMinSampleCount',
    value: function setMinSampleCount(minSampleCount) {
      _minSampleCount = minSampleCount;
    }
  }]);

  function FillRateHelper(getFrameMetrics) {
    babelHelpers.classCallCheck(this, FillRateHelper);
    this._anyBlankStartTime = null;
    this._enabled = false;
    this._info = new Info();
    this._mostlyBlankStartTime = null;
    this._samplesStartTime = null;

    this._getFrameMetrics = getFrameMetrics;
    this._enabled = (_sampleRate || 0) > Math.random();
    this._resetData();
  }

  babelHelpers.createClass(FillRateHelper, [{
    key: 'activate',
    value: function activate() {
      if (this._enabled && this._samplesStartTime == null) {
        DEBUG && console.debug('FillRateHelper: activate');
        this._samplesStartTime = performanceNow();
      }
    }
  }, {
    key: 'deactivateAndFlush',
    value: function deactivateAndFlush() {
      if (!this._enabled) {
        return;
      }
      var start = this._samplesStartTime;
      if (start == null) {
        DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');
        return;
      }
      if (this._info.sample_count < _minSampleCount) {
        this._resetData();
        return;
      }
      var total_time_spent = performanceNow() - start;
      var info = babelHelpers.extends({}, this._info, {
        total_time_spent: total_time_spent
      });
      if (DEBUG) {
        var derived = {
          avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,
          avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),
          avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,
          any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),
          any_blank_time_frac: this._info.any_blank_ms / total_time_spent,
          mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),
          mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent
        };
        for (var key in derived) {
          derived[key] = Math.round(1000 * derived[key]) / 1000;
        }
        console.debug('FillRateHelper deactivateAndFlush: ', { derived: derived, info: info });
      }
      _listeners.forEach(function (listener) {
        return listener(info);
      });
      this._resetData();
    }
  }, {
    key: 'computeBlankness',
    value: function computeBlankness(props, state, scrollMetrics) {
      if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {
        return 0;
      }
      var dOffset = scrollMetrics.dOffset,
          offset = scrollMetrics.offset,
          velocity = scrollMetrics.velocity,
          visibleLength = scrollMetrics.visibleLength;

      this._info.sample_count++;
      this._info.pixels_sampled += Math.round(visibleLength);
      this._info.pixels_scrolled += Math.round(Math.abs(dOffset));
      var scrollSpeed = Math.round(Math.abs(velocity) * 1000);
      var now = performanceNow();
      if (this._anyBlankStartTime != null) {
        this._info.any_blank_ms += now - this._anyBlankStartTime;
      }
      this._anyBlankStartTime = null;
      if (this._mostlyBlankStartTime != null) {
        this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;
      }
      this._mostlyBlankStartTime = null;

      var blankTop = 0;
      var first = state.first;
      var firstFrame = this._getFrameMetrics(first);
      while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {
        firstFrame = this._getFrameMetrics(first);
        first++;
      }

      if (firstFrame && first > 0) {
        blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));
      }
      var blankBottom = 0;
      var last = state.last;
      var lastFrame = this._getFrameMetrics(last);
      while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {
        lastFrame = this._getFrameMetrics(last);
        last--;
      }

      if (lastFrame && last < props.getItemCount(props.data) - 1) {
        var bottomEdge = lastFrame.offset + lastFrame.length;
        blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));
      }
      var pixels_blank = Math.round(blankTop + blankBottom);
      var blankness = pixels_blank / visibleLength;
      if (blankness > 0) {
        this._anyBlankStartTime = now;
        this._info.any_blank_speed_sum += scrollSpeed;
        this._info.any_blank_count++;
        this._info.pixels_blank += pixels_blank;
        if (blankness > 0.5) {
          this._mostlyBlankStartTime = now;
          this._info.mostly_blank_count++;
        }
      } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {
        this.deactivateAndFlush();
      }
      return blankness;
    }
  }, {
    key: 'enabled',
    value: function enabled() {
      return this._enabled;
    }
  }, {
    key: '_resetData',
    value: function _resetData() {
      this._anyBlankStartTime = null;
      this._info = new Info();
      this._mostlyBlankStartTime = null;
      this._samplesStartTime = null;
    }
  }]);
  return FillRateHelper;
}();

module.exports = FillRateHelper;
}, 232, null, "FillRateHelper");
__d(/* ViewabilityHelper */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var ViewabilityHelper = function () {
  function ViewabilityHelper() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { viewAreaCoveragePercentThreshold: 0 };
    babelHelpers.classCallCheck(this, ViewabilityHelper);
    this._hasInteracted = false;
    this._lastUpdateTime = 0;
    this._timers = new Set();
    this._viewableIndices = [];
    this._viewableItems = new Map();

    this._config = config;
  }

  babelHelpers.createClass(ViewabilityHelper, [{
    key: 'dispose',
    value: function dispose() {
      this._timers.forEach(clearTimeout);
    }
  }, {
    key: 'computeViewableItems',
    value: function computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange) {
      var _config = this._config,
          itemVisiblePercentThreshold = _config.itemVisiblePercentThreshold,
          viewAreaCoveragePercentThreshold = _config.viewAreaCoveragePercentThreshold;

      var viewAreaMode = viewAreaCoveragePercentThreshold != null;
      var viewablePercentThreshold = viewAreaMode ? viewAreaCoveragePercentThreshold : itemVisiblePercentThreshold;
      invariant(viewablePercentThreshold != null && itemVisiblePercentThreshold != null !== (viewAreaCoveragePercentThreshold != null), 'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold');
      var viewableIndices = [];
      if (itemCount === 0) {
        return viewableIndices;
      }
      var firstVisible = -1;

      var _ref = renderRange || { first: 0, last: itemCount - 1 },
          first = _ref.first,
          last = _ref.last;

      invariant(last < itemCount, 'Invalid render range ' + JSON.stringify({ renderRange: renderRange, itemCount: itemCount }));
      for (var idx = first; idx <= last; idx++) {
        var metrics = getFrameMetrics(idx);
        if (!metrics) {
          continue;
        }
        var top = metrics.offset - scrollOffset;
        var bottom = top + metrics.length;
        if (top < viewportHeight && bottom > 0) {
          firstVisible = idx;
          if (_isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, metrics.length)) {
            viewableIndices.push(idx);
          }
        } else if (firstVisible >= 0) {
          break;
        }
      }
      return viewableIndices;
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate(itemCount, scrollOffset, viewportHeight, getFrameMetrics, createViewToken, onViewableItemsChanged, renderRange) {
      var _this = this;

      var updateTime = Date.now();
      if (this._lastUpdateTime === 0 && itemCount > 0 && getFrameMetrics(0)) {
        this._lastUpdateTime = updateTime;
      }
      var updateElapsed = this._lastUpdateTime ? updateTime - this._lastUpdateTime : 0;
      if (this._config.waitForInteraction && !this._hasInteracted) {
        return;
      }
      var viewableIndices = [];
      if (itemCount) {
        viewableIndices = this.computeViewableItems(itemCount, scrollOffset, viewportHeight, getFrameMetrics, renderRange);
      }
      if (this._viewableIndices.length === viewableIndices.length && this._viewableIndices.every(function (v, ii) {
        return v === viewableIndices[ii];
      })) {
        return;
      }
      this._viewableIndices = viewableIndices;
      this._lastUpdateTime = updateTime;
      if (this._config.minimumViewTime && updateElapsed < this._config.minimumViewTime) {
        var handle = setTimeout(function () {
          _this._timers.delete(handle);
          _this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
        }, this._config.minimumViewTime);
        this._timers.add(handle);
      } else {
        this._onUpdateSync(viewableIndices, onViewableItemsChanged, createViewToken);
      }
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      this._hasInteracted = true;
    }
  }, {
    key: '_onUpdateSync',
    value: function _onUpdateSync(viewableIndicesToCheck, onViewableItemsChanged, createViewToken) {
      var _this2 = this;

      viewableIndicesToCheck = viewableIndicesToCheck.filter(function (ii) {
        return _this2._viewableIndices.includes(ii);
      });
      var prevItems = this._viewableItems;
      var nextItems = new Map(viewableIndicesToCheck.map(function (ii) {
        var viewable = createViewToken(ii, true);
        return [viewable.key, viewable];
      }));

      var changed = [];
      for (var _iterator = nextItems, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref4;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref4 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref4 = _i.value;
        }

        var _ref2 = _ref4;

        var _ref3 = babelHelpers.slicedToArray(_ref2, 2);

        var _key = _ref3[0];
        var viewable = _ref3[1];

        if (!prevItems.has(_key)) {
          changed.push(viewable);
        }
      }
      for (var _iterator2 = prevItems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref7;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref7 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref7 = _i2.value;
        }

        var _ref5 = _ref7;

        var _ref6 = babelHelpers.slicedToArray(_ref5, 2);

        var _key2 = _ref6[0];
        var _viewable = _ref6[1];

        if (!nextItems.has(_key2)) {
          changed.push(babelHelpers.extends({}, _viewable, { isViewable: false }));
        }
      }
      if (changed.length > 0) {
        this._viewableItems = nextItems;
        onViewableItemsChanged({
          viewableItems: Array.from(nextItems.values()),
          changed: changed
        });
      }
    }
  }]);
  return ViewabilityHelper;
}();

function _isViewable(viewAreaMode, viewablePercentThreshold, top, bottom, viewportHeight, itemLength) {
  if (_isEntirelyVisible(top, bottom, viewportHeight)) {
    return true;
  } else {
    var pixels = _getPixelsVisible(top, bottom, viewportHeight);
    var percent = 100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);
    return percent >= viewablePercentThreshold;
  }
}

function _getPixelsVisible(top, bottom, viewportHeight) {
  var visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);
  return Math.max(0, visibleHeight);
}

function _isEntirelyVisible(top, bottom, viewportHeight) {
  return top >= 0 && bottom <= viewportHeight && bottom > top;
}

module.exports = ViewabilityHelper;
}, 233, null, "ViewabilityHelper");
__d(/* VirtualizeUtils */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

function elementsThatOverlapOffsets(offsets, itemCount, getFrameMetrics) {
  var out = [];
  for (var ii = 0; ii < itemCount; ii++) {
    var frame = getFrameMetrics(ii);
    var trailingOffset = frame.offset + frame.length;
    for (var kk = 0; kk < offsets.length; kk++) {
      if (out[kk] == null && trailingOffset >= offsets[kk]) {
        out[kk] = ii;
        if (kk === offsets.length - 1) {
          invariant(out.length === offsets.length, 'bad offsets input, should be in increasing order ' + JSON.stringify(offsets));
          return out;
        }
      }
    }
  }
  return out;
}

function newRangeCount(prev, next) {
  return next.last - next.first + 1 - Math.max(0, 1 + Math.min(next.last, prev.last) - Math.max(next.first, prev.first));
}

function computeWindowedRenderLimits(props, prev, getFrameMetricsApprox, scrollMetrics) {
  var data = props.data,
      getItemCount = props.getItemCount,
      maxToRenderPerBatch = props.maxToRenderPerBatch,
      windowSize = props.windowSize;

  var itemCount = getItemCount(data);
  if (itemCount === 0) {
    return prev;
  }
  var offset = scrollMetrics.offset,
      velocity = scrollMetrics.velocity,
      visibleLength = scrollMetrics.visibleLength;

  var visibleBegin = Math.max(0, offset);
  var visibleEnd = visibleBegin + visibleLength;
  var overscanLength = (windowSize - 1) * visibleLength;

  var leadFactor = 0.5;

  var fillPreference = velocity > 1 ? 'after' : velocity < -1 ? 'before' : 'none';

  var overscanBegin = Math.max(0, visibleBegin - (1 - leadFactor) * overscanLength);
  var overscanEnd = Math.max(0, visibleEnd + leadFactor * overscanLength);

  var _elementsThatOverlapO = elementsThatOverlapOffsets([overscanBegin, visibleBegin, visibleEnd, overscanEnd], props.getItemCount(props.data), getFrameMetricsApprox),
      _elementsThatOverlapO2 = babelHelpers.slicedToArray(_elementsThatOverlapO, 4),
      overscanFirst = _elementsThatOverlapO2[0],
      first = _elementsThatOverlapO2[1],
      last = _elementsThatOverlapO2[2],
      overscanLast = _elementsThatOverlapO2[3];

  overscanFirst = overscanFirst == null ? 0 : overscanFirst;
  first = first == null ? Math.max(0, overscanFirst) : first;
  overscanLast = overscanLast == null ? itemCount - 1 : overscanLast;
  last = last == null ? Math.min(overscanLast, first + maxToRenderPerBatch - 1) : last;
  var visible = { first: first, last: last };

  var newCellCount = newRangeCount(prev, visible);

  while (true) {
    if (first <= overscanFirst && last >= overscanLast) {
      break;
    }
    var maxNewCells = newCellCount >= maxToRenderPerBatch;
    var firstWillAddMore = first <= prev.first || first > prev.last;
    var firstShouldIncrement = first > overscanFirst && (!maxNewCells || !firstWillAddMore);
    var lastWillAddMore = last >= prev.last || last < prev.first;
    var lastShouldIncrement = last < overscanLast && (!maxNewCells || !lastWillAddMore);
    if (maxNewCells && !firstShouldIncrement && !lastShouldIncrement) {
      break;
    }
    if (firstShouldIncrement && !(fillPreference === 'after' && lastShouldIncrement && lastWillAddMore)) {
      if (firstWillAddMore) {
        newCellCount++;
      }
      first--;
    }
    if (lastShouldIncrement && !(fillPreference === 'before' && firstShouldIncrement && firstWillAddMore)) {
      if (lastWillAddMore) {
        newCellCount++;
      }
      last++;
    }
  }
  if (!(last >= first && first >= 0 && last < itemCount && first >= overscanFirst && last <= overscanLast && first <= visible.first && last >= visible.last)) {
    throw new Error('Bad window calculation ' + JSON.stringify({
      first: first,
      last: last,
      itemCount: itemCount,
      overscanFirst: overscanFirst,
      overscanLast: overscanLast,
      visible: visible
    }));
  }
  return { first: first, last: last };
}

var VirtualizeUtils = {
  computeWindowedRenderLimits: computeWindowedRenderLimits,
  elementsThatOverlapOffsets: elementsThatOverlapOffsets,
  newRangeCount: newRangeCount
};

module.exports = VirtualizeUtils;
}, 234, null, "VirtualizeUtils");
__d(/* ImageBackground */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Image/ImageBackground.js';
var Image = require(204    ); // 204 = Image
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View

var ensureComponentIsNative = require(236                      ); // 236 = ensureComponentIsNative

var ImageBackground = function (_React$Component) {
  babelHelpers.inherits(ImageBackground, _React$Component);

  function ImageBackground() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ImageBackground);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ImageBackground.__proto__ || Object.getPrototypeOf(ImageBackground)).call.apply(_ref, [this].concat(args))), _this), _this._viewRef = null, _this._captureRef = function (ref) {
      _this._viewRef = ref;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ImageBackground, [{
    key: 'setNativeProps',
    value: function setNativeProps(props) {
      var viewRef = this._viewRef;
      if (viewRef) {
        ensureComponentIsNative(viewRef);
        viewRef.setNativeProps(props);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          style = _props.style,
          imageStyle = _props.imageStyle,
          imageRef = _props.imageRef,
          props = babelHelpers.objectWithoutProperties(_props, ['children', 'style', 'imageStyle', 'imageRef']);


      return React.createElement(
        View,
        { style: style, ref: this._captureRef, __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        React.createElement(Image, babelHelpers.extends({}, props, {
          style: [StyleSheet.absoluteFill, {
            width: style.width,
            height: style.height
          }, imageStyle],
          ref: imageRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        })),
        children
      );
    }
  }]);
  return ImageBackground;
}(React.Component);

module.exports = ImageBackground;
}, 235, null, "ImageBackground");
__d(/* ensureComponentIsNative */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var ensureComponentIsNative = function ensureComponentIsNative(component) {
  invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
};

module.exports = ensureComponentIsNative;
}, 236, null, "ensureComponentIsNative");
__d(/* ImageEditor */function(global, require, module, exports) {
'use strict';

var RCTImageEditingManager = require(30             ).ImageEditingManager; // 30 = NativeModules

var ImageEditor = function () {
  function ImageEditor() {
    babelHelpers.classCallCheck(this, ImageEditor);
  }

  babelHelpers.createClass(ImageEditor, null, [{
    key: 'cropImage',
    value: function cropImage(uri, cropData, success, failure) {
      RCTImageEditingManager.cropImage(uri, cropData, success, failure);
    }
  }]);
  return ImageEditor;
}();

module.exports = ImageEditor;
}, 237, null, "ImageEditor");
__d(/* ImageStore */function(global, require, module, exports) {
'use strict';

var RCTImageStoreManager = require(30             ).ImageStoreManager; // 30 = NativeModules

var ImageStore = function () {
  function ImageStore() {
    babelHelpers.classCallCheck(this, ImageStore);
  }

  babelHelpers.createClass(ImageStore, null, [{
    key: 'hasImageForTag',
    value: function hasImageForTag(uri, callback) {
      if (RCTImageStoreManager.hasImageForTag) {
        RCTImageStoreManager.hasImageForTag(uri, callback);
      } else {
        console.warn('hasImageForTag() not implemented');
      }
    }
  }, {
    key: 'removeImageForTag',
    value: function removeImageForTag(uri) {
      if (RCTImageStoreManager.removeImageForTag) {
        RCTImageStoreManager.removeImageForTag(uri);
      } else {
        console.warn('removeImageForTag() not implemented');
      }
    }
  }, {
    key: 'addImageFromBase64',
    value: function addImageFromBase64(base64ImageData, success, failure) {
      RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
    }
  }, {
    key: 'getBase64ForTag',
    value: function getBase64ForTag(uri, success, failure) {
      RCTImageStoreManager.getBase64ForTag(uri, success, failure);
    }
  }]);
  return ImageStore;
}();

module.exports = ImageStore;
}, 238, null, "ImageStore");
__d(/* KeyboardAvoidingView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js';
var createReactClass = require(157                 ); // 157 = create-react-class
var Keyboard = require(210       ); // 210 = Keyboard
var LayoutAnimation = require(240              ); // 240 = LayoutAnimation
var Platform = require(38        ); // 38 = Platform
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var viewRef = 'VIEW';

var KeyboardAvoidingView = createReactClass({
  displayName: 'KeyboardAvoidingView',
  mixins: [TimerMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    behavior: PropTypes.oneOf(['height', 'position', 'padding']),

    contentContainerStyle: ViewPropTypes.style,

    keyboardVerticalOffset: PropTypes.number.isRequired
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      keyboardVerticalOffset: 0
    };
  },
  getInitialState: function getInitialState() {
    return {
      bottom: 0
    };
  },


  subscriptions: [],
  frame: null,

  relativeKeyboardHeight: function relativeKeyboardHeight(keyboardFrame) {
    var frame = this.frame;
    if (!frame || !keyboardFrame) {
      return 0;
    }

    var keyboardY = keyboardFrame.screenY - this.props.keyboardVerticalOffset;

    return Math.max(frame.y + frame.height - keyboardY, 0);
  },
  onKeyboardChange: function onKeyboardChange(event) {
    if (!event) {
      this.setState({ bottom: 0 });
      return;
    }

    var duration = event.duration,
        easing = event.easing,
        endCoordinates = event.endCoordinates;

    var height = this.relativeKeyboardHeight(endCoordinates);

    if (duration && easing) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
    this.setState({ bottom: height });
  },
  onLayout: function onLayout(event) {
    this.frame = event.nativeEvent.layout;
  },
  componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
    if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
      nextState.bottom = 0;
    }
  },
  componentWillMount: function componentWillMount() {
    if (Platform.OS === 'ios') {
      this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange)];
    } else {
      this.subscriptions = [Keyboard.addListener('keyboardDidHide', this.onKeyboardChange), Keyboard.addListener('keyboardDidShow', this.onKeyboardChange)];
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.subscriptions.forEach(function (sub) {
      return sub.remove();
    });
  },
  render: function render() {
    var _props = this.props,
        behavior = _props.behavior,
        children = _props.children,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['behavior', 'children', 'style']);


    switch (behavior) {
      case 'height':
        var heightStyle = void 0;
        if (this.frame) {
          heightStyle = { height: this.frame.height - this.state.bottom, flex: 0 };
        }
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, heightStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          }),
          children
        );

      case 'position':
        var positionStyle = { bottom: this.state.bottom };
        var contentContainerStyle = this.props.contentContainerStyle;


        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: style, onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 172
            }
          }),
          React.createElement(
            View,
            { style: [contentContainerStyle, positionStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 173
              }
            },
            children
          )
        );

      case 'padding':
        var paddingStyle = { paddingBottom: this.state.bottom };
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, paddingStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 182
            }
          }),
          children
        );

      default:
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, onLayout: this.onLayout, style: style }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 189
            }
          }),
          children
        );
    }
  }
});

module.exports = KeyboardAvoidingView;
}, 239, null, "KeyboardAvoidingView");
__d(/* LayoutAnimation */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types
var UIManager = require(125        ); // 125 = UIManager

var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror

var checkPropTypes = PropTypes.checkPropTypes;


var TypesEnum = {
  spring: true,
  linear: true,
  easeInEaseOut: true,
  easeIn: true,
  easeOut: true,
  keyboard: true
};
var Types = keyMirror(TypesEnum);

var PropertiesEnum = {
  opacity: true,
  scaleXY: true
};
var Properties = keyMirror(PropertiesEnum);

var animType = PropTypes.shape({
  duration: PropTypes.number,
  delay: PropTypes.number,
  springDamping: PropTypes.number,
  initialVelocity: PropTypes.number,
  type: PropTypes.oneOf(Object.keys(Types)).isRequired,
  property: PropTypes.oneOf(Object.keys(Properties))
});

var configType = PropTypes.shape({
  duration: PropTypes.number.isRequired,
  create: animType,
  update: animType,
  delete: animType
});

function checkConfig(config, location, name) {
  checkPropTypes({ config: configType }, { config: config }, location, name);
}

function configureNext(config, onAnimationDidEnd) {
  if (__DEV__) {
    checkConfig(config, 'config', 'LayoutAnimation.configureNext');
  }
  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
}

function create(duration, type, creationProp) {
  return {
    duration: duration,
    create: {
      type: type,
      property: creationProp
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: creationProp
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
  linear: create(500, Types.linear, Properties.opacity),
  spring: {
    duration: 700,
    create: {
      type: Types.linear,
      property: Properties.opacity
    },
    update: {
      type: Types.spring,
      springDamping: 0.4
    },
    delete: {
      type: Types.linear,
      property: Properties.opacity
    }
  }
};

var LayoutAnimation = {
  configureNext: configureNext,

  create: create,
  Types: Types,
  Properties: Properties,
  checkConfig: checkConfig,
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};

module.exports = LayoutAnimation;
}, 240, null, "LayoutAnimation");
__d(/* MaskedViewIOS */function(global, require, module, exports) {var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/MaskedView/MaskedViewIOS.ios.js';


var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var MaskedViewIOS = function (_React$Component) {
  babelHelpers.inherits(MaskedViewIOS, _React$Component);

  function MaskedViewIOS() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, MaskedViewIOS);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = MaskedViewIOS.__proto__ || Object.getPrototypeOf(MaskedViewIOS)).call.apply(_ref, [this].concat(args))), _this), _this._hasWarnedInvalidRenderMask = false, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(MaskedViewIOS, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          maskElement = _props.maskElement,
          children = _props.children,
          otherViewProps = babelHelpers.objectWithoutProperties(_props, ['maskElement', 'children']);


      if (!React.isValidElement(maskElement)) {
        if (!this._hasWarnedInvalidRenderMask) {
          console.warn('MaskedView: Invalid `maskElement` prop was passed to MaskedView. ' + 'Expected a React Element. No mask will render.');
          this._hasWarnedInvalidRenderMask = true;
        }
        return React.createElement(
          View,
          babelHelpers.extends({}, otherViewProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 88
            }
          }),
          children
        );
      }

      return React.createElement(
        RCTMaskedView,
        babelHelpers.extends({}, otherViewProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          }
        }),
        React.createElement(
          View,
          { pointerEvents: 'none', style: StyleSheet.absoluteFill, __source: {
              fileName: _jsxFileName,
              lineNumber: 93
            }
          },
          maskElement
        ),
        children
      );
    }
  }]);
  return MaskedViewIOS;
}(React.Component);

MaskedViewIOS.propTypes = babelHelpers.extends({}, ViewPropTypes, {
  maskElement: PropTypes.element.isRequired
});


var RCTMaskedView = requireNativeComponent('RCTMaskedView', {
  name: 'RCTMaskedView',
  displayName: 'RCTMaskedView',
  propTypes: babelHelpers.extends({}, ViewPropTypes)
});

module.exports = MaskedViewIOS;
}, 241, null, "MaskedViewIOS");
__d(/* Modal */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Modal/Modal.js',
    _container;

var AppContainer = require(243           ); // 243 = AppContainer
var I18nManager = require(262          ); // 262 = I18nManager
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View

var deprecatedPropType = require(140                 ); // 140 = deprecatedPropType
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent
var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);

var Modal = function (_React$Component) {
  babelHelpers.inherits(Modal, _React$Component);

  function Modal(props) {
    babelHelpers.classCallCheck(this, Modal);

    var _this = babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

    Modal._confirmProps(props);
    return _this;
  }

  babelHelpers.createClass(Modal, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      Modal._confirmProps(nextProps);
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.props.visible === false) {
        return null;
      }

      var containerStyles = {
        backgroundColor: this.props.transparent ? 'transparent' : 'white'
      };

      var animationType = this.props.animationType;
      if (!animationType) {
        animationType = 'none';
        if (this.props.animated) {
          animationType = 'slide';
        }
      }

      var presentationStyle = this.props.presentationStyle;
      if (!presentationStyle) {
        presentationStyle = 'fullScreen';
        if (this.props.transparent) {
          presentationStyle = 'overFullScreen';
        }
      }

      var innerChildren = __DEV__ ? React.createElement(
        AppContainer,
        { rootTag: this.context.rootTag, __source: {
            fileName: _jsxFileName,
            lineNumber: 199
          }
        },
        this.props.children
      ) : this.props.children;

      return React.createElement(
        RCTModalHostView,
        {
          animationType: animationType,
          presentationStyle: presentationStyle,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 205
          }
        },
        React.createElement(
          View,
          { style: [styles.container, containerStyles], __source: {
              fileName: _jsxFileName,
              lineNumber: 217
            }
          },
          innerChildren
        )
      );
    }
  }, {
    key: '_shouldSetResponder',
    value: function _shouldSetResponder() {
      return true;
    }
  }], [{
    key: '_confirmProps',
    value: function _confirmProps(props) {
      if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
        console.warn('Modal with \'' + props.presentationStyle + '\' presentation style and \'transparent\' value is not supported.');
      }
    }
  }]);
  return Modal;
}(React.Component);

Modal.propTypes = {
  animationType: PropTypes.oneOf(['none', 'slide', 'fade']),

  presentationStyle: PropTypes.oneOf(['fullScreen', 'pageSheet', 'formSheet', 'overFullScreen']),

  transparent: PropTypes.bool,

  hardwareAccelerated: PropTypes.bool,

  visible: PropTypes.bool,

  onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,

  onShow: PropTypes.func,
  animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),

  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),

  onOrientationChange: PropTypes.func
};
Modal.defaultProps = {
  visible: true,
  hardwareAccelerated: false
};
Modal.contextTypes = {
  rootTag: PropTypes.number
};


var side = I18nManager.isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (_container = {
    position: 'absolute'
  }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, 'top', 0), _container)
});

module.exports = Modal;
}, 242, null, "Modal");
__d(/* AppContainer */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/ReactNative/AppContainer.js';
var EmitterSubscription = require(58                   ); // 58 = EmitterSubscription
var PropTypes = require(20          ); // 20 = prop-types
var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View

var AppContainer = function (_React$Component) {
  babelHelpers.inherits(AppContainer, _React$Component);

  function AppContainer() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, AppContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      inspector: null,
      mainKey: 1
    }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(AppContainer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        rootTag: this.props.rootTag
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
            var Inspector = require(244        ); // 244 = Inspector
            var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
              inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
              onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                _this2.setState(function (s) {
                  return { mainKey: s.mainKey + 1 };
                }, function () {
                  return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                });
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 65
              }
            });
            _this2.setState({ inspector: inspector });
          });
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subscription) {
        this._subscription.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var yellowBox = null;
      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          var YellowBox = require(261        ); // 261 = YellowBox
          yellowBox = React.createElement(YellowBox, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 95
            }
          });
        }
      }

      var innerView = React.createElement(
        View,
        {
          collapsable: !this.state.inspector,
          key: this.state.mainKey,
          pointerEvents: 'box-none',
          style: styles.appContainer,
          ref: function ref(_ref2) {
            _this3._mainRef = _ref2;
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 100
          }
        },
        this.props.children
      );

      var Wrapper = this.props.WrapperComponent;
      if (Wrapper) {
        innerView = React.createElement(
          Wrapper,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          },
          innerView
        );
      }
      return React.createElement(
        View,
        { style: styles.appContainer, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 121
          }
        },
        innerView,
        yellowBox,
        this.state.inspector
      );
    }
  }]);
  return AppContainer;
}(React.Component);

AppContainer.childContextTypes = {
  rootTag: PropTypes.number
};


var styles = StyleSheet.create({
  appContainer: {
    flex: 1
  }
});

module.exports = AppContainer;
}, 243, null, "AppContainer");
__d(/* Inspector */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/Inspector.js';
var Dimensions = require(162         ); // 162 = Dimensions
var InspectorOverlay = require(245               ); // 245 = InspectorOverlay
var InspectorPanel = require(249             ); // 249 = InspectorPanel
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative
var StyleSheet = require(160         ); // 160 = StyleSheet
var Touchable = require(184        ); // 184 = Touchable
var UIManager = require(125        ); // 125 = UIManager
var View = require(131   ); // 131 = View

var emptyObject = require(126                   ); // 126 = fbjs/lib/emptyObject
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var hook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
var renderer = findRenderer();

hook.resolveRNStyle = require(119           ); // 119 = flattenStyle

function findRenderer() {
  var renderers = hook._renderers;
  var keys = Object.keys(renderers);
  invariant(keys.length === 1, 'Expected to find exactly one React Native renderer on DevTools hook.');
  return renderers[keys[0]];
}

var Inspector = function (_React$Component) {
  babelHelpers.inherits(Inspector, _React$Component);

  function Inspector(props) {
    babelHelpers.classCallCheck(this, Inspector);

    var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      devtoolsAgent: null,
      hierarchy: null,
      panelPos: 'bottom',
      inspecting: true,
      perfing: false,
      inspected: null,
      selection: null,
      inspectedViewTag: _this.props.inspectedViewTag,
      networking: false
    };
    return _this;
  }

  babelHelpers.createClass(Inspector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      hook.on('react-devtools', this.attachToDevtools);

      if (hook.reactDevtoolsAgent) {
        this.attachToDevtools(hook.reactDevtoolsAgent);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subs) {
        this._subs.map(function (fn) {
          return fn();
        });
      }
      hook.off('react-devtools', this.attachToDevtools);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ inspectedViewTag: newProps.inspectedViewTag });
    }
  }, {
    key: 'setSelection',
    value: function setSelection(i) {
      var _this2 = this;

      var hierarchyItem = this.state.hierarchy[i];

      var _hierarchyItem$getIns = hierarchyItem.getInspectorData(ReactNative.findNodeHandle),
          measure = _hierarchyItem$getIns.measure,
          props = _hierarchyItem$getIns.props,
          source = _hierarchyItem$getIns.source;

      measure(function (x, y, width, height, left, top) {
        _this2.setState({
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props.style,
            source: source
          },
          selection: i
        });
      });
    }
  }, {
    key: 'onTouchViewTag',
    value: function onTouchViewTag(touchedViewTag, frame, pointerY) {
      var _renderer$getInspecto = renderer.getInspectorDataForViewTag(touchedViewTag),
          hierarchy = _renderer$getInspecto.hierarchy,
          props = _renderer$getInspecto.props,
          selection = _renderer$getInspecto.selection,
          source = _renderer$getInspecto.source;

      if (this.state.devtoolsAgent) {
        var offsetFromLeaf = hierarchy.length - 1 - selection;
        this.state.devtoolsAgent.selectFromDOMNode(touchedViewTag, true, offsetFromLeaf);
      }

      this.setState({
        panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
        selection: selection,
        hierarchy: hierarchy,
        inspected: {
          style: props.style,
          frame: frame,
          source: source
        }
      });
    }
  }, {
    key: 'setPerfing',
    value: function setPerfing(val) {
      this.setState({
        perfing: val,
        inspecting: false,
        inspected: null,
        networking: false
      });
    }
  }, {
    key: 'setInspecting',
    value: function setInspecting(val) {
      this.setState({
        inspecting: val,
        inspected: null
      });
    }
  }, {
    key: 'setTouchTargetting',
    value: function setTouchTargetting(val) {
      var _this3 = this;

      Touchable.TOUCH_TARGET_DEBUG = val;
      this.props.onRequestRerenderApp(function (inspectedViewTag) {
        _this3.setState({ inspectedViewTag: inspectedViewTag });
      });
    }
  }, {
    key: 'setNetworking',
    value: function setNetworking(val) {
      this.setState({
        networking: val,
        perfing: false,
        inspecting: false,
        inspected: null
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var panelContainerStyle = this.state.panelPos === 'bottom' ? { bottom: 0 } : { top: Platform.OS === 'ios' ? 20 : 0 };
      return React.createElement(
        View,
        { style: styles.container, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        },
        this.state.inspecting && React.createElement(InspectorOverlay, {
          inspected: this.state.inspected,
          inspectedViewTag: this.state.inspectedViewTag,
          onTouchViewTag: this.onTouchViewTag.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 234
          }
        }),
        React.createElement(
          View,
          { style: [styles.panelContainer, panelContainerStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 239
            }
          },
          React.createElement(InspectorPanel, {
            devtoolsIsOpen: !!this.state.devtoolsAgent,
            inspecting: this.state.inspecting,
            perfing: this.state.perfing,
            setPerfing: this.setPerfing.bind(this),
            setInspecting: this.setInspecting.bind(this),
            inspected: this.state.inspected,
            hierarchy: this.state.hierarchy,
            selection: this.state.selection,
            setSelection: this.setSelection.bind(this),
            touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
            setTouchTargetting: this.setTouchTargetting.bind(this),
            networking: this.state.networking,
            setNetworking: this.setNetworking.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 240
            }
          })
        )
      );
    }
  }]);
  return Inspector;
}(React.Component);

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.attachToDevtools = function (agent) {
    var _hideWait = null;
    var hlSub = agent.sub('highlight', function (_ref) {
      var node = _ref.node,
          name = _ref.name,
          props = _ref.props;

      clearTimeout(_hideWait);

      if (typeof node !== 'number') {
        node = ReactNative.findNodeHandle(node);
      }

      UIManager.measure(node, function (x, y, width, height, left, top) {
        _this4.setState({
          hierarchy: [],
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props ? props.style : emptyObject
          }
        });
      });
    });
    var hideSub = agent.sub('hideHighlight', function () {
      if (_this4.state.inspected === null) {
        return;
      }

      _hideWait = setTimeout(function () {
        _this4.setState({
          inspected: null
        });
      }, 100);
    });
    _this4._subs = [hlSub, hideSub];

    agent.on('shutdown', function () {
      _this4.setState({ devtoolsAgent: null });
      _this4._subs = null;
    });
    _this4.setState({
      devtoolsAgent: agent
    });
  };
};

var styles = StyleSheet.create({
  container: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  panelContainer: {
    position: 'absolute',
    left: 0,
    right: 0
  }
});

module.exports = Inspector;
}, 244, null, "Inspector");
__d(/* InspectorOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js';
var Dimensions = require(162         ); // 162 = Dimensions
var ElementBox = require(246         ); // 246 = ElementBox
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var UIManager = require(125        ); // 125 = UIManager
var View = require(131   ); // 131 = View

var InspectorOverlay = function (_React$Component) {
  babelHelpers.inherits(InspectorOverlay, _React$Component);

  function InspectorOverlay() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, InspectorOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
      var _e$nativeEvent$touche = e.nativeEvent.touches[0],
          locationX = _e$nativeEvent$touche.locationX,
          locationY = _e$nativeEvent$touche.locationY;

      UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
        _this.props.onTouchViewTag(nativeViewTag, { left: left, top: top, width: width, height: height }, locationY);
      });
    }, _this.shouldSetResponser = function (e) {
      _this.findViewForTouchEvent(e);
      return true;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(InspectorOverlay, [{
    key: 'render',
    value: function render() {
      var content = null;
      if (this.props.inspected) {
        content = React.createElement(ElementBox, { frame: this.props.inspected.frame, style: this.props.inspected.style, __source: {
            fileName: _jsxFileName,
            lineNumber: 64
          }
        });
      }

      return React.createElement(
        View,
        {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          style: [styles.inspector, { height: Dimensions.get('window').height }], __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        content
      );
    }
  }]);
  return InspectorOverlay;
}(React.Component);

InspectorOverlay.propTypes = {
  inspected: PropTypes.shape({
    frame: PropTypes.object,
    style: PropTypes.any
  }),
  inspectedViewTag: PropTypes.number,
  onTouchViewTag: PropTypes.func.isRequired
};


var styles = StyleSheet.create({
  inspector: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0
  }
});

module.exports = InspectorOverlay;
}, 245, null, "InspectorOverlay");
__d(/* ElementBox */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/ElementBox.js';
var React = require(132    ); // 132 = React
var View = require(131   ); // 131 = View
var StyleSheet = require(160         ); // 160 = StyleSheet
var BorderBox = require(247        ); // 247 = BorderBox
var resolveBoxStyle = require(248              ); // 248 = resolveBoxStyle

var flattenStyle = require(119           ); // 119 = flattenStyle

var ElementBox = function (_React$Component) {
  babelHelpers.inherits(ElementBox, _React$Component);

  function ElementBox() {
    babelHelpers.classCallCheck(this, ElementBox);
    return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementBox, [{
    key: 'render',
    value: function render() {
      var style = flattenStyle(this.props.style) || {};
      var margin = resolveBoxStyle('margin', style);
      var padding = resolveBoxStyle('padding', style);
      var frameStyle = this.props.frame;
      if (margin) {
        frameStyle = {
          top: frameStyle.top - margin.top,
          left: frameStyle.left - margin.left,
          height: frameStyle.height + margin.top + margin.bottom,
          width: frameStyle.width + margin.left + margin.right
        };
      }
      var contentStyle = {
        width: this.props.frame.width,
        height: this.props.frame.height
      };
      if (padding) {
        contentStyle = {
          width: contentStyle.width - padding.left - padding.right,
          height: contentStyle.height - padding.top - padding.bottom
        };
      }
      return React.createElement(
        View,
        { style: [styles.frame, frameStyle], pointerEvents: 'none', __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        },
        React.createElement(
          BorderBox,
          { box: margin, style: styles.margin, __source: {
              fileName: _jsxFileName,
              lineNumber: 48
            }
          },
          React.createElement(
            BorderBox,
            { box: padding, style: styles.padding, __source: {
                fileName: _jsxFileName,
                lineNumber: 49
              }
            },
            React.createElement(View, { style: [styles.content, contentStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 50
              }
            })
          )
        )
      );
    }
  }]);
  return ElementBox;
}(React.Component);

var styles = StyleSheet.create({
  frame: {
    position: 'absolute'
  },
  content: {
    backgroundColor: 'rgba(200, 230, 255, 0.8)'
  },
  padding: {
    borderColor: 'rgba(77, 255, 0, 0.3)'
  },
  margin: {
    borderColor: 'rgba(255, 132, 0, 0.3)'
  }
});

module.exports = ElementBox;
}, 246, null, "ElementBox");
__d(/* BorderBox */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/BorderBox.js';
var React = require(132    ); // 132 = React
var View = require(131   ); // 131 = View

var BorderBox = function (_React$Component) {
  babelHelpers.inherits(BorderBox, _React$Component);

  function BorderBox() {
    babelHelpers.classCallCheck(this, BorderBox);
    return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
  }

  babelHelpers.createClass(BorderBox, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      if (!box) {
        return this.props.children;
      }
      var style = {
        borderTopWidth: box.top,
        borderBottomWidth: box.bottom,
        borderLeftWidth: box.left,
        borderRightWidth: box.right
      };
      return React.createElement(
        View,
        { style: [style, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        },
        this.props.children
      );
    }
  }]);
  return BorderBox;
}(React.Component);

module.exports = BorderBox;
}, 247, null, "BorderBox");
__d(/* resolveBoxStyle */function(global, require, module, exports) {
'use strict';

function resolveBoxStyle(prefix, style) {
  var res = {};
  var subs = ['top', 'left', 'bottom', 'right'];
  var set = false;
  subs.forEach(function (sub) {
    res[sub] = style[prefix] || 0;
  });
  if (style[prefix]) {
    set = true;
  }
  if (style[prefix + 'Vertical']) {
    res.top = res.bottom = style[prefix + 'Vertical'];
    set = true;
  }
  if (style[prefix + 'Horizontal']) {
    res.left = res.right = style[prefix + 'Horizontal'];
    set = true;
  }
  subs.forEach(function (sub) {
    var val = style[prefix + capFirst(sub)];
    if (val) {
      res[sub] = val;
      set = true;
    }
  });
  if (!set) {
    return;
  }
  return res;
}

function capFirst(text) {
  return text[0].toUpperCase() + text.slice(1);
}

module.exports = resolveBoxStyle;
}, 248, null, "resolveBoxStyle");
__d(/* InspectorPanel */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/InspectorPanel.js';
var ElementProperties = require(250                ); // 250 = ElementProperties
var NetworkOverlay = require(257             ); // 257 = NetworkOverlay
var PerformanceOverlay = require(260                 ); // 260 = PerformanceOverlay
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ScrollView = require(206         ); // 206 = ScrollView
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
var View = require(131   ); // 131 = View

var InspectorPanel = function (_React$Component) {
  babelHelpers.inherits(InspectorPanel, _React$Component);

  function InspectorPanel() {
    babelHelpers.classCallCheck(this, InspectorPanel);
    return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
  }

  babelHelpers.createClass(InspectorPanel, [{
    key: 'renderWaiting',
    value: function renderWaiting() {
      if (this.props.inspecting) {
        return React.createElement(
          Text,
          { style: styles.waitingText, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          },
          'Tap something to inspect it'
        );
      }
      return React.createElement(
        Text,
        { style: styles.waitingText, __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        },
        'Nothing is inspected'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var contents = void 0;
      if (this.props.inspected) {
        contents = React.createElement(
          ScrollView,
          { style: styles.properties, __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          },
          React.createElement(ElementProperties, {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          })
        );
      } else if (this.props.perfing) {
        contents = React.createElement(PerformanceOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        });
      } else if (this.props.networking) {
        contents = React.createElement(NetworkOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 58
          }
        });
      } else {
        contents = React.createElement(
          View,
          { style: styles.waiting, __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          },
          this.renderWaiting()
        );
      }
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        },
        !this.props.devtoolsIsOpen && contents,
        React.createElement(
          View,
          { style: styles.buttonRow, __source: {
              fileName: _jsxFileName,
              lineNumber: 70
            }
          },
          React.createElement(Button, {
            title: 'Inspect',
            pressed: this.props.inspecting,
            onClick: this.props.setInspecting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 71
            }
          }),
          React.createElement(Button, { title: 'Perf',
            pressed: this.props.perfing,
            onClick: this.props.setPerfing,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          }),
          React.createElement(Button, { title: 'Network',
            pressed: this.props.networking,
            onClick: this.props.setNetworking,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 80
            }
          }),
          React.createElement(Button, { title: 'Touchables',
            pressed: this.props.touchTargetting,
            onClick: this.props.setTouchTargetting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          })
        )
      );
    }
  }]);
  return InspectorPanel;
}(React.Component);

InspectorPanel.propTypes = {
  devtoolsIsOpen: PropTypes.bool,
  inspecting: PropTypes.bool,
  setInspecting: PropTypes.func,
  inspected: PropTypes.object,
  perfing: PropTypes.bool,
  setPerfing: PropTypes.func,
  touchTargetting: PropTypes.bool,
  setTouchTargetting: PropTypes.func,
  networking: PropTypes.bool,
  setNetworking: PropTypes.func
};

var Button = function (_React$Component2) {
  babelHelpers.inherits(Button, _React$Component2);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            return _this3.props.onClick(!_this3.props.pressed);
          }, style: [styles.button, this.props.pressed && styles.buttonPressed], __source: {
            fileName: _jsxFileName,
            lineNumber: 110
          }
        },
        React.createElement(
          Text,
          { style: styles.buttonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 114
            }
          },
          this.props.title
        )
      );
    }
  }]);
  return Button;
}(React.Component);

var styles = StyleSheet.create({
  buttonRow: {
    flexDirection: 'row'
  },
  button: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    margin: 2,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonPressed: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)'
  },
  buttonText: {
    textAlign: 'center',
    color: 'white',
    margin: 5
  },
  container: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)'
  },
  properties: {
    height: 200
  },
  waiting: {
    height: 100
  },
  waitingText: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 20,
    color: 'white'
  }
});

module.exports = InspectorPanel;
}, 249, null, "InspectorPanel");
__d(/* ElementProperties */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/ElementProperties.js';
var BoxInspector = require(251           ); // 251 = BoxInspector
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var StyleInspector = require(252             ); // 252 = StyleInspector
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
var TouchableWithoutFeedback = require(218                       ); // 218 = TouchableWithoutFeedback
var View = require(131   ); // 131 = View

var flattenStyle = require(119           ); // 119 = flattenStyle
var mapWithSeparator = require(255               ); // 255 = mapWithSeparator
var openFileInEditor = require(256               ); // 256 = openFileInEditor

var ElementProperties = function (_React$Component) {
  babelHelpers.inherits(ElementProperties, _React$Component);

  function ElementProperties() {
    babelHelpers.classCallCheck(this, ElementProperties);
    return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementProperties, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = flattenStyle(this.props.style);

      var selection = this.props.selection;
      var openFileButton = void 0;
      var source = this.props.source;

      var _ref = source || {},
          fileName = _ref.fileName,
          lineNumber = _ref.lineNumber;

      if (fileName && lineNumber) {
        var parts = fileName.split('/');
        var fileNameShort = parts[parts.length - 1];
        openFileButton = React.createElement(
          TouchableHighlight,
          {
            style: styles.openButton,
            onPress: openFileInEditor.bind(null, fileName, lineNumber), __source: {
              fileName: _jsxFileName,
              lineNumber: 62
            }
          },
          React.createElement(
            Text,
            { style: styles.openButtonTitle, numberOfLines: 1, __source: {
                fileName: _jsxFileName,
                lineNumber: 65
              }
            },
            fileNameShort,
            ':',
            lineNumber
          )
        );
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 74
          }
        },
        React.createElement(
          View,
          { style: styles.info, __source: {
              fileName: _jsxFileName,
              lineNumber: 75
            }
          },
          React.createElement(
            View,
            { style: styles.breadcrumb, __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            },
            mapWithSeparator(this.props.hierarchy, function (hierarchyItem, i) {
              return React.createElement(
                TouchableHighlight,
                {
                  key: 'item-' + i,
                  style: [styles.breadItem, i === selection && styles.selected],

                  onPress: function onPress() {
                    return _this2.props.setSelection(i);
                  }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                  }
                },
                React.createElement(
                  Text,
                  { style: styles.breadItemText, __source: {
                      fileName: _jsxFileName,
                      lineNumber: 85
                    }
                  },
                  hierarchyItem.name
                )
              );
            }, function (i) {
              return React.createElement(
                Text,
                { key: 'sep-' + i, style: styles.breadSep, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 91
                  }
                },
                '\u25B8'
              );
            })
          ),
          React.createElement(
            View,
            { style: styles.row, __source: {
                fileName: _jsxFileName,
                lineNumber: 97
              }
            },
            React.createElement(
              View,
              { style: styles.col, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 98
                }
              },
              React.createElement(StyleInspector, { style: style, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 99
                }
              }),
              openFileButton
            ),
            React.createElement(BoxInspector, { style: style, frame: this.props.frame, __source: {
                fileName: _jsxFileName,
                lineNumber: 104
              }
            })
          )
        )
      );
    }
  }]);
  return ElementProperties;
}(React.Component);

ElementProperties.propTypes = {
  hierarchy: PropTypes.array.isRequired,
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
  source: PropTypes.shape({
    fileName: PropTypes.string,
    lineNumber: PropTypes.number
  })
};


var styles = StyleSheet.create({
  breadSep: {
    fontSize: 8,
    color: 'white'
  },
  breadcrumb: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 5
  },
  selected: {
    borderColor: 'white',
    borderRadius: 5
  },
  breadItem: {
    borderWidth: 1,
    borderColor: 'transparent',
    marginHorizontal: 2
  },
  breadItemText: {
    fontSize: 10,
    color: 'white',
    marginHorizontal: 5
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  col: {
    flex: 1
  },
  info: {
    padding: 10
  },
  openButton: {
    padding: 10,
    backgroundColor: '#000',
    marginVertical: 5,
    marginRight: 5,
    borderRadius: 2
  },
  openButtonTitle: {
    color: 'white',
    fontSize: 8
  }
});

module.exports = ElementProperties;
}, 250, null, "ElementProperties");
__d(/* BoxInspector */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/BoxInspector.js';
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(131   ); // 131 = View
var resolveBoxStyle = require(248              ); // 248 = resolveBoxStyle

var blank = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var BoxInspector = function (_React$Component) {
  babelHelpers.inherits(BoxInspector, _React$Component);

  function BoxInspector() {
    babelHelpers.classCallCheck(this, BoxInspector);
    return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxInspector, [{
    key: 'render',
    value: function render() {
      var frame = this.props.frame;
      var style = this.props.style;
      var margin = style && resolveBoxStyle('margin', style) || blank;
      var padding = style && resolveBoxStyle('padding', style) || blank;
      return React.createElement(
        BoxContainer,
        { title: 'margin', titleStyle: styles.marginLabel, box: margin, __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        },
        React.createElement(
          BoxContainer,
          { title: 'padding', box: padding, __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 36
              }
            },
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 37
                }
              },
              '(',
              (frame.left || 0).toFixed(1),
              ', ',
              (frame.top || 0).toFixed(1),
              ')'
            ),
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 40
                }
              },
              (frame.width || 0).toFixed(1),
              ' \xD7 ',
              (frame.height || 0).toFixed(1)
            )
          )
        )
      );
    }
  }]);
  return BoxInspector;
}(React.Component);

var BoxContainer = function (_React$Component2) {
  babelHelpers.inherits(BoxContainer, _React$Component2);

  function BoxContainer() {
    babelHelpers.classCallCheck(this, BoxContainer);
    return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxContainer, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      return React.createElement(
        View,
        { style: styles.box, __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          React.createElement(
            Text,
            { style: [this.props.titleStyle, styles.label], __source: {
                fileName: _jsxFileName,
                lineNumber: 56
              }
            },
            this.props.title
          ),
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 57
              }
            },
            box.top
          )
        ),
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            box.left
          ),
          this.props.children,
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            box.right
          )
        ),
        React.createElement(
          Text,
          { style: styles.boxText, __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          box.bottom
        )
      );
    }
  }]);
  return BoxContainer;
}(React.Component);

var styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  marginLabel: {
    width: 60
  },
  label: {
    fontSize: 10,
    color: 'rgb(255,100,0)',
    marginLeft: 5,
    flex: 1,
    textAlign: 'left',
    top: -3
  },
  buffer: {
    fontSize: 10,
    color: 'yellow',
    flex: 1,
    textAlign: 'center'
  },
  innerText: {
    color: 'yellow',
    fontSize: 12,
    textAlign: 'center',
    width: 70
  },
  box: {
    borderWidth: 1,
    borderColor: 'grey'
  },
  boxText: {
    color: 'white',
    fontSize: 12,
    marginHorizontal: 3,
    marginVertical: 2,
    textAlign: 'center'
  }
});

module.exports = BoxInspector;
}, 251, null, "BoxInspector");
__d(/* StyleInspector */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/StyleInspector.js';
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(131   ); // 131 = View

var StyleInspector = function (_React$Component) {
  babelHelpers.inherits(StyleInspector, _React$Component);

  function StyleInspector() {
    babelHelpers.classCallCheck(this, StyleInspector);
    return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(StyleInspector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.props.style) {
        return React.createElement(
          Text,
          { style: styles.noStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          'No style'
        );
      }
      var names = Object.keys(this.props.style);
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 26
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          },
          names.map(function (name) {
            return React.createElement(
              Text,
              { key: name, style: styles.attr, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 28
                }
              },
              name,
              ':'
            );
          })
        ),
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          names.map(function (name) {
            var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
            return React.createElement(
              Text,
              { key: name, style: styles.value, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 34
                }
              },
              value
            );
          })
        )
      );
    }
  }]);
  return StyleInspector;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  attr: {
    fontSize: 10,
    color: '#ccc'
  },
  value: {
    fontSize: 10,
    color: 'white',
    marginLeft: 10
  },
  noStyle: {
    color: 'white',
    fontSize: 10
  }
});

module.exports = StyleInspector;
}, 252, null, "StyleInspector");
__d(/* TouchableHighlight */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes
var StyleSheet = require(160         ); // 160 = StyleSheet
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var Touchable = require(184        ); // 184 = Touchable
var TouchableWithoutFeedback = require(218                       ); // 218 = TouchableWithoutFeedback
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var ensureComponentIsNative = require(236                      ); // 236 = ensureComponentIsNative
var ensurePositiveDelayProps = require(219                       ); // 219 = ensurePositiveDelayProps
var keyOf = require(254             ); // 254 = fbjs/lib/keyOf
var merge = require(150    ); // 150 = merge

var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  underlayColor: 'black'
};

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableHighlight = createReactClass({
  displayName: 'TouchableHighlight',
  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,

    underlayColor: ColorPropType,
    style: ViewPropTypes.style,

    onShowUnderlay: PropTypes.func,

    onHideUnderlay: PropTypes.func,

    hasTVPreferredFocus: PropTypes.bool,

    tvParallaxProperties: PropTypes.object
  }),

  mixins: [NativeMethodsMixin, TimerMixin, Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return DEFAULT_PROPS;
  },

  _computeSyntheticState: function _computeSyntheticState(props) {
    return {
      activeProps: {
        style: {
          opacity: props.activeOpacity
        }
      },
      activeUnderlayProps: {
        style: {
          backgroundColor: props.underlayColor
        }
      },
      underlayStyle: [INACTIVE_UNDERLAY_PROPS.style, props.style],
      hasTVPreferredFocus: props.hasTVPreferredFocus
    };
  },

  getInitialState: function getInitialState() {
    this._isMounted = false;
    return merge(this.touchableGetInitialState(), this._computeSyntheticState(this.props));
  },

  componentDidMount: function componentDidMount() {
    this._isMounted = true;
    ensurePositiveDelayProps(this.props);
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillUnmount: function componentWillUnmount() {
    this._isMounted = false;
  },

  componentDidUpdate: function componentDidUpdate() {
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
    if (nextProps.activeOpacity !== this.props.activeOpacity || nextProps.underlayColor !== this.props.underlayColor || nextProps.style !== this.props.style) {
      this.setState(this._computeSyntheticState(nextProps));
    }
  },

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    this._showUnderlay();
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.clearTimeout(this._hideTimeout);
    this._showUnderlay();
    this._hideTimeout = this.setTimeout(this._hideUnderlay, this.props.delayPressOut || 100);
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _showUnderlay: function _showUnderlay() {
    if (!this._isMounted || !this._hasPressHandler()) {
      return;
    }

    this.refs[UNDERLAY_REF].setNativeProps(this.state.activeUnderlayProps);
    this.refs[CHILD_REF].setNativeProps(this.state.activeProps);
    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },

  _hideUnderlay: function _hideUnderlay() {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    if (this._hasPressHandler() && this.refs[UNDERLAY_REF]) {
      this.refs[CHILD_REF].setNativeProps(INACTIVE_CHILD_PROPS);
      this.refs[UNDERLAY_REF].setNativeProps(babelHelpers.extends({}, INACTIVE_UNDERLAY_PROPS, {
        style: this.state.underlayStyle
      }));
      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },

  _hasPressHandler: function _hasPressHandler() {
    return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
  },

  render: function render() {
    return React.createElement(
      View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        ref: UNDERLAY_REF,
        style: this.state.underlayStyle,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.state.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 257
        }
      },
      React.cloneElement(React.Children.only(this.props.children), {
        ref: CHILD_REF
      }),
      Touchable.renderDebugView({ color: 'green', hitSlop: this.props.hitSlop })
    );
  }
});

var CHILD_REF = keyOf({ childRef: null });
var UNDERLAY_REF = keyOf({ underlayRef: null });
var INACTIVE_CHILD_PROPS = {
  style: StyleSheet.create({ x: { opacity: 1.0 } }).x
};
var INACTIVE_UNDERLAY_PROPS = {
  style: StyleSheet.create({ x: { backgroundColor: 'transparent' } }).x
};

module.exports = TouchableHighlight;
}, 253, null, "TouchableHighlight");
__d(/* fbjs/lib/keyOf.js */function(global, require, module, exports) {"use strict";

var keyOf = function keyOf(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
}, 254, null, "fbjs/lib/keyOf.js");
__d(/* mapWithSeparator */function(global, require, module, exports) {
'use strict';

function mapWithSeparator(items, itemRenderer, spacerRenderer) {
  var mapped = [];
  if (items.length > 0) {
    mapped.push(itemRenderer(items[0], 0, items));
    for (var ii = 1; ii < items.length; ii++) {
      mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
    }
  }
  return mapped;
}

module.exports = mapWithSeparator;
}, 255, null, "mapWithSeparator");
__d(/* openFileInEditor */function(global, require, module, exports) {
'use strict';

var getDevServer = require(70            ); // 70 = getDevServer

function openFileInEditor(file, lineNumber) {
  fetch(getDevServer().url + 'open-stack-frame', {
    method: 'POST',
    body: JSON.stringify({ file: file, lineNumber: lineNumber })
  });
}

module.exports = openFileInEditor;
}, 256, null, "openFileInEditor");
__d(/* NetworkOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js';
var ListView = require(224       ); // 224 = ListView
var React = require(132    ); // 132 = React
var ScrollView = require(206         ); // 206 = ScrollView
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
var View = require(131   ); // 131 = View
var WebSocketInterceptor = require(258                   ); // 258 = WebSocketInterceptor
var XHRInterceptor = require(259             ); // 259 = XHRInterceptor

var LISTVIEW_CELL_HEIGHT = 15;
var SEPARATOR_THICKNESS = 2;

var nextXHRId = 0;

var NetworkOverlay = function (_React$Component) {
  babelHelpers.inherits(NetworkOverlay, _React$Component);

  function NetworkOverlay(props) {
    babelHelpers.classCallCheck(this, NetworkOverlay);

    var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

    _this._requests = [];
    _this._detailViewItems = [];
    _this._listViewDataSource = new ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.state = {
      dataSource: _this._listViewDataSource.cloneWithRows([]),
      newDetailInfo: false,
      detailRowID: null
    };
    _this._listViewHighlighted = false;
    _this._listViewHeight = 0;
    _this._captureRequestListView = _this._captureRequestListView.bind(_this);
    _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
    _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
    _this._renderRow = _this._renderRow.bind(_this);
    _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
    _this._socketIdMap = {};
    _this._xhrIdMap = {};
    return _this;
  }

  babelHelpers.createClass(NetworkOverlay, [{
    key: '_enableXHRInterception',
    value: function _enableXHRInterception() {
      var _this2 = this;

      if (XHRInterceptor.isInterceptorEnabled()) {
        return;
      }

      XHRInterceptor.setOpenCallback(function (method, url, xhr) {
        xhr._index = nextXHRId++;
        var xhrIndex = _this2._requests.length;
        _this2._xhrIdMap[xhr._index] = xhrIndex;

        var _xhr = {
          'type': 'XMLHttpRequest',
          'method': method,
          'url': url
        };
        _this2._requests.push(_xhr);
        _this2._detailViewItems.push([]);
        _this2._genDetailViewItem(xhrIndex);
        _this2.setState({ dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests) }, _this2._scrollToBottom());
      });

      XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        if (!networkInfo.requestHeaders) {
          networkInfo.requestHeaders = {};
        }
        networkInfo.requestHeaders[header] = value;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setSendCallback(function (data, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        _this2._requests[xhrIndex].dataSent = data;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.responseContentType = type;
        networkInfo.responseSize = size;
        networkInfo.responseHeaders = responseHeaders;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.status = status;
        networkInfo.timeout = timeout;
        networkInfo.response = response;
        networkInfo.responseURL = responseURL;
        networkInfo.responseType = responseType;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.enableInterception();
    }
  }, {
    key: '_enableWebSocketInterception',
    value: function _enableWebSocketInterception() {
      var _this3 = this;

      if (WebSocketInterceptor.isInterceptorEnabled()) {
        return;
      }

      WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
        var socketIndex = _this3._requests.length;
        _this3._socketIdMap[socketId] = socketIndex;
        var _webSocket = {
          'type': 'WebSocket',
          'url': url,
          'protocols': protocols
        };
        _this3._requests.push(_webSocket);
        _this3._detailViewItems.push([]);
        _this3._genDetailViewItem(socketIndex);
        _this3.setState({ dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests) }, _this3._scrollToBottom());
      });

      WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (statusCode !== null && closeReason !== null) {
          _this3._requests[socketIndex].status = statusCode;
          _this3._requests[socketIndex].closeReason = closeReason;
        }
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setSendCallback(function (data, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverClose = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverError = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.enableInterception();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._enableXHRInterception();
      this._enableWebSocketInterception();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      XHRInterceptor.disableInterception();
      WebSocketInterceptor.disableInterception();
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
      var _this4 = this;

      var urlCellViewStyle = styles.urlEvenCellView;
      var methodCellViewStyle = styles.methodEvenCellView;
      if (rowID % 2 === 1) {
        urlCellViewStyle = styles.urlOddCellView;
        methodCellViewStyle = styles.methodOddCellView;
      }
      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            _this4._pressRow(rowID);
            highlightRow(sectionID, rowID);
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 302
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 306
            }
          },
          React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 307
              }
            },
            React.createElement(
              View,
              { style: urlCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 308
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 309
                  }
                },
                rowData.url
              )
            ),
            React.createElement(
              View,
              { style: methodCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 313
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 314
                  }
                },
                this._getTypeShortName(rowData.type)
              )
            )
          )
        )
      );
    }
  }, {
    key: '_renderSeperator',
    value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
      return React.createElement(View, {
        key: sectionID + '-' + rowID,
        style: {
          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 329
        }
      });
    }
  }, {
    key: '_scrollToBottom',
    value: function _scrollToBottom() {
      if (this._listView) {
        var scrollResponder = this._listView.getScrollResponder();
        if (scrollResponder) {
          var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
          scrollResponder.scrollResponderScrollTo({
            x: 0,
            y: scrollY,
            animated: true
          });
        }
      }
    }
  }, {
    key: '_captureRequestListView',
    value: function _captureRequestListView(listRef) {
      this._listView = listRef;
    }
  }, {
    key: '_listViewOnLayout',
    value: function _listViewOnLayout(event) {
      var height = event.nativeEvent.layout.height;

      this._listViewHeight = height;
    }
  }, {
    key: '_pressRow',
    value: function _pressRow(rowID) {
      this._listViewHighlighted = true;
      this.setState({ detailRowID: rowID }, this._scrollToTop());
    }
  }, {
    key: '_scrollToTop',
    value: function _scrollToTop() {
      if (this._scrollView) {
        this._scrollView.scrollTo({
          y: 0,
          animated: false
        });
      }
    }
  }, {
    key: '_captureDetailScrollView',
    value: function _captureDetailScrollView(scrollRef) {
      this._scrollView = scrollRef;
    }
  }, {
    key: '_closeButtonClicked',
    value: function _closeButtonClicked() {
      this.setState({ detailRowID: null });
    }
  }, {
    key: '_getStringByValue',
    value: function _getStringByValue(value) {
      if (value === undefined) {
        return 'undefined';
      }
      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      if (typeof value === 'string' && value.length > 500) {
        return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
      }
      return value;
    }
  }, {
    key: '_getRequestIndexByXHRID',
    value: function _getRequestIndexByXHRID(index) {
      if (index === undefined) {
        return -1;
      }
      var xhrIndex = this._xhrIdMap[index];
      if (xhrIndex === undefined) {
        return -1;
      } else {
        return xhrIndex;
      }
    }
  }, {
    key: '_getTypeShortName',
    value: function _getTypeShortName(type) {
      if (type === 'XMLHttpRequest') {
        return 'XHR';
      } else if (type === 'WebSocket') {
        return 'WS';
      }

      return '';
    }
  }, {
    key: '_genDetailViewItem',
    value: function _genDetailViewItem(index) {
      this._detailViewItems[index] = [];
      var detailViewItem = this._detailViewItems[index];
      var requestItem = this._requests[index];
      for (var _key in requestItem) {
        detailViewItem.push(React.createElement(
          View,
          { style: styles.detailViewRow, key: _key, __source: {
              fileName: _jsxFileName,
              lineNumber: 444
            }
          },
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailKeyCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 445
              }
            },
            _key
          ),
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailValueCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 448
              }
            },
            this._getStringByValue(requestItem[_key])
          )
        ));
      }

      if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
        this.setState({ newDetailInfo: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 463
          }
        },
        this.state.detailRowID != null && React.createElement(
          TouchableHighlight,
          {
            style: styles.closeButton,
            onPress: this._closeButtonClicked, __source: {
              fileName: _jsxFileName,
              lineNumber: 465
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 468
              }
            },
            React.createElement(
              Text,
              { style: styles.clostButtonText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 469
                }
              },
              'v'
            )
          )
        ),
        this.state.detailRowID != null && React.createElement(
          ScrollView,
          {
            style: styles.detailScrollView,
            ref: this._captureDetailScrollView, __source: {
              fileName: _jsxFileName,
              lineNumber: 473
            }
          },
          this._detailViewItems[this.state.detailRowID]
        ),
        React.createElement(
          View,
          { style: styles.listViewTitle, __source: {
              fileName: _jsxFileName,
              lineNumber: 478
            }
          },
          this._requests.length > 0 && React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 480
              }
            },
            React.createElement(
              View,
              { style: styles.urlTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 481
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 482
                  }
                },
                'URL'
              )
            ),
            React.createElement(
              View,
              { style: styles.methodTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 484
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 485
                  }
                },
                'Type'
              )
            )
          )
        ),
        React.createElement(ListView, {
          style: styles.listView,
          ref: this._captureRequestListView,
          dataSource: this.state.dataSource,
          renderRow: this._renderRow,
          enableEmptySections: true,
          renderSeparator: this._renderSeperator,
          onLayout: this._listViewOnLayout,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 489
          }
        })
      );
    }
  }]);
  return NetworkOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 5,
    paddingRight: 5
  },
  listViewTitle: {
    height: 20
  },
  listView: {
    flex: 1,
    height: 60
  },
  tableRow: {
    flexDirection: 'row',
    flex: 1
  },
  cellText: {
    color: 'white',
    fontSize: 12
  },
  methodTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 1
  },
  urlTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 5,
    paddingLeft: 3
  },
  methodOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 1
  },
  urlOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 5,
    paddingLeft: 3
  },
  methodEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 1
  },
  urlEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 5,
    paddingLeft: 3
  },
  detailScrollView: {
    flex: 1,
    height: 180,
    marginTop: 5,
    marginBottom: 5
  },
  detailKeyCellView: {
    flex: 1.3
  },
  detailValueCellView: {
    flex: 2
  },
  detailViewRow: {
    flexDirection: 'row',
    paddingHorizontal: 3
  },
  detailViewText: {
    color: 'white',
    fontSize: 11
  },
  clostButtonText: {
    color: 'white',
    fontSize: 10
  },
  closeButton: {
    marginTop: 5,
    backgroundColor: '#888',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

module.exports = NetworkOverlay;
}, 257, null, "NetworkOverlay");
__d(/* WebSocketInterceptor */function(global, require, module, exports) {
'use strict';

var RCTWebSocketModule = require(30             ).WebSocketModule; // 30 = NativeModules
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter

var base64 = require(91         ); // 91 = base64-js

var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
var originalRCTWebSocketSend = RCTWebSocketModule.send;
var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
var originalRCTWebSocketClose = RCTWebSocketModule.close;

var eventEmitter = void 0;
var subscriptions = void 0;

var closeCallback = void 0;
var sendCallback = void 0;
var connectCallback = void 0;
var onOpenCallback = void 0;
var onMessageCallback = void 0;
var onErrorCallback = void 0;
var onCloseCallback = void 0;

var _isInterceptorEnabled = false;

var WebSocketInterceptor = {
  setCloseCallback: function setCloseCallback(callback) {
    closeCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setConnectCallback: function setConnectCallback(callback) {
    connectCallback = callback;
  },
  setOnOpenCallback: function setOnOpenCallback(callback) {
    onOpenCallback = callback;
  },
  setOnMessageCallback: function setOnMessageCallback(callback) {
    onMessageCallback = callback;
  },
  setOnErrorCallback: function setOnErrorCallback(callback) {
    onErrorCallback = callback;
  },
  setOnCloseCallback: function setOnCloseCallback(callback) {
    onCloseCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  _unregisterEvents: function _unregisterEvents() {
    subscriptions.forEach(function (e) {
      return e.remove();
    });
    subscriptions = [];
  },
  _registerEvents: function _registerEvents() {
    subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
      if (onMessageCallback) {
        onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
      }
    }), eventEmitter.addListener('websocketOpen', function (ev) {
      if (onOpenCallback) {
        onOpenCallback(ev.id);
      }
    }), eventEmitter.addListener('websocketClosed', function (ev) {
      if (onCloseCallback) {
        onCloseCallback(ev.id, { code: ev.code, reason: ev.reason });
      }
    }), eventEmitter.addListener('websocketFailed', function (ev) {
      if (onErrorCallback) {
        onErrorCallback(ev.id, { message: ev.message });
      }
    })];
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }
    eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    WebSocketInterceptor._registerEvents();

    RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
      if (connectCallback) {
        connectCallback(url, protocols, options, socketId);
      }
      originalRCTWebSocketConnect.apply(this, arguments);
    };

    RCTWebSocketModule.send = function (data, socketId) {
      if (sendCallback) {
        sendCallback(data, socketId);
      }
      originalRCTWebSocketSend.apply(this, arguments);
    };

    RCTWebSocketModule.sendBinary = function (data, socketId) {
      if (sendCallback) {
        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
      }
      originalRCTWebSocketSendBinary.apply(this, arguments);
    };

    RCTWebSocketModule.close = function () {
      if (closeCallback) {
        if (arguments.length === 3) {
          closeCallback(arguments[0], arguments[1], arguments[2]);
        } else {
          closeCallback(null, null, arguments[0]);
        }
      }
      originalRCTWebSocketClose.apply(this, arguments);
    };

    _isInterceptorEnabled = true;
  },
  _arrayBufferToString: function _arrayBufferToString(data) {
    var value = base64.toByteArray(data).buffer;
    if (value === undefined || value === null) {
      return '(no value)';
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
      return 'ArrayBuffer {' + String(Array.from(new Uint8Array(value))) + '}';
    }
    return value;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    RCTWebSocketModule.send = originalRCTWebSocketSend;
    RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
    RCTWebSocketModule.close = originalRCTWebSocketClose;
    RCTWebSocketModule.connect = originalRCTWebSocketConnect;

    connectCallback = null;
    closeCallback = null;
    sendCallback = null;
    onOpenCallback = null;
    onMessageCallback = null;
    onCloseCallback = null;
    onErrorCallback = null;

    WebSocketInterceptor._unregisterEvents();
  }
};

module.exports = WebSocketInterceptor;
}, 258, null, "WebSocketInterceptor");
__d(/* XHRInterceptor */function(global, require, module, exports) {
'use strict';

var XMLHttpRequest = require(81              ); // 81 = XMLHttpRequest
var originalXHROpen = XMLHttpRequest.prototype.open;
var originalXHRSend = XMLHttpRequest.prototype.send;
var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;

var openCallback;
var sendCallback;
var requestHeaderCallback;
var headerReceivedCallback;
var responseCallback;

var _isInterceptorEnabled = false;

var XHRInterceptor = {
  setOpenCallback: function setOpenCallback(callback) {
    openCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
    headerReceivedCallback = callback;
  },
  setResponseCallback: function setResponseCallback(callback) {
    responseCallback = callback;
  },
  setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
    requestHeaderCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }

    XMLHttpRequest.prototype.open = function (method, url) {
      if (openCallback) {
        openCallback(method, url, this);
      }
      originalXHROpen.apply(this, arguments);
    };

    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
      if (requestHeaderCallback) {
        requestHeaderCallback(header, value, this);
      }
      originalXHRSetRequestHeader.apply(this, arguments);
    };

    XMLHttpRequest.prototype.send = function (data) {
      var _this = this;

      if (sendCallback) {
        sendCallback(data, this);
      }
      if (this.addEventListener) {
        this.addEventListener('readystatechange', function () {
          if (!_isInterceptorEnabled) {
            return;
          }
          if (_this.readyState === _this.HEADERS_RECEIVED) {
            var contentTypeString = _this.getResponseHeader('Content-Type');
            var contentLengthString = _this.getResponseHeader('Content-Length');
            var responseContentType = void 0,
                responseSize = void 0;
            if (contentTypeString) {
              responseContentType = contentTypeString.split(';')[0];
            }
            if (contentLengthString) {
              responseSize = parseInt(contentLengthString, 10);
            }
            if (headerReceivedCallback) {
              headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
            }
          }
          if (_this.readyState === _this.DONE) {
            if (responseCallback) {
              responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
            }
          }
        }, false);
      }
      originalXHRSend.apply(this, arguments);
    };
    _isInterceptorEnabled = true;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    XMLHttpRequest.prototype.send = originalXHRSend;
    XMLHttpRequest.prototype.open = originalXHROpen;
    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
    responseCallback = null;
    openCallback = null;
    sendCallback = null;
    headerReceivedCallback = null;
    requestHeaderCallback = null;
  }
};

module.exports = XHRInterceptor;
}, 259, null, "XHRInterceptor");
__d(/* PerformanceOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js';
var PerformanceLogger = require(111                ); // 111 = PerformanceLogger
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var View = require(131   ); // 131 = View

var PerformanceOverlay = function (_React$Component) {
  babelHelpers.inherits(PerformanceOverlay, _React$Component);

  function PerformanceOverlay() {
    babelHelpers.classCallCheck(this, PerformanceOverlay);
    return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
  }

  babelHelpers.createClass(PerformanceOverlay, [{
    key: 'render',
    value: function render() {
      var perfLogs = PerformanceLogger.getTimespans();
      var items = [];

      for (var key in perfLogs) {
        if (perfLogs[key].totalTime) {
          var unit = key === 'BundleSize' ? 'b' : 'ms';
          items.push(React.createElement(
            View,
            { style: styles.row, key: key, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            React.createElement(
              Text,
              { style: [styles.text, styles.label], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 30
                }
              },
              key
            ),
            React.createElement(
              Text,
              { style: [styles.text, styles.totalTime], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 31
                }
              },
              perfLogs[key].totalTime + unit
            )
          ));
        }
      }

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        },
        items
      );
    }
  }]);
  return PerformanceOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    height: 100,
    paddingTop: 10
  },
  label: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    paddingHorizontal: 10
  },
  text: {
    color: 'white',
    fontSize: 12
  },
  totalTime: {
    paddingRight: 100
  }
});

module.exports = PerformanceOverlay;
}, 260, null, "PerformanceOverlay");
__d(/* YellowBox */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/ReactNative/YellowBox.js';
var EventEmitter = require(57            ); // 57 = EventEmitter
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var StyleSheet = require(160         ); // 160 = StyleSheet

var infoLog = require(112      ); // 112 = infoLog
var openFileInEditor = require(256               ); // 256 = openFileInEditor
var parseErrorStack = require(42               ); // 42 = parseErrorStack
var symbolicateStackTrace = require(69                     ); // 69 = symbolicateStackTrace

var _warningEmitter = new EventEmitter();
var _warningMap = new Map();
var IGNORED_WARNINGS = [];

if (__DEV__) {
  var _console = console,
      error = _console.error,
      warn = _console.warn;


  console.error = function () {
    error.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
      updateWarningMap.apply(null, arguments);
    }
  };

  console.warn = function () {
    warn.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('(ADVICE)')) {
      return;
    }

    updateWarningMap.apply(null, arguments);
  };

  if (Platform.isTesting) {
    console.disableYellowBox = true;
  }
}

function sprintf(format) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var index = 0;
  return format.replace(/%s/g, function (match) {
    return args[index++];
  });
}

function updateWarningMap(format) {
  if (console.disableYellowBox) {
    return;
  }
  var stringifySafe = require(36             ); // 36 = stringifySafe

  format = String(format);
  var argCount = (format.match(/%s/g) || []).length;

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(args.slice(0, argCount))))].concat(babelHelpers.toConsumableArray(args.slice(argCount).map(stringifySafe))).join(' ');

  var warningInfo = _warningMap.get(warning);
  if (warningInfo) {
    warningInfo.count += 1;
  } else {
    var _error = new Error();
    _error.framesToPop = 2;

    _warningMap.set(warning, {
      count: 1,
      stacktrace: parseErrorStack(_error),
      symbolicated: false
    });
  }

  _warningEmitter.emit('warning', _warningMap);
}

function ensureSymbolicatedWarning(warning) {
  var prevWarningInfo = _warningMap.get(warning);
  if (!prevWarningInfo || prevWarningInfo.symbolicated) {
    return;
  }
  prevWarningInfo.symbolicated = true;

  symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      nextWarningInfo.stacktrace = stack;
      _warningEmitter.emit('warning', _warningMap);
    }
  }, function (error) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      infoLog('Failed to symbolicate warning, "%s":', warning, error);
      _warningEmitter.emit('warning', _warningMap);
    }
  });
}

function isWarningIgnored(warning) {
  var isIgnored = IGNORED_WARNINGS.some(function (ignoredWarning) {
    return warning.startsWith(ignoredWarning);
  });

  if (isIgnored) {
    return true;
  }

  return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
    return warning.startsWith(String(ignorePrefix));
  });
}

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onPress = _ref.onPress;

  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
  var View = require(131   ); // 131 = View

  var countText = count > 1 ? React.createElement(
    Text,
    { style: styles.listRowCount, __source: {
        fileName: _jsxFileName,
        lineNumber: 185
      }
    },
    '(' + count + ') '
  ) : null;

  return React.createElement(
    View,
    { style: styles.listRow, __source: {
        fileName: _jsxFileName,
        lineNumber: 189
      }
    },
    React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        onPress: onPress,
        style: styles.listRowContent,
        underlayColor: 'transparent', __source: {
          fileName: _jsxFileName,
          lineNumber: 190
        }
      },
      React.createElement(
        Text,
        { style: styles.listRowText, numberOfLines: 2, __source: {
            fileName: _jsxFileName,
            lineNumber: 195
          }
        },
        countText,
        warning
      )
    )
  );
};

var StackRow = function StackRow(_ref2) {
  var frame = _ref2.frame;

  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
  var file = frame.file,
      lineNumber = frame.lineNumber;

  var fileName = void 0;
  if (file) {
    var fileParts = file.split('/');
    fileName = fileParts[fileParts.length - 1];
  } else {
    fileName = '<unknown file>';
  }

  return React.createElement(
    TouchableHighlight,
    {
      activeOpacity: 0.5,
      style: styles.openInEditorButton,
      underlayColor: 'transparent',
      onPress: openFileInEditor.bind(null, file, lineNumber), __source: {
        fileName: _jsxFileName,
        lineNumber: 218
      }
    },
    React.createElement(
      Text,
      { style: styles.inspectorCountText, __source: {
          fileName: _jsxFileName,
          lineNumber: 223
        }
      },
      fileName,
      ':',
      lineNumber
    )
  );
};

var WarningInspector = function WarningInspector(_ref3) {
  var warningInfo = _ref3.warningInfo,
      warning = _ref3.warning,
      stacktraceVisible = _ref3.stacktraceVisible,
      onDismiss = _ref3.onDismiss,
      onDismissAll = _ref3.onDismissAll,
      onMinimize = _ref3.onMinimize,
      toggleStacktrace = _ref3.toggleStacktrace;

  var ScrollView = require(206         ); // 206 = ScrollView
  var Text = require(183   ); // 183 = Text
  var TouchableHighlight = require(253                 ); // 253 = TouchableHighlight
  var View = require(131   ); // 131 = View

  var _ref4 = warningInfo || {},
      count = _ref4.count,
      stacktrace = _ref4.stacktrace;

  var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';

  var stacktraceList = void 0;
  if (stacktraceVisible && stacktrace) {
    stacktraceList = React.createElement(
      View,
      { style: styles.stacktraceList, __source: {
          fileName: _jsxFileName,
          lineNumber: 251
        }
      },
      stacktrace.map(function (frame, ii) {
        return React.createElement(StackRow, { frame: frame, key: ii, __source: {
            fileName: _jsxFileName,
            lineNumber: 252
          }
        });
      })
    );
  }

  return React.createElement(
    View,
    { style: styles.inspector, __source: {
        fileName: _jsxFileName,
        lineNumber: 258
      }
    },
    React.createElement(
      View,
      { style: styles.inspectorCount, __source: {
          fileName: _jsxFileName,
          lineNumber: 259
        }
      },
      React.createElement(
        Text,
        { style: styles.inspectorCountText, __source: {
            fileName: _jsxFileName,
            lineNumber: 260
          }
        },
        countSentence
      ),
      React.createElement(
        TouchableHighlight,
        { onPress: toggleStacktrace, underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 261
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 262
            }
          },
          stacktraceVisible ? '\u25BC' : '\u25B6',
          ' Stacktrace'
        )
      )
    ),
    React.createElement(
      ScrollView,
      { style: styles.inspectorWarning, __source: {
          fileName: _jsxFileName,
          lineNumber: 267
        }
      },
      stacktraceList,
      React.createElement(
        Text,
        { style: styles.inspectorWarningText, __source: {
            fileName: _jsxFileName,
            lineNumber: 269
          }
        },
        warning
      )
    ),
    React.createElement(
      View,
      { style: styles.inspectorButtons, __source: {
          fileName: _jsxFileName,
          lineNumber: 271
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onMinimize,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 272
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 277
            }
          },
          'Minimize'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismiss,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 281
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 286
            }
          },
          'Dismiss'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismissAll,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 290
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 295
            }
          },
          'Dismiss All'
        )
      )
    )
  );
};

var YellowBox = function (_React$Component) {
  babelHelpers.inherits(YellowBox, _React$Component);

  function YellowBox(props, context) {
    babelHelpers.classCallCheck(this, YellowBox);

    var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      stacktraceVisible: false,
      warningMap: _warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  babelHelpers.createClass(YellowBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _warningEmitter.addListener('warning', function (warningMap) {
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({
            warningMap: warningMap
          });
        });
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var inspecting = this.state.inspecting;

      if (inspecting != null) {
        ensureSymbolicatedWarning(inspecting);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        return null;
      }
      var ScrollView = require(206         ); // 206 = ScrollView
      var View = require(131   ); // 131 = View

      var _state = this.state,
          inspecting = _state.inspecting,
          stacktraceVisible = _state.stacktraceVisible;

      var inspector = inspecting !== null ? React.createElement(WarningInspector, {
        warningInfo: this.state.warningMap.get(inspecting),
        warning: inspecting,
        stacktraceVisible: stacktraceVisible,
        onDismiss: function onDismiss() {
          return _this3.dismissWarning(inspecting);
        },
        onDismissAll: function onDismissAll() {
          return _this3.dismissWarning(null);
        },
        onMinimize: function onMinimize() {
          return _this3.setState({ inspecting: null });
        },
        toggleStacktrace: function toggleStacktrace() {
          return _this3.setState({ stacktraceVisible: !stacktraceVisible });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 378
        }
      }) : null;

      var rows = [];
      this.state.warningMap.forEach(function (warningInfo, warning) {
        if (!isWarningIgnored(warning)) {
          rows.push(React.createElement(WarningRow, {
            key: warning,
            count: warningInfo.count,
            warning: warning,
            onPress: function onPress() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 393
            }
          }));
        }
      });

      var listStyle = [styles.list, { height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight) }];
      return React.createElement(
        View,
        { style: inspector ? styles.fullScreen : listStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 410
          }
        },
        React.createElement(
          ScrollView,
          { style: listStyle, scrollsToTop: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 411
            }
          },
          rows
        ),
        inspector
      );
    }
  }], [{
    key: 'ignoreWarnings',
    value: function ignoreWarnings(warnings) {
      warnings.forEach(function (warning) {
        if (IGNORED_WARNINGS.indexOf(warning) === -1) {
          IGNORED_WARNINGS.push(warning);
        }
      });
    }
  }]);
  return YellowBox;
}(React.Component);

var backgroundColor = function backgroundColor(opacity) {
  return 'rgba(250, 186, 48, ' + opacity + ')';
};
var textColor = 'white';
var rowGutter = 1;
var rowHeight = 46;

var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;

var styles = StyleSheet.create({
  fullScreen: {
    height: '100%',
    width: '100%',
    elevation: elevation,
    position: 'absolute'
  },
  inspector: {
    backgroundColor: backgroundColor(0.95),
    height: '100%',
    paddingTop: 5,
    elevation: elevation
  },
  inspectorButtons: {
    flexDirection: 'row'
  },
  inspectorButton: {
    flex: 1,
    paddingVertical: 22,
    backgroundColor: backgroundColor(1)
  },
  stacktraceList: {
    paddingBottom: 5
  },
  inspectorButtonText: {
    color: textColor,
    fontSize: 14,
    opacity: 0.8,
    textAlign: 'center'
  },
  openInEditorButton: {
    paddingTop: 5,
    paddingBottom: 5
  },
  inspectorCount: {
    padding: 15,
    paddingBottom: 0,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  inspectorCountText: {
    color: textColor,
    fontSize: 14
  },
  inspectorWarning: {
    flex: 1,
    paddingHorizontal: 15
  },
  inspectorWarningText: {
    color: textColor,
    fontSize: 16,
    fontWeight: '600'
  },
  list: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    elevation: elevation
  },
  listRow: {
    backgroundColor: backgroundColor(0.95),
    height: rowHeight,
    marginTop: rowGutter
  },
  listRowContent: {
    flex: 1
  },
  listRowCount: {
    color: 'rgba(255, 255, 255, 0.5)'
  },
  listRowText: {
    color: textColor,
    position: 'absolute',
    left: 0,
    top: Platform.OS === 'android' ? 5 : 7,
    marginLeft: 15,
    marginRight: 15
  }
});

module.exports = YellowBox;
}, 261, null, "YellowBox");
__d(/* I18nManager */function(global, require, module, exports) {
'use strict';

var I18nManager = require(30             ).I18nManager || { // 30 = NativeModules
  isRTL: false,
  allowRTL: function allowRTL() {},
  forceRTL: function forceRTL() {}
};

module.exports = I18nManager;
}, 262, null, "I18nManager");
__d(/* NavigatorIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Navigation/NavigatorIOS.ios.js';
var EventEmitter = require(57            ); // 57 = EventEmitter
var Image = require(204    ); // 204 = Image
var RCTNavigatorManager = require(30             ).NavigatorManager; // 30 = NativeModules
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(65           ); // 65 = ReactNative
var StaticContainer = require(264                    ); // 264 = StaticContainer.react
var StyleSheet = require(160         ); // 160 = StyleSheet
var TVEventHandler = require(188             ); // 188 = TVEventHandler
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var logError = require(105       ); // 105 = logError
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror

var TRANSITIONER_REF = 'transitionerRef';

var __uid = 0;
function getuid() {
  return __uid++;
}

var NavigatorTransitionerIOS = function (_React$Component) {
  babelHelpers.inherits(NavigatorTransitionerIOS, _React$Component);

  function NavigatorTransitionerIOS() {
    babelHelpers.classCallCheck(this, NavigatorTransitionerIOS);
    return babelHelpers.possibleConstructorReturn(this, (NavigatorTransitionerIOS.__proto__ || Object.getPrototypeOf(NavigatorTransitionerIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(NavigatorTransitionerIOS, [{
    key: 'requestSchedulingNavigation',
    value: function requestSchedulingNavigation(cb) {
      RCTNavigatorManager.requestSchedulingJavaScriptNavigation(ReactNative.findNodeHandle(this), logError, cb);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(RCTNavigator, babelHelpers.extends({}, this.props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }));
    }
  }]);
  return NavigatorTransitionerIOS;
}(React.Component);

var SystemIconLabels = {
  done: true,
  cancel: true,
  edit: true,
  save: true,
  add: true,
  compose: true,
  reply: true,
  action: true,
  organize: true,
  bookmarks: true,
  search: true,
  refresh: true,
  stop: true,
  camera: true,
  trash: true,
  play: true,
  pause: true,
  rewind: true,
  'fast-forward': true,
  undo: true,
  redo: true,
  'page-curl': true
};
var SystemIcons = keyMirror(SystemIconLabels);

var NavigatorIOS = createReactClass({
  displayName: 'NavigatorIOS',

  propTypes: {
    initialRoute: PropTypes.shape({
      component: PropTypes.func.isRequired,

      title: PropTypes.string.isRequired,

      titleImage: Image.propTypes.source,

      passProps: PropTypes.object,

      backButtonIcon: Image.propTypes.source,

      backButtonTitle: PropTypes.string,

      leftButtonIcon: Image.propTypes.source,

      leftButtonTitle: PropTypes.string,

      leftButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),

      onLeftButtonPress: PropTypes.func,

      rightButtonIcon: Image.propTypes.source,

      rightButtonTitle: PropTypes.string,

      rightButtonSystemIcon: PropTypes.oneOf(Object.keys(SystemIcons)),

      onRightButtonPress: PropTypes.func,

      wrapperStyle: ViewPropTypes.style,

      navigationBarHidden: PropTypes.bool,

      shadowHidden: PropTypes.bool,

      tintColor: PropTypes.string,

      barTintColor: PropTypes.string,

      titleTextColor: PropTypes.string,

      translucent: PropTypes.bool

    }).isRequired,

    navigationBarHidden: PropTypes.bool,

    shadowHidden: PropTypes.bool,

    itemWrapperStyle: ViewPropTypes.style,

    tintColor: PropTypes.string,

    barTintColor: PropTypes.string,

    titleTextColor: PropTypes.string,

    translucent: PropTypes.bool,

    interactivePopGestureEnabled: PropTypes.bool

  },

  navigator: undefined,

  componentWillMount: function componentWillMount() {
    this.navigator = {
      push: this.push,
      pop: this.pop,
      popN: this.popN,
      replace: this.replace,
      replaceAtIndex: this.replaceAtIndex,
      replacePrevious: this.replacePrevious,
      replacePreviousAndPop: this.replacePreviousAndPop,
      resetTo: this.resetTo,
      popToRoute: this.popToRoute,
      popToTop: this.popToTop
    };
  },

  componentDidMount: function componentDidMount() {
    this._enableTVEventHandler();
  },

  componentWillUnmount: function componentWillUnmount() {
    this._disableTVEventHandler();
  },

  getDefaultProps: function getDefaultProps() {
    return {
      translucent: true
    };
  },

  getInitialState: function getInitialState() {
    return {
      idStack: [getuid()],
      routeStack: [this.props.initialRoute],

      requestedTopOfStack: 0,

      observedTopOfStack: 0,
      progress: 1,
      fromIndex: 0,
      toIndex: 0,

      makingNavigatorRequest: false,

      updatingAllIndicesAtOrBeyond: 0
    };
  },

  _toFocusOnNavigationComplete: undefined,

  _handleFocusRequest: function _handleFocusRequest(item) {
    if (this.state.makingNavigatorRequest) {
      this._toFocusOnNavigationComplete = item;
    } else {
      this._getFocusEmitter().emit('focus', item);
    }
  },

  _focusEmitter: undefined,

  _getFocusEmitter: function _getFocusEmitter() {
    var focusEmitter = this._focusEmitter;
    if (!focusEmitter) {
      focusEmitter = new EventEmitter();
      this._focusEmitter = focusEmitter;
    }
    return focusEmitter;
  },

  getChildContext: function getChildContext() {
    return {
      onFocusRequested: this._handleFocusRequest,
      focusEmitter: this._getFocusEmitter()
    };
  },

  childContextTypes: {
    onFocusRequested: PropTypes.func,
    focusEmitter: PropTypes.instanceOf(EventEmitter)
  },

  _tryLockNavigator: function _tryLockNavigator(cb) {
    this.refs[TRANSITIONER_REF].requestSchedulingNavigation(function (acquiredLock) {
      return acquiredLock && cb();
    });
  },

  _handleNavigatorStackChanged: function _handleNavigatorStackChanged(e) {
    var newObservedTopOfStack = e.nativeEvent.stackLength - 1;

    invariant(newObservedTopOfStack <= this.state.requestedTopOfStack, 'No navigator item should be pushed without JS knowing about it %s %s', newObservedTopOfStack, this.state.requestedTopOfStack);
    var wasWaitingForConfirmation = this.state.requestedTopOfStack !== this.state.observedTopOfStack;
    if (wasWaitingForConfirmation) {
      invariant(newObservedTopOfStack === this.state.requestedTopOfStack, 'If waiting for observedTopOfStack to reach requestedTopOfStack, ' + 'the only valid observedTopOfStack should be requestedTopOfStack.');
    }

    var nextState = {
      observedTopOfStack: newObservedTopOfStack,
      makingNavigatorRequest: false,
      updatingAllIndicesAtOrBeyond: null,
      progress: 1,
      toIndex: newObservedTopOfStack,
      fromIndex: newObservedTopOfStack
    };
    this.setState(nextState, this._eliminateUnneededChildren);
  },

  _eliminateUnneededChildren: function _eliminateUnneededChildren() {
    var updatingAllIndicesAtOrBeyond = this.state.routeStack.length > this.state.observedTopOfStack + 1 ? this.state.observedTopOfStack + 1 : null;
    this.setState({
      idStack: this.state.idStack.slice(0, this.state.observedTopOfStack + 1),
      routeStack: this.state.routeStack.slice(0, this.state.observedTopOfStack + 1),

      requestedTopOfStack: this.state.observedTopOfStack,
      makingNavigatorRequest: true,
      updatingAllIndicesAtOrBeyond: updatingAllIndicesAtOrBeyond
    });
  },

  push: function push(route) {
    var _this2 = this;

    invariant(!!route, 'Must supply route to push');

    if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
      this._tryLockNavigator(function () {

        var nextStack = _this2.state.routeStack.concat([route]);
        var nextIDStack = _this2.state.idStack.concat([getuid()]);
        _this2.setState({
          idStack: nextIDStack,
          routeStack: nextStack,
          requestedTopOfStack: nextStack.length - 1,
          makingNavigatorRequest: true,
          updatingAllIndicesAtOrBeyond: nextStack.length - 1
        });
      });
    }
  },

  popN: function popN(n) {
    var _this3 = this;

    if (n === 0) {
      return;
    }

    if (this.state.requestedTopOfStack === this.state.observedTopOfStack) {
      if (this.state.requestedTopOfStack > 0) {
        this._tryLockNavigator(function () {
          var newRequestedTopOfStack = _this3.state.requestedTopOfStack - n;
          invariant(newRequestedTopOfStack >= 0, 'Cannot pop below 0');
          _this3.setState({
            requestedTopOfStack: newRequestedTopOfStack,
            makingNavigatorRequest: true,
            updatingAllIndicesAtOrBeyond: _this3.state.requestedTopOfStack - n
          });
        });
      }
    }
  },

  pop: function pop() {
    this.popN(1);
  },

  replaceAtIndex: function replaceAtIndex(route, index) {
    invariant(!!route, 'Must supply route to replace');
    if (index < 0) {
      index += this.state.routeStack.length;
    }

    if (this.state.routeStack.length <= index) {
      return;
    }

    var nextIDStack = this.state.idStack.slice();
    var nextRouteStack = this.state.routeStack.slice();
    nextIDStack[index] = getuid();
    nextRouteStack[index] = route;

    this.setState({
      idStack: nextIDStack,
      routeStack: nextRouteStack,
      makingNavigatorRequest: false,
      updatingAllIndicesAtOrBeyond: index
    });
  },

  replace: function replace(route) {
    this.replaceAtIndex(route, -1);
  },

  replacePrevious: function replacePrevious(route) {
    this.replaceAtIndex(route, -2);
  },

  popToTop: function popToTop() {
    this.popToRoute(this.state.routeStack[0]);
  },

  popToRoute: function popToRoute(route) {
    var indexOfRoute = this.state.routeStack.indexOf(route);
    invariant(indexOfRoute !== -1, 'Calling pop to route for a route that doesn\'t exist!');
    var numToPop = this.state.routeStack.length - indexOfRoute - 1;
    this.popN(numToPop);
  },

  replacePreviousAndPop: function replacePreviousAndPop(route) {
    var _this4 = this;

    if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
      return;
    }
    if (this.state.routeStack.length < 2) {
      return;
    }
    this._tryLockNavigator(function () {
      _this4.replacePrevious(route);
      _this4.setState({
        requestedTopOfStack: _this4.state.requestedTopOfStack - 1,
        makingNavigatorRequest: true
      });
    });
  },

  resetTo: function resetTo(route) {
    invariant(!!route, 'Must supply route to push');

    if (this.state.requestedTopOfStack !== this.state.observedTopOfStack) {
      return;
    }
    this.replaceAtIndex(route, 0);
    this.popToRoute(route);
  },

  _handleNavigationComplete: function _handleNavigationComplete(e) {
    e.stopPropagation();

    if (this._toFocusOnNavigationComplete) {
      this._getFocusEmitter().emit('focus', this._toFocusOnNavigationComplete);
      this._toFocusOnNavigationComplete = null;
    }
    this._handleNavigatorStackChanged(e);
  },

  _routeToStackItem: function _routeToStackItem(routeArg, i) {
    var component = routeArg.component,
        wrapperStyle = routeArg.wrapperStyle,
        passProps = routeArg.passProps,
        route = babelHelpers.objectWithoutProperties(routeArg, ['component', 'wrapperStyle', 'passProps']);
    var _props = this.props,
        itemWrapperStyle = _props.itemWrapperStyle,
        props = babelHelpers.objectWithoutProperties(_props, ['itemWrapperStyle']);

    var shouldUpdateChild = this.state.updatingAllIndicesAtOrBeyond != null && this.state.updatingAllIndicesAtOrBeyond >= i;
    var Component = component;
    return React.createElement(
      StaticContainer,
      { key: 'nav' + i, shouldUpdate: shouldUpdateChild, __source: {
          fileName: _jsxFileName,
          lineNumber: 837
        }
      },
      React.createElement(
        RCTNavigatorItem,
        babelHelpers.extends({}, props, route, {
          style: [styles.stackItem, itemWrapperStyle, wrapperStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 838
          }
        }),
        React.createElement(Component, babelHelpers.extends({
          navigator: this.navigator,
          route: route
        }, passProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 846
          }
        }))
      )
    );
  },

  _renderNavigationStackItems: function _renderNavigationStackItems() {
    var shouldRecurseToNavigator = this.state.makingNavigatorRequest || this.state.updatingAllIndicesAtOrBeyond !== null;

    var items = shouldRecurseToNavigator ? this.state.routeStack.map(this._routeToStackItem) : null;
    return React.createElement(
      StaticContainer,
      { shouldUpdate: shouldRecurseToNavigator, __source: {
          fileName: _jsxFileName,
          lineNumber: 865
        }
      },
      React.createElement(
        NavigatorTransitionerIOS,
        {
          ref: TRANSITIONER_REF,
          style: styles.transitioner,

          vertical: this.props.vertical,
          requestedTopOfStack: this.state.requestedTopOfStack,
          onNavigationComplete: this._handleNavigationComplete,
          interactivePopGestureEnabled: this.props.interactivePopGestureEnabled, __source: {
            fileName: _jsxFileName,
            lineNumber: 866
          }
        },
        items
      )
    );
  },

  _tvEventHandler: undefined,

  _enableTVEventHandler: function _enableTVEventHandler() {
    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      if (evt && evt.eventType === 'menu') {
        cmp.pop();
      }
    });
  },

  _disableTVEventHandler: function _disableTVEventHandler() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
  },

  render: function render() {
    return React.createElement(
      View,
      { style: this.props.style, __source: {
          fileName: _jsxFileName,
          lineNumber: 901
        }
      },
      this._renderNavigationStackItems()
    );
  }
});

var styles = StyleSheet.create({
  stackItem: {
    backgroundColor: 'white',
    overflow: 'hidden',
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  transitioner: {
    flex: 1
  }
});

var RCTNavigator = requireNativeComponent('RCTNavigator');
var RCTNavigatorItem = requireNativeComponent('RCTNavItem');

module.exports = NavigatorIOS;
}, 263, null, "NavigatorIOS");
__d(/* StaticContainer.react */function(global, require, module, exports) {
'use strict';

var React = require(132    ); // 132 = React

var StaticContainer = function (_React$Component) {
  babelHelpers.inherits(StaticContainer, _React$Component);

  function StaticContainer() {
    babelHelpers.classCallCheck(this, StaticContainer);
    return babelHelpers.possibleConstructorReturn(this, (StaticContainer.__proto__ || Object.getPrototypeOf(StaticContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(StaticContainer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return !!nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      var child = this.props.children;
      return child === null || child === false ? null : React.Children.only(child);
    }
  }]);
  return StaticContainer;
}(React.Component);

module.exports = StaticContainer;
}, 264, null, "StaticContainer.react");
__d(/* Picker */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Picker/Picker.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var PickerIOS = require(266        ); // 266 = PickerIOS
var PickerAndroid = require(267            ); // 267 = PickerAndroid
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType
var TextStylePropTypes = require(141                 ); // 141 = TextStylePropTypes
var UnimplementedView = require(159                ); // 159 = UnimplementedView
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes
var ViewStylePropTypes = require(142                 ); // 142 = ViewStylePropTypes

var itemStylePropType = StyleSheetPropType(TextStylePropTypes);

var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var MODE_DIALOG = 'dialog';
var MODE_DROPDOWN = 'dropdown';

var PickerItem = function (_React$Component) {
  babelHelpers.inherits(PickerItem, _React$Component);

  function PickerItem() {
    babelHelpers.classCallCheck(this, PickerItem);
    return babelHelpers.possibleConstructorReturn(this, (PickerItem.__proto__ || Object.getPrototypeOf(PickerItem)).apply(this, arguments));
  }

  babelHelpers.createClass(PickerItem, [{
    key: 'render',
    value: function render() {
      throw null;
    }
  }]);
  return PickerItem;
}(React.Component);

PickerItem.propTypes = {
  label: PropTypes.string.isRequired,

  value: PropTypes.any,

  color: ColorPropType,

  testID: PropTypes.string
};

var Picker = function (_React$Component2) {
  babelHelpers.inherits(Picker, _React$Component2);

  function Picker() {
    babelHelpers.classCallCheck(this, Picker);
    return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
  }

  babelHelpers.createClass(Picker, [{
    key: 'render',
    value: function render() {
      if (Platform.OS === 'ios') {
        return React.createElement(
          PickerIOS,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 161
            }
          }),
          this.props.children
        );
      } else if (Platform.OS === 'android') {
        return React.createElement(
          PickerAndroid,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 164
            }
          }),
          this.props.children
        );
      } else {
        return React.createElement(UnimplementedView, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 166
          }
        });
      }
    }
  }]);
  return Picker;
}(React.Component);

Picker.MODE_DIALOG = MODE_DIALOG;
Picker.MODE_DROPDOWN = MODE_DROPDOWN;
Picker.Item = PickerItem;
Picker.defaultProps = {
  mode: MODE_DIALOG
};
Picker.propTypes = babelHelpers.extends({}, ViewPropTypes, {
  style: pickerStyleType,

  selectedValue: PropTypes.any,

  onValueChange: PropTypes.func,

  enabled: PropTypes.bool,

  mode: PropTypes.oneOf(['dialog', 'dropdown']),

  itemStyle: itemStylePropType,

  prompt: PropTypes.string,

  testID: PropTypes.string
});


module.exports = Picker;
}, 265, null, "Picker");
__d(/* PickerIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Picker/PickerIOS.ios.js',
    _class,
    _temp;

var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var StyleSheetPropType = require(155                 ); // 155 = StyleSheetPropType
var TextStylePropTypes = require(141                 ); // 141 = TextStylePropTypes
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes
var processColor = require(115           ); // 115 = processColor

var createReactClass = require(157                 ); // 157 = create-react-class
var itemStylePropType = StyleSheetPropType(TextStylePropTypes);
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var PickerIOS = createReactClass({
  displayName: 'PickerIOS',
  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    itemStyle: itemStylePropType,
    onValueChange: PropTypes.func,
    selectedValue: PropTypes.any }),

  getInitialState: function getInitialState() {
    return this._stateFromProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this.setState(this._stateFromProps(nextProps));
  },

  _stateFromProps: function _stateFromProps(props) {
    var selectedIndex = 0;
    var items = [];
    React.Children.toArray(props.children).forEach(function (child, index) {
      if (child.props.value === props.selectedValue) {
        selectedIndex = index;
      }
      items.push({
        value: child.props.value,
        label: child.props.label,
        textColor: processColor(child.props.color)
      });
    });
    return { selectedIndex: selectedIndex, items: items };
  },

  render: function render() {
    var _this = this;

    return React.createElement(
      View,
      { style: this.props.style, __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      },
      React.createElement(RCTPickerIOS, {
        ref: function ref(picker) {
          return _this._picker = picker;
        },
        style: [styles.pickerIOS, this.props.itemStyle],
        items: this.state.items,
        selectedIndex: this.state.selectedIndex,
        onChange: this._onChange,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      })
    );
  },

  _onChange: function _onChange(event) {
    if (this.props.onChange) {
      this.props.onChange(event);
    }
    if (this.props.onValueChange) {
      this.props.onValueChange(event.nativeEvent.newValue, event.nativeEvent.newIndex);
    }

    if (this._picker && this.state.selectedIndex !== event.nativeEvent.newIndex) {
      this._picker.setNativeProps({
        selectedIndex: this.state.selectedIndex
      });
    }
  }
});

PickerIOS.Item = (_temp = _class = function (_React$Component) {
  babelHelpers.inherits(_class, _React$Component);

  function _class() {
    babelHelpers.classCallCheck(this, _class);
    return babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  babelHelpers.createClass(_class, [{
    key: 'render',
    value: function render() {
      return null;
    }
  }]);
  return _class;
}(React.Component), _class.propTypes = {
  value: PropTypes.any,
  label: PropTypes.string,
  color: PropTypes.string
}, _temp);

var styles = StyleSheet.create({
  pickerIOS: {
    height: 216
  }
});

var RCTPickerIOS = requireNativeComponent('RCTPicker', {
  propTypes: {
    style: itemStylePropType
  }
}, {
  nativeOnly: {
    items: true,
    onChange: true,
    selectedIndex: true
  }
});

module.exports = PickerIOS;
}, 266, null, "PickerIOS");
__d(/* PickerAndroid */function(global, require, module, exports) {
'use strict';

module.exports = require(159                ); // 159 = UnimplementedView
}, 267, null, "PickerAndroid");
__d(/* ProgressBarAndroid */function(global, require, module, exports) {
'use strict';

module.exports = require(159                ); // 159 = UnimplementedView
}, 268, null, "ProgressBarAndroid");
__d(/* ProgressViewIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.ios.js';
var Image = require(204    ); // 204 = Image
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var ProgressViewIOS = createReactClass({
  displayName: 'ProgressViewIOS',
  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    progressViewStyle: PropTypes.oneOf(['default', 'bar']),

    progress: PropTypes.number,

    progressTintColor: PropTypes.string,

    trackTintColor: PropTypes.string,

    progressImage: Image.propTypes.source,

    trackImage: Image.propTypes.source
  }),

  render: function render() {
    return React.createElement(RCTProgressView, babelHelpers.extends({}, this.props, {
      style: [styles.progressView, this.props.style],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 67
      }
    }));
  }
});

var styles = StyleSheet.create({
  progressView: {
    height: 2
  }
});

var RCTProgressView = requireNativeComponent('RCTProgressView', ProgressViewIOS);

module.exports = ProgressViewIOS;
}, 269, null, "ProgressViewIOS");
__d(/* SectionList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/SectionList.js';
var MetroListView = require(223            ); // 223 = MetroListView
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var VirtualizedSectionList = require(271                     ); // 271 = VirtualizedSectionList

var defaultProps = babelHelpers.extends({}, VirtualizedSectionList.defaultProps, {
  stickySectionHeadersEnabled: Platform.OS === 'ios'
});

var SectionList = function (_React$PureComponent) {
  babelHelpers.inherits(SectionList, _React$PureComponent);

  function SectionList() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, SectionList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SectionList.__proto__ || Object.getPrototypeOf(SectionList)).call.apply(_ref, [this].concat(args))), _this), _this._captureRef = function (ref) {
      _this._wrapperListRef = ref;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(SectionList, [{
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      this._wrapperListRef.scrollToLocation(params);
    }
  }, {
    key: 'recordInteraction',
    value: function recordInteraction() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      listRef && listRef.recordInteraction();
    }
  }, {
    key: 'flashScrollIndicators',
    value: function flashScrollIndicators() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      listRef && listRef.flashScrollIndicators();
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      if (listRef) {
        return listRef.getScrollResponder();
      }
    }
  }, {
    key: 'getScrollableNode',
    value: function getScrollableNode() {
      var listRef = this._wrapperListRef && this._wrapperListRef.getListRef();
      if (listRef) {
        return listRef.getScrollableNode();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var List = this.props.legacyImplementation ? MetroListView : VirtualizedSectionList;
      return React.createElement(List, babelHelpers.extends({}, this.props, { ref: this._captureRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 324
        }
      }));
    }
  }]);
  return SectionList;
}(React.PureComponent);

SectionList.defaultProps = defaultProps;


module.exports = SectionList;
}, 270, null, "SectionList");
__d(/* VirtualizedSectionList */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Lists/VirtualizedSectionList.js';
var React = require(132    ); // 132 = React
var View = require(131   ); // 131 = View
var VirtualizedList = require(230              ); // 230 = VirtualizedList

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var VirtualizedSectionList = function (_React$PureComponent) {
  babelHelpers.inherits(VirtualizedSectionList, _React$PureComponent);
  babelHelpers.createClass(VirtualizedSectionList, [{
    key: 'scrollToLocation',
    value: function scrollToLocation(params) {
      var index = params.itemIndex + 1;
      for (var ii = 0; ii < params.sectionIndex; ii++) {
        index += this.props.sections[ii].data.length + 2;
      }
      var toIndexParams = babelHelpers.extends({}, params, {
        index: index
      });
      this._listRef.scrollToIndex(toIndexParams);
    }
  }, {
    key: 'getListRef',
    value: function getListRef() {
      return this._listRef;
    }
  }, {
    key: '_subExtractor',
    value: function _subExtractor(index) {
      var itemIndex = index;
      var defaultKeyExtractor = this.props.keyExtractor;
      for (var ii = 0; ii < this.props.sections.length; ii++) {
        var _section = this.props.sections[ii];
        var _key = _section.key || String(ii);
        itemIndex -= 1;
        if (itemIndex >= _section.data.length + 1) {
          itemIndex -= _section.data.length + 1;
        } else if (itemIndex === -1) {
          return {
            section: _section,
            key: _key + ':header',
            index: null,
            header: true,
            trailingSection: this.props.sections[ii + 1]
          };
        } else if (itemIndex === _section.data.length) {
          return {
            section: _section,
            key: _key + ':footer',
            index: null,
            header: false,
            trailingSection: this.props.sections[ii + 1]
          };
        } else {
          var _keyExtractor = _section.keyExtractor || defaultKeyExtractor;
          return {
            section: _section,
            key: _key + ':' + _keyExtractor(_section.data[itemIndex], itemIndex),
            index: itemIndex,
            leadingItem: _section.data[itemIndex - 1],
            leadingSection: this.props.sections[ii - 1],
            trailingItem: _section.data[itemIndex + 1],
            trailingSection: this.props.sections[ii + 1]
          };
        }
      }
    }
  }, {
    key: '_getSeparatorComponent',
    value: function _getSeparatorComponent(index, info) {
      info = info || this._subExtractor(index);
      if (!info) {
        return null;
      }
      var ItemSeparatorComponent = info.section.ItemSeparatorComponent || this.props.ItemSeparatorComponent;
      var SectionSeparatorComponent = this.props.SectionSeparatorComponent;

      var isLastItemInList = index === this.state.childProps.getItemCount() - 1;
      var isLastItemInSection = info.index === info.section.data.length - 1;
      if (SectionSeparatorComponent && isLastItemInSection) {
        return SectionSeparatorComponent;
      }
      if (ItemSeparatorComponent && !isLastItemInSection && !isLastItemInList) {
        return ItemSeparatorComponent;
      }
      return null;
    }
  }, {
    key: '_computeState',
    value: function _computeState(props) {
      var offset = props.ListHeaderComponent ? 1 : 0;
      var stickyHeaderIndices = [];
      var itemCount = props.sections.reduce(function (v, section) {
        stickyHeaderIndices.push(v + offset);
        return v + section.data.length + 2;
      }, 0);

      return {
        childProps: babelHelpers.extends({}, props, {
          renderItem: this._renderItem,
          ItemSeparatorComponent: undefined,
          data: props.sections,
          getItemCount: function getItemCount() {
            return itemCount;
          },
          getItem: getItem,
          keyExtractor: this._keyExtractor,
          onViewableItemsChanged: props.onViewableItemsChanged ? this._onViewableItemsChanged : undefined,
          stickyHeaderIndices: props.stickySectionHeadersEnabled ? stickyHeaderIndices : undefined
        })
      };
    }
  }]);

  function VirtualizedSectionList(props, context) {
    babelHelpers.classCallCheck(this, VirtualizedSectionList);

    var _this = babelHelpers.possibleConstructorReturn(this, (VirtualizedSectionList.__proto__ || Object.getPrototypeOf(VirtualizedSectionList)).call(this, props, context));

    _this._keyExtractor = function (item, index) {
      var info = _this._subExtractor(index);
      return info && info.key || String(index);
    };

    _this._convertViewable = function (viewable) {
      invariant(viewable.index != null, 'Received a broken ViewToken');
      var info = _this._subExtractor(viewable.index);
      if (!info) {
        return null;
      }
      var keyExtractor = info.section.keyExtractor || _this.props.keyExtractor;
      return babelHelpers.extends({}, viewable, {
        index: info.index,
        key: keyExtractor(viewable.item, info.index),
        section: info.section
      });
    };

    _this._onViewableItemsChanged = function (_ref) {
      var viewableItems = _ref.viewableItems,
          changed = _ref.changed;

      if (_this.props.onViewableItemsChanged) {
        _this.props.onViewableItemsChanged({
          viewableItems: viewableItems.map(_this._convertViewable, _this).filter(Boolean),
          changed: changed.map(_this._convertViewable, _this).filter(Boolean)
        });
      }
    };

    _this._renderItem = function (_ref2) {
      var item = _ref2.item,
          index = _ref2.index;

      var info = _this._subExtractor(index);
      if (!info) {
        return null;
      }
      var infoIndex = info.index;
      if (infoIndex == null) {
        var _section2 = info.section;

        if (info.header === true) {
          var _renderSectionHeader = _this.props.renderSectionHeader;

          return _renderSectionHeader ? _renderSectionHeader({ section: _section2 }) : null;
        } else {
          var _renderSectionFooter = _this.props.renderSectionFooter;

          return _renderSectionFooter ? _renderSectionFooter({ section: _section2 }) : null;
        }
      } else {
        var _renderItem = info.section.renderItem || _this.props.renderItem;
        var _SeparatorComponent = _this._getSeparatorComponent(index, info);
        invariant(_renderItem, 'no renderItem!');
        return React.createElement(ItemWithSeparator, {
          SeparatorComponent: _SeparatorComponent,
          LeadingSeparatorComponent: infoIndex === 0 ? _this.props.SectionSeparatorComponent : undefined,
          cellKey: info.key,
          index: infoIndex,
          item: item,
          leadingItem: info.leadingItem,
          leadingSection: info.leadingSection,
          onUpdateSeparator: _this._onUpdateSeparator,
          prevCellKey: (_this._subExtractor(index - 1) || {}).key,
          ref: function ref(_ref3) {
            _this._cellRefs[info.key] = _ref3;
          },
          renderItem: _renderItem,
          section: info.section,
          trailingItem: info.trailingItem,
          trailingSection: info.trailingSection,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 279
          }
        });
      }
    };

    _this._onUpdateSeparator = function (key, newProps) {
      var ref = _this._cellRefs[key];
      ref && ref.updateSeparatorProps(newProps);
    };

    _this._cellRefs = {};

    _this._captureRef = function (ref) {
      _this._listRef = ref;
    };

    _this.state = _this._computeState(props);
    return _this;
  }

  babelHelpers.createClass(VirtualizedSectionList, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(this._computeState(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(VirtualizedList, babelHelpers.extends({}, this.state.childProps, { ref: this._captureRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 365
        }
      }));
    }
  }]);
  return VirtualizedSectionList;
}(React.PureComponent);

VirtualizedSectionList.defaultProps = babelHelpers.extends({}, VirtualizedList.defaultProps, {
  data: []
});

var ItemWithSeparator = function (_React$Component) {
  babelHelpers.inherits(ItemWithSeparator, _React$Component);

  function ItemWithSeparator() {
    var _ref4;

    var _temp, _this2, _ret;

    babelHelpers.classCallCheck(this, ItemWithSeparator);

    for (var _len = arguments.length, args = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _ret = (_temp = (_this2 = babelHelpers.possibleConstructorReturn(this, (_ref4 = ItemWithSeparator.__proto__ || Object.getPrototypeOf(ItemWithSeparator)).call.apply(_ref4, [this].concat(args))), _this2), _this2.state = {
      separatorProps: {
        highlighted: false,
        leadingItem: _this2.props.item,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.trailingItem,
        trailingSection: _this2.props.trailingSection
      },
      leadingSeparatorProps: {
        highlighted: false,
        leadingItem: _this2.props.leadingItem,
        leadingSection: _this2.props.leadingSection,
        section: _this2.props.section,
        trailingItem: _this2.props.item,
        trailingSection: _this2.props.trailingSection
      }
    }, _this2._separators = {
      highlight: function highlight() {
        ['leading', 'trailing'].forEach(function (s) {
          return _this2._separators.updateProps(s, { highlighted: true });
        });
      },
      unhighlight: function unhighlight() {
        ['leading', 'trailing'].forEach(function (s) {
          return _this2._separators.updateProps(s, { highlighted: false });
        });
      },
      updateProps: function updateProps(select, newProps) {
        var _this2$props = _this2.props,
            LeadingSeparatorComponent = _this2$props.LeadingSeparatorComponent,
            cellKey = _this2$props.cellKey,
            prevCellKey = _this2$props.prevCellKey;

        if (select === 'leading' && LeadingSeparatorComponent) {
          _this2.setState(function (state) {
            return {
              leadingSeparatorProps: babelHelpers.extends({}, state.leadingSeparatorProps, newProps)
            };
          });
        } else {
          _this2.props.onUpdateSeparator(select === 'leading' && prevCellKey || cellKey, newProps);
        }
      }
    }, _temp), babelHelpers.possibleConstructorReturn(_this2, _ret);
  }

  babelHelpers.createClass(ItemWithSeparator, [{
    key: 'updateSeparatorProps',
    value: function updateSeparatorProps(newProps) {
      this.setState(function (state) {
        return {
          separatorProps: babelHelpers.extends({}, state.separatorProps, newProps)
        };
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          LeadingSeparatorComponent = _props.LeadingSeparatorComponent,
          SeparatorComponent = _props.SeparatorComponent,
          item = _props.item,
          index = _props.index,
          section = _props.section;

      var element = this.props.renderItem({
        item: item,
        index: index,
        section: section,
        separators: this._separators
      });
      var leadingSeparator = LeadingSeparatorComponent && React.createElement(LeadingSeparatorComponent, babelHelpers.extends({}, this.state.leadingSeparatorProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 460
        }
      }));
      var separator = SeparatorComponent && React.createElement(SeparatorComponent, babelHelpers.extends({}, this.state.separatorProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 463
        }
      }));
      return leadingSeparator || separator ? React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 465
          }
        },
        leadingSeparator,
        element,
        separator
      ) : element;
    }
  }]);
  return ItemWithSeparator;
}(React.Component);

function getItem(sections, index) {
  if (!sections) {
    return null;
  }
  var itemIdx = index - 1;
  for (var ii = 0; ii < sections.length; ii++) {
    if (itemIdx === -1 || itemIdx === sections[ii].data.length) {
      return sections[ii];
    } else if (itemIdx < sections[ii].data.length) {
      return sections[ii].data[itemIdx];
    } else {
      itemIdx -= sections[ii].data.length + 2;
    }
  }
  return null;
}

module.exports = VirtualizedSectionList;
}, 271, null, "VirtualizedSectionList");
__d(/* SegmentedControlIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.ios.js';
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var SEGMENTED_CONTROL_REFERENCE = 'segmentedcontrol';

var SegmentedControlIOS = createReactClass({
  displayName: 'SegmentedControlIOS',
  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    values: PropTypes.arrayOf(PropTypes.string),

    selectedIndex: PropTypes.number,

    onValueChange: PropTypes.func,

    onChange: PropTypes.func,

    enabled: PropTypes.bool,

    tintColor: PropTypes.string,

    momentary: PropTypes.bool
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      values: [],
      enabled: true
    };
  },

  _onChange: function _onChange(event) {
    this.props.onChange && this.props.onChange(event);
    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
  },

  render: function render() {
    return React.createElement(RCTSegmentedControl, babelHelpers.extends({}, this.props, {
      ref: SEGMENTED_CONTROL_REFERENCE,
      style: [styles.segmentedControl, this.props.style],
      onChange: this._onChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      }
    }));
  }
});

var styles = StyleSheet.create({
  segmentedControl: {
    height: 28
  }
});

var RCTSegmentedControl = requireNativeComponent('RCTSegmentedControl', SegmentedControlIOS);

module.exports = SegmentedControlIOS;
}, 272, null, "SegmentedControlIOS");
__d(/* Slider */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Slider/Slider.js';
var Image = require(204    ); // 204 = Image
var ColorPropType = require(62             ); // 62 = ColorPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var ReactNativeViewAttributes = require(146                        ); // 146 = ReactNativeViewAttributes
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var Slider = createReactClass({
  displayName: 'Slider',
  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    style: ViewPropTypes.style,

    value: PropTypes.number,

    step: PropTypes.number,

    minimumValue: PropTypes.number,

    maximumValue: PropTypes.number,

    minimumTrackTintColor: ColorPropType,

    maximumTrackTintColor: ColorPropType,

    disabled: PropTypes.bool,

    trackImage: Image.propTypes.source,

    minimumTrackImage: Image.propTypes.source,

    maximumTrackImage: Image.propTypes.source,

    thumbImage: Image.propTypes.source,

    thumbTintColor: ColorPropType,

    onValueChange: PropTypes.func,

    onSlidingComplete: PropTypes.func,

    testID: PropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      value: 0,
      minimumValue: 0,
      maximumValue: 1,
      step: 0
    };
  },

  viewConfig: {
    uiViewClassName: 'RCTSlider',
    validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
      value: true
    })
  },

  render: function render() {
    var _props = this.props,
        style = _props.style,
        onValueChange = _props.onValueChange,
        onSlidingComplete = _props.onSlidingComplete,
        props = babelHelpers.objectWithoutProperties(_props, ['style', 'onValueChange', 'onSlidingComplete']);

    props.style = [styles.slider, style];

    props.onValueChange = onValueChange && function (event) {
      var userEvent = true;
      if (Platform.OS === 'android') {
        userEvent = event.nativeEvent.fromUser;
      }
      onValueChange && userEvent && onValueChange(event.nativeEvent.value);
    };

    props.onChange = props.onValueChange;

    props.onSlidingComplete = onSlidingComplete && function (event) {
      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
      enabled: !this.props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 180
      }
    }));
  }
});

var styles = void 0;
if (Platform.OS === 'ios') {
  styles = StyleSheet.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = StyleSheet.create({
    slider: {}
  });
}

var options = {};
if (Platform.OS === 'android') {
  options = {
    nativeOnly: {
      enabled: true
    }
  };
}
var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);

module.exports = Slider;
}, 273, null, "Slider");
__d(/* SnapshotViewIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/RCTTest/SnapshotViewIOS.ios.js';
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet

var _require = require(30             ), // 30 = NativeModules
    TestModule = _require.TestModule;

var UIManager = require(125        ); // 125 = UIManager
var View = require(131   ); // 131 = View

var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var SnapshotViewIOS = function (_React$Component) {
  babelHelpers.inherits(SnapshotViewIOS, _React$Component);

  function SnapshotViewIOS() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, SnapshotViewIOS);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = SnapshotViewIOS.__proto__ || Object.getPrototypeOf(SnapshotViewIOS)).call.apply(_ref, [this].concat(args))), _this), _this.onDefaultAction = function (event) {
      TestModule.verifySnapshot(TestModule.markTestPassed);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(SnapshotViewIOS, [{
    key: 'render',
    value: function render() {
      var testIdentifier = this.props.testIdentifier || 'test';
      var onSnapshotReady = this.props.onSnapshotReady || this.onDefaultAction;
      return React.createElement(RCTSnapshot, babelHelpers.extends({
        style: style.snapshot
      }, this.props, {
        onSnapshotReady: onSnapshotReady,
        testIdentifier: testIdentifier,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }));
    }
  }]);
  return SnapshotViewIOS;
}(React.Component);

SnapshotViewIOS.propTypes = babelHelpers.extends({}, ViewPropTypes, {
  onSnapshotReady: PropTypes.func,

  testIdentifier: PropTypes.string
});


var style = StyleSheet.create({
  snapshot: {
    flex: 1
  }
});

var RCTSnapshot = UIManager.RCTSnapshot ? requireNativeComponent('RCTSnapshot', SnapshotViewIOS) : View;

module.exports = SnapshotViewIOS;
}, 274, null, "SnapshotViewIOS");
__d(/* Switch */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/Switch/Switch.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var createReactClass = require(157                 ); // 157 = create-react-class
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var Switch = createReactClass({
  displayName: 'Switch',
  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    value: PropTypes.bool,

    disabled: PropTypes.bool,

    onValueChange: PropTypes.func,

    testID: PropTypes.string,

    tintColor: ColorPropType,

    onTintColor: ColorPropType,

    thumbTintColor: ColorPropType
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      value: false,
      disabled: false
    };
  },

  mixins: [NativeMethodsMixin],

  _rctSwitch: {},
  _onChange: function _onChange(event) {
    if (Platform.OS === 'android') {
      this._rctSwitch.setNativeProps({ on: this.props.value });
    } else {
      this._rctSwitch.setNativeProps({ value: this.props.value });
    }

    this.props.onChange && this.props.onChange(event);
    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
  },

  render: function render() {
    var _this = this;

    var props = babelHelpers.extends({}, this.props);
    props.onStartShouldSetResponder = function () {
      return true;
    };
    props.onResponderTerminationRequest = function () {
      return false;
    };
    if (Platform.OS === 'android') {
      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = this.props.style;
      props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
    } else if (Platform.OS === 'ios') {
      props.style = [styles.rctSwitchIOS, this.props.style];
    }
    return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
      ref: function ref(_ref) {
        _this._rctSwitch = _ref;
      },
      onChange: this._onChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 113
      }
    }));
  }
});

var styles = StyleSheet.create({
  rctSwitchIOS: {
    height: 31,
    width: 51
  }
});

if (Platform.OS === 'android') {
  var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true,
      trackTintColor: true
    }
  });
} else {
  var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
    nativeOnly: {
      onChange: true
    }
  });
}

module.exports = Switch;
}, 275, null, "Switch");
__d(/* StatusBar */function(global, require, module, exports) {
'use strict';

var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ColorPropType = require(62             ); // 62 = ColorPropType
var Platform = require(38        ); // 38 = Platform

var processColor = require(115           ); // 115 = processColor

var StatusBarManager = require(30             ).StatusBarManager; // 30 = NativeModules

function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, babelHelpers.extends({}, defaultValues));
}

function createStackEntry(props) {
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: props.animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: props.animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}

var StatusBar = function (_React$Component) {
  babelHelpers.inherits(StatusBar, _React$Component);

  function StatusBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, StatusBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

        if (Platform.OS === 'ios') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
          }

          if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
            StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
          }
        } else if (Platform.OS === 'android') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value);
          }
          if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
            StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value);
          }
          if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
            StatusBarManager.setTranslucent(mergedProps.translucent);
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(StatusBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack.push(this._stackEntry);
      this._updatePropsStack();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      StatusBar._propsStack.splice(index, 1);

      this._updatePropsStack();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack[index] = this._stackEntry;

      this._updatePropsStack();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }], [{
    key: 'setHidden',
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (Platform.OS === 'ios') {
        StatusBarManager.setHidden(hidden, animation);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setHidden(hidden);
      }
    }
  }, {
    key: 'setBarStyle',
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (Platform.OS === 'ios') {
        StatusBarManager.setStyle(style, animated);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setStyle(style);
      }
    }
  }, {
    key: 'setNetworkActivityIndicatorVisible',
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (Platform.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      StatusBarManager.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: 'setBackgroundColor',
    value: function setBackgroundColor(color, animated) {
      if (Platform.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      StatusBarManager.setColor(processColor(color), animated);
    }
  }, {
    key: 'setTranslucent',
    value: function setTranslucent(translucent) {
      if (Platform.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      StatusBarManager.setTranslucent(translucent);
    }
  }]);
  return StatusBar;
}(React.Component);

StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
  animated: false,
  showHideTransition: 'fade',
  backgroundColor: 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
});
StatusBar._updateImmediate = null;
StatusBar._currentValues = null;
StatusBar.currentHeight = StatusBarManager.HEIGHT;
StatusBar.propTypes = {
  hidden: PropTypes.bool,

  animated: PropTypes.bool,

  backgroundColor: ColorPropType,

  translucent: PropTypes.bool,

  barStyle: PropTypes.oneOf(['default', 'light-content', 'dark-content']),

  networkActivityIndicatorVisible: PropTypes.bool,

  showHideTransition: PropTypes.oneOf(['fade', 'slide'])
};
StatusBar.defaultProps = {
  animated: false,
  showHideTransition: 'fade'
};


module.exports = StatusBar;
}, 276, null, "StatusBar");
__d(/* SwipeableListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js';
var ListView = require(224       ); // 224 = ListView
var PropTypes = require(20          ); // 20 = prop-types
var React = require(132    ); // 132 = React
var SwipeableListViewDataSource = require(278                          ); // 278 = SwipeableListViewDataSource
var SwipeableRow = require(279           ); // 279 = SwipeableRow

var SwipeableListView = function (_React$Component) {
  babelHelpers.inherits(SwipeableListView, _React$Component);
  babelHelpers.createClass(SwipeableListView, null, [{
    key: 'getNewDataSource',
    value: function getNewDataSource() {
      return new SwipeableListViewDataSource({
        getRowData: function getRowData(data, sectionID, rowID) {
          return data[sectionID][rowID];
        },
        getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
          return data[sectionID];
        },
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1 !== row2;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
          return s1 !== s2;
        }
      });
    }
  }]);

  function SwipeableListView(props, context) {
    babelHelpers.classCallCheck(this, SwipeableListView);

    var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

    _this._listViewRef = null;
    _this._shouldBounceFirstRowOnMount = false;

    _this._onScroll = function (e) {
      if (_this.props.dataSource.getOpenRowID()) {
        _this.setState({
          dataSource: _this.state.dataSource.setOpenRowID(null)
        });
      }
      _this.props.onScroll && _this.props.onScroll(e);
    };

    _this._renderRow = function (rowData, sectionID, rowID) {
      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

      if (!slideoutView) {
        return _this.props.renderRow(rowData, sectionID, rowID);
      }

      var shouldBounceOnMount = false;
      if (_this._shouldBounceFirstRowOnMount) {
        _this._shouldBounceFirstRowOnMount = false;
        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
      }

      return React.createElement(
        SwipeableRow,
        {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount, __source: {
            fileName: _jsxFileName,
            lineNumber: 185
          }
        },
        _this.props.renderRow(rowData, sectionID, rowID)
      );
    };

    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
    _this.state = {
      dataSource: _this.props.dataSource
    };
    return _this;
  }

  babelHelpers.createClass(SwipeableListView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
        this.setState({
          dataSource: nextProps.dataSource
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(ListView, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this2._listViewRef = _ref;
        },
        dataSource: this.state.dataSource.getDataSource(),
        onScroll: this._onScroll,
        renderRow: this._renderRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 118
        }
      }));
    }
  }, {
    key: '_setListViewScrollable',
    value: function _setListViewScrollable(value) {
      if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
        this._listViewRef.setNativeProps({
          scrollEnabled: value
        });
      }
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
        return this._listViewRef.getScrollResponder();
      }
    }
  }, {
    key: '_getMaxSwipeDistance',
    value: function _getMaxSwipeDistance(rowData, sectionID, rowID) {
      if (typeof this.props.maxSwipeDistance === 'function') {
        return this.props.maxSwipeDistance(rowData, sectionID, rowID);
      }

      return this.props.maxSwipeDistance;
    }
  }, {
    key: '_onOpen',
    value: function _onOpen(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(rowID)
      });
    }
  }, {
    key: '_onClose',
    value: function _onClose(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(null)
      });
    }
  }]);
  return SwipeableListView;
}(React.Component);

SwipeableListView.propTypes = {
  bounceFirstRowOnMount: PropTypes.bool.isRequired,

  dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,

  maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,

  renderRow: PropTypes.func.isRequired,

  renderQuickActions: PropTypes.func.isRequired
};
SwipeableListView.defaultProps = {
  bounceFirstRowOnMount: false,
  renderQuickActions: function renderQuickActions() {
    return null;
  }
};


module.exports = SwipeableListView;
}, 277, null, "SwipeableListView");
__d(/* SwipeableListViewDataSource */function(global, require, module, exports) {
'use strict';

var ListViewDataSource = require(225                 ); // 225 = ListViewDataSource

var SwipeableListViewDataSource = function () {
  function SwipeableListViewDataSource(params) {
    var _this = this;

    babelHelpers.classCallCheck(this, SwipeableListViewDataSource);

    this._dataSource = new ListViewDataSource({
      getRowData: params.getRowData,
      getSectionHeaderData: params.getSectionHeaderData,
      rowHasChanged: function rowHasChanged(row1, row2) {
        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
      },
      sectionHeaderHasChanged: params.sectionHeaderHasChanged
    });
  }

  babelHelpers.createClass(SwipeableListViewDataSource, [{
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);

      this._dataBlob = dataBlob;
      this.rowIdentities = this._dataSource.rowIdentities;
      this.sectionIdentities = this._dataSource.sectionIdentities;

      return this;
    }
  }, {
    key: 'getDataSource',
    value: function getDataSource() {
      return this._dataSource;
    }
  }, {
    key: 'getOpenRowID',
    value: function getOpenRowID() {
      return this._openRowID;
    }
  }, {
    key: 'getFirstRowID',
    value: function getFirstRowID() {
      if (this.rowIdentities) {
        return this.rowIdentities[0] && this.rowIdentities[0][0];
      }
      return Object.keys(this._dataBlob)[0];
    }
  }, {
    key: 'setOpenRowID',
    value: function setOpenRowID(rowID) {
      this._previousOpenRowID = this._openRowID;
      this._openRowID = rowID;

      this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return this;
    }
  }]);
  return SwipeableListViewDataSource;
}();

module.exports = SwipeableListViewDataSource;
}, 278, null, "SwipeableListViewDataSource");
__d(/* SwipeableRow */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js';
var Animated = require(193       ); // 193 = Animated
var I18nManager = require(262          ); // 262 = I18nManager
var PanResponder = require(280           ); // 280 = PanResponder
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var View = require(131   ); // 131 = View

var createReactClass = require(157                 ); // 157 = create-react-class
var emptyFunction = require(46                      ); // 46 = fbjs/lib/emptyFunction

var IS_RTL = I18nManager.isRTL;

var CLOSED_LEFT_POSITION = 0;

var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;

var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;

var SLOW_SPEED_SWIPE_FACTOR = 4;

var SWIPE_DURATION = 300;

var ON_MOUNT_BOUNCE_DELAY = 700;
var ON_MOUNT_BOUNCE_DURATION = 400;

var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;

var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;

var SwipeableRow = createReactClass({
  displayName: 'SwipeableRow',
  _panResponder: {},
  _previousLeft: CLOSED_LEFT_POSITION,

  mixins: [TimerMixin],

  propTypes: {
    children: PropTypes.any,
    isOpen: PropTypes.bool,
    preventSwipeRight: PropTypes.bool,
    maxSwipeDistance: PropTypes.number.isRequired,
    onOpen: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
    onSwipeEnd: PropTypes.func.isRequired,
    onSwipeStart: PropTypes.func.isRequired,

    shouldBounceOnMount: PropTypes.bool,

    slideoutView: PropTypes.node.isRequired,

    swipeThreshold: PropTypes.number.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      currentLeft: new Animated.Value(this._previousLeft),

      isSwipeableViewRendered: false,
      rowHeight: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false,
      preventSwipeRight: false,
      maxSwipeDistance: 0,
      onOpen: emptyFunction,
      onClose: emptyFunction,
      onSwipeEnd: emptyFunction,
      onSwipeStart: emptyFunction,
      swipeThreshold: 30
    };
  },
  componentWillMount: function componentWillMount() {
    this._panResponder = PanResponder.create({
      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
      onPanResponderGrant: this._handlePanResponderGrant,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderRelease: this._handlePanResponderEnd,
      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
      onPanResponderTerminate: this._handlePanResponderEnd,
      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
        return false;
      }
    });
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (this.props.shouldBounceOnMount) {
      this.setTimeout(function () {
        _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
      }, ON_MOUNT_BOUNCE_DELAY);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.isOpen && !nextProps.isOpen) {
      this._animateToClosedPosition();
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
      return false;
    }

    return true;
  },
  render: function render() {
    var slideOutView = void 0;
    if (this.state.isSwipeableViewRendered && this.state.rowHeight) {
      slideOutView = React.createElement(
        View,
        { style: [styles.slideOutContainer, { height: this.state.rowHeight }], __source: {
            fileName: _jsxFileName,
            lineNumber: 170
          }
        },
        this.props.slideoutView
      );
    }

    var swipeableView = React.createElement(
      Animated.View,
      {
        onLayout: this._onSwipeableViewLayout,
        style: { transform: [{ translateX: this.state.currentLeft }] }, __source: {
          fileName: _jsxFileName,
          lineNumber: 181
        }
      },
      this.props.children
    );

    return React.createElement(
      View,
      babelHelpers.extends({}, this._panResponder.panHandlers, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 189
        }
      }),
      slideOutView,
      swipeableView
    );
  },
  close: function close() {
    this.props.onClose();
    this._animateToClosedPosition();
  },
  _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
    this.setState({
      isSwipeableViewRendered: true,
      rowHeight: event.nativeEvent.layout.height
    });
  },
  _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
    return gestureState.dy < 10 && this._isValidSwipe(gestureState);
  },
  _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
  _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
      return;
    }

    this.props.onSwipeStart();

    if (this._isSwipingRightFromClosed(gestureState)) {
      this._swipeSlowSpeed(gestureState);
    } else {
      this._swipeFullSpeed(gestureState);
    }
  },
  _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
  },
  _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
  },
  _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
  },
  _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
  },
  _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
    return false;
  },
  _animateTo: function _animateTo(toValue) {
    var _this2 = this;

    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;

    Animated.timing(this.state.currentLeft, {
      duration: duration,
      toValue: toValue,
      useNativeDriver: true
    }).start(function () {
      _this2._previousLeft = toValue;
      callback();
    });
  },
  _animateToOpenPosition: function _animateToOpenPosition() {
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance);
  },
  _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
    speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;

    var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance, duration);
  },
  _animateToClosedPosition: function _animateToClosedPosition() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

    this._animateTo(CLOSED_LEFT_POSITION, duration);
  },
  _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
  },
  _animateBounceBack: function _animateBounceBack(duration) {
    var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;
    this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
  },
  _isValidSwipe: function _isValidSwipe(gestureState) {
    if (this.props.preventSwipeRight && this._previousLeft === CLOSED_LEFT_POSITION && gestureState.dx > 0) {
      return false;
    }

    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
  },
  _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
    return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
  },
  _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
    var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;
    if (this._isSwipingRightFromClosed(gestureState)) {
      this.props.onOpen();
      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    } else if (this._shouldAnimateRemainder(gestureState)) {
      if (horizontalDistance < 0) {
        this.props.onOpen();
        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
      } else {
        this.props.onClose();
        this._animateToClosedPosition();
      }
    } else {
      if (this._previousLeft === CLOSED_LEFT_POSITION) {
        this._animateToClosedPosition();
      } else {
        this._animateToOpenPosition();
      }
    }

    this.props.onSwipeEnd();
  }
});

var styles = StyleSheet.create({
  slideOutContainer: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

module.exports = SwipeableRow;
}, 279, null, "SwipeableRow");
__d(/* PanResponder */function(global, require, module, exports) {

'use strict';

var InteractionManager = require(195                   ); // 195 = ./InteractionManager
var TouchHistoryMath = require(281               ); // 281 = TouchHistoryMath

var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;

var PanResponder = {

  _initializeGestureState: function _initializeGestureState(gestureState) {
    gestureState.moveX = 0;
    gestureState.moveY = 0;
    gestureState.x0 = 0;
    gestureState.y0 = 0;
    gestureState.dx = 0;
    gestureState.dy = 0;
    gestureState.vx = 0;
    gestureState.vy = 0;
    gestureState.numberActiveTouches = 0;

    gestureState._accountsForMovesUpTo = 0;
  },

  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    var movedAfter = gestureState._accountsForMovesUpTo;
    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var nextDX = gestureState.dx + (x - prevX);
    var nextDY = gestureState.dy + (y - prevY);

    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
    gestureState.vx = (nextDX - gestureState.dx) / dt;
    gestureState.vy = (nextDY - gestureState.dy) / dt;

    gestureState.dx = nextDX;
    gestureState.dy = nextDY;
    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
  },

  create: function create(config) {
    var interactionState = {
      handle: null
    };
    var gestureState = {
      stateID: Math.random()
    };
    PanResponder._initializeGestureState(gestureState);
    var panHandlers = {
      onStartShouldSetResponder: function onStartShouldSetResponder(e) {
        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
      },
      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
      },
      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
        if (e.nativeEvent.touches.length === 1) {
          PanResponder._initializeGestureState(gestureState);
        }
        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return false;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onResponderGrant: function onResponderGrant(e) {
        if (!interactionState.handle) {
          interactionState.handle = InteractionManager.createInteractionHandle();
        }
        gestureState.x0 = currentCentroidX(e.touchHistory);
        gestureState.y0 = currentCentroidY(e.touchHistory);
        gestureState.dx = 0;
        gestureState.dy = 0;
        if (config.onPanResponderGrant) {
          config.onPanResponderGrant(e, gestureState);
        }

        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
      },

      onResponderReject: function onResponderReject(e) {
        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
      },

      onResponderRelease: function onResponderRelease(e) {
        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderStart: function onResponderStart(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        if (config.onPanResponderStart) {
          config.onPanResponderStart(e, gestureState);
        }
      },

      onResponderMove: function onResponderMove(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return;
        }

        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        if (config.onPanResponderMove) {
          config.onPanResponderMove(e, gestureState);
        }
      },

      onResponderEnd: function onResponderEnd(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
      },

      onResponderTerminate: function onResponderTerminate(e) {
        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderTerminationRequest: function onResponderTerminationRequest(e) {
        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
      }
    };
    return {
      panHandlers: panHandlers,
      getInteractionHandle: function getInteractionHandle() {
        return interactionState.handle;
      }
    };
  }
};

function clearInteractionHandle(interactionState, callback, event, gestureState) {
  if (interactionState.handle) {
    InteractionManager.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
  if (callback) {
    callback(event, gestureState);
  }
}

module.exports = PanResponder;
}, 280, null, "PanResponder");
__d(/* TouchHistoryMath */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.TouchHistoryMath;
}, 281, null, "TouchHistoryMath");
__d(/* TabBarIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.ios.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StyleSheet = require(160         ); // 160 = StyleSheet
var TabBarItemIOS = require(283            ); // 283 = TabBarItemIOS
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var TabBarIOS = function (_React$Component) {
  babelHelpers.inherits(TabBarIOS, _React$Component);

  function TabBarIOS() {
    babelHelpers.classCallCheck(this, TabBarIOS);
    return babelHelpers.possibleConstructorReturn(this, (TabBarIOS.__proto__ || Object.getPrototypeOf(TabBarIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(TabBarIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        RCTTabBar,
        {
          style: [styles.tabGroup, this.props.style],
          unselectedTintColor: this.props.unselectedTintColor,
          unselectedItemTintColor: this.props.unselectedItemTintColor,
          tintColor: this.props.tintColor,
          barTintColor: this.props.barTintColor,
          itemPositioning: this.props.itemPositioning,
          translucent: this.props.translucent !== false, __source: {
            fileName: _jsxFileName,
            lineNumber: 74
          }
        },
        this.props.children
      );
    }
  }]);
  return TabBarIOS;
}(React.Component);

TabBarIOS.Item = TabBarItemIOS;
TabBarIOS.propTypes = babelHelpers.extends({}, ViewPropTypes, {
  style: ViewPropTypes.style,

  unselectedTintColor: ColorPropType,

  tintColor: ColorPropType,

  unselectedItemTintColor: ColorPropType,

  barTintColor: ColorPropType,

  translucent: PropTypes.bool,

  itemPositioning: PropTypes.oneOf(['fill', 'center', 'auto'])
});


var styles = StyleSheet.create({
  tabGroup: {
    flex: 1
  }
});

var RCTTabBar = requireNativeComponent('RCTTabBar', TabBarIOS);

module.exports = TabBarIOS;
}, 282, null, "TabBarIOS");
__d(/* TabBarItemIOS */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarItemIOS.ios.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var Image = require(204    ); // 204 = Image
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var StaticContainer = require(264                    ); // 264 = StaticContainer.react
var StyleSheet = require(160         ); // 160 = StyleSheet
var View = require(131   ); // 131 = View

var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent

var TabBarItemIOS = function (_React$Component) {
  babelHelpers.inherits(TabBarItemIOS, _React$Component);

  function TabBarItemIOS() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TabBarItemIOS);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarItemIOS.__proto__ || Object.getPrototypeOf(TabBarItemIOS)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      hasBeenSelected: false
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TabBarItemIOS, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.selected) {
        this.setState({ hasBeenSelected: true });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.hasBeenSelected || nextProps.selected) {
        this.setState({ hasBeenSelected: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          children = _props.children,
          props = babelHelpers.objectWithoutProperties(_props, ['style', 'children']);

      if (this.state.hasBeenSelected) {
        var tabContents = React.createElement(
          StaticContainer,
          { shouldUpdate: this.props.selected, __source: {
              fileName: _jsxFileName,
              lineNumber: 124
            }
          },
          children
        );
      } else {
        var tabContents = React.createElement(View, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 128
          }
        });
      }

      return React.createElement(
        RCTTabBarItem,
        babelHelpers.extends({}, props, {
          style: [styles.tab, style], __source: {
            fileName: _jsxFileName,
            lineNumber: 132
          }
        }),
        tabContents
      );
    }
  }]);
  return TabBarItemIOS;
}(React.Component);

TabBarItemIOS.propTypes = babelHelpers.extends({}, ViewPropTypes, {
  badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  badgeColor: ColorPropType,

  systemIcon: PropTypes.oneOf(['bookmarks', 'contacts', 'downloads', 'favorites', 'featured', 'history', 'more', 'most-recent', 'most-viewed', 'recents', 'search', 'top-rated']),

  icon: Image.propTypes.source,

  selectedIcon: Image.propTypes.source,

  onPress: PropTypes.func,

  renderAsOriginal: PropTypes.bool,

  selected: PropTypes.bool,

  style: ViewPropTypes.style,

  title: PropTypes.string,

  isTVSelectable: PropTypes.bool
});


var styles = StyleSheet.create({
  tab: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
});

var RCTTabBarItem = requireNativeComponent('RCTTabBarItem', TabBarItemIOS);

module.exports = TabBarItemIOS;
}, 283, null, "TabBarItemIOS");
__d(/* TextInput */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/TextInput/TextInput.js';
var ColorPropType = require(62             ); // 62 = ColorPropType
var DocumentSelectionState = require(285                     ); // 285 = DocumentSelectionState
var EventEmitter = require(57            ); // 57 = EventEmitter
var NativeMethodsMixin = require(64                  ); // 64 = NativeMethodsMixin
var Platform = require(38        ); // 38 = Platform
var React = require(132    ); // 132 = React
var createReactClass = require(157                 ); // 157 = create-react-class
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(65           ); // 65 = ReactNative
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var TextInputState = require(129             ); // 129 = TextInputState
var TimerMixin = require(217                ); // 217 = react-timer-mixin
var TouchableWithoutFeedback = require(218                       ); // 218 = TouchableWithoutFeedback
var UIManager = require(125        ); // 125 = UIManager
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes

var emptyFunction = require(46                      ); // 46 = fbjs/lib/emptyFunction
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent
var warning = require(45                ); // 45 = fbjs/lib/warning

var onlyMultiline = {
  onTextInput: true,
  children: true
};

if (Platform.OS === 'android') {
  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
} else if (Platform.OS === 'ios') {
  var RCTTextView = requireNativeComponent('RCTTextView', null);
  var RCTTextField = requireNativeComponent('RCTTextField', null);
}

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var TextInput = createReactClass({
  displayName: 'TextInput',
  statics: {
    State: TextInputState
  },

  propTypes: babelHelpers.extends({}, ViewPropTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),

    autoCorrect: PropTypes.bool,

    spellCheck: PropTypes.bool,

    autoFocus: PropTypes.bool,

    editable: PropTypes.bool,

    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),

    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),

    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),

    returnKeyLabel: PropTypes.string,

    maxLength: PropTypes.number,

    numberOfLines: PropTypes.number,

    disableFullscreenUI: PropTypes.bool,

    enablesReturnKeyAutomatically: PropTypes.bool,

    multiline: PropTypes.bool,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onBlur: PropTypes.func,

    onFocus: PropTypes.func,

    onChange: PropTypes.func,

    onChangeText: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    onEndEditing: PropTypes.func,

    onSelectionChange: PropTypes.func,

    onSubmitEditing: PropTypes.func,

    onKeyPress: PropTypes.func,

    onLayout: PropTypes.func,

    onScroll: PropTypes.func,

    placeholder: PropTypes.node,

    placeholderTextColor: ColorPropType,

    secureTextEntry: PropTypes.bool,

    selectionColor: ColorPropType,

    selectionState: PropTypes.instanceOf(DocumentSelectionState),

    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),

    value: PropTypes.string,

    defaultValue: PropTypes.string,

    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),

    clearTextOnFocus: PropTypes.bool,

    selectTextOnFocus: PropTypes.bool,

    blurOnSubmit: PropTypes.bool,

    style: Text.propTypes.style,

    underlineColorAndroid: ColorPropType,

    inlineImageLeft: PropTypes.string,

    inlineImagePadding: PropTypes.number,

    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),

    caretHidden: PropTypes.bool
  }),

  mixins: [NativeMethodsMixin, TimerMixin],

  isFocused: function isFocused() {
    return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
  },

  contextTypes: {
    onFocusRequested: PropTypes.func,
    focusEmitter: PropTypes.instanceOf(EventEmitter)
  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._lastNativeText = this.props.value;
    if (!this.context.focusEmitter) {
      if (this.props.autoFocus) {
        this.requestAnimationFrame(this.focus);
      }
      return;
    }
    this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
      if (_this === el) {
        _this.requestAnimationFrame(_this.focus);
      } else if (_this.isFocused()) {
        _this.blur();
      }
    });
    if (this.props.autoFocus) {
      this.context.onFocusRequested(this);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
  },

  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },

  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    if (Platform.OS === 'ios') {
      return this._renderIOS();
    } else if (Platform.OS === 'android') {
      return this._renderAndroid();
    }
  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOS: function _renderIOS() {
    var textContainer;

    var props = babelHelpers.extends({}, this.props);
    props.style = [this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
            warning(false, '%s', error.stack);
          }
        }
      }
      textContainer = React.createElement(RCTTextField, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 651
        }
      }));
    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(props.value && childCount), 'Cannot specify both value and children.');
      if (childCount >= 1) {
        children = React.createElement(
          Text,
          { style: props.style, __source: {
              fileName: _jsxFileName,
              lineNumber: 670
            }
          },
          children
        );
      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      props.style.unshift(styles.multilineInput);
      textContainer = React.createElement(RCTTextView, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 677
        }
      }));
    }

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityTraits: props.accessibilityTraits,
        nativeID: this.props.nativeID,
        testID: props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 695
        }
      },
      textContainer
    );
  },

  _renderAndroid: function _renderAndroid() {
    var props = babelHelpers.extends({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];
    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {
      return ++childCount;
    });
    invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');
    if (childCount > 1) {
      children = React.createElement(
        Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 722
          }
        },
        children
      );
    }

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
      ref: this._setNativeRef
    }, props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      onScroll: this._onScroll,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 730
      }
    }));

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: this.props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        nativeID: this.props.nativeID,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 747
        }
      },
      textContainer
    );
  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {
    if (this._inputRef) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount
      });
    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var nativeProps = {};

    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
      nativeProps.text = this.props.value;
    }

    var selection = this.props.selection;

    if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  }
});

var styles = StyleSheet.create({
  multilineInput: {
    paddingTop: 5
  }
});

module.exports = TextInput;
}, 284, null, "TextInput");
__d(/* DocumentSelectionState */function(global, require, module, exports) {

'use strict';

var mixInEventEmitter = require(286                ); // 286 = mixInEventEmitter

var DocumentSelectionState = function () {
  function DocumentSelectionState(anchor, focus) {
    babelHelpers.classCallCheck(this, DocumentSelectionState);

    this._anchorOffset = anchor;
    this._focusOffset = focus;
    this._hasFocus = false;
  }

  babelHelpers.createClass(DocumentSelectionState, [{
    key: 'update',
    value: function update(anchor, focus) {
      if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
        this._anchorOffset = anchor;
        this._focusOffset = focus;
        this.emit('update');
      }
    }
  }, {
    key: 'constrainLength',
    value: function constrainLength(maxLength) {
      this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (!this._hasFocus) {
        this._hasFocus = true;
        this.emit('focus');
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this._hasFocus) {
        this._hasFocus = false;
        this.emit('blur');
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this._hasFocus;
    }
  }, {
    key: 'isCollapsed',
    value: function isCollapsed() {
      return this._anchorOffset === this._focusOffset;
    }
  }, {
    key: 'isBackward',
    value: function isBackward() {
      return this._anchorOffset > this._focusOffset;
    }
  }, {
    key: 'getAnchorOffset',
    value: function getAnchorOffset() {
      return this._hasFocus ? this._anchorOffset : null;
    }
  }, {
    key: 'getFocusOffset',
    value: function getFocusOffset() {
      return this._hasFocus ? this._focusOffset : null;
    }
  }, {
    key: 'getStartOffset',
    value: function getStartOffset() {
      return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'getEndOffset',
    value: function getEndOffset() {
      return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'overlaps',
    value: function overlaps(start, end) {
      return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
    }
  }]);
  return DocumentSelectionState;
}();

mixInEventEmitter(DocumentSelectionState, {
  'blur': true,
  'focus': true,
  'update': true
});

module.exports = DocumentSelectionState;
}, 285, null, "DocumentSelectionState");
__d(/* mixInEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(57            ); // 57 = EventEmitter
var EventEmitterWithHolding = require(287                      ); // 287 = EventEmitterWithHolding
var EventHolder = require(288          ); // 288 = EventHolder

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var keyOf = require(254             ); // 254 = fbjs/lib/keyOf

var TYPES_KEY = keyOf({ __types: true });

function mixInEventEmitter(cls, types) {
  invariant(types, 'Must supply set of valid event types');

  var target = cls.prototype || cls;

  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');

  var ctor = cls.constructor;
  if (ctor) {
    invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
  }

  if (target.hasOwnProperty(TYPES_KEY)) {
    babelHelpers.extends(target.__types, types);
  } else if (target.__types) {
    target.__types = babelHelpers.extends({}, target.__types, types);
  } else {
    target.__types = types;
  }
  babelHelpers.extends(target, EventEmitterMixin);
}

var EventEmitterMixin = {
  emit: function emit(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
  },

  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
  },

  addListener: function addListener(eventType, listener, context) {
    return this.__getEventEmitter().addListener(eventType, listener, context);
  },

  once: function once(eventType, listener, context) {
    return this.__getEventEmitter().once(eventType, listener, context);
  },

  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
    return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
  },

  addListenerMap: function addListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  removeAllListeners: function removeAllListeners() {
    this.__getEventEmitter().removeAllListeners();
  },

  removeCurrentListener: function removeCurrentListener() {
    this.__getEventEmitter().removeCurrentListener();
  },

  releaseHeldEventType: function releaseHeldEventType(eventType) {
    this.__getEventEmitter().releaseHeldEventType(eventType);
  },

  __getEventEmitter: function __getEventEmitter() {
    if (!this.__eventEmitter) {
      var emitter = new EventEmitter();
      if (__DEV__) {
        var EventValidator = require(289             ); // 289 = EventValidator
        emitter = EventValidator.addValidation(emitter, this.__types);
      }

      var holder = new EventHolder();
      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
    }
    return this.__eventEmitter;
  }
};

module.exports = mixInEventEmitter;
}, 286, null, "mixInEventEmitter");
__d(/* EventEmitterWithHolding */function(global, require, module, exports) {
'use strict';

var EventEmitterWithHolding = function () {
  function EventEmitterWithHolding(emitter, holder) {
    babelHelpers.classCallCheck(this, EventEmitterWithHolding);

    this._emitter = emitter;
    this._eventHolder = holder;
    this._currentEventToken = null;
    this._emittingHeldEvents = false;
  }

  babelHelpers.createClass(EventEmitterWithHolding, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      return this._emitter.addListener(eventType, listener, context);
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      return this._emitter.once(eventType, listener, context);
    }
  }, {
    key: 'addRetroactiveListener',
    value: function addRetroactiveListener(eventType, listener, context) {
      var subscription = this._emitter.addListener(eventType, listener, context);

      this._emittingHeldEvents = true;
      this._eventHolder.emitToListener(eventType, listener, context);
      this._emittingHeldEvents = false;

      return subscription;
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._emitter.removeAllListeners(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      this._emitter.removeCurrentListener();
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      return this._emitter.listeners(eventType);
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var _emitter;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
    }
  }, {
    key: 'emitAndHold',
    value: function emitAndHold(eventType) {
      var _eventHolder, _emitter2;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));
      (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));
      this._currentEventToken = null;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      if (this._currentEventToken) {
        this._eventHolder.releaseEvent(this._currentEventToken);
      } else if (this._emittingHeldEvents) {
        this._eventHolder.releaseCurrentEvent();
      }
    }
  }, {
    key: 'releaseHeldEventType',
    value: function releaseHeldEventType(eventType) {
      this._eventHolder.releaseEventType(eventType);
    }
  }]);
  return EventEmitterWithHolding;
}();

module.exports = EventEmitterWithHolding;
}, 287, null, "EventEmitterWithHolding");
__d(/* EventHolder */function(global, require, module, exports) {
'use strict';

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var EventHolder = function () {
  function EventHolder() {
    babelHelpers.classCallCheck(this, EventHolder);

    this._heldEvents = {};
    this._currentEventKey = null;
  }

  babelHelpers.createClass(EventHolder, [{
    key: 'holdEvent',
    value: function holdEvent(eventType) {
      this._heldEvents[eventType] = this._heldEvents[eventType] || [];
      var eventsOfType = this._heldEvents[eventType];
      var key = {
        eventType: eventType,
        index: eventsOfType.length
      };

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      eventsOfType.push(args);
      return key;
    }
  }, {
    key: 'emitToListener',
    value: function emitToListener(eventType, listener, context) {
      var _this = this;

      var eventsOfType = this._heldEvents[eventType];
      if (!eventsOfType) {
        return;
      }
      var origEventKey = this._currentEventKey;
      eventsOfType.forEach(function (eventHeld, index) {
        if (!eventHeld) {
          return;
        }
        _this._currentEventKey = {
          eventType: eventType,
          index: index
        };
        listener.apply(context, eventHeld);
      });
      this._currentEventKey = origEventKey;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
      this._currentEventKey && this.releaseEvent(this._currentEventKey);
    }
  }, {
    key: 'releaseEvent',
    value: function releaseEvent(token) {
      delete this._heldEvents[token.eventType][token.index];
    }
  }, {
    key: 'releaseEventType',
    value: function releaseEventType(type) {
      this._heldEvents[type] = [];
    }
  }]);
  return EventHolder;
}();

module.exports = EventHolder;
}, 288, null, "EventHolder");
__d(/* EventValidator */function(global, require, module, exports) {
'use strict';

var EventValidator = {
  addValidation: function addValidation(emitter, types) {
    var eventTypes = Object.keys(types);
    var emitterWithValidation = Object.create(emitter);

    babelHelpers.extends(emitterWithValidation, {
      emit: function emit(type, a, b, c, d, e, _) {
        assertAllowsEventType(type, eventTypes);
        return emitter.emit.call(this, type, a, b, c, d, e, _);
      }
    });

    return emitterWithValidation;
  }
};

function assertAllowsEventType(type, allowedTypes) {
  if (allowedTypes.indexOf(type) === -1) {
    throw new TypeError(errorMessageFor(type, allowedTypes));
  }
}

function errorMessageFor(type, allowedTypes) {
  var message = 'Unknown event type "' + type + '". ';
  if (__DEV__) {
    message += recommendationFor(type, allowedTypes);
  }
  message += 'Known event types: ' + allowedTypes.join(', ') + '.';
  return message;
}

if (__DEV__) {
  var recommendationFor = function recommendationFor(type, allowedTypes) {
    var closestTypeRecommendation = closestTypeFor(type, allowedTypes);
    if (isCloseEnough(closestTypeRecommendation, type)) {
      return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
    } else {
      return '';
    }
  };

  var closestTypeFor = function closestTypeFor(type, allowedTypes) {
    var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
    return typeRecommendations.sort(recommendationSort)[0];
  };

  var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
    return {
      type: recomendedType,
      distance: damerauLevenshteinDistance(type, recomendedType)
    };
  };

  var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
    if (recommendationA.distance < recommendationB.distance) {
      return -1;
    } else if (recommendationA.distance > recommendationB.distance) {
      return 1;
    } else {
      return 0;
    }
  };

  var isCloseEnough = function isCloseEnough(closestType, actualType) {
    return closestType.distance / actualType.length < 0.334;
  };

  var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
    var i = void 0,
        j = void 0;
    var d = [];

    for (i = 0; i <= a.length; i++) {
      d[i] = [i];
    }

    for (j = 1; j <= b.length; j++) {
      d[0][j] = j;
    }

    for (i = 1; i <= a.length; i++) {
      for (j = 1; j <= b.length; j++) {
        var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;

        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

        if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }

    return d[a.length][b.length];
  };
}

module.exports = EventValidator;
}, 289, null, "EventValidator");
__d(/* ToastAndroid */function(global, require, module, exports) {
'use strict';

var warning = require(45                ); // 45 = fbjs/lib/warning

var ToastAndroid = {

  show: function show(message, duration) {
    warning(false, 'ToastAndroid is not supported on this platform.');
  }

};

module.exports = ToastAndroid;
}, 290, null, "ToastAndroid");
__d(/* ToolbarAndroid */function(global, require, module, exports) {
'use strict';

module.exports = require(159                ); // 159 = UnimplementedView
}, 291, null, "ToolbarAndroid");
__d(/* ViewPagerAndroid */function(global, require, module, exports) {
'use strict';

module.exports = require(159                ); // 159 = UnimplementedView
}, 292, null, "ViewPagerAndroid");
__d(/* WebView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/Components/WebView/WebView.ios.js';
var ActivityIndicator = require(61                 ); // 61 = ActivityIndicator
var EdgeInsetsPropType = require(148                 ); // 148 = EdgeInsetsPropType
var React = require(132    ); // 132 = React
var PropTypes = require(20          ); // 20 = prop-types
var ReactNative = require(65           ); // 65 = ReactNative
var StyleSheet = require(160         ); // 160 = StyleSheet
var Text = require(183   ); // 183 = Text
var UIManager = require(125        ); // 125 = UIManager
var View = require(131   ); // 131 = View
var ViewPropTypes = require(147            ); // 147 = ViewPropTypes
var ScrollView = require(206         ); // 206 = ScrollView

var deprecatedPropType = require(140                 ); // 140 = deprecatedPropType
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var keyMirror = require(136                 ); // 136 = fbjs/lib/keyMirror
var processDecelerationRate = require(216                      ); // 216 = processDecelerationRate
var requireNativeComponent = require(158                     ); // 158 = requireNativeComponent
var resolveAssetSource = require(169                 ); // 169 = resolveAssetSource

var RCTWebViewManager = require(30             ).WebViewManager; // 30 = NativeModules

var BGWASH = 'rgba(255,255,255,0.8)';
var RCT_WEBVIEW_REF = 'webview';

var WebViewState = keyMirror({
  IDLE: null,
  LOADING: null,
  ERROR: null
});

var NavigationType = keyMirror({
  click: true,
  formsubmit: true,
  backforward: true,
  reload: true,
  formresubmit: true,
  other: true
});

var JSNavigationScheme = 'react-js-navigation';

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var defaultRenderLoading = function defaultRenderLoading() {
  return React.createElement(
    View,
    { style: styles.loadingView, __source: {
        fileName: _jsxFileName,
        lineNumber: 73
      }
    },
    React.createElement(ActivityIndicator, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 74
      }
    })
  );
};
var defaultRenderError = function defaultRenderError(errorDomain, errorCode, errorDesc) {
  return React.createElement(
    View,
    { style: styles.errorContainer, __source: {
        fileName: _jsxFileName,
        lineNumber: 78
      }
    },
    React.createElement(
      Text,
      { style: styles.errorTextTitle, __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      },
      'Error loading page'
    ),
    React.createElement(
      Text,
      { style: styles.errorText, __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      },
      'Domain: ' + errorDomain
    ),
    React.createElement(
      Text,
      { style: styles.errorText, __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      },
      'Error Code: ' + errorCode
    ),
    React.createElement(
      Text,
      { style: styles.errorText, __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      },
      'Description: ' + errorDesc
    )
  );
};

var WebView = function (_React$Component) {
  babelHelpers.inherits(WebView, _React$Component);

  function WebView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, WebView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      viewState: WebViewState.IDLE,
      lastErrorEvent: null,
      startInLoadingState: true
    }, _this.goForward = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
    }, _this.goBack = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
    }, _this.reload = function () {
      _this.setState({ viewState: WebViewState.LOADING });
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
    }, _this.stopLoading = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
    }, _this.postMessage = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
    }, _this.injectJavaScript = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
    }, _this._updateNavigationState = function (event) {
      if (_this.props.onNavigationStateChange) {
        _this.props.onNavigationStateChange(event.nativeEvent);
      }
    }, _this.getWebViewHandle = function () {
      return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
    }, _this._onLoadingStart = function (event) {
      var onLoadStart = _this.props.onLoadStart;
      onLoadStart && onLoadStart(event);
      _this._updateNavigationState(event);
    }, _this._onLoadingError = function (event) {
      event.persist();var _this$props = _this.props,
          onError = _this$props.onError,
          onLoadEnd = _this$props.onLoadEnd;

      onError && onError(event);
      onLoadEnd && onLoadEnd(event);
      console.warn('Encountered an error loading page', event.nativeEvent);

      _this.setState({
        lastErrorEvent: event.nativeEvent,
        viewState: WebViewState.ERROR
      });
    }, _this._onLoadingFinish = function (event) {
      var _this$props2 = _this.props,
          onLoad = _this$props2.onLoad,
          onLoadEnd = _this$props2.onLoadEnd;

      onLoad && onLoad(event);
      onLoadEnd && onLoadEnd(event);
      _this.setState({
        viewState: WebViewState.IDLE
      });
      _this._updateNavigationState(event);
    }, _this._onMessage = function (event) {
      var onMessage = _this.props.onMessage;

      onMessage && onMessage(event);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(WebView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.startInLoadingState) {
        this.setState({ viewState: WebViewState.LOADING });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var otherView = null;

      if (this.state.viewState === WebViewState.LOADING) {
        otherView = (this.props.renderLoading || defaultRenderLoading)();
      } else if (this.state.viewState === WebViewState.ERROR) {
        var errorEvent = this.state.lastErrorEvent;
        invariant(errorEvent != null, 'lastErrorEvent expected to be non-null');
        otherView = (this.props.renderError || defaultRenderError)(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== WebViewState.IDLE) {
        console.error('RCTWebView invalid state encountered: ' + this.state.loading);
      }

      var webViewStyles = [styles.container, styles.webView, this.props.style];
      if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
        webViewStyles.push(styles.hidden);
      }

      var onShouldStartLoadWithRequest = this.props.onShouldStartLoadWithRequest && function (event) {
        var shouldStart = _this2.props.onShouldStartLoadWithRequest && _this2.props.onShouldStartLoadWithRequest(event.nativeEvent);
        RCTWebViewManager.startLoadWithResult(!!shouldStart, event.nativeEvent.lockIdentifier);
      };

      var decelerationRate = processDecelerationRate(this.props.decelerationRate);

      var source = this.props.source || {};
      if (this.props.html) {
        source.html = this.props.html;
      } else if (this.props.url) {
        source.uri = this.props.url;
      }

      var messagingEnabled = typeof this.props.onMessage === 'function';

      var webView = React.createElement(RCTWebView, {
        ref: RCT_WEBVIEW_REF,
        key: 'webViewKey',
        style: webViewStyles,
        source: resolveAssetSource(source),
        injectedJavaScript: this.props.injectedJavaScript,
        bounces: this.props.bounces,
        scrollEnabled: this.props.scrollEnabled,
        decelerationRate: decelerationRate,
        contentInset: this.props.contentInset,
        automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
        onLoadingStart: this._onLoadingStart,
        onLoadingFinish: this._onLoadingFinish,
        onLoadingError: this._onLoadingError,
        messagingEnabled: messagingEnabled,
        onMessage: this._onMessage,
        onShouldStartLoadWithRequest: onShouldStartLoadWithRequest,
        scalesPageToFit: this.props.scalesPageToFit,
        allowsInlineMediaPlayback: this.props.allowsInlineMediaPlayback,
        mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
        dataDetectorTypes: this.props.dataDetectorTypes,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 433
        }
      });

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 457
          }
        },
        webView,
        otherView
      );
    }
  }]);
  return WebView;
}(React.Component);

WebView.JSNavigationScheme = JSNavigationScheme;
WebView.NavigationType = NavigationType;
WebView.propTypes = babelHelpers.extends({}, ViewPropTypes, {

  html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  source: PropTypes.oneOfType([PropTypes.shape({
    uri: PropTypes.string,

    method: PropTypes.string,

    headers: PropTypes.object,

    body: PropTypes.string
  }), PropTypes.shape({
    html: PropTypes.string,

    baseUrl: PropTypes.string
  }), PropTypes.number]),

  renderError: PropTypes.func,
  renderLoading: PropTypes.func,

  onLoad: PropTypes.func,

  onLoadEnd: PropTypes.func,

  onLoadStart: PropTypes.func,

  onError: PropTypes.func,

  bounces: PropTypes.bool,

  decelerationRate: ScrollView.propTypes.decelerationRate,

  scrollEnabled: PropTypes.bool,

  automaticallyAdjustContentInsets: PropTypes.bool,

  contentInset: EdgeInsetsPropType,

  onNavigationStateChange: PropTypes.func,

  onMessage: PropTypes.func,

  startInLoadingState: PropTypes.bool,

  style: ViewPropTypes.style,

  dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))]),

  javaScriptEnabled: PropTypes.bool,

  thirdPartyCookiesEnabled: PropTypes.bool,

  domStorageEnabled: PropTypes.bool,

  injectedJavaScript: PropTypes.string,

  userAgent: PropTypes.string,

  scalesPageToFit: PropTypes.bool,

  onShouldStartLoadWithRequest: PropTypes.func,

  allowsInlineMediaPlayback: PropTypes.bool,

  mediaPlaybackRequiresUserAction: PropTypes.bool,

  injectJavaScript: PropTypes.func,

  mixedContentMode: PropTypes.oneOf(['never', 'always', 'compatibility'])
});
WebView.defaultProps = {
  scalesPageToFit: true
};


var RCTWebView = requireNativeComponent('RCTWebView', WebView, {
  nativeOnly: {
    onLoadingStart: true,
    onLoadingError: true,
    onLoadingFinish: true,
    onMessage: true,
    messagingEnabled: PropTypes.bool
  }
});

var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: BGWASH
  },
  errorText: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 2
  },
  errorTextTitle: {
    fontSize: 15,
    fontWeight: '500',
    marginBottom: 10
  },
  hidden: {
    height: 0,
    flex: 0 },
  loadingView: {
    backgroundColor: BGWASH,
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    height: 100
  },
  webView: {
    backgroundColor: '#ffffff'
  }
});

module.exports = WebView;
}, 293, null, "WebView");
__d(/* ActionSheetIOS */function(global, require, module, exports) {
'use strict';

var RCTActionSheetManager = require(30             ).ActionSheetManager; // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var processColor = require(115           ); // 115 = processColor

var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), failureCallback, successCallback);
  }
};

module.exports = ActionSheetIOS;
}, 294, null, "ActionSheetIOS");
__d(/* AppRegistry */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(31             ); // 31 = BatchedBridge
var BugReporting = require(296           ); // 296 = BugReporting
var NativeModules = require(30             ); // 30 = NativeModules
var ReactNative = require(65           ); // 65 = ReactNative
var SceneTracker = require(298           ); // 298 = SceneTracker

var infoLog = require(112      ); // 112 = infoLog
var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var renderApplication = require(299                ); // 299 = renderApplication

var runnables = {};
var runCount = 1;
var sections = {};
var tasks = new Map();
var componentProviderInstrumentationHook = function componentProviderInstrumentationHook(component) {
  return component();
};

var wrapperComponentProvider = void 0;

var AppRegistry = {
  setWrapperComponentProvider: function setWrapperComponentProvider(provider) {
    wrapperComponentProvider = provider;
  },
  registerConfig: function registerConfig(config) {
    config.forEach(function (appConfig) {
      if (appConfig.run) {
        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
      } else {
        invariant(appConfig.component != null, 'AppRegistry.registerConfig(...): Every config is expected to set ' + 'either `run` or `component`, but `%s` has neither.', appConfig.appKey);
        AppRegistry.registerComponent(appConfig.appKey, appConfig.component, appConfig.section);
      }
    });
  },
  registerComponent: function registerComponent(appKey, componentProvider, section) {
    runnables[appKey] = {
      componentProvider: componentProvider,
      run: function run(appParameters) {
        return renderApplication(componentProviderInstrumentationHook(componentProvider), appParameters.initialProps, appParameters.rootTag, wrapperComponentProvider && wrapperComponentProvider(appParameters));
      }
    };
    if (section) {
      sections[appKey] = runnables[appKey];
    }
    return appKey;
  },
  registerRunnable: function registerRunnable(appKey, run) {
    runnables[appKey] = { run: run };
    return appKey;
  },
  registerSection: function registerSection(appKey, component) {
    AppRegistry.registerComponent(appKey, component, true);
  },
  getAppKeys: function getAppKeys() {
    return Object.keys(runnables);
  },
  getSectionKeys: function getSectionKeys() {
    return Object.keys(sections);
  },
  getSections: function getSections() {
    return babelHelpers.extends({}, sections);
  },
  getRunnable: function getRunnable(appKey) {
    return runnables[appKey];
  },
  getRegistry: function getRegistry() {
    return {
      sections: AppRegistry.getSectionKeys(),
      runnables: babelHelpers.extends({}, runnables)
    };
  },
  setComponentProviderInstrumentationHook: function setComponentProviderInstrumentationHook(hook) {
    componentProviderInstrumentationHook = hook;
  },
  runApplication: function runApplication(appKey, appParameters) {
    var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
    infoLog(msg);
    BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
      return msg;
    });
    invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered.\n\n' + 'Hint: This error often happens when you\'re running the packager ' + '(local dev server) from a wrong folder. For example you have ' + 'multiple apps and the packager is still running for the app you ' + 'were working on before.\nIf this is the case, simply kill the old ' + 'packager instance (e.g. close the packager terminal window) ' + 'and start the packager in the correct app folder (e.g. cd into app ' + 'folder and run \'npm start\').\n\n' + 'This error can also happen due to a require() error during ' + 'initialization or failure to call AppRegistry.registerComponent.\n\n');

    SceneTracker.setActiveScene({ name: appKey });
    runnables[appKey].run(appParameters);
  },
  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
  },
  registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
    if (tasks.has(taskKey)) {
      console.warn('registerHeadlessTask called multiple times for same key \'' + taskKey + '\'');
    }
    tasks.set(taskKey, task);
  },
  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
    var taskProvider = tasks.get(taskKey);
    if (!taskProvider) {
      throw new Error('No task registered for key ' + taskKey);
    }
    taskProvider()(data).then(function () {
      return NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    }).catch(function (reason) {
      console.error(reason);
      NativeModules.HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    });
  }
};

BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);

module.exports = AppRegistry;
}, 295, null, "AppRegistry");
__d(/* BugReporting */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter
var Map = require(75   ); // 75 = Map
var infoLog = require(112      ); // 112 = infoLog

function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require(297            )(); // 297 = dumpReactTree
  });
}

var BugReporting = function () {
  function BugReporting() {
    babelHelpers.classCallCheck(this, BugReporting);
  }

  babelHelpers.createClass(BugReporting, null, [{
    key: '_maybeInit',
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }
    }
  }, {
    key: 'addSource',
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: 'addFileSource',
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: '_addSource',
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();
      if (source.has(key)) {
        console.warn('BugReporting.add* called multiple times for same key \'' + key + '\'');
      }
      source.set(key, callback);
      return { remove: function remove() {
          source.delete(key);
        } };
    }
  }, {
    key: 'collectExtraData',
    value: function collectExtraData() {
      var extraData = {};
      for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

        var _key = _ref2[0];
        var callback = _ref2[1];

        extraData[_key] = callback();
      }
      var fileData = {};
      for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref4 = _ref6;

        var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

        var _key2 = _ref5[0];
        var _callback = _ref5[1];

        fileData[_key2] = _callback();
      }
      infoLog('BugReporting extraData:', extraData);
      var BugReportingNativeModule = require(30             ).BugReporting; // 30 = NativeModules
      BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

      return { extras: extraData, files: fileData };
    }
  }]);
  return BugReporting;
}();

BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;


module.exports = BugReporting;
}, 296, null, "BugReporting");
__d(/* dumpReactTree */function(global, require, module, exports) {
'use strict';

function dumpReactTree() {
  try {
    return getReactTree();
  } catch (e) {
    return 'Failed to dump react tree: ' + e;
  }
}

function getReactTree() {
  return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';
}

module.exports = dumpReactTree;
}, 297, null, "dumpReactTree");
__d(/* SceneTracker */function(global, require, module, exports) {

'use strict';

var _listeners = [];

var _activeScene = { name: 'default' };

var SceneTracker = {
  setActiveScene: function setActiveScene(scene) {
    _activeScene = scene;
    _listeners.forEach(function (listener) {
      return listener(_activeScene);
    });
  },
  getActiveScene: function getActiveScene() {
    return _activeScene;
  },
  addActiveSceneChangedListener: function addActiveSceneChangedListener(callback) {
    _listeners.push(callback);
    return {
      remove: function remove() {
        _listeners = _listeners.filter(function (listener) {
          return callback !== listener;
        });
      }
    };
  }
};

module.exports = SceneTracker;
}, 298, null, "SceneTracker");
__d(/* renderApplication */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native/Libraries/ReactNative/renderApplication.js';
var AppContainer = require(243           ); // 243 = AppContainer
var React = require(132    ); // 132 = React
var ReactNative = require(65           ); // 65 = ReactNative

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

require(300          ); // 300 = BackHandler

function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent) {
  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);

  ReactNative.render(React.createElement(
    AppContainer,
    { rootTag: rootTag, WrapperComponent: WrapperComponent, __source: {
        fileName: _jsxFileName,
        lineNumber: 34
      }
    },
    React.createElement(RootComponent, babelHelpers.extends({}, initialProps, { rootTag: rootTag, __source: {
        fileName: _jsxFileName,
        lineNumber: 35
      }
    }))
  ), rootTag);
}

module.exports = renderApplication;
}, 299, null, "renderApplication");
__d(/* BackHandler */function(global, require, module, exports) {

'use strict';

var Platform = require(38        ); // 38 = Platform
var TVEventHandler = require(188             ); // 188 = TVEventHandler

function emptyFunction() {}

var BackHandler = void 0;

if (Platform.isTVOS) {
  var _tvEventHandler = new TVEventHandler();
  var _backPressSubscriptions = new Set();

  _tvEventHandler.enable(this, function (cmp, evt) {
    if (evt && evt.eventType === 'menu') {
      var backPressSubscriptions = new Set(_backPressSubscriptions);
      var invokeDefault = true;
      var subscriptions = [].concat(babelHelpers.toConsumableArray(backPressSubscriptions)).reverse();
      for (var i = 0; i < subscriptions.length; ++i) {
        if (subscriptions[i]()) {
          invokeDefault = false;
          break;
        }
      }

      if (invokeDefault) {
        BackHandler.exitApp();
      }
    }
  });

  BackHandler = {
    exitApp: emptyFunction,

    addEventListener: function addEventListener(eventName, handler) {
      _backPressSubscriptions.add(handler);
      return {
        remove: function remove() {
          return BackHandler.removeEventListener(eventName, handler);
        }
      };
    },

    removeEventListener: function removeEventListener(eventName, handler) {
      _backPressSubscriptions.delete(handler);
    }

  };
} else {

  BackHandler = {
    exitApp: emptyFunction,
    addEventListener: function addEventListener() {
      return {
        remove: emptyFunction
      };
    },

    removeEventListener: emptyFunction
  };
}

module.exports = BackHandler;
}, 300, null, "BackHandler");
__d(/* AsyncStorage */function(global, require, module, exports) {
'use strict';

var NativeModules = require(30             ); // 30 = NativeModules

var RCTAsyncStorage = NativeModules.AsyncRocksDBStorage || NativeModules.AsyncSQLiteDBStorage || NativeModules.AsyncLocalStorage;

var AsyncStorage = {
  _getRequests: [],
  _getKeys: [],
  _immediate: null,

  getItem: function getItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiGet([key], function (errors, result) {
        var value = result && result[0] && result[0][1] ? result[0][1] : null;
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0], value);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  },

  setItem: function setItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  removeItem: function removeItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove([key], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  mergeItem: function mergeItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  clear: function clear(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.clear(function (error) {
        callback && callback(convertError(error));
        if (error && convertError(error)) {
          reject(convertError(error));
        } else {
          resolve(null);
        }
      });
    });
  },

  getAllKeys: function getAllKeys(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.getAllKeys(function (error, keys) {
        callback && callback(convertError(error), keys);
        if (error) {
          reject(convertError(error));
        } else {
          resolve(keys);
        }
      });
    });
  },

  flushGetRequests: function flushGetRequests() {
    var getRequests = this._getRequests;
    var getKeys = this._getKeys;

    this._getRequests = [];
    this._getKeys = [];

    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
      var map = {};
      result && result.forEach(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        map[key] = value;return value;
      });
      var reqLength = getRequests.length;
      for (var i = 0; i < reqLength; i++) {
        var request = getRequests[i];
        var requestKeys = request.keys;
        var requestResult = requestKeys.map(function (key) {
          return [key, map[key]];
        });
        request.callback && request.callback(null, requestResult);
        request.resolve && request.resolve(requestResult);
      }
    });
  },

  multiGet: function multiGet(keys, callback) {
    var _this = this;

    if (!this._immediate) {
      this._immediate = setImmediate(function () {
        _this._immediate = null;
        _this.flushGetRequests();
      });
    }

    var getRequest = {
      keys: keys,
      callback: callback,

      keyIndex: this._getKeys.length,
      resolve: null,
      reject: null
    };

    var promiseResult = new Promise(function (resolve, reject) {
      getRequest.resolve = resolve;
      getRequest.reject = reject;
    });

    this._getRequests.push(getRequest);

    keys.forEach(function (key) {
      if (_this._getKeys.indexOf(key) === -1) {
        _this._getKeys.push(key);
      }
    });

    return promiseResult;
  },

  multiSet: function multiSet(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiRemove: function multiRemove(keys, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove(keys, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiMerge: function multiMerge(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  }
};

if (!RCTAsyncStorage.multiMerge) {
  delete AsyncStorage.mergeItem;
  delete AsyncStorage.multiMerge;
}

function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
    return convertError(e);
  });
}

function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out.key = error.key;
  return out;
}

module.exports = AsyncStorage;
}, 301, null, "AsyncStorage");
__d(/* BackAndroid */function(global, require, module, exports) {

'use strict';

var BackHandler = require(300          ); // 300 = BackHandler

var warning = require(45                ); // 45 = fbjs/lib/warning

var BackAndroid = {

  exitApp: function exitApp() {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    BackHandler.exitApp();
  },

  addEventListener: function addEventListener(eventName, handler) {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    return BackHandler.addEventListener(eventName, handler);
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    warning(false, 'BackAndroid is deprecated.  Please use BackHandler instead.');
    BackHandler.removeEventListener(eventName, handler);
  }

};

module.exports = BackAndroid;
}, 302, null, "BackAndroid");
__d(/* CameraRoll */function(global, require, module, exports) {
'use strict';

var PropTypes = require(20          ); // 20 = prop-types
var checkPropTypes = PropTypes.checkPropTypes;

var RCTCameraRollManager = require(30             ).CameraRollManager; // 30 = NativeModules

var createStrictShapeTypeChecker = require(149                           ); // 149 = createStrictShapeTypeChecker
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var GROUP_TYPES_OPTIONS = {
  Album: 'Album',
  All: 'All',
  Event: 'Event',
  Faces: 'Faces',
  Library: 'Library',
  PhotoStream: 'PhotoStream',
  SavedPhotos: 'SavedPhotos' };

var ASSET_TYPE_OPTIONS = {
  All: 'All',
  Videos: 'Videos',
  Photos: 'Photos'
};

var getPhotosParamChecker = createStrictShapeTypeChecker({
  first: PropTypes.number.isRequired,

  after: PropTypes.string,

  groupTypes: PropTypes.oneOf(Object.keys(GROUP_TYPES_OPTIONS)),

  groupName: PropTypes.string,

  assetType: PropTypes.oneOf(Object.keys(ASSET_TYPE_OPTIONS)),

  mimeTypes: PropTypes.arrayOf(PropTypes.string)
});

var getPhotosReturnChecker = createStrictShapeTypeChecker({
  edges: PropTypes.arrayOf(createStrictShapeTypeChecker({
    node: createStrictShapeTypeChecker({
      type: PropTypes.string.isRequired,
      group_name: PropTypes.string.isRequired,
      image: createStrictShapeTypeChecker({
        uri: PropTypes.string.isRequired,
        height: PropTypes.number.isRequired,
        width: PropTypes.number.isRequired,
        isStored: PropTypes.bool,

        playableDuration: PropTypes.number
      }).isRequired,
      timestamp: PropTypes.number.isRequired,
      location: createStrictShapeTypeChecker({
        latitude: PropTypes.number,
        longitude: PropTypes.number,
        altitude: PropTypes.number,
        heading: PropTypes.number,
        speed: PropTypes.number
      })
    }).isRequired
  })).isRequired,
  page_info: createStrictShapeTypeChecker({
    has_next_page: PropTypes.bool.isRequired,
    start_cursor: PropTypes.string,
    end_cursor: PropTypes.string
  }).isRequired
});

var CameraRoll = function () {
  function CameraRoll() {
    babelHelpers.classCallCheck(this, CameraRoll);
  }

  babelHelpers.createClass(CameraRoll, null, [{
    key: 'saveImageWithTag',
    value: function saveImageWithTag(tag) {
      console.warn('`CameraRoll.saveImageWithTag()` is deprecated. Use `CameraRoll.saveToCameraRoll()` instead.');
      return this.saveToCameraRoll(tag, 'photo');
    }
  }, {
    key: 'saveToCameraRoll',
    value: function saveToCameraRoll(tag, type) {
      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');

      invariant(type === 'photo' || type === 'video' || type === undefined, 'The second argument to saveToCameraRoll must be \'photo\' or \'video\'. You passed ' + type);

      var mediaType = 'photo';
      if (type) {
        mediaType = type;
      } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
        mediaType = 'video';
      }

      return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
    }
  }, {
    key: 'getPhotos',
    value: function getPhotos(params) {
      if (__DEV__) {
        checkPropTypes({ params: getPhotosParamChecker }, { params: params }, 'params', 'CameraRoll.getPhotos');
      }
      if (arguments.length > 1) {
        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
        var successCallback = arguments[1];
        if (__DEV__) {
          var callback = arguments[1];
          successCallback = function successCallback(response) {
            checkPropTypes({ response: getPhotosReturnChecker }, { response: response }, 'response', 'CameraRoll.getPhotos callback');
            callback(response);
          };
        }
        var errorCallback = arguments[2] || function () {};
        RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
      }

      return RCTCameraRollManager.getPhotos(params);
    }
  }]);
  return CameraRoll;
}();

CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;


module.exports = CameraRoll;
}, 303, null, "CameraRoll");
__d(/* Clipboard */function(global, require, module, exports) {
'use strict';

var Clipboard = require(30             ).Clipboard; // 30 = NativeModules

module.exports = {
  getString: function getString() {
    return Clipboard.getString();
  },
  setString: function setString(content) {
    Clipboard.setString(content);
  }
};
}, 304, null, "Clipboard");
__d(/* DatePickerAndroid */function(global, require, module, exports) {
'use strict';

var DatePickerAndroid = {
  open: function open(options) {
    return regeneratorRuntime.async(function open$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', Promise.reject({
              message: 'DatePickerAndroid is not supported on this platform.'
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, null, this);
  }
};

module.exports = DatePickerAndroid;
}, 305, null, "DatePickerAndroid");
__d(/* ImagePickerIOS */function(global, require, module, exports) {
'use strict';

var RCTImagePicker = require(30             ).ImagePickerIOS; // 30 = NativeModules

var ImagePickerIOS = {
  canRecordVideos: function canRecordVideos(callback) {
    return RCTImagePicker.canRecordVideos(callback);
  },
  canUseCamera: function canUseCamera(callback) {
    return RCTImagePicker.canUseCamera(callback);
  },
  openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      videoMode: false
    }, config);
    return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
  },
  openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      showImages: true,
      showVideos: false
    }, config);
    return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
  }
};

module.exports = ImagePickerIOS;
}, 306, null, "ImagePickerIOS");
__d(/* Linking */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var NativeModules = require(30             ); // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

var Linking = function (_NativeEventEmitter) {
  babelHelpers.inherits(Linking, _NativeEventEmitter);

  function Linking() {
    babelHelpers.classCallCheck(this, Linking);
    return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
  }

  babelHelpers.createClass(Linking, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      this.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      this.removeListener(type, handler);
    }
  }, {
    key: 'openURL',
    value: function openURL(url) {
      this._validateURL(url);
      return LinkingManager.openURL(url);
    }
  }, {
    key: 'canOpenURL',
    value: function canOpenURL(url) {
      this._validateURL(url);
      return LinkingManager.canOpenURL(url);
    }
  }, {
    key: 'getInitialURL',
    value: function getInitialURL() {
      return LinkingManager.getInitialURL();
    }
  }, {
    key: '_validateURL',
    value: function _validateURL(url) {
      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
      invariant(url, 'Invalid URL: cannot be empty');
    }
  }]);
  return Linking;
}(NativeEventEmitter);

module.exports = new Linking();
}, 307, null, "Linking");
__d(/* NetInfo */function(global, require, module, exports) {
'use strict';

var Map = require(75   ); // 75 = Map
var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var NativeModules = require(30             ); // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform
var RCTNetInfo = NativeModules.NetInfo;

var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);

var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

var _subscriptions = new Map();

var _isConnectedDeprecated = void 0;
if (Platform.OS === 'ios') {
  _isConnectedDeprecated = function _isConnectedDeprecated(reachability) {
    return reachability !== 'none' && reachability !== 'unknown';
  };
} else if (Platform.OS === 'android') {
  _isConnectedDeprecated = function _isConnectedDeprecated(connectionType) {
    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
  };
}

function _isConnected(connection) {
  return connection.type !== 'none' && connection.type !== 'unknown';
}

var _isConnectedSubscriptions = new Map();

var NetInfo = {
  addEventListener: function addEventListener(eventName, handler) {
    var listener = void 0;
    if (eventName === 'connectionChange') {
      listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
        handler({
          type: appStateData.connectionType,
          effectiveType: appStateData.effectiveConnectionType
        });
      });
    } else if (eventName === 'change') {
      console.warn('NetInfo\'s "change" event is deprecated. Listen to the "connectionChange" event instead.');

      listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
        handler(appStateData.network_info);
      });
    } else {
      console.warn('Trying to subscribe to unknown event: "' + eventName + '"');
      return {
        remove: function remove() {}
      };
    }

    _subscriptions.set(handler, listener);
    return {
      remove: function remove() {
        return NetInfo.removeEventListener(eventName, handler);
      }
    };
  },
  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  },
  fetch: function fetch() {
    console.warn('NetInfo.fetch() is deprecated. Use NetInfo.getConnectionInfo() instead.');
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return resp.network_info;
    });
  },
  getConnectionInfo: function getConnectionInfo() {
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return {
        type: resp.connectionType,
        effectiveType: resp.effectiveConnectionType
      };
    });
  },

  isConnected: {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = function listener(connection) {
        if (eventName === 'change') {
          handler(_isConnectedDeprecated(connection));
        } else if (eventName === 'connectionChange') {
          handler(_isConnected(connection));
        }
      };
      _isConnectedSubscriptions.set(handler, listener);
      NetInfo.addEventListener(eventName, listener);
      return {
        remove: function remove() {
          return NetInfo.isConnected.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _isConnectedSubscriptions.get(handler);
      NetInfo.removeEventListener(eventName, listener);
      _isConnectedSubscriptions.delete(handler);
    },
    fetch: function fetch() {
      return NetInfo.getConnectionInfo().then(_isConnected);
    }
  },

  isConnectionExpensive: function isConnectionExpensive() {
    return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
  }
};

module.exports = NetInfo;
}, 308, null, "NetInfo");
__d(/* PushNotificationIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter
var RCTPushNotificationManager = require(30             ).PushNotificationManager; // 30 = NativeModules
var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

var _notifHandlers = new Map();

var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

var PushNotificationIOS = function () {
  babelHelpers.createClass(PushNotificationIOS, null, [{
    key: 'presentLocalNotification',
    value: function presentLocalNotification(details) {
      RCTPushNotificationManager.presentLocalNotification(details);
    }
  }, {
    key: 'scheduleLocalNotification',
    value: function scheduleLocalNotification(details) {
      RCTPushNotificationManager.scheduleLocalNotification(details);
    }
  }, {
    key: 'cancelAllLocalNotifications',
    value: function cancelAllLocalNotifications() {
      RCTPushNotificationManager.cancelAllLocalNotifications();
    }
  }, {
    key: 'removeAllDeliveredNotifications',
    value: function removeAllDeliveredNotifications() {
      RCTPushNotificationManager.removeAllDeliveredNotifications();
    }
  }, {
    key: 'getDeliveredNotifications',
    value: function getDeliveredNotifications(callback) {
      RCTPushNotificationManager.getDeliveredNotifications(callback);
    }
  }, {
    key: 'removeDeliveredNotifications',
    value: function removeDeliveredNotifications(identifiers) {
      RCTPushNotificationManager.removeDeliveredNotifications(identifiers);
    }
  }, {
    key: 'setApplicationIconBadgeNumber',
    value: function setApplicationIconBadgeNumber(number) {
      RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
    }
  }, {
    key: 'getApplicationIconBadgeNumber',
    value: function getApplicationIconBadgeNumber(callback) {
      RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
    }
  }, {
    key: 'cancelLocalNotifications',
    value: function cancelLocalNotifications(userInfo) {
      RCTPushNotificationManager.cancelLocalNotifications(userInfo);
    }
  }, {
    key: 'getScheduledLocalNotifications',
    value: function getScheduledLocalNotifications(callback) {
      RCTPushNotificationManager.getScheduledLocalNotifications(callback);
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener;
      if (type === 'notification') {
        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'localNotification') {
        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'register') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
          handler(registrationInfo.deviceToken);
        });
      } else if (type === 'registrationError') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
          handler(errorInfo);
        });
      }
      _notifHandlers.set(type, listener);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener = _notifHandlers.get(type);
      if (!listener) {
        return;
      }
      listener.remove();
      _notifHandlers.delete(type);
    }
  }, {
    key: 'requestPermissions',
    value: function requestPermissions(permissions) {
      var requestedPermissions = {};
      if (permissions) {
        requestedPermissions = {
          alert: !!permissions.alert,
          badge: !!permissions.badge,
          sound: !!permissions.sound
        };
      } else {
        requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
      }
      return RCTPushNotificationManager.requestPermissions(requestedPermissions);
    }
  }, {
    key: 'abandonPermissions',
    value: function abandonPermissions() {
      RCTPushNotificationManager.abandonPermissions();
    }
  }, {
    key: 'checkPermissions',
    value: function checkPermissions(callback) {
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTPushNotificationManager.checkPermissions(callback);
    }
  }, {
    key: 'getInitialNotification',
    value: function getInitialNotification() {
      return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
        return notification && new PushNotificationIOS(notification);
      });
    }
  }]);

  function PushNotificationIOS(nativeNotif) {
    var _this = this;

    babelHelpers.classCallCheck(this, PushNotificationIOS);

    this._data = {};
    this._remoteNotificationCompleteCallbackCalled = false;
    this._isRemote = nativeNotif.remote;
    if (this._isRemote) {
      this._notificationId = nativeNotif.notificationId;
    }

    if (nativeNotif.remote) {
      Object.keys(nativeNotif).forEach(function (notifKey) {
        var notifVal = nativeNotif[notifKey];
        if (notifKey === 'aps') {
          _this._alert = notifVal.alert;
          _this._sound = notifVal.sound;
          _this._badgeCount = notifVal.badge;
          _this._category = notifVal.category;
          _this._contentAvailable = notifVal['content-available'];
        } else {
          _this._data[notifKey] = notifVal;
        }
      });
    } else {
      this._badgeCount = nativeNotif.applicationIconBadgeNumber;
      this._sound = nativeNotif.soundName;
      this._alert = nativeNotif.alertBody;
      this._data = nativeNotif.userInfo;
      this._category = nativeNotif.category;
    }
  }

  babelHelpers.createClass(PushNotificationIOS, [{
    key: 'finish',
    value: function finish(fetchResult) {
      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCallbackCalled) {
        return;
      }
      this._remoteNotificationCompleteCallbackCalled = true;

      RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
    }
  }, {
    key: 'getMessage',
    value: function getMessage() {
      return this._alert;
    }
  }, {
    key: 'getSound',
    value: function getSound() {
      return this._sound;
    }
  }, {
    key: 'getCategory',
    value: function getCategory() {
      return this._category;
    }
  }, {
    key: 'getAlert',
    value: function getAlert() {
      return this._alert;
    }
  }, {
    key: 'getContentAvailable',
    value: function getContentAvailable() {
      return this._contentAvailable;
    }
  }, {
    key: 'getBadgeCount',
    value: function getBadgeCount() {
      return this._badgeCount;
    }
  }, {
    key: 'getData',
    value: function getData() {
      return this._data;
    }
  }]);
  return PushNotificationIOS;
}();

PushNotificationIOS.FetchResult = {
  NewData: 'UIBackgroundFetchResultNewData',
  NoData: 'UIBackgroundFetchResultNoData',
  ResultFailed: 'UIBackgroundFetchResultFailed'
};


module.exports = PushNotificationIOS;
}, 309, null, "PushNotificationIOS");
__d(/* Settings */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(56                     ); // 56 = RCTDeviceEventEmitter
var RCTSettingsManager = require(30             ).SettingsManager; // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var subscriptions = [];

var Settings = {
  _settings: RCTSettingsManager && RCTSettingsManager.settings,

  get: function get(key) {
    return this._settings[key];
  },
  set: function set(settings) {
    this._settings = babelHelpers.extends(this._settings, settings);
    RCTSettingsManager.setValues(settings);
  },
  watchKeys: function watchKeys(keys, callback) {
    if (typeof keys === 'string') {
      keys = [keys];
    }

    invariant(Array.isArray(keys), 'keys should be a string or array of strings');

    var sid = subscriptions.length;
    subscriptions.push({ keys: keys, callback: callback });
    return sid;
  },
  clearWatch: function clearWatch(watchId) {
    if (watchId < subscriptions.length) {
      subscriptions[watchId] = { keys: [], callback: null };
    }
  },
  _sendObservations: function _sendObservations(body) {
    var _this = this;

    Object.keys(body).forEach(function (key) {
      var newValue = body[key];
      var didChange = _this._settings[key] !== newValue;
      _this._settings[key] = newValue;

      if (didChange) {
        subscriptions.forEach(function (sub) {
          if (sub.keys.indexOf(key) !== -1 && sub.callback) {
            sub.callback();
          }
        });
      }
    });
  }
};

RCTDeviceEventEmitter.addListener('settingsUpdated', Settings._sendObservations.bind(Settings));

module.exports = Settings;
}, 310, null, "Settings");
__d(/* Share */function(global, require, module, exports) {
'use strict';

var Platform = require(38        ); // 38 = Platform

var invariant = require(28                  ); // 28 = fbjs/lib/invariant
var processColor = require(115           ); // 115 = processColor

var _require = require(30             ), // 30 = NativeModules
    ActionSheetManager = _require.ActionSheetManager,
    ShareModule = _require.ShareModule;

var Share = function () {
  function Share() {
    babelHelpers.classCallCheck(this, Share);
  }

  babelHelpers.createClass(Share, null, [{
    key: 'share',
    value: function share(content) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
      invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

      if (Platform.OS === 'android') {
        invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
        return ShareModule.share(content, options.dialogTitle);
      } else if (Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, { tintColor: processColor(options.tintColor) }), function (error) {
            return reject(error);
          }, function (success, activityType) {
            if (success) {
              resolve({
                'action': 'sharedAction',
                'activityType': activityType
              });
            } else {
              resolve({
                'action': 'dismissedAction'
              });
            }
          });
        });
      } else {
        return Promise.reject(new Error('Unsupported platform'));
      }
    }
  }, {
    key: 'sharedAction',
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return Share;
}();

module.exports = Share;
}, 311, null, "Share");
__d(/* StatusBarIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(88                  ); // 88 = NativeEventEmitter

var _require = require(30             ), // 30 = NativeModules
    StatusBarManager = _require.StatusBarManager;

var StatusBarIOS = function (_NativeEventEmitter) {
  babelHelpers.inherits(StatusBarIOS, _NativeEventEmitter);

  function StatusBarIOS() {
    babelHelpers.classCallCheck(this, StatusBarIOS);
    return babelHelpers.possibleConstructorReturn(this, (StatusBarIOS.__proto__ || Object.getPrototypeOf(StatusBarIOS)).apply(this, arguments));
  }

  return StatusBarIOS;
}(NativeEventEmitter);

module.exports = new StatusBarIOS(StatusBarManager);
}, 312, null, "StatusBarIOS");
__d(/* TimePickerAndroid */function(global, require, module, exports) {
'use strict';

var TimePickerAndroid = {
  open: function open(options) {
    return regeneratorRuntime.async(function open$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt('return', Promise.reject({
              message: 'TimePickerAndroid is not supported on this platform.'
            }));

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, null, this);
  }
};

module.exports = TimePickerAndroid;
}, 313, null, "TimePickerAndroid");
__d(/* Vibration */function(global, require, module, exports) {
'use strict';

var RCTVibration = require(30             ).Vibration; // 30 = NativeModules
var Platform = require(38        ); // 38 = Platform

var _vibrating = false;
var _id = 0;

function vibrateByPattern(pattern) {
  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_vibrating) {
    return;
  }
  _vibrating = true;
  if (pattern[0] === 0) {
    RCTVibration.vibrate();
    pattern = pattern.slice(1);
  }
  if (pattern.length === 0) {
    _vibrating = false;
    return;
  }
  setTimeout(function () {
    return vibrateScheduler(++_id, pattern, repeat, 1);
  }, pattern[0]);
}

function vibrateScheduler(id, pattern, repeat, nextIndex) {
  if (!_vibrating || id !== _id) {
    return;
  }
  RCTVibration.vibrate();
  if (nextIndex >= pattern.length) {
    if (repeat) {
      nextIndex = 0;
    } else {
      _vibrating = false;
      return;
    }
  }
  setTimeout(function () {
    return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
  }, pattern[nextIndex]);
}

var Vibration = {
  vibrate: function vibrate() {
    var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (Platform.OS === 'android') {
      if (typeof pattern === 'number') {
        RCTVibration.vibrate(pattern);
      } else if (Array.isArray(pattern)) {
        RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    } else {
      if (_vibrating) {
        return;
      }
      if (typeof pattern === 'number') {
        RCTVibration.vibrate();
      } else if (Array.isArray(pattern)) {
        vibrateByPattern(pattern, repeat);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    }
  },

  cancel: function cancel() {
    if (Platform.OS === 'ios') {
      _vibrating = false;
    } else {
      RCTVibration.cancel();
    }
  }
};

module.exports = Vibration;
}, 314, null, "Vibration");
__d(/* VibrationIOS */function(global, require, module, exports) {
'use strict';

var RCTVibration = require(30             ).Vibration; // 30 = NativeModules

var invariant = require(28                  ); // 28 = fbjs/lib/invariant

var VibrationIOS = {
  vibrate: function vibrate() {
    invariant(arguments[0] === undefined, 'Vibration patterns not supported.');
    RCTVibration.vibrate();
  }
};

module.exports = VibrationIOS;
}, 315, null, "VibrationIOS");
__d(/* takeSnapshot */function(global, require, module, exports) {

'use strict';

var _require = require(65           ), // 65 = ReactNative
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = _require.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

module.exports = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.takeSnapshot;
}, 316, null, "takeSnapshot");
__d(/* react-native-code-push/CodePush.js */function(global, require, module, exports) {var _jsxFileName = "/Users/ronakkothari1/Desktop/Office/example_js/reactnativesamples/poctest/node_modules/react-native-code-push/CodePush.js";

var _acquisitionSdk = require(318                               ); // 318 = code-push/script/acquisition-sdk

var _AlertAdapter = require(319             ); // 319 = ./AlertAdapter

var _requestFetchAdapter = require(320                      ); // 320 = ./request-fetch-adapter

var _requestFetchAdapter2 = babelHelpers.interopRequireDefault(_requestFetchAdapter);

var _reactNative = require(27            ); // 27 = react-native

var _RestartManager = require(322               ); // 322 = ./RestartManager

var _RestartManager2 = babelHelpers.interopRequireDefault(_RestartManager);

var _logging = require(323        ); // 323 = ./logging

var _logging2 = babelHelpers.interopRequireDefault(_logging);

var NativeCodePush = require(27            ).NativeModules.CodePush; // 27 = react-native
var PackageMixins = require(324               )(NativeCodePush); // 324 = ./package-mixins

function checkForUpdate() {
  var deploymentKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var handleBinaryVersionMismatchCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var nativeConfig, config, sdk, localPackage, queryPackage, update, remotePackage;
  return regeneratorRuntime.async(function checkForUpdate$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(getConfiguration());

        case 2:
          nativeConfig = _context.sent;
          config = deploymentKey ? babelHelpers.extends({}, nativeConfig, { deploymentKey: deploymentKey }) : nativeConfig;
          sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context.next = 7;
          return regeneratorRuntime.awrap(module.exports.getCurrentPackage());

        case 7:
          localPackage = _context.sent;
          queryPackage = void 0;

          if (localPackage) {
            queryPackage = localPackage;
          } else {
            queryPackage = { appVersion: config.appVersion };
            if (_reactNative.Platform.OS === "ios" && config.packageHash) {
              queryPackage.packageHash = config.packageHash;
            }
          }

          _context.next = 12;
          return regeneratorRuntime.awrap(sdk.queryUpdateWithCurrentPackage(queryPackage));

        case 12:
          update = _context.sent;

          if (!(!update || update.updateAppVersion || localPackage && update.packageHash === localPackage.packageHash || (!localPackage || localPackage._isDebugOnly) && config.packageHash === update.packageHash)) {
            _context.next = 18;
            break;
          }

          if (update && update.updateAppVersion) {
            (0, _logging2.default)("An update is available but it is not targeting the binary version of your app.");
            if (handleBinaryVersionMismatchCallback && typeof handleBinaryVersionMismatchCallback === "function") {
              handleBinaryVersionMismatchCallback(update);
            }
          }

          return _context.abrupt("return", null);

        case 18:
          remotePackage = babelHelpers.extends({}, update, PackageMixins.remote(sdk.reportStatusDownload));
          _context.next = 21;
          return regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(remotePackage.packageHash));

        case 21:
          remotePackage.failedInstall = _context.sent;

          remotePackage.deploymentKey = deploymentKey || nativeConfig.deploymentKey;
          return _context.abrupt("return", remotePackage);

        case 24:
        case "end":
          return _context.stop();
      }
    }
  }, null, this);
}

var getConfiguration = function () {
  var config = void 0;
  return function getConfiguration() {
    return regeneratorRuntime.async(function getConfiguration$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!config) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", config);

          case 4:
            if (!testConfig) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", testConfig);

          case 8:
            _context2.next = 10;
            return regeneratorRuntime.awrap(NativeCodePush.getConfiguration());

          case 10:
            config = _context2.sent;
            return _context2.abrupt("return", config);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  };
}();

function getCurrentPackage() {
  return regeneratorRuntime.async(function getCurrentPackage$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(getUpdateMetadata(CodePush.UpdateState.LATEST));

        case 2:
          return _context3.abrupt("return", _context3.sent);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, null, this);
}

function getUpdateMetadata(updateState) {
  var updateMetadata;
  return regeneratorRuntime.async(function getUpdateMetadata$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(NativeCodePush.getUpdateMetadata(updateState || CodePush.UpdateState.RUNNING));

        case 2:
          updateMetadata = _context4.sent;

          if (!updateMetadata) {
            _context4.next = 11;
            break;
          }

          updateMetadata = babelHelpers.extends({}, PackageMixins.local, updateMetadata);
          _context4.next = 7;
          return regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(updateMetadata.packageHash));

        case 7:
          updateMetadata.failedInstall = _context4.sent;
          _context4.next = 10;
          return regeneratorRuntime.awrap(NativeCodePush.isFirstRun(updateMetadata.packageHash));

        case 10:
          updateMetadata.isFirstRun = _context4.sent;

        case 11:
          return _context4.abrupt("return", updateMetadata);

        case 12:
        case "end":
          return _context4.stop();
      }
    }
  }, null, this);
}

function getPromisifiedSdk(requestFetchAdapter, config) {
  var sdk = new module.exports.AcquisitionSdk(requestFetchAdapter, config);
  sdk.queryUpdateWithCurrentPackage = function (queryPackage) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.queryUpdateWithCurrentPackage.call(sdk, queryPackage, function (err, update) {
        if (err) {
          reject(err);
        } else {
          resolve(update);
        }
      });
    });
  };

  sdk.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.reportStatusDeploy.call(sdk, deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, function (err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  };

  sdk.reportStatusDownload = function (downloadedPackage) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.reportStatusDownload.call(sdk, downloadedPackage, function (err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  };

  return sdk;
}

var notifyApplicationReady = function () {
  var notifyApplicationReadyPromise = void 0;
  return function () {
    if (!notifyApplicationReadyPromise) {
      notifyApplicationReadyPromise = notifyApplicationReadyInternal();
    }

    return notifyApplicationReadyPromise;
  };
}();

function notifyApplicationReadyInternal() {
  var statusReport;
  return regeneratorRuntime.async(function notifyApplicationReadyInternal$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return regeneratorRuntime.awrap(NativeCodePush.notifyApplicationReady());

        case 2:
          _context5.next = 4;
          return regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());

        case 4:
          statusReport = _context5.sent;

          statusReport && tryReportStatus(statusReport);return _context5.abrupt("return", statusReport);

        case 7:
        case "end":
          return _context5.stop();
      }
    }
  }, null, this);
}

function tryReportStatus(statusReport, _resumeListener) {
  var _this = this;

  var config, previousLabelOrAppVersion, previousDeploymentKey, sdk, label, _sdk;

  return regeneratorRuntime.async(function tryReportStatus$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return regeneratorRuntime.awrap(getConfiguration());

        case 2:
          config = _context7.sent;
          previousLabelOrAppVersion = statusReport.previousLabelOrAppVersion;
          previousDeploymentKey = statusReport.previousDeploymentKey || config.deploymentKey;
          _context7.prev = 5;

          if (!statusReport.appVersion) {
            _context7.next = 13;
            break;
          }

          (0, _logging2.default)("Reporting binary update (" + statusReport.appVersion + ")");

          sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context7.next = 11;
          return regeneratorRuntime.awrap(sdk.reportStatusDeploy(null, null, previousLabelOrAppVersion, previousDeploymentKey));

        case 11:
          _context7.next = 19;
          break;

        case 13:
          label = statusReport.package.label;

          if (statusReport.status === "DeploymentSucceeded") {
            (0, _logging2.default)("Reporting CodePush update success (" + label + ")");
          } else {
            (0, _logging2.default)("Reporting CodePush update rollback (" + label + ")");
          }

          config.deploymentKey = statusReport.package.deploymentKey;
          _sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context7.next = 19;
          return regeneratorRuntime.awrap(_sdk.reportStatusDeploy(statusReport.package, statusReport.status, previousLabelOrAppVersion, previousDeploymentKey));

        case 19:

          NativeCodePush.recordStatusReported(statusReport);
          _resumeListener && _reactNative.AppState.removeEventListener("change", _resumeListener);
          _context7.next = 28;
          break;

        case 23:
          _context7.prev = 23;
          _context7.t0 = _context7["catch"](5);

          (0, _logging2.default)("Report status failed: " + JSON.stringify(statusReport));
          NativeCodePush.saveStatusReportForRetry(statusReport);

          if (!_resumeListener) {
            _resumeListener = function resumeListener(newState) {
              var refreshedStatusReport;
              return regeneratorRuntime.async(function resumeListener$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      if (!(newState !== "active")) {
                        _context6.next = 2;
                        break;
                      }

                      return _context6.abrupt("return");

                    case 2:
                      _context6.next = 4;
                      return regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());

                    case 4:
                      refreshedStatusReport = _context6.sent;

                      if (refreshedStatusReport) {
                        tryReportStatus(refreshedStatusReport, _resumeListener);
                      } else {
                        _reactNative.AppState.removeEventListener("change", _resumeListener);
                      }

                    case 6:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, null, _this);
            };
            _reactNative.AppState.addEventListener("change", _resumeListener);
          }

        case 28:
        case "end":
          return _context7.stop();
      }
    }
  }, null, this, [[5, 23]]);
}

var testConfig;

function setUpTestDependencies(testSdk, providedTestConfig, testNativeBridge) {
  if (testSdk) module.exports.AcquisitionSdk = testSdk;
  if (providedTestConfig) testConfig = providedTestConfig;
  if (testNativeBridge) NativeCodePush = testNativeBridge;
}

var sync = function () {
  var syncInProgress = false;
  var setSyncCompleted = function setSyncCompleted() {
    syncInProgress = false;
  };

  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var syncStatusChangeCallback = arguments[1];
    var downloadProgressCallback = arguments[2];
    var handleBinaryVersionMismatchCallback = arguments[3];

    var syncStatusCallbackWithTryCatch = void 0,
        downloadProgressCallbackkWithTryCatch = void 0;
    if (typeof syncStatusChangeCallback === "function") {
      syncStatusCallbackWithTryCatch = function syncStatusCallbackWithTryCatch() {
        try {
          syncStatusChangeCallback.apply(undefined, arguments);
        } catch (error) {
          (0, _logging2.default)("An error has occurred : " + error.stack);
        }
      };
    }

    if (typeof downloadProgressCallback === "function") {
      downloadProgressCallbackkWithTryCatch = function downloadProgressCallbackkWithTryCatch() {
        try {
          downloadProgressCallback.apply(undefined, arguments);
        } catch (error) {
          (0, _logging2.default)("An error has occurred: " + error.stack);
        }
      };
    }

    if (syncInProgress) {
      typeof syncStatusCallbackWithTryCatch === "function" ? syncStatusCallbackWithTryCatch(CodePush.SyncStatus.SYNC_IN_PROGRESS) : (0, _logging2.default)("Sync already in progress.");
      return Promise.resolve(CodePush.SyncStatus.SYNC_IN_PROGRESS);
    }

    syncInProgress = true;
    var syncPromise = syncInternal(options, syncStatusCallbackWithTryCatch, downloadProgressCallbackkWithTryCatch, handleBinaryVersionMismatchCallback);
    syncPromise.then(setSyncCompleted).catch(setSyncCompleted);

    return syncPromise;
  };
}();

function syncInternal() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var syncStatusChangeCallback = arguments[1];

  var _this2 = this;

  var downloadProgressCallback = arguments[2];
  var handleBinaryVersionMismatchCallback = arguments[3];
  var resolvedInstallMode, syncOptions, remotePackage, doDownloadAndInstall, updateShouldBeIgnored, currentPackage;
  return regeneratorRuntime.async(function syncInternal$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          resolvedInstallMode = void 0;
          syncOptions = babelHelpers.extends({
            deploymentKey: null,
            ignoreFailedUpdates: true,
            installMode: CodePush.InstallMode.ON_NEXT_RESTART,
            mandatoryInstallMode: CodePush.InstallMode.IMMEDIATE,
            minimumBackgroundDuration: 0,
            updateDialog: null
          }, options);


          syncStatusChangeCallback = typeof syncStatusChangeCallback === "function" ? syncStatusChangeCallback : function (syncStatus) {
            switch (syncStatus) {
              case CodePush.SyncStatus.CHECKING_FOR_UPDATE:
                (0, _logging2.default)("Checking for update.");
                break;
              case CodePush.SyncStatus.AWAITING_USER_ACTION:
                (0, _logging2.default)("Awaiting user action.");
                break;
              case CodePush.SyncStatus.DOWNLOADING_PACKAGE:
                (0, _logging2.default)("Downloading package.");
                break;
              case CodePush.SyncStatus.INSTALLING_UPDATE:
                (0, _logging2.default)("Installing update.");
                break;
              case CodePush.SyncStatus.UP_TO_DATE:
                (0, _logging2.default)("App is up to date.");
                break;
              case CodePush.SyncStatus.UPDATE_IGNORED:
                (0, _logging2.default)("User cancelled the update.");
                break;
              case CodePush.SyncStatus.UPDATE_INSTALLED:
                if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESTART) {
                  (0, _logging2.default)("Update is installed and will be run on the next app restart.");
                } else if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESUME) {
                  if (syncOptions.minimumBackgroundDuration > 0) {
                    (0, _logging2.default)("Update is installed and will be run after the app has been in the background for at least " + syncOptions.minimumBackgroundDuration + " seconds.");
                  } else {
                    (0, _logging2.default)("Update is installed and will be run when the app next resumes.");
                  }
                }
                break;
              case CodePush.SyncStatus.UNKNOWN_ERROR:
                (0, _logging2.default)("An unknown error occurred.");
                break;
            }
          };

          _context9.prev = 3;
          _context9.next = 6;
          return regeneratorRuntime.awrap(CodePush.notifyApplicationReady());

        case 6:

          syncStatusChangeCallback(CodePush.SyncStatus.CHECKING_FOR_UPDATE);
          _context9.next = 9;
          return regeneratorRuntime.awrap(checkForUpdate(syncOptions.deploymentKey, handleBinaryVersionMismatchCallback));

        case 9:
          remotePackage = _context9.sent;

          doDownloadAndInstall = function doDownloadAndInstall() {
            var localPackage;
            return regeneratorRuntime.async(function doDownloadAndInstall$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    syncStatusChangeCallback(CodePush.SyncStatus.DOWNLOADING_PACKAGE);
                    _context8.next = 3;
                    return regeneratorRuntime.awrap(remotePackage.download(downloadProgressCallback));

                  case 3:
                    localPackage = _context8.sent;

                    resolvedInstallMode = localPackage.isMandatory ? syncOptions.mandatoryInstallMode : syncOptions.installMode;

                    syncStatusChangeCallback(CodePush.SyncStatus.INSTALLING_UPDATE);
                    _context8.next = 8;
                    return regeneratorRuntime.awrap(localPackage.install(resolvedInstallMode, syncOptions.minimumBackgroundDuration, function () {
                      syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);
                    }));

                  case 8:
                    return _context8.abrupt("return", CodePush.SyncStatus.UPDATE_INSTALLED);

                  case 9:
                  case "end":
                    return _context8.stop();
                }
              }
            }, null, _this2);
          };

          updateShouldBeIgnored = remotePackage && remotePackage.failedInstall && syncOptions.ignoreFailedUpdates;

          if (!(!remotePackage || updateShouldBeIgnored)) {
            _context9.next = 26;
            break;
          }

          if (updateShouldBeIgnored) {
            (0, _logging2.default)("An update is available, but it is being ignored due to having been previously rolled back.");
          }

          _context9.next = 16;
          return regeneratorRuntime.awrap(CodePush.getCurrentPackage());

        case 16:
          currentPackage = _context9.sent;

          if (!(currentPackage && currentPackage.isPending)) {
            _context9.next = 22;
            break;
          }

          syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);
          return _context9.abrupt("return", CodePush.SyncStatus.UPDATE_INSTALLED);

        case 22:
          syncStatusChangeCallback(CodePush.SyncStatus.UP_TO_DATE);
          return _context9.abrupt("return", CodePush.SyncStatus.UP_TO_DATE);

        case 24:
          _context9.next = 36;
          break;

        case 26:
          if (!syncOptions.updateDialog) {
            _context9.next = 33;
            break;
          }

          if (typeof syncOptions.updateDialog !== "object") {
            syncOptions.updateDialog = CodePush.DEFAULT_UPDATE_DIALOG;
          } else {
            syncOptions.updateDialog = babelHelpers.extends({}, CodePush.DEFAULT_UPDATE_DIALOG, syncOptions.updateDialog);
          }

          _context9.next = 30;
          return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
            var message = null;
            var dialogButtons = [{
              text: null,
              onPress: function onPress() {
                doDownloadAndInstall().then(resolve, reject);
              }
            }];

            if (remotePackage.isMandatory) {
              message = syncOptions.updateDialog.mandatoryUpdateMessage;
              dialogButtons[0].text = syncOptions.updateDialog.mandatoryContinueButtonLabel;
            } else {
              message = syncOptions.updateDialog.optionalUpdateMessage;
              dialogButtons[0].text = syncOptions.updateDialog.optionalInstallButtonLabel;

              dialogButtons.push({
                text: syncOptions.updateDialog.optionalIgnoreButtonLabel,
                onPress: function onPress() {
                  syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_IGNORED);
                  resolve(CodePush.SyncStatus.UPDATE_IGNORED);
                }
              });
            }

            if (syncOptions.updateDialog.appendReleaseDescription && remotePackage.description) {
              message += syncOptions.updateDialog.descriptionPrefix + " " + remotePackage.description;
            }

            syncStatusChangeCallback(CodePush.SyncStatus.AWAITING_USER_ACTION);
            _AlertAdapter.Alert.alert(syncOptions.updateDialog.title, message, dialogButtons);
          }));

        case 30:
          return _context9.abrupt("return", _context9.sent);

        case 33:
          _context9.next = 35;
          return regeneratorRuntime.awrap(doDownloadAndInstall());

        case 35:
          return _context9.abrupt("return", _context9.sent);

        case 36:
          _context9.next = 43;
          break;

        case 38:
          _context9.prev = 38;
          _context9.t0 = _context9["catch"](3);

          syncStatusChangeCallback(CodePush.SyncStatus.UNKNOWN_ERROR);
          (0, _logging2.default)(_context9.t0.message);
          throw _context9.t0;

        case 43:
        case "end":
          return _context9.stop();
      }
    }
  }, null, this, [[3, 38]]);
};

var CodePush = void 0;

function codePushify() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var React = void 0;
  var ReactNative = require(27            ); // 27 = react-native

  try {
    React = require(13     ); // 13 = react
  } catch (e) {}
  if (!React) {
    try {
      React = ReactNative.React;
    } catch (e) {}
    if (!React) {
      throw new Error("Unable to find the 'React' module.");
    }
  }

  if (!React.Component) {
    throw new Error("Unable to find the \"Component\" class, please either:\n1. Upgrade to a newer version of React Native that supports it, or\n2. Call the codePush.sync API in your component instead of using the @codePush decorator");
  }

  var decorator = function decorator(RootComponent) {
    return function (_React$Component) {
      babelHelpers.inherits(CodePushComponent, _React$Component);

      function CodePushComponent() {
        babelHelpers.classCallCheck(this, CodePushComponent);
        return babelHelpers.possibleConstructorReturn(this, (CodePushComponent.__proto__ || Object.getPrototypeOf(CodePushComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(CodePushComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (options.checkFrequency === CodePush.CheckFrequency.MANUAL) {
            CodePush.notifyAppReady();
          } else {
            var rootComponentInstance = this.refs.rootComponent;

            var syncStatusCallback = void 0;
            if (rootComponentInstance && rootComponentInstance.codePushStatusDidChange) {
              syncStatusCallback = rootComponentInstance.codePushStatusDidChange;
              if (rootComponentInstance instanceof React.Component) {
                syncStatusCallback = syncStatusCallback.bind(rootComponentInstance);
              }
            }

            var downloadProgressCallback = void 0;
            if (rootComponentInstance && rootComponentInstance.codePushDownloadDidProgress) {
              downloadProgressCallback = rootComponentInstance.codePushDownloadDidProgress;
              if (rootComponentInstance instanceof React.Component) {
                downloadProgressCallback = downloadProgressCallback.bind(rootComponentInstance);
              }
            }

            var handleBinaryVersionMismatchCallback = void 0;
            if (rootComponentInstance && rootComponentInstance.codePushOnBinaryVersionMismatch) {
              handleBinaryVersionMismatchCallback = rootComponentInstance.codePushOnBinaryVersionMismatch;
              if (rootComponentInstance instanceof React.Component) {
                handleBinaryVersionMismatchCallback = handleBinaryVersionMismatchCallback.bind(rootComponentInstance);
              }
            }

            CodePush.sync(options, syncStatusCallback, downloadProgressCallback, handleBinaryVersionMismatchCallback);
            if (options.checkFrequency === CodePush.CheckFrequency.ON_APP_RESUME) {
              ReactNative.AppState.addEventListener("change", function (newState) {
                newState === "active" && CodePush.sync(options, syncStatusCallback, downloadProgressCallback);
              });
            }
          }
        }
      }, {
        key: "render",
        value: function render() {
          var props = babelHelpers.extends({}, this.props);

          if (RootComponent.prototype.render) {
            props.ref = "rootComponent";
          }

          return React.createElement(RootComponent, babelHelpers.extends({}, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 503
            }
          }));
        }
      }]);
      return CodePushComponent;
    }(React.Component);
  };

  if (typeof options === "function") {
    return decorator(options);
  } else {
    return decorator;
  }
}

if (NativeCodePush) {
  CodePush = codePushify;
  babelHelpers.extends(CodePush, {
    AcquisitionSdk: _acquisitionSdk.AcquisitionManager,
    checkForUpdate: checkForUpdate,
    getConfiguration: getConfiguration,
    getCurrentPackage: getCurrentPackage,
    getUpdateMetadata: getUpdateMetadata,
    log: _logging2.default,
    notifyAppReady: notifyApplicationReady,
    notifyApplicationReady: notifyApplicationReady,
    restartApp: _RestartManager2.default.restartApp,
    setUpTestDependencies: setUpTestDependencies,
    sync: sync,
    disallowRestart: _RestartManager2.default.disallow,
    allowRestart: _RestartManager2.default.allow,
    InstallMode: {
      IMMEDIATE: NativeCodePush.codePushInstallModeImmediate,
      ON_NEXT_RESTART: NativeCodePush.codePushInstallModeOnNextRestart,
      ON_NEXT_RESUME: NativeCodePush.codePushInstallModeOnNextResume,
      ON_NEXT_SUSPEND: NativeCodePush.codePushInstallModeOnNextSuspend },
    SyncStatus: {
      UP_TO_DATE: 0,
      UPDATE_INSTALLED: 1,
      UPDATE_IGNORED: 2,
      UNKNOWN_ERROR: 3,
      SYNC_IN_PROGRESS: 4,
      CHECKING_FOR_UPDATE: 5,
      AWAITING_USER_ACTION: 6,
      DOWNLOADING_PACKAGE: 7,
      INSTALLING_UPDATE: 8
    },
    CheckFrequency: {
      ON_APP_START: 0,
      ON_APP_RESUME: 1,
      MANUAL: 2
    },
    UpdateState: {
      RUNNING: NativeCodePush.codePushUpdateStateRunning,
      PENDING: NativeCodePush.codePushUpdateStatePending,
      LATEST: NativeCodePush.codePushUpdateStateLatest
    },
    DeploymentStatus: {
      FAILED: "DeploymentFailed",
      SUCCEEDED: "DeploymentSucceeded"
    },
    DEFAULT_UPDATE_DIALOG: {
      appendReleaseDescription: false,
      descriptionPrefix: " Description: ",
      mandatoryContinueButtonLabel: "Continue",
      mandatoryUpdateMessage: "An update is available that must be installed.",
      optionalIgnoreButtonLabel: "Ignore",
      optionalInstallButtonLabel: "Install",
      optionalUpdateMessage: "An update is available. Would you like to install it?",
      title: "Update available"
    }
  });
} else {
  (0, _logging2.default)("The CodePush module doesn't appear to be properly installed. Please double-check that everything is setup correctly.");
}

module.exports = CodePush;
}, 317, null, "react-native-code-push/CodePush.js");
__d(/* code-push/script/acquisition-sdk.js */function(global, require, module, exports) {
var AcquisitionStatus = function () {
    function AcquisitionStatus() {}
    AcquisitionStatus.DeploymentSucceeded = "DeploymentSucceeded";
    AcquisitionStatus.DeploymentFailed = "DeploymentFailed";
    return AcquisitionStatus;
}();
exports.AcquisitionStatus = AcquisitionStatus;
var AcquisitionManager = function () {
    function AcquisitionManager(httpRequester, configuration) {
        this._httpRequester = httpRequester;
        this._serverUrl = configuration.serverUrl;
        if (this._serverUrl.slice(-1) !== "/") {
            this._serverUrl += "/";
        }
        this._appVersion = configuration.appVersion;
        this._clientUniqueId = configuration.clientUniqueId;
        this._deploymentKey = configuration.deploymentKey;
        this._ignoreAppVersion = configuration.ignoreAppVersion;
    }
    AcquisitionManager.prototype.queryUpdateWithCurrentPackage = function (currentPackage, callback) {
        var _this = this;
        if (!currentPackage || !currentPackage.appVersion) {
            throw new Error("Calling common acquisition SDK with incorrect package");
        }
        var updateRequest = {
            deploymentKey: this._deploymentKey,
            appVersion: currentPackage.appVersion,
            packageHash: currentPackage.packageHash,
            isCompanion: this._ignoreAppVersion,
            label: currentPackage.label,
            clientUniqueId: this._clientUniqueId
        };
        var requestUrl = this._serverUrl + "updateCheck?" + queryStringify(updateRequest);
        this._httpRequester.request(0, requestUrl, function (error, response) {
            if (error) {
                callback(error, null);
                return;
            }
            if (response.statusCode !== 200) {
                callback(new Error(response.statusCode + ": " + response.body), null);
                return;
            }
            try {
                var responseObject = JSON.parse(response.body);
                var updateInfo = responseObject.updateInfo;
            } catch (error) {
                callback(error, null);
                return;
            }
            if (!updateInfo) {
                callback(error, null);
                return;
            } else if (updateInfo.updateAppVersion) {
                callback(null, { updateAppVersion: true, appVersion: updateInfo.appVersion });
                return;
            } else if (!updateInfo.isAvailable) {
                callback(null, null);
                return;
            }
            var remotePackage = {
                deploymentKey: _this._deploymentKey,
                description: updateInfo.description,
                label: updateInfo.label,
                appVersion: updateInfo.appVersion,
                isMandatory: updateInfo.isMandatory,
                packageHash: updateInfo.packageHash,
                packageSize: updateInfo.packageSize,
                downloadUrl: updateInfo.downloadURL
            };
            callback(null, remotePackage);
        });
    };
    AcquisitionManager.prototype.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, callback) {
        var url = this._serverUrl + "reportStatus/deploy";
        var body = {
            appVersion: this._appVersion,
            deploymentKey: this._deploymentKey
        };
        if (this._clientUniqueId) {
            body.clientUniqueId = this._clientUniqueId;
        }
        if (deployedPackage) {
            body.label = deployedPackage.label;
            body.appVersion = deployedPackage.appVersion;
            switch (status) {
                case AcquisitionStatus.DeploymentSucceeded:
                case AcquisitionStatus.DeploymentFailed:
                    body.status = status;
                    break;
                default:
                    if (callback) {
                        if (!status) {
                            callback(new Error("Missing status argument."), null);
                        } else {
                            callback(new Error("Unrecognized status \"" + status + "\"."), null);
                        }
                    }
                    return;
            }
        }
        if (previousLabelOrAppVersion) {
            body.previousLabelOrAppVersion = previousLabelOrAppVersion;
        }
        if (previousDeploymentKey) {
            body.previousDeploymentKey = previousDeploymentKey;
        }
        callback = typeof arguments[arguments.length - 1] === "function" && arguments[arguments.length - 1];
        this._httpRequester.request(2, url, JSON.stringify(body), function (error, response) {
            if (callback) {
                if (error) {
                    callback(error, null);
                    return;
                }
                if (response.statusCode !== 200) {
                    callback(new Error(response.statusCode + ": " + response.body), null);
                    return;
                }
                callback(null, null);
            }
        });
    };
    AcquisitionManager.prototype.reportStatusDownload = function (downloadedPackage, callback) {
        var url = this._serverUrl + "reportStatus/download";
        var body = {
            clientUniqueId: this._clientUniqueId,
            deploymentKey: this._deploymentKey,
            label: downloadedPackage.label
        };
        this._httpRequester.request(2, url, JSON.stringify(body), function (error, response) {
            if (callback) {
                if (error) {
                    callback(error, null);
                    return;
                }
                if (response.statusCode !== 200) {
                    callback(new Error(response.statusCode + ": " + response.body), null);
                    return;
                }
                callback(null, null);
            }
        });
    };
    return AcquisitionManager;
}();
exports.AcquisitionManager = AcquisitionManager;
function queryStringify(object) {
    var queryString = "";
    var isFirst = true;
    for (var property in object) {
        if (object.hasOwnProperty(property)) {
            var value = object[property];
            if (!isFirst) {
                queryString += "&";
            }
            queryString += encodeURIComponent(property) + "=";
            if (value !== null && typeof value !== "undefined") {
                queryString += encodeURIComponent(value);
            }
            isFirst = false;
        }
    }
    return queryString;
}
}, 318, null, "code-push/script/acquisition-sdk.js");
__d(/* react-native-code-push/AlertAdapter.js */function(global, require, module, exports) {var _reactNative = require(27            ); // 27 = react-native

var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

var Alert = _reactNative2.default.Alert;


if (_reactNative.Platform.OS === "android") {
  var CodePushDialog = _reactNative2.default.NativeModules.CodePushDialog;


  Alert = {
    alert: function alert(title, message, buttons) {
      if (buttons.length > 2) {
        throw "Can only show 2 buttons for Android dialog.";
      }

      var button1Text = buttons[0] ? buttons[0].text : null,
          button2Text = buttons[1] ? buttons[1].text : null;

      CodePushDialog.showDialog(title, message, button1Text, button2Text, function (buttonId) {
        buttons[buttonId].onPress && buttons[buttonId].onPress();
      }, function (error) {
        throw error;
      });
    }
  };
}

module.exports = { Alert: Alert };
}, 319, null, "react-native-code-push/AlertAdapter.js");
__d(/* react-native-code-push/request-fetch-adapter.js */function(global, require, module, exports) {var packageJson = require(321             ); // 321 = ./package.json

module.exports = {
  request: function request(verb, url, requestBody, callback) {
    var headers, response, statusCode, body;
    return regeneratorRuntime.async(function request$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (typeof requestBody === "function") {
              callback = requestBody;
              requestBody = null;
            }

            headers = {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CodePush-Plugin-Name": packageJson.name,
              "X-CodePush-Plugin-Version": packageJson.version,
              "X-CodePush-SDK-Version": packageJson.dependencies["code-push"]
            };


            if (requestBody && typeof requestBody === "object") {
              requestBody = JSON.stringify(requestBody);
            }

            _context.prev = 3;
            _context.next = 6;
            return regeneratorRuntime.awrap(fetch(url, {
              method: getHttpMethodName(verb),
              headers: headers,
              body: requestBody
            }));

          case 6:
            response = _context.sent;
            statusCode = response.status;
            _context.next = 10;
            return regeneratorRuntime.awrap(response.text());

          case 10:
            body = _context.sent;

            callback(null, { statusCode: statusCode, body: body });
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);

            callback(_context.t0);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[3, 14]]);
  }
};

function getHttpMethodName(verb) {
  return ["GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "OPTIONS", "CONNECT", "PATCH"][verb];
}
}, 320, null, "react-native-code-push/request-fetch-adapter.js");
__d(/* react-native-code-push/package.json */function(global, require, module, exports) {module.exports = module.exports = {
  "name": "react-native-code-push",
  "version": "5.1.3-beta",
  "description": "React Native plugin for the CodePush service",
  "main": "CodePush.js",
  "typings": "typings/react-native-code-push.d.ts",
  "homepage": "https://microsoft.github.io/code-push",
  "keywords": ["react-native", "code", "push"],
  "author": "Microsoft Corporation",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/Microsoft/react-native-code-push"
  },
  "dependencies": {
    "code-push": "1.11.2-beta",
    "glob": "^5.0.15",
    "inquirer": "1.1.2",
    "plist": "1.2.0",
    "xcode": "0.9.2"
  },
  "devDependencies": {
    "archiver": "latest",
    "body-parser": "latest",
    "code-push-plugin-testing-framework": "file:./code-push-plugin-testing-framework",
    "del": "latest",
    "express": "latest",
    "gulp-insert": "latest",
    "gulp-tslint": "latest",
    "gulp-typescript": "2.12.2",
    "mkdirp": "latest",
    "q": "^1.4.1",
    "run-sequence": "latest",
    "tslint": "^4.3.1",
    "typescript": "^2.1.5"
  },
  "rnpm": {
    "android": {
      "packageInstance": "new CodePush(${androidDeploymentKey}, getApplicationContext(), BuildConfig.DEBUG)"
    },
    "ios": {
      "sharedLibraries": ["libz"]
    },
    "params": [{
      "type": "input",
      "name": "androidDeploymentKey",
      "message": "What is your CodePush deployment key for Android (hit <ENTER> to ignore)"
    }],
    "commands": {
      "postlink": "node node_modules/react-native-code-push/scripts/postlink/run"
    }
  }
};
}, 321, null, "react-native-code-push/package.json");
__d(/* react-native-code-push/RestartManager.js */function(global, require, module, exports) {var log = require(323        ); // 323 = ./logging
var NativeCodePush = require(27            ).NativeModules.CodePush; // 27 = react-native

var RestartManager = function () {
    var _allowed = true;
    var _restartInProgress = false;
    var _restartQueue = [];

    function allow() {
        log("Re-allowing restarts");
        _allowed = true;

        if (_restartQueue.length) {
            log("Executing pending restart");
            restartApp(_restartQueue.shift(1));
        }
    }

    function clearPendingRestart() {
        _restartQueue = [];
    }

    function disallow() {
        log("Disallowing restarts");
        _allowed = false;
    }

    function restartApp() {
        var onlyIfUpdateIsPending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return regeneratorRuntime.async(function restartApp$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!_restartInProgress) {
                            _context.next = 5;
                            break;
                        }

                        log("Restart request queued until the current restart is completed");
                        _restartQueue.push(onlyIfUpdateIsPending);
                        _context.next = 18;
                        break;

                    case 5:
                        if (_allowed) {
                            _context.next = 10;
                            break;
                        }

                        log("Restart request queued until restarts are re-allowed");
                        _restartQueue.push(onlyIfUpdateIsPending);
                        _context.next = 18;
                        break;

                    case 10:
                        _restartInProgress = true;
                        _context.next = 13;
                        return regeneratorRuntime.awrap(NativeCodePush.restartApp(onlyIfUpdateIsPending));

                    case 13:
                        if (!_context.sent) {
                            _context.next = 16;
                            break;
                        }

                        log("Restarting app");
                        return _context.abrupt("return");

                    case 16:

                        _restartInProgress = false;
                        if (_restartQueue.length) {
                            restartApp(_restartQueue.shift(1));
                        }

                    case 18:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, this);
    }

    return {
        allow: allow,
        clearPendingRestart: clearPendingRestart,
        disallow: disallow,
        restartApp: restartApp
    };
}();

module.exports = RestartManager;
}, 322, null, "react-native-code-push/RestartManager.js");
__d(/* react-native-code-push/logging.js */function(global, require, module, exports) {
function log(message) {
  console.log("[CodePush] " + message);
}

module.exports = log;
}, 323, null, "react-native-code-push/logging.js");
__d(/* react-native-code-push/package-mixins.js */function(global, require, module, exports) {var _acquisitionSdk = require(318                               ); // 318 = code-push/script/acquisition-sdk

var _reactNative = require(27            ); // 27 = react-native

var _RestartManager = require(322               ); // 322 = ./RestartManager

var _RestartManager2 = babelHelpers.interopRequireDefault(_RestartManager);

module.exports = function (NativeCodePush) {
  var remote = function remote(reportStatusDownload) {
    return {
      download: function download(downloadProgressCallback) {
        var downloadProgressSubscription, codePushEventEmitter, updatePackageCopy, downloadedPackage;
        return regeneratorRuntime.async(function download$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.downloadUrl) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Cannot download an update without a download url");

              case 2:
                downloadProgressSubscription = void 0;

                if (downloadProgressCallback) {
                  codePushEventEmitter = new _reactNative.NativeEventEmitter(NativeCodePush);

                  downloadProgressSubscription = codePushEventEmitter.addListener("CodePushDownloadProgress", downloadProgressCallback);
                }

                _context.prev = 4;
                updatePackageCopy = babelHelpers.extends({}, this);

                Object.keys(updatePackageCopy).forEach(function (key) {
                  return typeof updatePackageCopy[key] === 'function' && delete updatePackageCopy[key];
                });

                _context.next = 9;
                return regeneratorRuntime.awrap(NativeCodePush.downloadUpdate(updatePackageCopy, !!downloadProgressCallback));

              case 9:
                downloadedPackage = _context.sent;

                reportStatusDownload && reportStatusDownload(this);
                return _context.abrupt("return", babelHelpers.extends({}, downloadedPackage, local));

              case 12:
                _context.prev = 12;

                downloadProgressSubscription && downloadProgressSubscription.remove();
                return _context.finish(12);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[4,, 12, 15]]);
      },


      isPending: false };
  };

  var local = {
    install: function install() {
      var installMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NativeCodePush.codePushInstallModeOnNextRestart;
      var minimumBackgroundDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var updateInstalledCallback = arguments[2];
      var localPackage, localPackageCopy;
      return regeneratorRuntime.async(function install$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              localPackage = this;
              localPackageCopy = babelHelpers.extends({}, localPackage);
              _context2.next = 4;
              return regeneratorRuntime.awrap(NativeCodePush.installUpdate(localPackageCopy, installMode, minimumBackgroundDuration));

            case 4:
              updateInstalledCallback && updateInstalledCallback();
              if (installMode == NativeCodePush.codePushInstallModeImmediate) {
                _RestartManager2.default.restartApp(false);
              } else {
                _RestartManager2.default.clearPendingRestart();
                localPackage.isPending = true;
              }

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },


    isPending: false };

  return { local: local, remote: remote };
};
}, 324, null, "react-native-code-push/package-mixins.js");
__d(/* poctest/code.js */function(global, require, module, exports) {var _output = require(326                 ); // 326 = ./template1/output

var _output2 = babelHelpers.interopRequireDefault(_output);

var _output3 = require(327                 ); // 327 = ./template2/output

var _output4 = babelHelpers.interopRequireDefault(_output3);

module.exports = {
  bundle1: _output2.default,
  bundle2: _output4.default
};
}, 325, null, "poctest/code.js");
__d(/* poctest/template1/output.js */function(global, require, module, exports) {module.exports = function (modules) {
	var installedModules = {};

	function __webpack_require__(moduleId) {
		if (installedModules[moduleId]) return installedModules[moduleId].exports;

		var module = installedModules[moduleId] = { exports: {},
			id: moduleId,
			loaded: false
		};

		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

		module.loaded = true;

		return module.exports;
	}

	__webpack_require__.m = modules;

	__webpack_require__.c = installedModules;

	__webpack_require__.p = "/";

	return __webpack_require__(0);
}([function (module, exports, __webpack_require__) {

	'use strict';
	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
			}
		}return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
	}();var _react = __webpack_require__(1);var _react2 = _interopRequireDefault(_react);var _reactNative = __webpack_require__(2);var _file = __webpack_require__(3);var _file2 = _interopRequireDefault(_file);function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}function _possibleConstructorReturn(self, call) {
		if (!self) {
			throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
		}return call && (typeof call === "object" || typeof call === "function") ? call : self;
	}function _inherits(subClass, superClass) {
		if (typeof superClass !== "function" && superClass !== null) {
			throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
		}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	}var First = function (_React$Component) {
		_inherits(First, _React$Component);function First() {
			_classCallCheck(this, First);return _possibleConstructorReturn(this, (First.__proto__ || Object.getPrototypeOf(First)).apply(this, arguments));
		}_createClass(First, [{ key: 'render', value: function render() {
				return _react2.default.createElement(_reactNative.View, null, _react2.default.createElement(_reactNative.Text, null, "Component1 from template1"), _react2.default.createElement(_file2.default, null));
			} }]);return First;
	}(_react2.default.Component);module.exports = First;
}, function (module, exports) {

	module.exports = React;
}, function (module, exports) {

	module.exports = ReactNative;
}, function (module, exports, __webpack_require__) {

	'use strict';
	var _react = __webpack_require__(1);var _react2 = _interopRequireDefault(_react);var _reactNative = __webpack_require__(2);function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}var Main = function Main() {
		return _react2.default.createElement(_reactNative.Text, null, 'Component 2 here');
	};module.exports = Main;
}]);
}, 326, null, "poctest/template1/output.js");
__d(/* poctest/template2/output.js */function(global, require, module, exports) {module.exports = function (modules) {
  var installedModules = {};
  function __webpack_require__(moduleId) {
    if (installedModules[moduleId]) {
      return installedModules[moduleId].exports;
    }
    var module = installedModules[moduleId] = { i: moduleId,
      l: false,
      exports: {}
    };
    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    module.l = true;
    return module.exports;
  }
  __webpack_require__.m = modules;
  __webpack_require__.c = installedModules;
  __webpack_require__.d = function (exports, name, getter) {
    if (!__webpack_require__.o(exports, name)) {
      Object.defineProperty(exports, name, { configurable: false,
        enumerable: true,
        get: getter
      });
    }
  };
  __webpack_require__.n = function (module) {
    var getter = module && module.__esModule ? function getDefault() {
      return module['default'];
    } : function getModuleExports() {
      return module;
    };
    __webpack_require__.d(getter, 'a', getter);
    return getter;
  };
  __webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  __webpack_require__.p = "/";
  return __webpack_require__(__webpack_require__.s = 106);
}([function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _assign = __webpack_require__(50);

  var _assign2 = _interopRequireDefault(_assign);

  var _keys = __webpack_require__(156);

  var _keys2 = _interopRequireDefault(_keys);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var merge = __webpack_require__(160);

  function filterProps() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var _settings = {};
    var _filtered = ['propSettings'];

    (0, _keys2.default)(settings).forEach(function (key) {
      if (!_filtered.includes(key)) _settings[key] = settings[key];
    });

    return _settings;
  }

  function getArraySetting(settings, i) {
    if (!Array.isArray(settings)) return {};
    if (i >= settings.length) return {};
    return settings[i];
  }

  exports.inspectPropTypes = function inspectPropTypes(propTypes) {
    var propSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var _propTypes = {};

    (0, _keys2.default)(propTypes).forEach(function (key) {
      var prop = propTypes[key].__sprinklr__;

      var settingKey = key === 'childrenPropTypes' ? 'childrenPropSettings' : key;
      var setting = propSettings[settingKey] || {};

      var _prop = {};

      _prop.type = prop.type;
      _prop.isRequired = prop.isRequired;

      switch (_prop.type) {
        case 'arrayOf':
        case 'objectOf':
          _prop = merge(_prop, filterProps(setting));
          if (prop.propTypes) _prop[_prop.type] = inspectPropTypes({ _array_or_object_of_: prop.propTypes }, setting.propSettings)._array_or_object_of_;
          break;

        case 'instanceOf':
        case 'oneOf':
          _prop = merge(_prop, filterProps(setting));
          if (prop.propTypes) _prop[_prop.type] = prop.propTypes;
          break;

        case 'oneOfType':
          _prop = merge(_prop, filterProps(setting));
          if (prop.propTypes) _prop[_prop.type] = prop.propTypes.map(function (p, i) {
            return inspectPropTypes({ _one_of_type_: p }, getArraySetting(setting.propSettings, i))._one_of_type_;
          });
          break;

        case 'shape':
          _prop = merge(_prop, filterProps(setting));
          if (prop.propTypes) _prop[_prop.type] = inspectPropTypes(prop.propTypes, setting.propSettings);
          break;

        default:
          if (key === '_array_or_object_of_' || key === '_one_of_type_') {
            _prop = merge(_prop, propSettings);
          } else {
            _prop = merge(_prop, setting);
          }
      }

      _propTypes[key] = _prop;
    });

    return _propTypes;
  };

  exports.identifyPropTypes = function identifyPropTypes(propTypes) {
    var functors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var ignore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

    (0, _keys2.default)(propTypes).forEach(function (name) {
      if (ignore.includes(name)) {
        return;
      }

      if (functors.includes(name)) {
        var _propType = propTypes[name];

        propTypes[name] = function (args) {
          var instance = _propType(args);

          (0, _assign2.default)(instance, {
            __sprinklr__: {
              type: name,
              isRequired: false,
              propTypes: args
            }
          });

          (0, _assign2.default)(instance.isRequired, {
            __sprinklr__: {
              type: name,
              isRequired: true,
              propTypes: args
            }
          });

          return instance;
        };
      } else {
        (0, _assign2.default)(propTypes[name], {
          __sprinklr__: {
            type: name,
            isRequired: false
          }
        });

        (0, _assign2.default)(propTypes[name].isRequired, {
          __sprinklr__: {
            type: name,
            isRequired: true
          }
        });
      }
    });

    return propTypes;
  };

  var ANONYMOUS = '<<anonymous>>';

  exports.createChainableTypeChecker = function createChainableTypeChecker(validate) {
    function checkType(isRequired, props, propName, componentName, location, propFullName) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (typeof props[propName] === 'undefined' || props[propName] === null) {
        if (isRequired) {
          return new Error('The `' + propFullName + '` is marked as required in `' + componentName + '`, but its value is not present.');
        }
        return null;
      }

      return validate(props, propName, componentName, location, propFullName);
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  };

  exports.objectPropValidate = function objectPropValidate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  exports.__esModule = true;

  var _iterator = __webpack_require__(140);

  var _iterator2 = _interopRequireDefault(_iterator);

  var _symbol = __webpack_require__(85);

  var _symbol2 = _interopRequireDefault(_symbol);

  var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
  };

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
  } : function (obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
  };
}, function (module, exports, __webpack_require__) {

  var store = __webpack_require__(46)('wks'),
      uid = __webpack_require__(27),
      Symbol = __webpack_require__(3).Symbol,
      USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && (typeof Symbol === 'function' ? Symbol[name] : '@@name') || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;
}, function (module, exports) {
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number') __g = global;
}, function (module, exports) {

  var core = module.exports = { version: '2.4.0' };
  if (typeof __e == 'number') __e = core;
}, function (module, exports, __webpack_require__) {

  var freeGlobal = __webpack_require__(89);

  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  var root = freeGlobal || freeSelf || Function('return this')();

  module.exports = root;
}, function (module, exports) {
  var isArray = Array.isArray;

  module.exports = isArray;
}, function (module, exports, __webpack_require__) {

  var anObject = __webpack_require__(17),
      IE8_DOM_DEFINE = __webpack_require__(75),
      toPrimitive = __webpack_require__(40),
      dP = Object.defineProperty;

  exports.f = __webpack_require__(8) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
}, function (module, exports, __webpack_require__) {
  module.exports = !__webpack_require__(11)(function () {
    return Object.defineProperty({}, 'a', { get: function get() {
        return 7;
      } }).a != 7;
  });
}, function (module, exports, __webpack_require__) {

  var dP = __webpack_require__(7),
      createDesc = __webpack_require__(26);
  module.exports = __webpack_require__(8) ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
}, function (module, exports) {
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
}, function (module, exports) {

  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
}, function (module, exports) {

  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
}, function (module, exports, __webpack_require__) {
  var IObject = __webpack_require__(42),
      defined = __webpack_require__(24);
  module.exports = function (it) {
    return IObject(defined(it));
  };
}, function (module, exports, __webpack_require__) {

  var baseIsNative = __webpack_require__(172),
      getValue = __webpack_require__(178);

  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
}, function (module, exports) {
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  module.exports = isObjectLike;
}, function (module, exports, __webpack_require__) {

  var global = __webpack_require__(3),
      core = __webpack_require__(4),
      ctx = __webpack_require__(25),
      hide = __webpack_require__(9),
      PROTOTYPE = 'prototype';

  var $export = function $export(type, name, source) {
    var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        IS_WRAP = type & $export.W,
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        expProto = exports[PROTOTYPE],
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
        key,
        own,
        out;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      own = !IS_FORCED && target && target[key] !== undefined;
      if (own && key in exports) continue;

      out = own ? target[key] : source[key];

      exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
        var F = function F(a, b, c) {
          if (this instanceof C) {
            switch (arguments.length) {
              case 0:
                return new C();
              case 1:
                return new C(a);
              case 2:
                return new C(a, b);
            }return new C(a, b, c);
          }return C.apply(this, arguments);
        };
        F[PROTOTYPE] = C[PROTOTYPE];
        return F;
      }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

      if (IS_PROTO) {
        (exports.virtual || (exports.virtual = {}))[key] = out;

        if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
      }
    }
  };

  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  module.exports = $export;
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(18);
  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
}, function (module, exports) {

  module.exports = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
}, function (module, exports, __webpack_require__) {
  var $keys = __webpack_require__(78),
      enumBugKeys = __webpack_require__(47);

  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
}, function (module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(33),
      getRawTag = __webpack_require__(174),
      objectToString = __webpack_require__(175);

  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }

  module.exports = baseGetTag;
}, function (module, exports) {

  module.exports = {};
}, function (module, exports) {
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
}, function (module, exports, __webpack_require__) {

  var isFunction = __webpack_require__(59),
      isLength = __webpack_require__(65);

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
}, function (module, exports) {
  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
}, function (module, exports, __webpack_require__) {
  var aFunction = __webpack_require__(111);
  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function () {
      return fn.apply(that, arguments);
    };
  };
}, function (module, exports) {

  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
}, function (module, exports) {

  var id = 0,
      px = Math.random();
  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
}, function (module, exports, __webpack_require__) {

  var def = __webpack_require__(7).f,
      has = __webpack_require__(12),
      TAG = __webpack_require__(2)('toStringTag');

  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };
}, function (module, exports, __webpack_require__) {
  var defined = __webpack_require__(24);
  module.exports = function (it) {
    return Object(defined(it));
  };
}, function (module, exports) {

  exports.f = {}.propertyIsEnumerable;
}, function (module, exports, __webpack_require__) {

  var listCacheClear = __webpack_require__(162),
      listCacheDelete = __webpack_require__(163),
      listCacheGet = __webpack_require__(164),
      listCacheHas = __webpack_require__(165),
      listCacheSet = __webpack_require__(166);

  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  module.exports = ListCache;
}, function (module, exports, __webpack_require__) {

  var eq = __webpack_require__(22);

  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  module.exports = assocIndexOf;
}, function (module, exports, __webpack_require__) {

  var root = __webpack_require__(5);

  var Symbol = root.Symbol;

  module.exports = Symbol;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14);

  var nativeCreate = getNative(Object, 'create');

  module.exports = nativeCreate;
}, function (module, exports, __webpack_require__) {

  var isKeyable = __webpack_require__(187);

  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
}, function (module, exports, __webpack_require__) {

  var isSymbol = __webpack_require__(72);

  var INFINITY = 1 / 0;

  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
}, function (module, exports) {
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var LIBRARY = __webpack_require__(39),
      $export = __webpack_require__(16),
      redefine = __webpack_require__(77),
      hide = __webpack_require__(9),
      has = __webpack_require__(12),
      Iterators = __webpack_require__(21),
      $iterCreate = __webpack_require__(112),
      setToStringTag = __webpack_require__(28),
      getPrototypeOf = __webpack_require__(117),
      ITERATOR = __webpack_require__(2)('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()),
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';

  var returnThis = function returnThis() {
    return this;
  };

  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function getMethod(kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
        $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
        methods,
        key,
        IteratorPrototype;

    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype) {
        setToStringTag(IteratorPrototype, TAG, true);

        if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }

    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() {
        return $native.call(this);
      };
    }

    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }

    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
}, function (module, exports) {

  module.exports = true;
}, function (module, exports, __webpack_require__) {
  var isObject = __webpack_require__(18);

  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
}, function (module, exports, __webpack_require__) {
  var anObject = __webpack_require__(17),
      dPs = __webpack_require__(113),
      enumBugKeys = __webpack_require__(47),
      IE_PROTO = __webpack_require__(45)('IE_PROTO'),
      Empty = function Empty() {},
      PROTOTYPE = 'prototype';

  var _createDict = function createDict() {
    var iframe = __webpack_require__(76)('iframe'),
        i = enumBugKeys.length,
        lt = '<',
        gt = '>',
        iframeDocument;
    iframe.style.display = 'none';
    __webpack_require__(116).appendChild(iframe);
    iframe.src = 'javascript:';
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    _createDict = iframeDocument.F;
    while (i--) {
      delete _createDict[PROTOTYPE][enumBugKeys[i]];
    }return _createDict();
  };

  module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;

      result[IE_PROTO] = O;
    } else result = _createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };
}, function (module, exports, __webpack_require__) {
  var cof = __webpack_require__(43);
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
}, function (module, exports) {

  var toString = {}.toString;

  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
}, function (module, exports, __webpack_require__) {
  var toInteger = __webpack_require__(37),
      min = Math.min;
  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
  };
}, function (module, exports, __webpack_require__) {

  var shared = __webpack_require__(46)('keys'),
      uid = __webpack_require__(27);
  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
}, function (module, exports, __webpack_require__) {

  var global = __webpack_require__(3),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function (key) {
    return store[key] || (store[key] = {});
  };
}, function (module, exports) {
  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
}, function (module, exports, __webpack_require__) {

  var ctx = __webpack_require__(25),
      call = __webpack_require__(122),
      isArrayIter = __webpack_require__(123),
      anObject = __webpack_require__(17),
      toLength = __webpack_require__(44),
      getIterFn = __webpack_require__(124),
      BREAK = {},
      RETURN = {};
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () {
      return iterable;
    } : getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator,
        result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');

    if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = call(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
}, function (module, exports, __webpack_require__) {

  var META = __webpack_require__(27)('meta'),
      isObject = __webpack_require__(18),
      has = __webpack_require__(12),
      setDesc = __webpack_require__(7).f,
      id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !__webpack_require__(11)(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function setMeta(it) {
    setDesc(it, META, { value: {
        i: 'O' + ++id,
        w: {} } });
  };
  var fastKey = function fastKey(it, create) {
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
      if (!isExtensible(it)) return 'F';

      if (!create) return 'E';

      setMeta(it);
    }return it[META].i;
  };
  var getWeak = function getWeak(it, create) {
    if (!has(it, META)) {
      if (!isExtensible(it)) return true;

      if (!create) return false;

      setMeta(it);
    }return it[META].w;
  };

  var onFreeze = function onFreeze(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(136), __esModule: true };
}, function (module, exports) {

  exports.f = Object.getOwnPropertySymbols;
}, function (module, exports, __webpack_require__) {

  exports.f = __webpack_require__(2);
}, function (module, exports, __webpack_require__) {

  var global = __webpack_require__(3),
      core = __webpack_require__(4),
      LIBRARY = __webpack_require__(39),
      wksExt = __webpack_require__(52),
      defineProperty = __webpack_require__(7).f;
  module.exports = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function () {
    return this;
  };
  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  module.exports = emptyFunction;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var validateFormat = function validateFormat(format) {};

  if (true) {
    validateFormat = function validateFormat(format) {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument');
      }
    };
  }

  function invariant(condition, format, a, b, c, d, e, f) {
    validateFormat(format);

    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function () {
          return args[argIndex++];
        }));
        error.name = 'Invariant Violation';
      }

      error.framesToPop = 1;
      throw error;
    }
  }

  module.exports = invariant;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

  module.exports = ReactPropTypesSecret;
}, function (module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(31),
      stackClear = __webpack_require__(167),
      stackDelete = __webpack_require__(168),
      stackGet = __webpack_require__(169),
      stackHas = __webpack_require__(170),
      stackSet = __webpack_require__(171);

  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  module.exports = Stack;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14),
      root = __webpack_require__(5);

  var Map = getNative(root, 'Map');

  module.exports = Map;
}, function (module, exports, __webpack_require__) {

  var baseGetTag = __webpack_require__(20),
      isObject = __webpack_require__(10);

  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }

    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  module.exports = isFunction;
}, function (module, exports, __webpack_require__) {

  var mapCacheClear = __webpack_require__(179),
      mapCacheDelete = __webpack_require__(186),
      mapCacheGet = __webpack_require__(188),
      mapCacheHas = __webpack_require__(189),
      mapCacheSet = __webpack_require__(190);

  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  module.exports = MapCache;
}, function (module, exports, __webpack_require__) {

  var defineProperty = __webpack_require__(92);

  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  module.exports = baseAssignValue;
}, function (module, exports) {

  module.exports = function (module) {
    if (!module.webpackPolyfill) {
      module.deprecate = function () {};
      module.paths = [];

      if (!module.children) module.children = [];
      Object.defineProperty(module, "loaded", {
        enumerable: true,
        get: function get() {
          return module.l;
        }
      });
      Object.defineProperty(module, "id", {
        enumerable: true,
        get: function get() {
          return module.i;
        }
      });
      module.webpackPolyfill = 1;
    }
    return module;
  };
}, function (module, exports) {
  var objectProto = Object.prototype;

  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

    return value === proto;
  }

  module.exports = isPrototype;
}, function (module, exports, __webpack_require__) {

  var baseIsArguments = __webpack_require__(199),
      isObjectLike = __webpack_require__(15);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  var isArguments = baseIsArguments(function () {
    return arguments;
  }()) ? baseIsArguments : function (value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
  };

  module.exports = isArguments;
}, function (module, exports) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
}, function (module, exports, __webpack_require__) {
  (function (module) {
    var root = __webpack_require__(5),
        stubFalse = __webpack_require__(201);

    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    var moduleExports = freeModule && freeModule.exports === freeExports;

    var Buffer = moduleExports ? root.Buffer : undefined;

    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
  }).call(exports, __webpack_require__(62)(module));
}, function (module, exports, __webpack_require__) {

  var baseIsTypedArray = __webpack_require__(203),
      baseUnary = __webpack_require__(204),
      nodeUtil = __webpack_require__(205);

  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  module.exports = isTypedArray;
}, function (module, exports) {
  var MAX_SAFE_INTEGER = 9007199254740991;

  var reIsUint = /^(?:0|[1-9]\d*)$/;

  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
}, function (module, exports) {
  function identity(value) {
    return value;
  }

  module.exports = identity;
}, function (module, exports, __webpack_require__) {

  var arrayLikeKeys = __webpack_require__(98),
      baseKeys = __webpack_require__(246),
      isArrayLike = __webpack_require__(23);

  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
}, function (module, exports, __webpack_require__) {

  var isArray = __webpack_require__(6),
      isSymbol = __webpack_require__(72);

  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
}, function (module, exports, __webpack_require__) {

  var baseGetTag = __webpack_require__(20),
      isObjectLike = __webpack_require__(15);

  var symbolTag = '[object Symbol]';

  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
  }

  module.exports = isSymbol;
}, function (module, exports) {}, function (module, exports, __webpack_require__) {

  "use strict";

  var $at = __webpack_require__(110)(true);

  __webpack_require__(38)(String, 'String', function (iterated) {
    this._t = String(iterated);
    this._i = 0;
  }, function () {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at(O, index);
    this._i += point.length;
    return { value: point, done: false };
  });
}, function (module, exports, __webpack_require__) {

  module.exports = !__webpack_require__(8) && !__webpack_require__(11)(function () {
    return Object.defineProperty(__webpack_require__(76)('div'), 'a', { get: function get() {
        return 7;
      } }).a != 7;
  });
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(18),
      document = __webpack_require__(3).document,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
}, function (module, exports, __webpack_require__) {

  module.exports = __webpack_require__(9);
}, function (module, exports, __webpack_require__) {

  var has = __webpack_require__(12),
      toIObject = __webpack_require__(13),
      arrayIndexOf = __webpack_require__(114)(false),
      IE_PROTO = __webpack_require__(45)('IE_PROTO');

  module.exports = function (object, names) {
    var O = toIObject(object),
        i = 0,
        result = [],
        key;
    for (key in O) {
      if (key != IE_PROTO) has(O, key) && result.push(key);
    }
    while (names.length > i) {
      if (has(O, key = names[i++])) {
        ~arrayIndexOf(result, key) || result.push(key);
      }
    }return result;
  };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(118);
  var global = __webpack_require__(3),
      hide = __webpack_require__(9),
      Iterators = __webpack_require__(21),
      TO_STRING_TAG = __webpack_require__(2)('toStringTag');

  for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
    var NAME = collections[i],
        Collection = global[NAME],
        proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
  }
}, function (module, exports) {

  module.exports = function (done, value) {
    return { value: value, done: !!done };
  };
}, function (module, exports, __webpack_require__) {

  var hide = __webpack_require__(9);
  module.exports = function (target, src, safe) {
    for (var key in src) {
      if (safe && target[key]) target[key] = src[key];else hide(target, key, src[key]);
    }return target;
  };
}, function (module, exports) {

  module.exports = function (it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }return it;
  };
}, function (module, exports, __webpack_require__) {
  var cof = __webpack_require__(43),
      TAG = __webpack_require__(2)('toStringTag'),
      ARG = cof(function () {
    return arguments;
  }()) == 'Arguments';

  var tryGet = function tryGet(it, key) {
    try {
      return it[key];
    } catch (e) {}
  };

  module.exports = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
}, function (module, exports, __webpack_require__) {
  var cof = __webpack_require__(43);
  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(142), __esModule: true };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var global = __webpack_require__(3),
      has = __webpack_require__(12),
      DESCRIPTORS = __webpack_require__(8),
      $export = __webpack_require__(16),
      redefine = __webpack_require__(77),
      META = __webpack_require__(49).KEY,
      $fails = __webpack_require__(11),
      shared = __webpack_require__(46),
      setToStringTag = __webpack_require__(28),
      uid = __webpack_require__(27),
      wks = __webpack_require__(2),
      wksExt = __webpack_require__(52),
      wksDefine = __webpack_require__(53),
      keyOf = __webpack_require__(143),
      enumKeys = __webpack_require__(144),
      isArray = __webpack_require__(84),
      anObject = __webpack_require__(17),
      toIObject = __webpack_require__(13),
      toPrimitive = __webpack_require__(40),
      createDesc = __webpack_require__(26),
      _create = __webpack_require__(41),
      gOPNExt = __webpack_require__(145),
      $GOPD = __webpack_require__(146),
      $DP = __webpack_require__(7),
      $keys = __webpack_require__(19),
      gOPD = $GOPD.f,
      dP = $DP.f,
      gOPN = gOPNExt.f,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      PROTOTYPE = 'prototype',
      HIDDEN = wks('_hidden'),
      TO_PRIMITIVE = wks('toPrimitive'),
      isEnum = {}.propertyIsEnumerable,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      OPSymbols = shared('op-symbols'),
      ObjectProto = Object[PROTOTYPE],
      USE_NATIVE = typeof $Symbol == 'function',
      QObject = global.QObject;

  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  var setSymbolDesc = DESCRIPTORS && $fails(function () {
    return _create(dP({}, 'a', {
      get: function get() {
        return dP(this, 'a', { value: 7 }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function wrap(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create(D, { enumerable: createDesc(0, false) });
      }return setSymbolDesc(it, key, D);
    }return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i) {
      $defineProperty(it, key = keys[i++], P[key]);
    }return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto,
        names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }return result;
  };

  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function $set(value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    __webpack_require__(87).f = gOPNExt.f = $getOwnPropertyNames;
    __webpack_require__(30).f = $propertyIsEnumerable;
    __webpack_require__(51).f = $getOwnPropertySymbols;

    if (DESCRIPTORS && !__webpack_require__(39)) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

  for (var symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) {
    wks(symbols[i++]);
  }for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) {
    wksDefine(symbols[i++]);
  }$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    'for': function _for(key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },

    keyFor: function keyFor(key) {
      if (isSymbol(key)) return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function useSetter() {
      setter = true;
    },
    useSimple: function useSimple() {
      setter = false;
    }
  });

  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    create: $create,

    defineProperty: $defineProperty,

    defineProperties: $defineProperties,

    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,

    getOwnPropertyNames: $getOwnPropertyNames,

    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
    var S = $Symbol();

    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      if (it === undefined || isSymbol(it)) return;
      var args = [it],
          i = 1,
          replacer,
          $replacer;
      while (arguments.length > i) {
        args.push(arguments[i++]);
      }replacer = args[1];
      if (typeof replacer == 'function') $replacer = replacer;
      if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
        if ($replacer) value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  $Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(9)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);

  setToStringTag($Symbol, 'Symbol');

  setToStringTag(Math, 'Math', true);

  setToStringTag(global.JSON, 'JSON', true);
}, function (module, exports, __webpack_require__) {
  var $keys = __webpack_require__(78),
      hiddenKeys = __webpack_require__(47).concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var emptyFunction = __webpack_require__(54);

  var warning = emptyFunction;

  if (true) {
    (function () {
      var printWarning = function printWarning(format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });
        if (typeof console !== 'undefined') {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {}
      };

      warning = function warning(condition, format) {
        if (format === undefined) {
          throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (format.indexOf('Failed Composite propType: ') === 0) {
          return;
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    })();
  }

  module.exports = warning;
}, function (module, exports, __webpack_require__) {
  (function (global) {
    var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

    module.exports = freeGlobal;
  }).call(exports, __webpack_require__(173));
}, function (module, exports) {
  var funcProto = Function.prototype;

  var funcToString = funcProto.toString;

  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return func + '';
      } catch (e) {}
    }
    return '';
  }

  module.exports = toSource;
}, function (module, exports, __webpack_require__) {

  var baseAssignValue = __webpack_require__(61),
      eq = __webpack_require__(22);

  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignMergeValue;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14);

  var defineProperty = function () {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }();

  module.exports = defineProperty;
}, function (module, exports, __webpack_require__) {

  var createBaseFor = __webpack_require__(191);

  var baseFor = createBaseFor();

  module.exports = baseFor;
}, function (module, exports, __webpack_require__) {

  var root = __webpack_require__(5);

  var Uint8Array = root.Uint8Array;

  module.exports = Uint8Array;
}, function (module, exports, __webpack_require__) {

  var overArg = __webpack_require__(96);

  var getPrototype = overArg(Object.getPrototypeOf, Object);

  module.exports = getPrototype;
}, function (module, exports) {
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
}, function (module, exports, __webpack_require__) {

  var arrayLikeKeys = __webpack_require__(98),
      baseKeysIn = __webpack_require__(210),
      isArrayLike = __webpack_require__(23);

  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
}, function (module, exports, __webpack_require__) {

  var baseTimes = __webpack_require__(209),
      isArguments = __webpack_require__(64),
      isArray = __webpack_require__(6),
      isBuffer = __webpack_require__(66),
      isIndex = __webpack_require__(68),
      isTypedArray = __webpack_require__(67);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = arrayLikeKeys;
}, function (module, exports, __webpack_require__) {

  var eq = __webpack_require__(22),
      isArrayLike = __webpack_require__(23),
      isIndex = __webpack_require__(68),
      isObject = __webpack_require__(10);

  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }
    return false;
  }

  module.exports = isIterateeCall;
}, function (module, exports, __webpack_require__) {

  var baseIsEqualDeep = __webpack_require__(252),
      isObjectLike = __webpack_require__(15);

  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  module.exports = baseIsEqual;
}, function (module, exports, __webpack_require__) {

  var SetCache = __webpack_require__(253),
      arraySome = __webpack_require__(256),
      cacheHas = __webpack_require__(257);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }

    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

    stack.set(array, other);
    stack.set(other, array);

    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }

      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            return seen.push(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(10);

  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;
}, function (module, exports) {
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  module.exports = matchesStrictComparable;
}, function (module, exports, __webpack_require__) {

  var castPath = __webpack_require__(105),
      toKey = __webpack_require__(36);

  function baseGet(object, path) {
    path = castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
}, function (module, exports, __webpack_require__) {

  var isArray = __webpack_require__(6),
      isKey = __webpack_require__(71),
      stringToPath = __webpack_require__(276),
      toString = __webpack_require__(279);

  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString(value));
  }

  module.exports = castPath;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var twitterCard = __webpack_require__(107);


  module.exports = twitterCard;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _set = __webpack_require__(108);

  var _set2 = _interopRequireDefault(_set);

  var _reactNative = __webpack_require__(133);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var React = __webpack_require__(134),
      PropTypes = __webpack_require__(135);

  var TwitterCard = function TwitterCard(props) {
    var name = props.name;
    var bio = props.bio;
    var profileImageUrl = props.profileImageUrl;

    return React.createElement(_reactNative.View, null, React.createElement(_reactNative.Text, null, name), React.createElement(_reactNative.Text, null, bio), React.createElement(_reactNative.Image, { source: { uri: profileImageUrl }, style: { width: 100, height: 100 } }));
  };

  TwitterCard.propTypes = {
    shareWith: PropTypes.select,
    name: PropTypes.string,
    bio: PropTypes.string,
    profileImageUrl: PropTypes.url,
    content: PropTypes.editorWithPicker
  };

  TwitterCard.propSettings = {
    shareWith: {
      apiKey: 'LKP_VISIBILITY',
      label: 'Share with',
      placeHolder: 'Share with',
      isRequired: true,
      options: [{
        name: 'Public',
        value: 'public'
      }, {
        name: 'Connections',
        value: 'private'
      }]
    },
    content: {
      label: 'Message',
      isRequired: true,
      pickerDirections: ['top'],
      constraints: { charLimit: function charLimit(locale, resources) {
          return resources.charLimit;
        } },
      charCounter: function charCounter(value) {
        return calc(_isString(value) ? value : _get(value, 'message', ''), 'LINKEDIN');
      },
      checkEmpty: function checkEmpty(value) {
        return !_get(value, 'message');
      },
      linkPreviewsSupported: true,
      markDirty: true
    },
    name: {
      display: false
    },
    bio: {
      display: false
    },
    profileImageUrl: {
      display: false
    }
  };

  TwitterCard.defaultProps = {
    name: 'User Name',
    bio: 'User Detail',
    profileImageUrl: '//sprcdn-assets.sprinklr.com/1/profile-a74f6bfa-784f-416a-9e68-40d36d4910de-176564324.png'
  };

  TwitterCard.parseDataForApi = function (templateData) {
    return {
      message: templateData.content.message,
      attachment: templateData.content.attachment
    };
  };

  TwitterCard.parseDataForPublisher = function (messageContent) {
    return {};
  };

  var additionalPropertiesList = new _set2.default(['LKP_VISIBILITY']);

  TwitterCard.parseAdditionalDataForApi = function (templateData, allFields) {
    return {};
  };

  TwitterCard.parseAdditionalDataForPublisher = function (messageContent, fields) {
    return {};
  };

  module.exports = TwitterCard;
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(109), __esModule: true };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(73);
  __webpack_require__(74);
  __webpack_require__(79);
  __webpack_require__(120);
  __webpack_require__(130);
  module.exports = __webpack_require__(4).Set;
}, function (module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(37),
      defined = __webpack_require__(24);

  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
}, function (module, exports) {

  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var create = __webpack_require__(41),
      descriptor = __webpack_require__(26),
      setToStringTag = __webpack_require__(28),
      IteratorPrototype = {};

  __webpack_require__(9)(IteratorPrototype, __webpack_require__(2)('iterator'), function () {
    return this;
  });

  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
}, function (module, exports, __webpack_require__) {

  var dP = __webpack_require__(7),
      anObject = __webpack_require__(17),
      getKeys = __webpack_require__(19);

  module.exports = __webpack_require__(8) ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties),
        length = keys.length,
        i = 0,
        P;
    while (length > i) {
      dP.f(O, P = keys[i++], Properties[P]);
    }return O;
  };
}, function (module, exports, __webpack_require__) {
  var toIObject = __webpack_require__(13),
      toLength = __webpack_require__(44),
      toIndex = __webpack_require__(115);
  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this),
          length = toLength(O.length),
          index = toIndex(fromIndex, length),
          value;

      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
      } else for (; length > index; index++) {
        if (IS_INCLUDES || index in O) {
          if (O[index] === el) return IS_INCLUDES || index || 0;
        }
      }return !IS_INCLUDES && -1;
    };
  };
}, function (module, exports, __webpack_require__) {

  var toInteger = __webpack_require__(37),
      max = Math.max,
      min = Math.min;
  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
}, function (module, exports, __webpack_require__) {

  module.exports = __webpack_require__(3).document && document.documentElement;
}, function (module, exports, __webpack_require__) {
  var has = __webpack_require__(12),
      toObject = __webpack_require__(29),
      IE_PROTO = __webpack_require__(45)('IE_PROTO'),
      ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }return O instanceof Object ? ObjectProto : null;
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var addToUnscopables = __webpack_require__(119),
      step = __webpack_require__(80),
      Iterators = __webpack_require__(21),
      toIObject = __webpack_require__(13);

  module.exports = __webpack_require__(38)(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated);
    this._i = 0;
    this._k = kind;
  }, function () {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
}, function (module, exports) {

  module.exports = function () {};
}, function (module, exports, __webpack_require__) {

  "use strict";

  var strong = __webpack_require__(121);

  module.exports = __webpack_require__(126)('Set', function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    add: function add(value) {
      return strong.def(this, value = value === 0 ? 0 : value, value);
    }
  }, strong);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var dP = __webpack_require__(7).f,
      create = __webpack_require__(41),
      redefineAll = __webpack_require__(81),
      ctx = __webpack_require__(25),
      anInstance = __webpack_require__(82),
      defined = __webpack_require__(24),
      forOf = __webpack_require__(48),
      $iterDefine = __webpack_require__(38),
      step = __webpack_require__(80),
      setSpecies = __webpack_require__(125),
      DESCRIPTORS = __webpack_require__(8),
      fastKey = __webpack_require__(49).fastKey,
      SIZE = DESCRIPTORS ? '_s' : 'size';

  var getEntry = function getEntry(that, key) {
    var index = fastKey(key),
        entry;
    if (index !== 'F') return that._i[index];

    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };

  module.exports = {
    getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = create(null);
        that._f = undefined;
        that._l = undefined;
        that[SIZE] = 0;
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        clear: function clear() {
          for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },

        'delete': function _delete(key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE]--;
          }return !!entry;
        },

        forEach: function forEach(callbackfn) {
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
              entry;
          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this);

            while (entry && entry.r) {
              entry = entry.p;
            }
          }
        },

        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if (DESCRIPTORS) dP(C.prototype, 'size', {
        get: function get() {
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function def(that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;

      if (entry) {
        entry.v = value;
      } else {
        that._l = entry = {
          i: index = fastKey(key, true),
          k: key,
          v: value,
          p: prev = that._l,
          n: undefined,
          r: false };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE]++;

        if (index !== 'F') that._i[index] = entry;
      }return that;
    },
    getEntry: getEntry,
    setStrong: function setStrong(C, NAME, IS_MAP) {
      $iterDefine(C, NAME, function (iterated, kind) {
        this._t = iterated;
        this._k = kind;
        this._l = undefined;
      }, function () {
        var that = this,
            kind = that._k,
            entry = that._l;

        while (entry && entry.r) {
          entry = entry.p;
        }
        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          that._t = undefined;
          return step(1);
        }

        if (kind == 'keys') return step(0, entry.k);
        if (kind == 'values') return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      setSpecies(NAME);
    }
  };
}, function (module, exports, __webpack_require__) {
  var anObject = __webpack_require__(17);
  module.exports = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) anObject(ret.call(iterator));
      throw e;
    }
  };
}, function (module, exports, __webpack_require__) {
  var Iterators = __webpack_require__(21),
      ITERATOR = __webpack_require__(2)('iterator'),
      ArrayProto = Array.prototype;

  module.exports = function (it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
}, function (module, exports, __webpack_require__) {

  var classof = __webpack_require__(83),
      ITERATOR = __webpack_require__(2)('iterator'),
      Iterators = __webpack_require__(21);
  module.exports = __webpack_require__(4).getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var global = __webpack_require__(3),
      core = __webpack_require__(4),
      dP = __webpack_require__(7),
      DESCRIPTORS = __webpack_require__(8),
      SPECIES = __webpack_require__(2)('species');

  module.exports = function (KEY) {
    var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
      configurable: true,
      get: function get() {
        return this;
      }
    });
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var global = __webpack_require__(3),
      $export = __webpack_require__(16),
      meta = __webpack_require__(49),
      fails = __webpack_require__(11),
      hide = __webpack_require__(9),
      redefineAll = __webpack_require__(81),
      forOf = __webpack_require__(48),
      anInstance = __webpack_require__(82),
      isObject = __webpack_require__(18),
      setToStringTag = __webpack_require__(28),
      dP = __webpack_require__(7).f,
      each = __webpack_require__(127)(0),
      DESCRIPTORS = __webpack_require__(8);

  module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
      new C().entries().next();
    }))) {
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      C = wrapper(function (target, iterable) {
        anInstance(target, C, NAME, '_c');
        target._c = new Base();
        if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
      });
      each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
        var IS_ADDER = KEY == 'add' || KEY == 'set';
        if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
          anInstance(this, C, KEY);
          if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
          var result = this._c[KEY](a === 0 ? 0 : a, b);
          return IS_ADDER ? this : result;
        });
      });
      if ('size' in proto) dP(C.prototype, 'size', {
        get: function get() {
          return this._c.size;
        }
      });
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F, O);

    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

    return C;
  };
}, function (module, exports, __webpack_require__) {
  var ctx = __webpack_require__(25),
      IObject = __webpack_require__(42),
      toObject = __webpack_require__(29),
      toLength = __webpack_require__(44),
      asc = __webpack_require__(128);
  module.exports = function (TYPE, $create) {
    var IS_MAP = TYPE == 1,
        IS_FILTER = TYPE == 2,
        IS_SOME = TYPE == 3,
        IS_EVERY = TYPE == 4,
        IS_FIND_INDEX = TYPE == 6,
        NO_HOLES = TYPE == 5 || IS_FIND_INDEX,
        create = $create || asc;
    return function ($this, callbackfn, that) {
      var O = toObject($this),
          self = IObject(O),
          f = ctx(callbackfn, that, 3),
          length = toLength(self.length),
          index = 0,
          result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined,
          val,
          res;
      for (; length > index; index++) {
        if (NO_HOLES || index in self) {
          val = self[index];
          res = f(val, index, O);
          if (TYPE) {
            if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
                case 3:
                  return true;
                case 5:
                  return val;
                case 6:
                  return index;
                case 2:
                  result.push(val);} else if (IS_EVERY) return false;
          }
        }
      }return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };
}, function (module, exports, __webpack_require__) {
  var speciesConstructor = __webpack_require__(129);

  module.exports = function (original, length) {
    return new (speciesConstructor(original))(length);
  };
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(18),
      isArray = __webpack_require__(84),
      SPECIES = __webpack_require__(2)('species');

  module.exports = function (original) {
    var C;
    if (isArray(original)) {
      C = original.constructor;

      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    }return C === undefined ? Array : C;
  };
}, function (module, exports, __webpack_require__) {
  var $export = __webpack_require__(16);

  $export($export.P + $export.R, 'Set', { toJSON: __webpack_require__(131)('Set') });
}, function (module, exports, __webpack_require__) {
  var classof = __webpack_require__(83),
      from = __webpack_require__(132);
  module.exports = function (NAME) {
    return function toJSON() {
      if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };
}, function (module, exports, __webpack_require__) {

  var forOf = __webpack_require__(48);

  module.exports = function (iter, ITERATOR) {
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };
}, function (module, exports) {

  module.exports = ReactNative;
}, function (module, exports) {

  module.exports = React;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _assign = __webpack_require__(50);

  var _assign2 = _interopRequireDefault(_assign);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var ReactPropTypes = __webpack_require__(139);
  var SprinklrPropTypes = __webpack_require__(154);

  var _require = __webpack_require__(0);

  var identifyPropTypes = _require.identifyPropTypes;
  var inspectPropTypes = _require.inspectPropTypes;

  var PropTypes = (0, _assign2.default)({}, identifyPropTypes(SprinklrPropTypes.PropTypes, SprinklrPropTypes.functors), identifyPropTypes(ReactPropTypes.PropTypes, ReactPropTypes.functors, ReactPropTypes.ignore), { inspectPropTypes: inspectPropTypes });

  module.exports = PropTypes;
}, function (module, exports, __webpack_require__) {

  __webpack_require__(137);
  module.exports = __webpack_require__(4).Object.assign;
}, function (module, exports, __webpack_require__) {
  var $export = __webpack_require__(16);

  $export($export.S + $export.F, 'Object', { assign: __webpack_require__(138) });
}, function (module, exports, __webpack_require__) {

  "use strict";

  var getKeys = __webpack_require__(19),
      gOPS = __webpack_require__(51),
      pIE = __webpack_require__(30),
      toObject = __webpack_require__(29),
      IObject = __webpack_require__(42),
      $assign = Object.assign;

  module.exports = !$assign || __webpack_require__(11)(function () {
    var A = {},
        B = {},
        S = Symbol(),
        K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    var T = toObject(target),
        aLen = arguments.length,
        index = 1,
        getSymbols = gOPS.f,
        isEnum = pIE.f;
    while (aLen > index) {
      var S = IObject(arguments[index++]),
          keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
          length = keys.length,
          j = 0,
          key;
      while (length > j) {
        if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
      }
    }return T;
  } : $assign;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _assign = __webpack_require__(50);

  var _assign2 = _interopRequireDefault(_assign);

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  var _for = __webpack_require__(149);

  var _for2 = _interopRequireDefault(_for);

  var _symbol = __webpack_require__(85);

  var _symbol2 = _interopRequireDefault(_symbol);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var factoryWithThrowingShims = __webpack_require__(151);
  var factoryWithTypeCheckers = __webpack_require__(152);

  var PropTypes = void 0;

  if (true) {
    var REACT_ELEMENT_TYPE = typeof _symbol2.default === 'function' && _for2.default && (0, _for2.default)('react.element') || 0xeac7;

    var isValidElement = function isValidElement(object) {
      return (typeof object === 'undefined' ? 'undefined' : (0, _typeof3.default)(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    };

    var throwOnDirectAccess = true;

    PropTypes = factoryWithTypeCheckers(isValidElement, throwOnDirectAccess);
  } else {
    PropTypes = factoryWithThrowingShims();
  }

  module.exports = (0, _assign2.default)({
    functors: ['arrayOf', 'instanceOf', 'objectOf', 'oneOf', 'oneOfType', 'shape'],
    ignore: ['PropTypes', 'checkPropTypes']
  }, { PropTypes: PropTypes });
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(141), __esModule: true };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(74);
  __webpack_require__(79);
  module.exports = __webpack_require__(52).f('iterator');
}, function (module, exports, __webpack_require__) {

  __webpack_require__(86);
  __webpack_require__(73);
  __webpack_require__(147);
  __webpack_require__(148);
  module.exports = __webpack_require__(4).Symbol;
}, function (module, exports, __webpack_require__) {

  var getKeys = __webpack_require__(19),
      toIObject = __webpack_require__(13);
  module.exports = function (object, el) {
    var O = toIObject(object),
        keys = getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index) {
      if (O[key = keys[index++]] === el) return key;
    }
  };
}, function (module, exports, __webpack_require__) {
  var getKeys = __webpack_require__(19),
      gOPS = __webpack_require__(51),
      pIE = __webpack_require__(30);
  module.exports = function (it) {
    var result = getKeys(it),
        getSymbols = gOPS.f;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = pIE.f,
          i = 0,
          key;
      while (symbols.length > i) {
        if (isEnum.call(it, key = symbols[i++])) result.push(key);
      }
    }return result;
  };
}, function (module, exports, __webpack_require__) {
  var toIObject = __webpack_require__(13),
      gOPN = __webpack_require__(87).f,
      toString = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function getWindowNames(it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
}, function (module, exports, __webpack_require__) {

  var pIE = __webpack_require__(30),
      createDesc = __webpack_require__(26),
      toIObject = __webpack_require__(13),
      toPrimitive = __webpack_require__(40),
      has = __webpack_require__(12),
      IE8_DOM_DEFINE = __webpack_require__(75),
      gOPD = Object.getOwnPropertyDescriptor;

  exports.f = __webpack_require__(8) ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
      return gOPD(O, P);
    } catch (e) {}
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
  };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(53)('asyncIterator');
}, function (module, exports, __webpack_require__) {

  __webpack_require__(53)('observable');
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(150), __esModule: true };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(86);
  module.exports = __webpack_require__(4).Symbol['for'];
}, function (module, exports, __webpack_require__) {

  "use strict";

  var emptyFunction = __webpack_require__(54);
  var invariant = __webpack_require__(55);
  var ReactPropTypesSecret = __webpack_require__(56);

  module.exports = function () {
    function shim(props, propName, componentName, location, propFullName, secret) {
      if (secret === ReactPropTypesSecret) {
        return;
      }
      invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
    };
    shim.isRequired = shim;
    function getShim() {
      return shim;
    };

    var ReactPropTypes = {
      array: shim,
      bool: shim,
      func: shim,
      number: shim,
      object: shim,
      string: shim,
      symbol: shim,

      any: shim,
      arrayOf: getShim,
      element: shim,
      instanceOf: getShim,
      node: shim,
      objectOf: getShim,
      oneOf: getShim,
      oneOfType: getShim,
      shape: getShim
    };

    ReactPropTypes.checkPropTypes = emptyFunction;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var emptyFunction = __webpack_require__(54);
  var invariant = __webpack_require__(55);
  var warning = __webpack_require__(88);

  var ReactPropTypesSecret = __webpack_require__(56);
  var checkPropTypes = __webpack_require__(153);

  module.exports = function (isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
      if (typeof iteratorFn === 'function') {
        return iteratorFn;
      }
    }

    var ANONYMOUS = '<<anonymous>>';

    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker
    };

    function is(x, y) {
      if (x === y) {
        return x !== 0 || 1 / x === 1 / y;
      } else {
        return x !== x && y !== y;
      }
    }

    function PropTypeError(message) {
      this.message = message;
      this.stack = '';
    }

    PropTypeError.prototype = Error.prototype;

    function createChainableTypeChecker(validate) {
      if (true) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
      }
      function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
        componentName = componentName || ANONYMOUS;
        propFullName = propFullName || propName;

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          } else if ("development" !== 'production' && typeof console !== 'undefined') {
            var cacheKey = componentName + ':' + propName;
            if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
              warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
              manualPropTypeCallCache[cacheKey] = true;
              manualPropTypeWarningCount++;
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
            }
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
          }
          return null;
        } else {
          return validate(props, propName, componentName, location, propFullName);
        }
      }

      var chainedCheckType = checkType.bind(null, false);
      chainedCheckType.isRequired = checkType.bind(null, true);

      return chainedCheckType;
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(props, propName, componentName, location, propFullName, secret) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== expectedType) {
          var preciseType = getPreciseType(propValue);

          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunction.thatReturnsNull);
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
        }
        var propValue = props[propName];
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createElementTypeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(props, propName, componentName, location, propFullName) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS;
          var actualClassName = getClassName(props[propName]);
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        true ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null;
          }
        }

        var valuesString = JSON.stringify(expectedValues);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(props, propName, componentName, location, propFullName) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
        }
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
        }
        for (var key in propValue) {
          if (propValue.hasOwnProperty(key)) {
            var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        true ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
        return emptyFunction.thatReturnsNull;
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (typeof checker !== 'function') {
          warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
          return emptyFunction.thatReturnsNull;
        }
      }

      function validate(props, propName, componentName, location, propFullName) {
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
            return null;
          }
        }

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
      }
      return createChainableTypeChecker(validate);
    }

    function createNodeChecker() {
      function validate(props, propName, componentName, location, propFullName) {
        if (!isNode(props[propName])) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(props, propName, componentName, location, propFullName) {
        var propValue = props[propName];
        var propType = getPropType(propValue);
        if (propType !== 'object') {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key];
          if (!checker) {
            continue;
          }
          var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error) {
            return error;
          }
        }
        return null;
      }
      return createChainableTypeChecker(validate);
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true;
        case 'boolean':
          return !propValue;
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode);
          }
          if (propValue === null || isValidElement(propValue)) {
            return true;
          }

          var iteratorFn = getIteratorFn(propValue);
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue);
            var step;
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false;
                }
              }
            } else {
              while (!(step = iterator.next()).done) {
                var entry = step.value;
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false;
                  }
                }
              }
            }
          } else {
            return false;
          }

          return true;
        default:
          return false;
      }
    }

    function isSymbol(propType, propValue) {
      if (propType === 'symbol') {
        return true;
      }

      if (propValue['@@toStringTag'] === 'Symbol') {
        return true;
      }

      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true;
      }

      return false;
    }

    function getPropType(propValue) {
      var propType = typeof propValue;
      if (Array.isArray(propValue)) {
        return 'array';
      }
      if (propValue instanceof RegExp) {
        return 'object';
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol';
      }
      return propType;
    }

    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue;
      }
      var propType = getPropType(propValue);
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date';
        } else if (propValue instanceof RegExp) {
          return 'regexp';
        }
      }
      return propType;
    }

    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value);
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type;
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type;
        default:
          return type;
      }
    }

    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS;
      }
      return propValue.constructor.name;
    }

    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.PropTypes = ReactPropTypes;

    return ReactPropTypes;
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  if (true) {
    var invariant = __webpack_require__(55);
    var warning = __webpack_require__(88);
    var ReactPropTypesSecret = __webpack_require__(56);
    var loggedTypeFailures = {};
  }

  function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    if (true) {
      for (var typeSpecName in typeSpecs) {
        if (typeSpecs.hasOwnProperty(typeSpecName)) {
          var error;

          try {
            invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
          } catch (ex) {
            error = ex;
          }
          warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
          if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;

            var stack = getStack ? getStack() : '';

            warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
          }
        }
      }
    }
  }

  module.exports = checkPropTypes;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var className = __webpack_require__(155);
  var color = __webpack_require__(220);
  var image = __webpack_require__(221);
  var video = __webpack_require__(222);
  var media = __webpack_require__(223);
  var date = __webpack_require__(224);
  var customField = __webpack_require__(225);
  var attachment = __webpack_require__(226);
  var attachmentList = __webpack_require__(227);
  var editor = __webpack_require__(228);
  var editorWithPicker = __webpack_require__(229);
  var url = __webpack_require__(230);
  var select = __webpack_require__(231);
  var richTextEditor = __webpack_require__(232);
  var radioButton = __webpack_require__(233);
  var textWithCharCount = __webpack_require__(234);
  var instagramMedia = __webpack_require__(235);
  var pinterestMedia = __webpack_require__(236);
  var productAvailabilityCriteria = __webpack_require__(237);
  var offerBenefit = __webpack_require__(238);
  var textAreaAutoSize = __webpack_require__(239);
  var weChatNewsMedia = __webpack_require__(240);
  var dynamicList = __webpack_require__(288);
  var canvasDestination = __webpack_require__(289);
  var canvasComponentLayout = __webpack_require__(290);
  var canvasComponentSettings = __webpack_require__(291);
  var canvasCarousel = __webpack_require__(292);
  var assetWithPreview = __webpack_require__(293);
  var lineGridSection = __webpack_require__(294);
  var facebookCarousel = __webpack_require__(295);

  module.exports = {
    functors: [],
    PropTypes: {
      className: className,
      color: color,
      image: image,
      video: video,
      media: media,
      date: date,
      customField: customField,
      attachment: attachment,
      attachmentList: attachmentList,
      editor: editor,
      editorWithPicker: editorWithPicker,
      url: url,
      select: select,
      richTextEditor: richTextEditor,
      textWithCharCount: textWithCharCount,
      radioButton: radioButton,
      instagramMedia: instagramMedia,
      pinterestMedia: pinterestMedia,
      productAvailabilityCriteria: productAvailabilityCriteria,
      offerBenefit: offerBenefit,
      textAreaAutoSize: textAreaAutoSize,
      weChatNewsMedia: weChatNewsMedia,
      dynamicList: dynamicList,
      canvasDestination: canvasDestination,
      canvasComponentLayout: canvasComponentLayout,
      canvasComponentSettings: canvasComponentSettings,
      canvasCarousel: canvasCarousel,
      assetWithPreview: assetWithPreview,
      lineGridSection: lineGridSection,
      facebookCarousel: facebookCarousel
    }
  };
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string' || Array.isArray(value)) return null;

      return new Error('Invalid `' + propName + '` supplied to `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  module.exports = { "default": __webpack_require__(157), __esModule: true };
}, function (module, exports, __webpack_require__) {

  __webpack_require__(158);
  module.exports = __webpack_require__(4).Object.keys;
}, function (module, exports, __webpack_require__) {
  var toObject = __webpack_require__(29),
      $keys = __webpack_require__(19);

  __webpack_require__(159)('keys', function () {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
}, function (module, exports, __webpack_require__) {
  var $export = __webpack_require__(16),
      core = __webpack_require__(4),
      fails = __webpack_require__(11);
  module.exports = function (KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function () {
      fn(1);
    }), 'Object', exp);
  };
}, function (module, exports, __webpack_require__) {

  var baseMerge = __webpack_require__(161),
      createAssigner = __webpack_require__(212);

  var merge = createAssigner(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  module.exports = merge;
}, function (module, exports, __webpack_require__) {

  var Stack = __webpack_require__(57),
      assignMergeValue = __webpack_require__(91),
      baseFor = __webpack_require__(93),
      baseMergeDeep = __webpack_require__(192),
      isObject = __webpack_require__(10),
      keysIn = __webpack_require__(97);

  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function (srcValue, key) {
      if (isObject(srcValue)) {
        stack || (stack = new Stack());
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  module.exports = baseMerge;
}, function (module, exports) {
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  module.exports = listCacheClear;
}, function (module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(32);

  var arrayProto = Array.prototype;

  var splice = arrayProto.splice;

  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  module.exports = listCacheDelete;
}, function (module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(32);

  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
}, function (module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(32);

  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
}, function (module, exports, __webpack_require__) {

  var assocIndexOf = __webpack_require__(32);

  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  module.exports = listCacheSet;
}, function (module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(31);

  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }

  module.exports = stackClear;
}, function (module, exports) {
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  module.exports = stackDelete;
}, function (module, exports) {
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
}, function (module, exports) {
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
}, function (module, exports, __webpack_require__) {

  var ListCache = __webpack_require__(31),
      Map = __webpack_require__(58),
      MapCache = __webpack_require__(60);

  var LARGE_ARRAY_SIZE = 200;

  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  module.exports = stackSet;
}, function (module, exports, __webpack_require__) {

  var isFunction = __webpack_require__(59),
      isMasked = __webpack_require__(176),
      isObject = __webpack_require__(10),
      toSource = __webpack_require__(90);

  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  var funcProto = Function.prototype,
      objectProto = Object.prototype;

  var funcToString = funcProto.toString;

  var hasOwnProperty = objectProto.hasOwnProperty;

  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
}, function (module, exports) {

  var g;

  g = function () {
    return this;
  }();

  try {
    g = g || Function("return this")() || (1, eval)("this");
  } catch (e) {
    if (typeof window === "object") g = window;
  }

  module.exports = g;
}, function (module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(33);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  var nativeObjectToString = objectProto.toString;

  var symToStringTag = Symbol ? typeof Symbol === 'function' ? Symbol.toStringTag : '@@toStringTag' : undefined;

  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  module.exports = getRawTag;
}, function (module, exports) {
  var objectProto = Object.prototype;

  var nativeObjectToString = objectProto.toString;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  module.exports = objectToString;
}, function (module, exports, __webpack_require__) {

  var coreJsData = __webpack_require__(177);

  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
}, function (module, exports, __webpack_require__) {

  var root = __webpack_require__(5);

  var coreJsData = root['__core-js_shared__'];

  module.exports = coreJsData;
}, function (module, exports) {
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
}, function (module, exports, __webpack_require__) {

  var Hash = __webpack_require__(180),
      ListCache = __webpack_require__(31),
      Map = __webpack_require__(58);

  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
}, function (module, exports, __webpack_require__) {

  var hashClear = __webpack_require__(181),
      hashDelete = __webpack_require__(182),
      hashGet = __webpack_require__(183),
      hashHas = __webpack_require__(184),
      hashSet = __webpack_require__(185);

  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  module.exports = Hash;
}, function (module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(34);

  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  module.exports = hashClear;
}, function (module, exports) {
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = hashDelete;
}, function (module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(34);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
}, function (module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(34);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
}, function (module, exports, __webpack_require__) {

  var nativeCreate = __webpack_require__(34);

  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
}, function (module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(35);

  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  module.exports = mapCacheDelete;
}, function (module, exports) {
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
}, function (module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(35);

  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
}, function (module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(35);

  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
}, function (module, exports, __webpack_require__) {

  var getMapData = __webpack_require__(35);

  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  module.exports = mapCacheSet;
}, function (module, exports) {
  function createBaseFor(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  module.exports = createBaseFor;
}, function (module, exports, __webpack_require__) {

  var assignMergeValue = __webpack_require__(91),
      cloneBuffer = __webpack_require__(193),
      cloneTypedArray = __webpack_require__(194),
      copyArray = __webpack_require__(196),
      initCloneObject = __webpack_require__(197),
      isArguments = __webpack_require__(64),
      isArray = __webpack_require__(6),
      isArrayLikeObject = __webpack_require__(200),
      isBuffer = __webpack_require__(66),
      isFunction = __webpack_require__(59),
      isObject = __webpack_require__(10),
      isPlainObject = __webpack_require__(202),
      isTypedArray = __webpack_require__(67),
      toPlainObject = __webpack_require__(206);

  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = object[key],
        srcValue = source[key],
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  module.exports = baseMergeDeep;
}, function (module, exports, __webpack_require__) {
  (function (module) {
    var root = __webpack_require__(5);

    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    var moduleExports = freeModule && freeModule.exports === freeExports;

    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
  }).call(exports, __webpack_require__(62)(module));
}, function (module, exports, __webpack_require__) {

  var cloneArrayBuffer = __webpack_require__(195);

  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
}, function (module, exports, __webpack_require__) {

  var Uint8Array = __webpack_require__(94);

  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
}, function (module, exports) {
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  module.exports = copyArray;
}, function (module, exports, __webpack_require__) {

  var baseCreate = __webpack_require__(198),
      getPrototype = __webpack_require__(95),
      isPrototype = __webpack_require__(63);

  function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }

  module.exports = initCloneObject;
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(10);

  var objectCreate = Object.create;

  var baseCreate = function () {
    function object() {}
    return function (proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object();
      object.prototype = undefined;
      return result;
    };
  }();

  module.exports = baseCreate;
}, function (module, exports, __webpack_require__) {

  var baseGetTag = __webpack_require__(20),
      isObjectLike = __webpack_require__(15);

  var argsTag = '[object Arguments]';

  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  module.exports = baseIsArguments;
}, function (module, exports, __webpack_require__) {

  var isArrayLike = __webpack_require__(23),
      isObjectLike = __webpack_require__(15);

  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
}, function (module, exports) {
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
}, function (module, exports, __webpack_require__) {

  var baseGetTag = __webpack_require__(20),
      getPrototype = __webpack_require__(95),
      isObjectLike = __webpack_require__(15);

  var objectTag = '[object Object]';

  var funcProto = Function.prototype,
      objectProto = Object.prototype;

  var funcToString = funcProto.toString;

  var hasOwnProperty = objectProto.hasOwnProperty;

  var objectCtorString = funcToString.call(Object);

  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }

  module.exports = isPlainObject;
}, function (module, exports, __webpack_require__) {

  var baseGetTag = __webpack_require__(20),
      isLength = __webpack_require__(65),
      isObjectLike = __webpack_require__(15);

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  module.exports = baseIsTypedArray;
}, function (module, exports) {
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
}, function (module, exports, __webpack_require__) {
  (function (module) {
    var freeGlobal = __webpack_require__(89);

    var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

    var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

    var moduleExports = freeModule && freeModule.exports === freeExports;

    var freeProcess = moduleExports && freeGlobal.process;

    var nodeUtil = function () {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }();

    module.exports = nodeUtil;
  }).call(exports, __webpack_require__(62)(module));
}, function (module, exports, __webpack_require__) {

  var copyObject = __webpack_require__(207),
      keysIn = __webpack_require__(97);

  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  module.exports = toPlainObject;
}, function (module, exports, __webpack_require__) {

  var assignValue = __webpack_require__(208),
      baseAssignValue = __webpack_require__(61);

  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  module.exports = copyObject;
}, function (module, exports, __webpack_require__) {

  var baseAssignValue = __webpack_require__(61),
      eq = __webpack_require__(22);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      baseAssignValue(object, key, value);
    }
  }

  module.exports = assignValue;
}, function (module, exports) {
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  module.exports = baseTimes;
}, function (module, exports, __webpack_require__) {

  var isObject = __webpack_require__(10),
      isPrototype = __webpack_require__(63),
      nativeKeysIn = __webpack_require__(211);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = baseKeysIn;
}, function (module, exports) {
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = nativeKeysIn;
}, function (module, exports, __webpack_require__) {

  var baseRest = __webpack_require__(213),
      isIterateeCall = __webpack_require__(99);

  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  module.exports = createAssigner;
}, function (module, exports, __webpack_require__) {

  var identity = __webpack_require__(69),
      overRest = __webpack_require__(214),
      setToString = __webpack_require__(216);

  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  module.exports = baseRest;
}, function (module, exports, __webpack_require__) {

  var apply = __webpack_require__(215);

  var nativeMax = Math.max;

  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  module.exports = overRest;
}, function (module, exports) {
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  module.exports = apply;
}, function (module, exports, __webpack_require__) {

  var baseSetToString = __webpack_require__(217),
      shortOut = __webpack_require__(219);

  var setToString = shortOut(baseSetToString);

  module.exports = setToString;
}, function (module, exports, __webpack_require__) {

  var constant = __webpack_require__(218),
      defineProperty = __webpack_require__(92),
      identity = __webpack_require__(69);

  var baseSetToString = !defineProperty ? identity : function (func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  module.exports = baseSetToString;
}, function (module, exports) {
  function constant(value) {
    return function () {
      return value;
    };
  }

  module.exports = constant;
}, function (module, exports) {
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  var nativeNow = Date.now;

  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function () {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  module.exports = shortOut;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (/^#[0-9A-F]{6}$/i.test(value)) {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string' || typeof value === 'number') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';
    var value = props[propName];

    if (value) {
      if (Object.prototype.toString.call(value) === '[object Array]') {
        return null;
      }

      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName) {
    var componentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (value.constructor === Array) {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];

      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }

      return new Error('Invalid `' + propName + '` supplied to `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName) {
    var componentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  var _every = __webpack_require__(241);

  var PROP_VS_TYPE_MAP = {
    title: 'string',
    attachment: 'object',
    description: 'string',
    clickThroughUrl: 'string',
    content: 'string'
  };

  function validateMediaProps(mediaProp) {
    return (typeof mediaProp === 'undefined' ? 'undefined' : (0, _typeof3.default)(mediaProp)) === 'object' && _every(mediaProp, function (propValue, propName) {
      return typeof propValue === 'undefined' || (typeof propName === 'undefined' ? 'undefined' : (0, _typeof3.default)(propName)) === PROP_VS_TYPE_MAP[propName];
    });
  }
  function validate(props, propName) {
    var componentName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (validateMediaProps(value)) {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  var arrayEvery = __webpack_require__(242),
      baseEvery = __webpack_require__(243),
      baseIteratee = __webpack_require__(249),
      isArray = __webpack_require__(6),
      isIterateeCall = __webpack_require__(99);

  function every(collection, predicate, guard) {
    var func = isArray(collection) ? arrayEvery : baseEvery;
    if (guard && isIterateeCall(collection, predicate, guard)) {
      predicate = undefined;
    }
    return func(collection, baseIteratee(predicate, 3));
  }

  module.exports = every;
}, function (module, exports) {
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  module.exports = arrayEvery;
}, function (module, exports, __webpack_require__) {

  var baseEach = __webpack_require__(244);

  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function (value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  module.exports = baseEvery;
}, function (module, exports, __webpack_require__) {

  var baseForOwn = __webpack_require__(245),
      createBaseEach = __webpack_require__(248);

  var baseEach = createBaseEach(baseForOwn);

  module.exports = baseEach;
}, function (module, exports, __webpack_require__) {

  var baseFor = __webpack_require__(93),
      keys = __webpack_require__(70);

  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  module.exports = baseForOwn;
}, function (module, exports, __webpack_require__) {

  var isPrototype = __webpack_require__(63),
      nativeKeys = __webpack_require__(247);

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = baseKeys;
}, function (module, exports, __webpack_require__) {

  var overArg = __webpack_require__(96);

  var nativeKeys = overArg(Object.keys, Object);

  module.exports = nativeKeys;
}, function (module, exports, __webpack_require__) {

  var isArrayLike = __webpack_require__(23);

  function createBaseEach(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  module.exports = createBaseEach;
}, function (module, exports, __webpack_require__) {

  var baseMatches = __webpack_require__(250),
      baseMatchesProperty = __webpack_require__(274),
      identity = __webpack_require__(69),
      isArray = __webpack_require__(6),
      property = __webpack_require__(285);

  function baseIteratee(value) {
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }

  module.exports = baseIteratee;
}, function (module, exports, __webpack_require__) {

  var baseIsMatch = __webpack_require__(251),
      getMatchData = __webpack_require__(273),
      matchesStrictComparable = __webpack_require__(103);

  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;
}, function (module, exports, __webpack_require__) {

  var Stack = __webpack_require__(57),
      baseIsEqual = __webpack_require__(100);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  module.exports = baseIsMatch;
}, function (module, exports, __webpack_require__) {

  var Stack = __webpack_require__(57),
      equalArrays = __webpack_require__(101),
      equalByTag = __webpack_require__(258),
      equalObjects = __webpack_require__(261),
      getTag = __webpack_require__(268),
      isArray = __webpack_require__(6),
      isBuffer = __webpack_require__(66),
      isTypedArray = __webpack_require__(67);

  var COMPARE_PARTIAL_FLAG = 1;

  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : getTag(object),
        othTag = othIsArr ? arrayTag : getTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  module.exports = baseIsEqualDeep;
}, function (module, exports, __webpack_require__) {

  var MapCache = __webpack_require__(60),
      setCacheAdd = __webpack_require__(254),
      setCacheHas = __webpack_require__(255);

  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache();
    while (++index < length) {
      this.add(values[index]);
    }
  }

  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  module.exports = SetCache;
}, function (module, exports) {
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  module.exports = setCacheAdd;
}, function (module, exports) {
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
}, function (module, exports) {
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  module.exports = arraySome;
}, function (module, exports) {
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  module.exports = cacheHas;
}, function (module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(33),
      Uint8Array = __webpack_require__(94),
      eq = __webpack_require__(22),
      equalArrays = __webpack_require__(101),
      mapToArray = __webpack_require__(259),
      setToArray = __webpack_require__(260);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';

  var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }

        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG;

        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  module.exports = equalByTag;
}, function (module, exports) {
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
}, function (module, exports) {
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
}, function (module, exports, __webpack_require__) {

  var getAllKeys = __webpack_require__(262);

  var COMPARE_PARTIAL_FLAG = 1;

  var objectProto = Object.prototype;

  var hasOwnProperty = objectProto.hasOwnProperty;

  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }

    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }

      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
}, function (module, exports, __webpack_require__) {

  var baseGetAllKeys = __webpack_require__(263),
      getSymbols = __webpack_require__(265),
      keys = __webpack_require__(70);

  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
}, function (module, exports, __webpack_require__) {

  var arrayPush = __webpack_require__(264),
      isArray = __webpack_require__(6);

  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
}, function (module, exports) {
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  module.exports = arrayPush;
}, function (module, exports, __webpack_require__) {

  var arrayFilter = __webpack_require__(266),
      stubArray = __webpack_require__(267);

  var objectProto = Object.prototype;

  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  var nativeGetSymbols = Object.getOwnPropertySymbols;

  var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function (symbol) {
      return propertyIsEnumerable.call(object, symbol);
    });
  };

  module.exports = getSymbols;
}, function (module, exports) {
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  module.exports = arrayFilter;
}, function (module, exports) {
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
}, function (module, exports, __webpack_require__) {

  var DataView = __webpack_require__(269),
      Map = __webpack_require__(58),
      Promise = __webpack_require__(270),
      Set = __webpack_require__(271),
      WeakMap = __webpack_require__(272),
      baseGetTag = __webpack_require__(20),
      toSource = __webpack_require__(90);

  var mapTag = '[object Map]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      setTag = '[object Set]',
      weakMapTag = '[object WeakMap]';

  var dataViewTag = '[object DataView]';

  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise),
      setCtorString = toSource(Set),
      weakMapCtorString = toSource(WeakMap);

  var getTag = baseGetTag;

  if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
    getTag = function getTag(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }

  module.exports = getTag;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14),
      root = __webpack_require__(5);

  var DataView = getNative(root, 'DataView');

  module.exports = DataView;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14),
      root = __webpack_require__(5);

  var Promise = getNative(root, 'Promise');

  module.exports = Promise;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14),
      root = __webpack_require__(5);

  var Set = getNative(root, 'Set');

  module.exports = Set;
}, function (module, exports, __webpack_require__) {

  var getNative = __webpack_require__(14),
      root = __webpack_require__(5);

  var WeakMap = getNative(root, 'WeakMap');

  module.exports = WeakMap;
}, function (module, exports, __webpack_require__) {

  var isStrictComparable = __webpack_require__(102),
      keys = __webpack_require__(70);

  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  module.exports = getMatchData;
}, function (module, exports, __webpack_require__) {

  var baseIsEqual = __webpack_require__(100),
      get = __webpack_require__(275),
      hasIn = __webpack_require__(282),
      isKey = __webpack_require__(71),
      isStrictComparable = __webpack_require__(102),
      matchesStrictComparable = __webpack_require__(103),
      toKey = __webpack_require__(36);

  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
    };
  }

  module.exports = baseMatchesProperty;
}, function (module, exports, __webpack_require__) {

  var baseGet = __webpack_require__(104);

  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
}, function (module, exports, __webpack_require__) {

  var memoizeCapped = __webpack_require__(277);

  var reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  var reEscapeChar = /\\(\\)?/g;

  var stringToPath = memoizeCapped(function (string) {
    var result = [];
    if (reLeadingDot.test(string)) {
      result.push('');
    }
    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  module.exports = stringToPath;
}, function (module, exports, __webpack_require__) {

  var memoize = __webpack_require__(278);

  var MAX_MEMOIZE_SIZE = 500;

  function memoizeCapped(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  module.exports = memoizeCapped;
}, function (module, exports, __webpack_require__) {

  var MapCache = __webpack_require__(60);

  var FUNC_ERROR_TEXT = 'Expected a function';

  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function memoized() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  memoize.Cache = MapCache;

  module.exports = memoize;
}, function (module, exports, __webpack_require__) {

  var baseToString = __webpack_require__(280);

  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
}, function (module, exports, __webpack_require__) {

  var Symbol = __webpack_require__(33),
      arrayMap = __webpack_require__(281),
      isArray = __webpack_require__(6),
      isSymbol = __webpack_require__(72);

  var INFINITY = 1 / 0;

  var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
}, function (module, exports) {
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  module.exports = arrayMap;
}, function (module, exports, __webpack_require__) {

  var baseHasIn = __webpack_require__(283),
      hasPath = __webpack_require__(284);

  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
}, function (module, exports) {
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
}, function (module, exports, __webpack_require__) {

  var castPath = __webpack_require__(105),
      isArguments = __webpack_require__(64),
      isArray = __webpack_require__(6),
      isIndex = __webpack_require__(68),
      isLength = __webpack_require__(65),
      toKey = __webpack_require__(36);

  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
}, function (module, exports, __webpack_require__) {

  var baseProperty = __webpack_require__(286),
      basePropertyDeep = __webpack_require__(287),
      isKey = __webpack_require__(71),
      toKey = __webpack_require__(36);

  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;
}, function (module, exports) {
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
}, function (module, exports, __webpack_require__) {

  var baseGet = __webpack_require__(104);

  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;
  var objectPropValidate = _require.objectPropValidate;

  module.exports = createChainableTypeChecker(objectPropValidate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if (typeof value === 'string') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        var padding = value.padding;
        if ((typeof padding === 'undefined' ? 'undefined' : (0, _typeof3.default)(padding)) === 'object' && padding.paddingTop && padding.paddingBottom) {
          return null;
        }
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;
  var objectPropValidate = _require.objectPropValidate;

  module.exports = createChainableTypeChecker(objectPropValidate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;
  var objectPropValidate = _require.objectPropValidate;

  module.exports = createChainableTypeChecker(objectPropValidate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}, function (module, exports, __webpack_require__) {

  "use strict";

  var _typeof2 = __webpack_require__(1);

  var _typeof3 = _interopRequireDefault(_typeof2);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }

  var _require = __webpack_require__(0);

  var createChainableTypeChecker = _require.createChainableTypeChecker;

  function validate(props, propName, componentName) {
    componentName = componentName || '<<anonymous>>';

    if (props[propName]) {
      var value = props[propName];
      if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object') {
        return null;
      }
      return new Error('Invalid `' + propName + '` supplied to  `' + componentName + '`.');
    }

    return null;
  }

  module.exports = createChainableTypeChecker(validate);
}]);
}, 327, null, "poctest/template2/output.js");
__d(/* poctest/babel-standalone.js */function(global, require, module, exports) {(function webpackUniversalModuleDefinition(root, factory) {
	if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define([], factory);else if (typeof exports === 'object') exports["Babel"] = factory();else root["Babel"] = factory();
})(this, function () {
	return function (modules) {
		var installedModules = {};

		function __webpack_require__(moduleId) {
			if (installedModules[moduleId]) return installedModules[moduleId].exports;

			var module = installedModules[moduleId] = { exports: {},
				id: moduleId,
				loaded: false
			};

			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

			module.loaded = true;

			return module.exports;
		}

		__webpack_require__.m = modules;

		__webpack_require__.c = installedModules;

		__webpack_require__.p = "";

		return __webpack_require__(0);
	}(function (modules) {
		for (var i in modules) {
			if (Object.prototype.hasOwnProperty.call(modules, i)) {
				switch (typeof modules[i]) {
					case "function":
						break;
					case "object":
						modules[i] = function (_m) {
							var args = _m.slice(1),
							    fn = modules[_m[0]];
							return function (a, b, c) {
								fn.apply(this, [a, b, c].concat(args));
							};
						}(modules[i]);
						break;
					default:
						modules[i] = modules[modules[i]];
						break;
				}
			}
		}
		return modules;
	}([function (module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});
		exports.version = exports.availablePresets = exports.availablePlugins = undefined;

		var _extends = Object.assign || function (target) {
			for (var i = 1; i < arguments.length; i++) {
				var source = arguments[i];for (var key in source) {
					if (Object.prototype.hasOwnProperty.call(source, key)) {
						target[key] = source[key];
					}
				}
			}return target;
		};

		var _typeof = typeof Symbol === "function" && typeof (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator') === "symbol" ? function (obj) {
			return typeof obj;
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
		};

		exports.transform = transform;
		exports.transformFromAst = transformFromAst;
		exports.registerPlugin = registerPlugin;
		exports.registerPlugins = registerPlugins;
		exports.registerPreset = registerPreset;
		exports.registerPresets = registerPresets;
		exports.disableScriptTags = disableScriptTags;

		var _babelCore = __webpack_require__(286);

		var Babel = _interopRequireWildcard(_babelCore);

		var _transformScriptTags = __webpack_require__(317);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var isArray = Array.isArray || function (arg) {
			return Object.prototype.toString.call(arg) === '[object Array]';
		};

		function loadBuiltin(builtinTable, name) {
			if (isArray(name) && typeof name[0] === 'string') {
				if (builtinTable.hasOwnProperty(name[0])) {
					return [builtinTable[name[0]]].concat(name.slice(1));
				}
				return;
			} else if (typeof name === 'string') {
				return builtinTable[name];
			}

			return name;
		}

		function processOptions(options) {
			var presets = (options.presets || []).map(function (presetName) {
				var preset = loadBuiltin(availablePresets, presetName);

				if (preset) {
					if (isArray(preset) && _typeof(preset[0]) === 'object' && preset[0].hasOwnProperty('buildPreset')) {
						preset[0] = _extends({}, preset[0], { buildPreset: preset[0].buildPreset });
					}
				} else {
					throw new Error('Invalid preset specified in Babel options: "' + presetName + '"');
				}
				return preset;
			});

			var plugins = (options.plugins || []).map(function (pluginName) {
				var plugin = loadBuiltin(availablePlugins, pluginName);

				if (!plugin) {
					throw new Error('Invalid plugin specified in Babel options: "' + pluginName + '"');
				}
				return plugin;
			});

			return _extends({}, options, {
				presets: presets,
				plugins: plugins
			});
		}

		function transform(code, options) {
			return Babel.transform(code, processOptions(options));
		}

		function transformFromAst(ast, code, options) {
			return Babel.transformFromAst(ast, code, processOptions(options));
		}
		var availablePlugins = exports.availablePlugins = {};
		var availablePresets = exports.availablePresets = {};

		function registerPlugin(name, plugin) {
			if (availablePlugins.hasOwnProperty(name)) {
				console.warn('A plugin named "' + name + '" is already registered, it will be overridden');
			}
			availablePlugins[name] = plugin;
		}

		function registerPlugins(newPlugins) {
			Object.keys(newPlugins).forEach(function (name) {
				return registerPlugin(name, newPlugins[name]);
			});
		}

		function registerPreset(name, preset) {
			if (availablePresets.hasOwnProperty(name)) {
				console.warn('A preset named "' + name + '" is already registered, it will be overridden');
			}
			availablePresets[name] = preset;
		}

		function registerPresets(newPresets) {
			Object.keys(newPresets).forEach(function (name) {
				return registerPreset(name, newPresets[name]);
			});
		}

		registerPlugins({
			'check-es2015-constants': __webpack_require__(48),
			'external-helpers-2': __webpack_require__(318),
			'syntax-async-functions': __webpack_require__(49),
			'syntax-async-generators': __webpack_require__(319),
			'syntax-class-constructor-call': __webpack_require__(200),
			'syntax-class-properties': __webpack_require__(128),
			'syntax-decorators': __webpack_require__(129),
			'syntax-do-expressions': __webpack_require__(201),
			'syntax-exponentiation-operator': __webpack_require__(202),
			'syntax-export-extensions': __webpack_require__(203),
			'syntax-flow': __webpack_require__(78),
			'syntax-function-bind': __webpack_require__(204),
			'syntax-function-sent': __webpack_require__(320),
			'syntax-jsx': __webpack_require__(130),
			'syntax-object-rest-spread': __webpack_require__(205),
			'syntax-trailing-function-commas': __webpack_require__(50),
			'transform-async-functions': __webpack_require__(321),
			'transform-async-to-generator': __webpack_require__(131),
			'transform-async-to-module-method': __webpack_require__(322),
			'transform-class-constructor-call': __webpack_require__(132),
			'transform-class-properties': __webpack_require__(133),
			'transform-decorators': __webpack_require__(207),
			'transform-decorators-legacy': __webpack_require__(206).default,
			'transform-do-expressions': __webpack_require__(134),
			'transform-es2015-arrow-functions': __webpack_require__(51),
			'transform-es2015-block-scoped-functions': __webpack_require__(79),
			'transform-es2015-block-scoping': __webpack_require__(52),
			'transform-es2015-classes': __webpack_require__(53),
			'transform-es2015-computed-properties': __webpack_require__(54),
			'transform-es2015-destructuring': __webpack_require__(55),
			'transform-es2015-duplicate-keys': __webpack_require__(135),
			'transform-es2015-for-of': __webpack_require__(56),
			'transform-es2015-function-name': __webpack_require__(57),
			'transform-es2015-instanceof': __webpack_require__(325),
			'transform-es2015-literals': __webpack_require__(58),
			'transform-es2015-modules-amd': __webpack_require__(136),
			'transform-es2015-modules-commonjs': __webpack_require__(59),
			'transform-es2015-modules-systemjs': __webpack_require__(209),
			'transform-es2015-modules-umd': __webpack_require__(210),
			'transform-es2015-object-super': __webpack_require__(80),
			'transform-es2015-parameters': __webpack_require__(60),
			'transform-es2015-shorthand-properties': __webpack_require__(61),
			'transform-es2015-spread': __webpack_require__(62),
			'transform-es2015-sticky-regex': __webpack_require__(81),
			'transform-es2015-template-literals': __webpack_require__(63),
			'transform-es2015-typeof-symbol': __webpack_require__(82),
			'transform-es2015-unicode-regex': __webpack_require__(83),
			'transform-es3-member-expression-literals': __webpack_require__(329),
			'transform-es3-property-literals': __webpack_require__(330),
			'transform-es5-property-mutators': __webpack_require__(331),
			'transform-eval': __webpack_require__(332),
			'transform-exponentiation-operator': __webpack_require__(84),
			'transform-export-extensions': __webpack_require__(137),
			'transform-flow-comments': __webpack_require__(333),
			'transform-flow-strip-types': __webpack_require__(138),
			'transform-function-bind': __webpack_require__(139),
			'transform-jscript': __webpack_require__(334),
			'transform-object-assign': __webpack_require__(211),
			'transform-object-rest-spread': __webpack_require__(140),
			'transform-object-set-prototype-of-to-assign': __webpack_require__(335),
			'transform-proto-to-assign': __webpack_require__(336),
			'transform-react-constant-elements': __webpack_require__(337),
			'transform-react-display-name': __webpack_require__(141),
			'transform-react-inline-elements': __webpack_require__(338),
			'transform-react-jsx': __webpack_require__(142),
			'transform-react-jsx-compat': __webpack_require__(339),
			'transform-react-jsx-self': __webpack_require__(340),
			'transform-react-jsx-source': __webpack_require__(341),
			'transform-regenerator': __webpack_require__(64),
			'transform-runtime': __webpack_require__(347),
			'transform-strict-mode': __webpack_require__(214),
			'undeclared-variables-check': __webpack_require__(348)
		});

		registerPresets({
			es2015: __webpack_require__(215),
			es2016: __webpack_require__(216),
			es2017: __webpack_require__(217),
			latest: __webpack_require__(349),
			react: __webpack_require__(350),
			'stage-0': __webpack_require__(351),
			'stage-1': __webpack_require__(218),
			'stage-2': __webpack_require__(219),
			'stage-3': __webpack_require__(220),
			'exponent': {
				plugins: [__webpack_require__(206).default, __webpack_require__(134), __webpack_require__(139), __webpack_require__(132), __webpack_require__(137), __webpack_require__(50), __webpack_require__(84), __webpack_require__(49), __webpack_require__(128), __webpack_require__(50), __webpack_require__(133), __webpack_require__(57), __webpack_require__(51), __webpack_require__(52), __webpack_require__(53), __webpack_require__(54), __webpack_require__(48), __webpack_require__(55), [__webpack_require__(59), { strict: false, allowTopLevelThis: true }], __webpack_require__(60), __webpack_require__(61), __webpack_require__(62), __webpack_require__(63), __webpack_require__(58), __webpack_require__(138), __webpack_require__(211), __webpack_require__(140), __webpack_require__(141), __webpack_require__(142), __webpack_require__(64), [__webpack_require__(56), { loose: true }]]
			},

			'es2015-no-commonjs': {
				plugins: [__webpack_require__(63), __webpack_require__(58), __webpack_require__(57), __webpack_require__(51), __webpack_require__(79), __webpack_require__(53), __webpack_require__(80), __webpack_require__(61), __webpack_require__(54), __webpack_require__(56), __webpack_require__(81), __webpack_require__(83), __webpack_require__(48), __webpack_require__(62), __webpack_require__(60), __webpack_require__(55), __webpack_require__(52), __webpack_require__(82), [__webpack_require__(64), { async: false, asyncGenerators: false }]]
			},

			'es2015-loose': {
				plugins: [[__webpack_require__(63), { loose: true }], __webpack_require__(58), __webpack_require__(57), __webpack_require__(51), __webpack_require__(79), [__webpack_require__(53), { loose: true }], __webpack_require__(80), __webpack_require__(61), __webpack_require__(135), [__webpack_require__(54), { loose: true }], [__webpack_require__(56), { loose: true }], __webpack_require__(81), __webpack_require__(83), __webpack_require__(48), [__webpack_require__(62), { loose: true }], __webpack_require__(60), [__webpack_require__(55), { loose: true }], __webpack_require__(52), __webpack_require__(82), [__webpack_require__(59), { loose: true }], [__webpack_require__(64), { async: false, asyncGenerators: false }]]
			}
		});

		var version = exports.version = Babel.version;

		var transformScriptTags = function transformScriptTags() {
			return (0, _transformScriptTags.runScripts)(transform);
		};
		if (typeof window !== 'undefined' && window && window.addEventListener) {
			window.addEventListener('DOMContentLoaded', transformScriptTags, false);
		}

		function disableScriptTags() {
			window.removeEventListener('DOMContentLoaded', transformScriptTags);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.createTypeAnnotationBasedOnTypeof = exports.removeTypeDuplicates = exports.createUnionTypeAnnotation = exports.valueToNode = exports.toBlock = exports.toExpression = exports.toStatement = exports.toBindingIdentifierName = exports.toIdentifier = exports.toKeyAlias = exports.toSequenceExpression = exports.toComputedKey = exports.isImmutable = exports.isScope = exports.isSpecifierDefault = exports.isVar = exports.isBlockScoped = exports.isLet = exports.isValidIdentifier = exports.isReferenced = exports.isBinding = exports.getOuterBindingIdentifiers = exports.getBindingIdentifiers = exports.TYPES = exports.react = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;

		var _getOwnPropertySymbols = __webpack_require__(353);

		var _getOwnPropertySymbols2 = _interopRequireDefault(_getOwnPropertySymbols);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		var _constants = __webpack_require__(144);

		Object.defineProperty(exports, "STATEMENT_OR_BLOCK_KEYS", {
			enumerable: true,
			get: function get() {
				return _constants.STATEMENT_OR_BLOCK_KEYS;
			}
		});
		Object.defineProperty(exports, "FLATTENABLE_KEYS", {
			enumerable: true,
			get: function get() {
				return _constants.FLATTENABLE_KEYS;
			}
		});
		Object.defineProperty(exports, "FOR_INIT_KEYS", {
			enumerable: true,
			get: function get() {
				return _constants.FOR_INIT_KEYS;
			}
		});
		Object.defineProperty(exports, "COMMENT_KEYS", {
			enumerable: true,
			get: function get() {
				return _constants.COMMENT_KEYS;
			}
		});
		Object.defineProperty(exports, "LOGICAL_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.LOGICAL_OPERATORS;
			}
		});
		Object.defineProperty(exports, "UPDATE_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.UPDATE_OPERATORS;
			}
		});
		Object.defineProperty(exports, "BOOLEAN_NUMBER_BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.BOOLEAN_NUMBER_BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "EQUALITY_BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.EQUALITY_BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "COMPARISON_BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.COMPARISON_BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "BOOLEAN_BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.BOOLEAN_BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "NUMBER_BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.NUMBER_BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "BINARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.BINARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "BOOLEAN_UNARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.BOOLEAN_UNARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "NUMBER_UNARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.NUMBER_UNARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "STRING_UNARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.STRING_UNARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "UNARY_OPERATORS", {
			enumerable: true,
			get: function get() {
				return _constants.UNARY_OPERATORS;
			}
		});
		Object.defineProperty(exports, "INHERIT_KEYS", {
			enumerable: true,
			get: function get() {
				return _constants.INHERIT_KEYS;
			}
		});
		Object.defineProperty(exports, "BLOCK_SCOPED_SYMBOL", {
			enumerable: true,
			get: function get() {
				return _constants.BLOCK_SCOPED_SYMBOL;
			}
		});
		Object.defineProperty(exports, "NOT_LOCAL_BINDING", {
			enumerable: true,
			get: function get() {
				return _constants.NOT_LOCAL_BINDING;
			}
		});
		exports.is = is;
		exports.isType = isType;
		exports.validate = validate;
		exports.shallowEqual = shallowEqual;
		exports.appendToMemberExpression = appendToMemberExpression;
		exports.prependToMemberExpression = prependToMemberExpression;
		exports.ensureBlock = ensureBlock;
		exports.clone = clone;
		exports.cloneWithoutLoc = cloneWithoutLoc;
		exports.cloneDeep = cloneDeep;
		exports.buildMatchMemberExpression = buildMatchMemberExpression;
		exports.removeComments = removeComments;
		exports.inheritsComments = inheritsComments;
		exports.inheritTrailingComments = inheritTrailingComments;
		exports.inheritLeadingComments = inheritLeadingComments;
		exports.inheritInnerComments = inheritInnerComments;
		exports.inherits = inherits;
		exports.assertNode = assertNode;
		exports.isNode = isNode;
		exports.traverseFast = traverseFast;
		exports.removeProperties = removeProperties;
		exports.removePropertiesDeep = removePropertiesDeep;

		var _retrievers = __webpack_require__(225);

		Object.defineProperty(exports, "getBindingIdentifiers", {
			enumerable: true,
			get: function get() {
				return _retrievers.getBindingIdentifiers;
			}
		});
		Object.defineProperty(exports, "getOuterBindingIdentifiers", {
			enumerable: true,
			get: function get() {
				return _retrievers.getOuterBindingIdentifiers;
			}
		});

		var _validators = __webpack_require__(387);

		Object.defineProperty(exports, "isBinding", {
			enumerable: true,
			get: function get() {
				return _validators.isBinding;
			}
		});
		Object.defineProperty(exports, "isReferenced", {
			enumerable: true,
			get: function get() {
				return _validators.isReferenced;
			}
		});
		Object.defineProperty(exports, "isValidIdentifier", {
			enumerable: true,
			get: function get() {
				return _validators.isValidIdentifier;
			}
		});
		Object.defineProperty(exports, "isLet", {
			enumerable: true,
			get: function get() {
				return _validators.isLet;
			}
		});
		Object.defineProperty(exports, "isBlockScoped", {
			enumerable: true,
			get: function get() {
				return _validators.isBlockScoped;
			}
		});
		Object.defineProperty(exports, "isVar", {
			enumerable: true,
			get: function get() {
				return _validators.isVar;
			}
		});
		Object.defineProperty(exports, "isSpecifierDefault", {
			enumerable: true,
			get: function get() {
				return _validators.isSpecifierDefault;
			}
		});
		Object.defineProperty(exports, "isScope", {
			enumerable: true,
			get: function get() {
				return _validators.isScope;
			}
		});
		Object.defineProperty(exports, "isImmutable", {
			enumerable: true,
			get: function get() {
				return _validators.isImmutable;
			}
		});

		var _converters = __webpack_require__(377);

		Object.defineProperty(exports, "toComputedKey", {
			enumerable: true,
			get: function get() {
				return _converters.toComputedKey;
			}
		});
		Object.defineProperty(exports, "toSequenceExpression", {
			enumerable: true,
			get: function get() {
				return _converters.toSequenceExpression;
			}
		});
		Object.defineProperty(exports, "toKeyAlias", {
			enumerable: true,
			get: function get() {
				return _converters.toKeyAlias;
			}
		});
		Object.defineProperty(exports, "toIdentifier", {
			enumerable: true,
			get: function get() {
				return _converters.toIdentifier;
			}
		});
		Object.defineProperty(exports, "toBindingIdentifierName", {
			enumerable: true,
			get: function get() {
				return _converters.toBindingIdentifierName;
			}
		});
		Object.defineProperty(exports, "toStatement", {
			enumerable: true,
			get: function get() {
				return _converters.toStatement;
			}
		});
		Object.defineProperty(exports, "toExpression", {
			enumerable: true,
			get: function get() {
				return _converters.toExpression;
			}
		});
		Object.defineProperty(exports, "toBlock", {
			enumerable: true,
			get: function get() {
				return _converters.toBlock;
			}
		});
		Object.defineProperty(exports, "valueToNode", {
			enumerable: true,
			get: function get() {
				return _converters.valueToNode;
			}
		});

		var _flow = __webpack_require__(385);

		Object.defineProperty(exports, "createUnionTypeAnnotation", {
			enumerable: true,
			get: function get() {
				return _flow.createUnionTypeAnnotation;
			}
		});
		Object.defineProperty(exports, "removeTypeDuplicates", {
			enumerable: true,
			get: function get() {
				return _flow.removeTypeDuplicates;
			}
		});
		Object.defineProperty(exports, "createTypeAnnotationBasedOnTypeof", {
			enumerable: true,
			get: function get() {
				return _flow.createTypeAnnotationBasedOnTypeof;
			}
		});

		var _toFastProperties = __webpack_require__(628);

		var _toFastProperties2 = _interopRequireDefault(_toFastProperties);

		var _compact = __webpack_require__(581);

		var _compact2 = _interopRequireDefault(_compact);

		var _clone = __webpack_require__(113);

		var _clone2 = _interopRequireDefault(_clone);

		var _each = __webpack_require__(114);

		var _each2 = _interopRequireDefault(_each);

		var _uniq = __webpack_require__(608);

		var _uniq2 = _interopRequireDefault(_uniq);

		__webpack_require__(382);

		var _definitions = __webpack_require__(29);

		var _react2 = __webpack_require__(386);

		var _react = _interopRequireWildcard(_react2);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var t = exports;

		function registerType(type) {
			var is = t["is" + type];
			if (!is) {
				is = t["is" + type] = function (node, opts) {
					return t.is(type, node, opts);
				};
			}

			t["assert" + type] = function (node, opts) {
				opts = opts || {};
				if (!is(node, opts)) {
					throw new Error("Expected type " + (0, _stringify2.default)(type) + " with option " + (0, _stringify2.default)(opts));
				}
			};
		}

		exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
		exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
		exports.NODE_FIELDS = _definitions.NODE_FIELDS;
		exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
		exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
		exports.react = _react;

		for (var type in t.VISITOR_KEYS) {
			registerType(type);
		}

		t.FLIPPED_ALIAS_KEYS = {};

		(0, _each2.default)(t.ALIAS_KEYS, function (aliases, type) {
			(0, _each2.default)(aliases, function (alias) {
				var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
				types.push(type);
			});
		});

		(0, _each2.default)(t.FLIPPED_ALIAS_KEYS, function (types, type) {
			t[type.toUpperCase() + "_TYPES"] = types;
			registerType(type);
		});

		var TYPES = exports.TYPES = (0, _keys2.default)(t.VISITOR_KEYS).concat((0, _keys2.default)(t.FLIPPED_ALIAS_KEYS)).concat((0, _keys2.default)(t.DEPRECATED_KEYS));

		function is(type, node, opts) {
			if (!node) return false;

			var matches = isType(node.type, type);
			if (!matches) return false;

			if (typeof opts === "undefined") {
				return true;
			} else {
				return t.shallowEqual(node, opts);
			}
		}

		function isType(nodeType, targetType) {
			if (nodeType === targetType) return true;

			if (t.ALIAS_KEYS[targetType]) return false;

			var aliases = t.FLIPPED_ALIAS_KEYS[targetType];
			if (aliases) {
				if (aliases[0] === nodeType) return true;

				for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var alias = _ref;

					if (nodeType === alias) return true;
				}
			}

			return false;
		}

		(0, _each2.default)(t.BUILDER_KEYS, function (keys, type) {
			function builder() {
				if (arguments.length > keys.length) {
					throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive " + ("no more than " + keys.length));
				}

				var node = {};
				node.type = type;

				var i = 0;

				for (var _iterator2 = keys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var _key = _ref2;

					var field = t.NODE_FIELDS[type][_key];

					var arg = arguments[i++];
					if (arg === undefined) arg = (0, _clone2.default)(field.default);

					node[_key] = arg;
				}

				for (var key in node) {
					validate(node, key, node[key]);
				}

				return node;
			}

			t[type] = builder;
			t[type[0].toLowerCase() + type.slice(1)] = builder;
		});

		var _loop = function _loop(_type) {
			var newType = t.DEPRECATED_KEYS[_type];

			function proxy(fn) {
				return function () {
					console.trace("The node type " + _type + " has been renamed to " + newType);
					return fn.apply(this, arguments);
				};
			}

			t[_type] = t[_type[0].toLowerCase() + _type.slice(1)] = proxy(t[newType]);
			t["is" + _type] = proxy(t["is" + newType]);
			t["assert" + _type] = proxy(t["assert" + newType]);
		};

		for (var _type in t.DEPRECATED_KEYS) {
			_loop(_type);
		}

		function validate(node, key, val) {
			if (!node) return;

			var fields = t.NODE_FIELDS[node.type];
			if (!fields) return;

			var field = fields[key];
			if (!field || !field.validate) return;
			if (field.optional && val == null) return;

			field.validate(node, key, val);
		}

		function shallowEqual(actual, expected) {
			var keys = (0, _keys2.default)(expected);

			for (var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
				var _ref3;

				if (_isArray3) {
					if (_i3 >= _iterator3.length) break;
					_ref3 = _iterator3[_i3++];
				} else {
					_i3 = _iterator3.next();
					if (_i3.done) break;
					_ref3 = _i3.value;
				}

				var key = _ref3;

				if (actual[key] !== expected[key]) {
					return false;
				}
			}

			return true;
		}

		function appendToMemberExpression(member, append, computed) {
			member.object = t.memberExpression(member.object, member.property, member.computed);
			member.property = append;
			member.computed = !!computed;
			return member;
		}

		function prependToMemberExpression(member, prepend) {
			member.object = t.memberExpression(prepend, member.object);
			return member;
		}

		function ensureBlock(node) {
			var key = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];

			return node[key] = t.toBlock(node[key], node);
		}

		function clone(node) {
			var newNode = {};
			for (var key in node) {
				if (key[0] === "_") continue;
				newNode[key] = node[key];
			}
			return newNode;
		}

		function cloneWithoutLoc(node) {
			var newNode = clone(node);
			delete newNode.loc;
			return newNode;
		}

		function cloneDeep(node) {
			var newNode = {};

			for (var key in node) {
				if (key[0] === "_") continue;

				var val = node[key];

				if (val) {
					if (val.type) {
						val = t.cloneDeep(val);
					} else if (Array.isArray(val)) {
						val = val.map(t.cloneDeep);
					}
				}

				newNode[key] = val;
			}

			return newNode;
		}

		function buildMatchMemberExpression(match, allowPartial) {
			var parts = match.split(".");

			return function (member) {
				if (!t.isMemberExpression(member)) return false;

				var search = [member];
				var i = 0;

				while (search.length) {
					var node = search.shift();

					if (allowPartial && i === parts.length) {
						return true;
					}

					if (t.isIdentifier(node)) {
						if (parts[i] !== node.name) return false;
					} else if (t.isStringLiteral(node)) {
						if (parts[i] !== node.value) return false;
					} else if (t.isMemberExpression(node)) {
						if (node.computed && !t.isStringLiteral(node.property)) {
							return false;
						} else {
							search.push(node.object);
							search.push(node.property);
							continue;
						}
					} else {
						return false;
					}

					if (++i > parts.length) {
						return false;
					}
				}

				return true;
			};
		}

		function removeComments(node) {
			for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
				var _ref4;

				if (_isArray4) {
					if (_i4 >= _iterator4.length) break;
					_ref4 = _iterator4[_i4++];
				} else {
					_i4 = _iterator4.next();
					if (_i4.done) break;
					_ref4 = _i4.value;
				}

				var key = _ref4;

				delete node[key];
			}
			return node;
		}

		function inheritsComments(child, parent) {
			inheritTrailingComments(child, parent);
			inheritLeadingComments(child, parent);
			inheritInnerComments(child, parent);
			return child;
		}

		function inheritTrailingComments(child, parent) {
			_inheritComments("trailingComments", child, parent);
		}

		function inheritLeadingComments(child, parent) {
			_inheritComments("leadingComments", child, parent);
		}

		function inheritInnerComments(child, parent) {
			_inheritComments("innerComments", child, parent);
		}

		function _inheritComments(key, child, parent) {
			if (child && parent) {
				child[key] = (0, _uniq2.default)((0, _compact2.default)([].concat(child[key], parent[key])));
			}
		}

		function inherits(child, parent) {
			if (!child || !parent) return child;

			for (var _iterator5 = t.INHERIT_KEYS.optional, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
				var _ref5;

				if (_isArray5) {
					if (_i5 >= _iterator5.length) break;
					_ref5 = _iterator5[_i5++];
				} else {
					_i5 = _iterator5.next();
					if (_i5.done) break;
					_ref5 = _i5.value;
				}

				var _key2 = _ref5;

				if (child[_key2] == null) {
					child[_key2] = parent[_key2];
				}
			}

			for (var key in parent) {
				if (key[0] === "_") child[key] = parent[key];
			}

			for (var _iterator6 = t.INHERIT_KEYS.force, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
				var _ref6;

				if (_isArray6) {
					if (_i6 >= _iterator6.length) break;
					_ref6 = _iterator6[_i6++];
				} else {
					_i6 = _iterator6.next();
					if (_i6.done) break;
					_ref6 = _i6.value;
				}

				var _key3 = _ref6;

				child[_key3] = parent[_key3];
			}

			t.inheritsComments(child, parent);

			return child;
		}

		function assertNode(node) {
			if (!isNode(node)) {
				throw new TypeError("Not a valid node " + (node && node.type));
			}
		}

		function isNode(node) {
			return !!(node && _definitions.VISITOR_KEYS[node.type]);
		}

		(0, _toFastProperties2.default)(t);
		(0, _toFastProperties2.default)(t.VISITOR_KEYS);

		function traverseFast(node, enter, opts) {
			if (!node) return;

			var keys = t.VISITOR_KEYS[node.type];
			if (!keys) return;

			opts = opts || {};
			enter(node, opts);

			for (var _iterator7 = keys, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
				var _ref7;

				if (_isArray7) {
					if (_i7 >= _iterator7.length) break;
					_ref7 = _iterator7[_i7++];
				} else {
					_i7 = _iterator7.next();
					if (_i7.done) break;
					_ref7 = _i7.value;
				}

				var key = _ref7;

				var subNode = node[key];

				if (Array.isArray(subNode)) {
					for (var _iterator8 = subNode, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
						var _ref8;

						if (_isArray8) {
							if (_i8 >= _iterator8.length) break;
							_ref8 = _iterator8[_i8++];
						} else {
							_i8 = _iterator8.next();
							if (_i8.done) break;
							_ref8 = _i8.value;
						}

						var _node = _ref8;

						traverseFast(_node, enter, opts);
					}
				} else {
					traverseFast(subNode, enter, opts);
				}
			}
		}

		var CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"];

		var CLEAR_KEYS_PLUS_COMMENTS = t.COMMENT_KEYS.concat(["comments"]).concat(CLEAR_KEYS);

		function removeProperties(node, opts) {
			opts = opts || {};
			var map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
			for (var _iterator9 = map, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
				var _ref9;

				if (_isArray9) {
					if (_i9 >= _iterator9.length) break;
					_ref9 = _iterator9[_i9++];
				} else {
					_i9 = _iterator9.next();
					if (_i9.done) break;
					_ref9 = _i9.value;
				}

				var _key4 = _ref9;

				if (node[_key4] != null) node[_key4] = undefined;
			}

			for (var key in node) {
				if (key[0] === "_" && node[key] != null) node[key] = undefined;
			}

			var syms = (0, _getOwnPropertySymbols2.default)(node);
			for (var _iterator10 = syms, _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
				var _ref10;

				if (_isArray10) {
					if (_i10 >= _iterator10.length) break;
					_ref10 = _iterator10[_i10++];
				} else {
					_i10 = _iterator10.next();
					if (_i10.done) break;
					_ref10 = _i10.value;
				}

				var sym = _ref10;

				node[sym] = null;
			}
		}

		function removePropertiesDeep(tree, opts) {
			traverseFast(tree, removeProperties, opts);
			return tree;
		}
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(407), __esModule: true };
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		};
	}, function (module, exports) {

		var core = module.exports = { version: '2.4.0' };
		if (typeof __e == 'number') __e = core;
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (code, opts) {
			var stack = void 0;
			try {
				throw new Error();
			} catch (error) {
				if (error.stack) {
					stack = error.stack.split("\n").slice(1).join("\n");
				}
			}

			opts = (0, _assign2.default)({
				allowReturnOutsideFunction: true,
				allowSuperOutsideMethod: true,
				preserveComments: false
			}, opts);

			var _getAst = function getAst() {
				var ast = void 0;

				try {
					ast = babylon.parse(code, opts);

					ast = _babelTraverse2.default.removeProperties(ast, { preserveComments: opts.preserveComments });

					_babelTraverse2.default.cheap(ast, function (node) {
						node[FROM_TEMPLATE] = true;
					});
				} catch (err) {
					err.stack = err.stack + "from\n" + stack;
					throw err;
				}

				_getAst = function getAst() {
					return ast;
				};

				return ast;
			};

			return function () {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				return useTemplate(_getAst(), args);
			};
		};

		var _cloneDeep = __webpack_require__(579);

		var _cloneDeep2 = _interopRequireDefault(_cloneDeep);

		var _assign = __webpack_require__(179);

		var _assign2 = _interopRequireDefault(_assign);

		var _has = __webpack_require__(269);

		var _has2 = _interopRequireDefault(_has);

		var _babelTraverse = __webpack_require__(10);

		var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

		var _babylon = __webpack_require__(145);

		var babylon = _interopRequireWildcard(_babylon);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var FROM_TEMPLATE = "_fromTemplate";
		var TEMPLATE_SKIP = (0, _symbol2.default)();

		function useTemplate(ast, nodes) {
			ast = (0, _cloneDeep2.default)(ast);
			var _ast = ast;
			var program = _ast.program;

			if (nodes.length) {
				(0, _babelTraverse2.default)(ast, templateVisitor, null, nodes);
			}

			if (program.body.length > 1) {
				return program.body;
			} else {
				return program.body[0];
			}
		}

		var templateVisitor = {
			noScope: true,

			enter: function enter(path, args) {
				var node = path.node;

				if (node[TEMPLATE_SKIP]) return path.skip();

				if (t.isExpressionStatement(node)) {
					node = node.expression;
				}

				var replacement = void 0;

				if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
					if ((0, _has2.default)(args[0], node.name)) {
						replacement = args[0][node.name];
					} else if (node.name[0] === "$") {
						var i = +node.name.slice(1);
						if (args[i]) replacement = args[i];
					}
				}

				if (replacement === null) {
					path.remove();
				}

				if (replacement) {
					replacement[TEMPLATE_SKIP] = true;
					path.replaceInline(replacement);
				}
			},
			exit: function exit(_ref) {
				var node = _ref.node;

				if (!node.loc) _babelTraverse2.default.clearNode(node);
			}
		};
		module.exports = exports["default"];
	}, function (module, exports) {
		var isArray = Array.isArray;

		module.exports = isArray;
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _iterator = __webpack_require__(356);

		var _iterator2 = _interopRequireDefault(_iterator);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
			return typeof obj;
		} : function (obj) {
			return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj;
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
			return typeof obj === "undefined" ? "undefined" : _typeof(obj);
		} : function (obj) {
			return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		};
	}, function (module, exports) {
		function isObject(value) {
			var type = typeof value;
			return value != null && (type == 'object' || type == 'function');
		}

		module.exports = isObject;
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(417), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.visitors = exports.Hub = exports.Scope = exports.NodePath = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _path = __webpack_require__(33);

		Object.defineProperty(exports, "NodePath", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_path).default;
			}
		});

		var _scope = __webpack_require__(143);

		Object.defineProperty(exports, "Scope", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_scope).default;
			}
		});

		var _hub = __webpack_require__(222);

		Object.defineProperty(exports, "Hub", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_hub).default;
			}
		});
		exports.default = traverse;

		var _context = __webpack_require__(359);

		var _context2 = _interopRequireDefault(_context);

		var _visitors = __webpack_require__(376);

		var visitors = _interopRequireWildcard(_visitors);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _includes = __webpack_require__(116);

		var _includes2 = _interopRequireDefault(_includes);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _cache = __webpack_require__(86);

		var cache = _interopRequireWildcard(_cache);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.visitors = visitors;
		function traverse(parent, opts, scope, state, parentPath) {
			if (!parent) return;
			if (!opts) opts = {};

			if (!opts.noScope && !scope) {
				if (parent.type !== "Program" && parent.type !== "File") {
					throw new Error(messages.get("traverseNeedsParent", parent.type));
				}
			}

			visitors.explode(opts);

			traverse.node(parent, opts, scope, state, parentPath);
		}

		traverse.visitors = visitors;
		traverse.verify = visitors.verify;
		traverse.explode = visitors.explode;

		traverse.NodePath = __webpack_require__(33);
		traverse.Scope = __webpack_require__(143);
		traverse.Hub = __webpack_require__(222);

		traverse.cheap = function (node, enter) {
			return t.traverseFast(node, enter);
		};

		traverse.node = function (node, opts, scope, state, parentPath, skipKeys) {
			var keys = t.VISITOR_KEYS[node.type];
			if (!keys) return;

			var context = new _context2.default(scope, opts, state, parentPath);
			for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var key = _ref;

				if (skipKeys && skipKeys[key]) continue;
				if (context.visit(node, key)) return;
			}
		};

		traverse.clearNode = function (node, opts) {
			t.removeProperties(node, opts);

			cache.path.delete(node);
		};

		traverse.removeProperties = function (tree, opts) {
			t.traverseFast(tree, traverse.clearNode, opts);
			return tree;
		};

		function hasBlacklistedType(path, state) {
			if (path.node.type === state.type) {
				state.has = true;
				path.stop();
			}
		}

		traverse.hasType = function (tree, scope, type, blacklistTypes) {
			if ((0, _includes2.default)(blacklistTypes, tree.type)) return false;

			if (tree.type === type) return true;

			var state = {
				has: false,
				type: type
			};

			traverse(tree, {
				blacklist: blacklistTypes,
				enter: hasBlacklistedType
			}, scope, state);

			return state.has;
		};

		traverse.clearCache = function () {
			cache.clear();
		};

		traverse.copyCache = function (source, destination) {
			if (cache.path.has(source)) {
				cache.path.set(destination, cache.path.get(source));
			}
		};
	}, function (module, exports, __webpack_require__) {

		var store = __webpack_require__(158)('wks'),
		    uid = __webpack_require__(95),
		    Symbol = __webpack_require__(15).Symbol,
		    USE_SYMBOL = typeof Symbol == 'function';

		var $exports = module.exports = function (name) {
			return store[name] || (store[name] = USE_SYMBOL && (typeof Symbol === 'function' ? Symbol[name] : '@@name') || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
		};

		$exports.store = store;
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(412), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.plugins = undefined;

		var _identifier = __webpack_require__(66);

		var _options = __webpack_require__(388);

		var _tokenizer = __webpack_require__(226);

		var _tokenizer2 = _interopRequireDefault(_tokenizer);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var plugins = exports.plugins = {};

		var Parser = function (_Tokenizer) {
			_inherits(Parser, _Tokenizer);

			function Parser(options, input) {
				_classCallCheck(this, Parser);

				options = (0, _options.getOptions)(options);

				var _this = _possibleConstructorReturn(this, _Tokenizer.call(this, options, input));

				_this.options = options;
				_this.inModule = _this.options.sourceType === "module";
				_this.isReservedWord = _identifier.reservedWords[6];
				_this.input = input;
				_this.plugins = _this.loadPlugins(_this.options.plugins);
				_this.filename = options.sourceFilename;

				if (_this.state.pos === 0 && _this.input[0] === "#" && _this.input[1] === "!") {
					_this.skipLineComment(2);
				}
				return _this;
			}

			Parser.prototype.hasPlugin = function hasPlugin(name) {
				return !!(this.plugins["*"] || this.plugins[name]);
			};

			Parser.prototype.extend = function extend(name, f) {
				this[name] = f(this[name]);
			};

			Parser.prototype.loadPlugins = function loadPlugins(plugins) {
				var pluginMap = {};

				if (plugins.indexOf("flow") >= 0) {
					plugins = plugins.filter(function (plugin) {
						return plugin !== "flow";
					});
					plugins.push("flow");
				}

				for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var name = _ref;

					if (!pluginMap[name]) {
						pluginMap[name] = true;

						var plugin = exports.plugins[name];
						if (plugin) plugin(this);
					}
				}

				return pluginMap;
			};

			Parser.prototype.parse = function parse() {
				var file = this.startNode();
				var program = this.startNode();
				this.nextToken();
				return this.parseTopLevel(file, program);
			};

			return Parser;
		}(_tokenizer2.default);

		exports.default = Parser;
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var TokenType = exports.TokenType = function TokenType(label) {
			var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			_classCallCheck(this, TokenType);

			this.label = label;
			this.keyword = conf.keyword;
			this.beforeExpr = !!conf.beforeExpr;
			this.startsExpr = !!conf.startsExpr;
			this.rightAssociative = !!conf.rightAssociative;
			this.isLoop = !!conf.isLoop;
			this.isAssign = !!conf.isAssign;
			this.prefix = !!conf.prefix;
			this.postfix = !!conf.postfix;
			this.binop = conf.binop || null;
			this.updateContext = null;
		};

		function binop(name, prec) {
			return new TokenType(name, { beforeExpr: true, binop: prec });
		}
		var beforeExpr = { beforeExpr: true },
		    startsExpr = { startsExpr: true };

		var types = exports.types = {
			num: new TokenType("num", startsExpr),
			regexp: new TokenType("regexp", startsExpr),
			string: new TokenType("string", startsExpr),
			name: new TokenType("name", startsExpr),
			eof: new TokenType("eof"),

			bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
			bracketR: new TokenType("]"),
			braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
			braceBarL: new TokenType("{|", { beforeExpr: true, startsExpr: true }),
			braceR: new TokenType("}"),
			braceBarR: new TokenType("|}"),
			parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
			parenR: new TokenType(")"),
			comma: new TokenType(",", beforeExpr),
			semi: new TokenType(";", beforeExpr),
			colon: new TokenType(":", beforeExpr),
			doubleColon: new TokenType("::", beforeExpr),
			dot: new TokenType("."),
			question: new TokenType("?", beforeExpr),
			arrow: new TokenType("=>", beforeExpr),
			template: new TokenType("template"),
			ellipsis: new TokenType("...", beforeExpr),
			backQuote: new TokenType("`", startsExpr),
			dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
			at: new TokenType("@"),

			eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
			assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
			incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
			prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
			logicalOR: binop("||", 1),
			logicalAND: binop("&&", 2),
			bitwiseOR: binop("|", 3),
			bitwiseXOR: binop("^", 4),
			bitwiseAND: binop("&", 5),
			equality: binop("==/!=", 6),
			relational: binop("</>", 7),
			bitShift: binop("<</>>", 8),
			plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
			modulo: binop("%", 10),
			star: binop("*", 10),
			slash: binop("/", 10),
			exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
		};

		var keywords = exports.keywords = {};

		function kw(name) {
			var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			options.keyword = name;
			keywords[name] = types["_" + name] = new TokenType(name, options);
		}

		kw("break");
		kw("case", beforeExpr);
		kw("catch");
		kw("continue");
		kw("debugger");
		kw("default", beforeExpr);
		kw("do", { isLoop: true, beforeExpr: true });
		kw("else", beforeExpr);
		kw("finally");
		kw("for", { isLoop: true });
		kw("function", startsExpr);
		kw("if");
		kw("return", beforeExpr);
		kw("switch");
		kw("throw", beforeExpr);
		kw("try");
		kw("var");
		kw("let");
		kw("const");
		kw("while", { isLoop: true });
		kw("with");
		kw("new", { beforeExpr: true, startsExpr: true });
		kw("this", startsExpr);
		kw("super", startsExpr);
		kw("class");
		kw("extends", beforeExpr);
		kw("export");
		kw("import");
		kw("yield", { beforeExpr: true, startsExpr: true });
		kw("null", startsExpr);
		kw("true", startsExpr);
		kw("false", startsExpr);
		kw("in", { beforeExpr: true, binop: 7 });
		kw("instanceof", { beforeExpr: true, binop: 7 });
		kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
		kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
		kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });
	}, function (module, exports) {
		var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
		if (typeof __g == 'number') __g = global;
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			function normalizeArray(parts, allowAboveRoot) {
				var up = 0;
				for (var i = parts.length - 1; i >= 0; i--) {
					var last = parts[i];
					if (last === '.') {
						parts.splice(i, 1);
					} else if (last === '..') {
						parts.splice(i, 1);
						up++;
					} else if (up) {
						parts.splice(i, 1);
						up--;
					}
				}

				if (allowAboveRoot) {
					for (; up--; up) {
						parts.unshift('..');
					}
				}

				return parts;
			}

			var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
			var splitPath = function splitPath(filename) {
				return splitPathRe.exec(filename).slice(1);
			};

			exports.resolve = function () {
				var resolvedPath = '',
				    resolvedAbsolute = false;

				for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
					var path = i >= 0 ? arguments[i] : process.cwd();

					if (typeof path !== 'string') {
						throw new TypeError('Arguments to path.resolve must be strings');
					} else if (!path) {
						continue;
					}

					resolvedPath = path + '/' + resolvedPath;
					resolvedAbsolute = path.charAt(0) === '/';
				}

				resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
					return !!p;
				}), !resolvedAbsolute).join('/');

				return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
			};

			exports.normalize = function (path) {
				var isAbsolute = exports.isAbsolute(path),
				    trailingSlash = substr(path, -1) === '/';

				path = normalizeArray(filter(path.split('/'), function (p) {
					return !!p;
				}), !isAbsolute).join('/');

				if (!path && !isAbsolute) {
					path = '.';
				}
				if (path && trailingSlash) {
					path += '/';
				}

				return (isAbsolute ? '/' : '') + path;
			};

			exports.isAbsolute = function (path) {
				return path.charAt(0) === '/';
			};

			exports.join = function () {
				var paths = Array.prototype.slice.call(arguments, 0);
				return exports.normalize(filter(paths, function (p, index) {
					if (typeof p !== 'string') {
						throw new TypeError('Arguments to path.join must be strings');
					}
					return p;
				}).join('/'));
			};

			exports.relative = function (from, to) {
				from = exports.resolve(from).substr(1);
				to = exports.resolve(to).substr(1);

				function trim(arr) {
					var start = 0;
					for (; start < arr.length; start++) {
						if (arr[start] !== '') break;
					}

					var end = arr.length - 1;
					for (; end >= 0; end--) {
						if (arr[end] !== '') break;
					}

					if (start > end) return [];
					return arr.slice(start, end - start + 1);
				}

				var fromParts = trim(from.split('/'));
				var toParts = trim(to.split('/'));

				var length = Math.min(fromParts.length, toParts.length);
				var samePartsLength = length;
				for (var i = 0; i < length; i++) {
					if (fromParts[i] !== toParts[i]) {
						samePartsLength = i;
						break;
					}
				}

				var outputParts = [];
				for (var i = samePartsLength; i < fromParts.length; i++) {
					outputParts.push('..');
				}

				outputParts = outputParts.concat(toParts.slice(samePartsLength));

				return outputParts.join('/');
			};

			exports.sep = '/';
			exports.delimiter = ':';

			exports.dirname = function (path) {
				var result = splitPath(path),
				    root = result[0],
				    dir = result[1];

				if (!root && !dir) {
					return '.';
				}

				if (dir) {
					dir = dir.substr(0, dir.length - 1);
				}

				return root + dir;
			};

			exports.basename = function (path, ext) {
				var f = splitPath(path)[2];

				if (ext && f.substr(-1 * ext.length) === ext) {
					f = f.substr(0, f.length - ext.length);
				}
				return f;
			};

			exports.extname = function (path) {
				return splitPath(path)[3];
			};

			function filter(xs, f) {
				if (xs.filter) return xs.filter(f);
				var res = [];
				for (var i = 0; i < xs.length; i++) {
					if (f(xs[i], i, xs)) res.push(xs[i]);
				}
				return res;
			}

			var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
				return str.substr(start, len);
			} : function (str, start, len) {
				if (start < 0) start = str.length + start;
				return str.substr(start, len);
			};
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;
		exports.MESSAGES = undefined;

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		exports.get = get;
		exports.parseArgs = parseArgs;

		var _util = __webpack_require__(119);

		var util = _interopRequireWildcard(_util);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var MESSAGES = exports.MESSAGES = {
			tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
			classesIllegalBareSuper: "Illegal use of bare super",
			classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
			scopeDuplicateDeclaration: "Duplicate declaration $1",
			settersNoRest: "Setters aren't allowed to have a rest",
			noAssignmentsInForHead: "No assignments allowed in for-in/of head",
			expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
			invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
			readOnly: "$1 is read-only",
			unknownForHead: "Unknown node type $1 in ForStatement",
			didYouMean: "Did you mean $1?",
			codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
			missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
			unsupportedOutputType: "Unsupported output type $1",
			illegalMethodName: "Illegal method name $1",
			lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",

			modulesIllegalExportName: "Illegal export $1",
			modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",

			undeclaredVariable: "Reference to undeclared variable $1",
			undeclaredVariableType: "Referencing a type alias outside of a type annotation",
			undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",

			traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a $1 node without passing scope and parentPath.",
			traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
			traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
			traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",

			pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
			pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
			pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
			pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
		};

		function get(key) {
			for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				args[_key - 1] = arguments[_key];
			}

			var msg = MESSAGES[key];
			if (!msg) throw new ReferenceError("Unknown message " + (0, _stringify2.default)(key));

			args = parseArgs(args);

			return msg.replace(/\$(\d+)/g, function (str, i) {
				return args[i - 1];
			});
		}

		function parseArgs(args) {
			return args.map(function (val) {
				if (val != null && val.inspect) {
					return val.inspect();
				} else {
					try {
						return (0, _stringify2.default)(val) || val + "";
					} catch (e) {
						return util.inspect(val);
					}
				}
			});
		}
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(21);
		module.exports = function (it) {
			if (!isObject(it)) throw TypeError(it + ' is not an object!');
			return it;
		};
	}, function (module, exports, __webpack_require__) {
		module.exports = !__webpack_require__(34)(function () {
			return Object.defineProperty({}, 'a', { get: function get() {
					return 7;
				} }).a != 7;
		});
	}, function (module, exports, __webpack_require__) {

		var global = __webpack_require__(15),
		    core = __webpack_require__(4),
		    ctx = __webpack_require__(67),
		    hide = __webpack_require__(31),
		    PROTOTYPE = 'prototype';

		var $export = function $export(type, name, source) {
			var IS_FORCED = type & $export.F,
			    IS_GLOBAL = type & $export.G,
			    IS_STATIC = type & $export.S,
			    IS_PROTO = type & $export.P,
			    IS_BIND = type & $export.B,
			    IS_WRAP = type & $export.W,
			    exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
			    expProto = exports[PROTOTYPE],
			    target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
			    key,
			    own,
			    out;
			if (IS_GLOBAL) source = name;
			for (key in source) {
				own = !IS_FORCED && target && target[key] !== undefined;
				if (own && key in exports) continue;

				out = own ? target[key] : source[key];

				exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function (C) {
					var F = function F(a, b, c) {
						if (this instanceof C) {
							switch (arguments.length) {
								case 0:
									return new C();
								case 1:
									return new C(a);
								case 2:
									return new C(a, b);
							}return new C(a, b, c);
						}return C.apply(this, arguments);
					};
					F[PROTOTYPE] = C[PROTOTYPE];
					return F;
				}(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;

				if (IS_PROTO) {
					(exports.virtual || (exports.virtual = {}))[key] = out;

					if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
				}
			}
		};

		$export.F = 1;
		$export.G = 2;
		$export.S = 4;
		$export.P = 8;
		$export.B = 16;
		$export.W = 32;
		$export.U = 64;
		$export.R = 128;
		module.exports = $export;
	}, function (module, exports) {

		module.exports = function (it) {
			return typeof it === 'object' ? it !== null : typeof it === 'function';
		};
	}, function (module, exports, __webpack_require__) {

		var anObject = __webpack_require__(18),
		    IE8_DOM_DEFINE = __webpack_require__(231),
		    toPrimitive = __webpack_require__(161),
		    dP = Object.defineProperty;

		exports.f = __webpack_require__(19) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
			anObject(O);
			P = toPrimitive(P, true);
			anObject(Attributes);
			if (IE8_DOM_DEFINE) try {
				return dP(O, P, Attributes);
			} catch (e) {}
			if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
			if ('value' in Attributes) O[P] = Attributes.value;
			return O;
		};
	}, function (module, exports, __webpack_require__) {

		var freeGlobal = __webpack_require__(258);

		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		var root = freeGlobal || freeSelf || Function('return this')();

		module.exports = root;
	}, function (module, exports, __webpack_require__) {

		var isFunction = __webpack_require__(118),
		    isLength = __webpack_require__(180);

		function isArrayLike(value) {
			return value != null && isLength(value.length) && !isFunction(value);
		}

		module.exports = isArrayLike;
	}, function (module, exports, __webpack_require__) {

		var arrayLikeKeys = __webpack_require__(245),
		    baseKeys = __webpack_require__(500),
		    isArrayLike = __webpack_require__(24);

		function keys(object) {
			return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		module.exports = keys;
	}, function (module, exports) {
		var process = module.exports = {};

		var cachedSetTimeout;
		var cachedClearTimeout;

		function defaultSetTimout() {
			throw new Error('setTimeout has not been defined');
		}
		function defaultClearTimeout() {
			throw new Error('clearTimeout has not been defined');
		}
		(function () {
			try {
				if (typeof setTimeout === 'function') {
					cachedSetTimeout = setTimeout;
				} else {
					cachedSetTimeout = defaultSetTimout;
				}
			} catch (e) {
				cachedSetTimeout = defaultSetTimout;
			}
			try {
				if (typeof clearTimeout === 'function') {
					cachedClearTimeout = clearTimeout;
				} else {
					cachedClearTimeout = defaultClearTimeout;
				}
			} catch (e) {
				cachedClearTimeout = defaultClearTimeout;
			}
		})();
		function runTimeout(fun) {
			if (cachedSetTimeout === setTimeout) {
				return setTimeout(fun, 0);
			}

			if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
				cachedSetTimeout = setTimeout;
				return setTimeout(fun, 0);
			}
			try {
				return cachedSetTimeout(fun, 0);
			} catch (e) {
				try {
					return cachedSetTimeout.call(null, fun, 0);
				} catch (e) {
					return cachedSetTimeout.call(this, fun, 0);
				}
			}
		}
		function runClearTimeout(marker) {
			if (cachedClearTimeout === clearTimeout) {
				return clearTimeout(marker);
			}

			if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
				cachedClearTimeout = clearTimeout;
				return clearTimeout(marker);
			}
			try {
				return cachedClearTimeout(marker);
			} catch (e) {
				try {
					return cachedClearTimeout.call(null, marker);
				} catch (e) {
					return cachedClearTimeout.call(this, marker);
				}
			}
		}
		var queue = [];
		var draining = false;
		var currentQueue;
		var queueIndex = -1;

		function cleanUpNextTick() {
			if (!draining || !currentQueue) {
				return;
			}
			draining = false;
			if (currentQueue.length) {
				queue = currentQueue.concat(queue);
			} else {
				queueIndex = -1;
			}
			if (queue.length) {
				drainQueue();
			}
		}

		function drainQueue() {
			if (draining) {
				return;
			}
			var timeout = runTimeout(cleanUpNextTick);
			draining = true;

			var len = queue.length;
			while (len) {
				currentQueue = queue;
				queue = [];
				while (++queueIndex < len) {
					if (currentQueue) {
						currentQueue[queueIndex].run();
					}
				}
				queueIndex = -1;
				len = queue.length;
			}
			currentQueue = null;
			draining = false;
			runClearTimeout(timeout);
		}

		process.nextTick = function (fun) {
			var args = new Array(arguments.length - 1);
			if (arguments.length > 1) {
				for (var i = 1; i < arguments.length; i++) {
					args[i - 1] = arguments[i];
				}
			}
			queue.push(new Item(fun, args));
			if (queue.length === 1 && !draining) {
				runTimeout(drainQueue);
			}
		};

		function Item(fun, array) {
			this.fun = fun;
			this.array = array;
		}
		Item.prototype.run = function () {
			this.fun.apply(null, this.array);
		};
		process.title = 'browser';
		process.browser = true;
		process.env = {};
		process.argv = [];
		process.version = '';
		process.versions = {};

		function noop() {}

		process.on = noop;
		process.addListener = noop;
		process.once = noop;
		process.off = noop;
		process.removeListener = noop;
		process.removeAllListeners = noop;
		process.emit = noop;

		process.binding = function (name) {
			throw new Error('process.binding is not supported');
		};

		process.cwd = function () {
			return '/';
		};
		process.chdir = function (dir) {
			throw new Error('process.chdir is not supported');
		};
		process.umask = function () {
			return 0;
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(408), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(414), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.NODE_FIELDS = exports.ALIAS_KEYS = exports.VISITOR_KEYS = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		exports.assertEach = assertEach;
		exports.assertOneOf = assertOneOf;
		exports.assertNodeType = assertNodeType;
		exports.assertNodeOrValueType = assertNodeOrValueType;
		exports.assertValueType = assertValueType;
		exports.chain = chain;
		exports.default = defineType;

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var VISITOR_KEYS = exports.VISITOR_KEYS = {};
		var ALIAS_KEYS = exports.ALIAS_KEYS = {};
		var NODE_FIELDS = exports.NODE_FIELDS = {};
		var BUILDER_KEYS = exports.BUILDER_KEYS = {};
		var DEPRECATED_KEYS = exports.DEPRECATED_KEYS = {};

		function getType(val) {
			if (Array.isArray(val)) {
				return "array";
			} else if (val === null) {
				return "null";
			} else if (val === undefined) {
				return "undefined";
			} else {
				return typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val);
			}
		}

		function assertEach(callback) {
			function validator(node, key, val) {
				if (!Array.isArray(val)) return;

				for (var i = 0; i < val.length; i++) {
					callback(node, key + "[" + i + "]", val[i]);
				}
			}
			validator.each = callback;
			return validator;
		}

		function assertOneOf() {
			for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
				vals[_key] = arguments[_key];
			}

			function validate(node, key, val) {
				if (vals.indexOf(val) < 0) {
					throw new TypeError("Property " + key + " expected value to be one of " + (0, _stringify2.default)(vals) + " but got " + (0, _stringify2.default)(val));
				}
			}

			validate.oneOf = vals;

			return validate;
		}

		function assertNodeType() {
			for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
				types[_key2] = arguments[_key2];
			}

			function validate(node, key, val) {
				var valid = false;

				for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var type = _ref;

					if (t.is(type, val)) {
						valid = true;
						break;
					}
				}

				if (!valid) {
					throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
				}
			}

			validate.oneOfNodeTypes = types;

			return validate;
		}

		function assertNodeOrValueType() {
			for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
				types[_key3] = arguments[_key3];
			}

			function validate(node, key, val) {
				var valid = false;

				for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var type = _ref2;

					if (getType(val) === type || t.is(type, val)) {
						valid = true;
						break;
					}
				}

				if (!valid) {
					throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + (0, _stringify2.default)(types) + " " + ("but instead got " + (0, _stringify2.default)(val && val.type)));
				}
			}

			validate.oneOfNodeOrValueTypes = types;

			return validate;
		}

		function assertValueType(type) {
			function validate(node, key, val) {
				var valid = getType(val) === type;

				if (!valid) {
					throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
				}
			}

			validate.type = type;

			return validate;
		}

		function chain() {
			for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
				fns[_key4] = arguments[_key4];
			}

			function validate() {
				for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var fn = _ref3;

					fn.apply(undefined, arguments);
				}
			}
			validate.chainOf = fns;
			return validate;
		}

		function defineType(type) {
			var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			var inherits = opts.inherits && store[opts.inherits] || {};

			opts.fields = opts.fields || inherits.fields || {};
			opts.visitor = opts.visitor || inherits.visitor || [];
			opts.aliases = opts.aliases || inherits.aliases || [];
			opts.builder = opts.builder || inherits.builder || opts.visitor || [];

			if (opts.deprecatedAlias) {
				DEPRECATED_KEYS[opts.deprecatedAlias] = type;
			}

			for (var _iterator4 = opts.visitor.concat(opts.builder), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
				var _ref4;

				if (_isArray4) {
					if (_i4 >= _iterator4.length) break;
					_ref4 = _iterator4[_i4++];
				} else {
					_i4 = _iterator4.next();
					if (_i4.done) break;
					_ref4 = _i4.value;
				}

				var _key5 = _ref4;

				opts.fields[_key5] = opts.fields[_key5] || {};
			}

			for (var key in opts.fields) {
				var field = opts.fields[key];

				if (opts.builder.indexOf(key) === -1) {
					field.optional = true;
				}
				if (field.default === undefined) {
					field.default = null;
				} else if (!field.validate) {
					field.validate = assertValueType(getType(field.default));
				}
			}

			VISITOR_KEYS[type] = opts.visitor;
			BUILDER_KEYS[type] = opts.builder;
			NODE_FIELDS[type] = opts.fields;
			ALIAS_KEYS[type] = opts.aliases;

			store[type] = opts;
		}

		var store = {};
	}, function (module, exports) {

		var hasOwnProperty = {}.hasOwnProperty;
		module.exports = function (it, key) {
			return hasOwnProperty.call(it, key);
		};
	}, function (module, exports, __webpack_require__) {

		var dP = __webpack_require__(22),
		    createDesc = __webpack_require__(92);
		module.exports = __webpack_require__(19) ? function (object, key, value) {
			return dP.f(object, key, createDesc(1, value));
		} : function (object, key, value) {
			object[key] = value;
			return object;
		};
	}, function (module, exports) {
		function isObjectLike(value) {
			return value != null && typeof value == 'object';
		}

		module.exports = isObjectLike;
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _virtualTypes = __webpack_require__(223);

		var virtualTypes = _interopRequireWildcard(_virtualTypes);

		var _debug2 = __webpack_require__(239);

		var _debug3 = _interopRequireDefault(_debug2);

		var _invariant = __webpack_require__(464);

		var _invariant2 = _interopRequireDefault(_invariant);

		var _index = __webpack_require__(10);

		var _index2 = _interopRequireDefault(_index);

		var _assign = __webpack_require__(179);

		var _assign2 = _interopRequireDefault(_assign);

		var _scope = __webpack_require__(143);

		var _scope2 = _interopRequireDefault(_scope);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _cache = __webpack_require__(86);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var _debug = (0, _debug3.default)("babel");

		var NodePath = function () {
			function NodePath(hub, parent) {
				(0, _classCallCheck3.default)(this, NodePath);

				this.parent = parent;
				this.hub = hub;
				this.contexts = [];
				this.data = {};
				this.shouldSkip = false;
				this.shouldStop = false;
				this.removed = false;
				this.state = null;
				this.opts = null;
				this.skipKeys = null;
				this.parentPath = null;
				this.context = null;
				this.container = null;
				this.listKey = null;
				this.inList = false;
				this.parentKey = null;
				this.key = null;
				this.node = null;
				this.scope = null;
				this.type = null;
				this.typeAnnotation = null;
			}

			NodePath.get = function get(_ref) {
				var hub = _ref.hub;
				var parentPath = _ref.parentPath;
				var parent = _ref.parent;
				var container = _ref.container;
				var listKey = _ref.listKey;
				var key = _ref.key;

				if (!hub && parentPath) {
					hub = parentPath.hub;
				}

				(0, _invariant2.default)(parent, "To get a node path the parent needs to exist");

				var targetNode = container[key];

				var paths = _cache.path.get(parent) || [];
				if (!_cache.path.has(parent)) {
					_cache.path.set(parent, paths);
				}

				var path = void 0;

				for (var i = 0; i < paths.length; i++) {
					var pathCheck = paths[i];
					if (pathCheck.node === targetNode) {
						path = pathCheck;
						break;
					}
				}

				if (!path) {
					path = new NodePath(hub, parent);
					paths.push(path);
				}

				path.setup(parentPath, container, listKey, key);

				return path;
			};

			NodePath.prototype.getScope = function getScope(scope) {
				var ourScope = scope;

				if (this.isScope()) {
					ourScope = new _scope2.default(this, scope);
				}

				return ourScope;
			};

			NodePath.prototype.setData = function setData(key, val) {
				return this.data[key] = val;
			};

			NodePath.prototype.getData = function getData(key, def) {
				var val = this.data[key];
				if (!val && def) val = this.data[key] = def;
				return val;
			};

			NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg) {
				var Error = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];

				return this.hub.file.buildCodeFrameError(this.node, msg, Error);
			};

			NodePath.prototype.traverse = function traverse(visitor, state) {
				(0, _index2.default)(this.node, visitor, this.scope, state, this);
			};

			NodePath.prototype.mark = function mark(type, message) {
				this.hub.file.metadata.marked.push({
					type: type,
					message: message,
					loc: this.node.loc
				});
			};

			NodePath.prototype.set = function set(key, node) {
				t.validate(this.node, key, node);
				this.node[key] = node;
			};

			NodePath.prototype.getPathLocation = function getPathLocation() {
				var parts = [];
				var path = this;
				do {
					var key = path.key;
					if (path.inList) key = path.listKey + "[" + key + "]";
					parts.unshift(key);
				} while (path = path.parentPath);
				return parts.join(".");
			};

			NodePath.prototype.debug = function debug(buildMessage) {
				if (!_debug.enabled) return;
				_debug(this.getPathLocation() + " " + this.type + ": " + buildMessage());
			};

			return NodePath;
		}();

		exports.default = NodePath;

		(0, _assign2.default)(NodePath.prototype, __webpack_require__(360));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(366));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(374));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(364));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(363));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(369));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(362));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(373));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(372));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(365));
		(0, _assign2.default)(NodePath.prototype, __webpack_require__(361));

		var _loop2 = function _loop2() {
			if (_isArray) {
				if (_i >= _iterator.length) return "break";
				_ref2 = _iterator[_i++];
			} else {
				_i = _iterator.next();
				if (_i.done) return "break";
				_ref2 = _i.value;
			}

			var type = _ref2;

			var typeKey = "is" + type;
			NodePath.prototype[typeKey] = function (opts) {
				return t[typeKey](this.node, opts);
			};

			NodePath.prototype["assert" + type] = function (opts) {
				if (!this[typeKey](opts)) {
					throw new TypeError("Expected node path of type " + type);
				}
			};
		};

		for (var _iterator = t.TYPES, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
			var _ref2;

			var _ret2 = _loop2();

			if (_ret2 === "break") break;
		}

		var _loop = function _loop(type) {
			if (type[0] === "_") return "continue";
			if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);

			var virtualType = virtualTypes[type];

			NodePath.prototype["is" + type] = function (opts) {
				return virtualType.checkPath(this, opts);
			};
		};

		for (var type in virtualTypes) {
			var _ret = _loop(type);

			if (_ret === "continue") continue;
		}
		module.exports = exports["default"];
	}, function (module, exports) {

		module.exports = function (exec) {
			try {
				return !!exec();
			} catch (e) {
				return true;
			}
		};
	}, function (module, exports, __webpack_require__) {
		var IObject = __webpack_require__(151),
		    defined = __webpack_require__(88);
		module.exports = function (it) {
			return IObject(defined(it));
		};
	}, function (module, exports, __webpack_require__) {

		var baseIsNative = __webpack_require__(497),
		    getValue = __webpack_require__(536);

		function getNative(object, key) {
			var value = getValue(object, key);
			return baseIsNative(value) ? value : undefined;
		}

		module.exports = getNative;
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var node = _ref.node;
			var parent = _ref.parent;
			var scope = _ref.scope;
			var id = _ref.id;

			if (node.id) return;

			if ((t.isObjectProperty(parent) || t.isObjectMethod(parent, { kind: "method" })) && (!parent.computed || t.isLiteral(parent.key))) {
				id = parent.key;
			} else if (t.isVariableDeclarator(parent)) {
				id = parent.id;

				if (t.isIdentifier(id)) {
					var binding = scope.parent.getBinding(id.name);
					if (binding && binding.constant && scope.getBinding(id.name) === binding) {
						node.id = id;
						node.id[t.NOT_LOCAL_BINDING] = true;
						return;
					}
				}
			} else if (t.isAssignmentExpression(parent)) {
				id = parent.left;
			} else if (!id) {
				return;
			}

			var name = void 0;
			if (id && t.isLiteral(id)) {
				name = id.value;
			} else if (id && t.isIdentifier(id)) {
				name = id.name;
			} else {
				return;
			}

			name = t.toBindingIdentifierName(name);
			id = t.identifier(name);

			id[t.NOT_LOCAL_BINDING] = true;

			var state = visit(node, name, scope);
			return wrap(state, node, id, scope) || node;
		};

		var _babelHelperGetFunctionArity = __webpack_require__(193);

		var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildPropertyMethodAssignmentWrapper = (0, _babelTemplate2.default)("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

		var buildGeneratorPropertyMethodAssignmentWrapper = (0, _babelTemplate2.default)("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

		var visitor = {
			"ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(path, state) {
				if (path.node.name !== state.name) return;

				var localDeclar = path.scope.getBindingIdentifier(state.name);
				if (localDeclar !== state.outerDeclar) return;

				state.selfReference = true;
				path.stop();
			}
		};

		function wrap(state, method, id, scope) {
			if (state.selfReference) {
				if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
					scope.rename(id.name);
				} else {
					if (!t.isFunction(method)) return;

					var build = buildPropertyMethodAssignmentWrapper;
					if (method.generator) build = buildGeneratorPropertyMethodAssignmentWrapper;
					var _template = build({
						FUNCTION: method,
						FUNCTION_ID: id,
						FUNCTION_KEY: scope.generateUidIdentifier(id.name)
					}).expression;
					_template.callee._skipModulesRemap = true;

					var params = _template.callee.body.body[0].params;
					for (var i = 0, len = (0, _babelHelperGetFunctionArity2.default)(method); i < len; i++) {
						params.push(scope.generateUidIdentifier("x"));
					}

					return _template;
				}
			}

			method.id = id;
			scope.getProgramParent().references[id.name] = true;
		}

		function visit(node, name, scope) {
			var state = {
				selfAssignment: false,
				selfReference: false,
				outerDeclar: scope.getBindingIdentifier(name),
				references: [],
				name: name
			};

			var binding = scope.getOwnBinding(name);

			if (binding) {
				if (binding.kind === "param") {
					state.selfReference = true;
				} else {}
			} else if (state.outerDeclar || scope.hasGlobal(name)) {
				scope.traverse(node, visitor, state);
			}

			return state;
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _setPrototypeOf = __webpack_require__(354);

		var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.default = function (subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
			}

			subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
				constructor: {
					value: subClass,
					enumerable: false,
					writable: true,
					configurable: true
				}
			});
			if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.default = function (self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}

			return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
		};
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.isNewLine = isNewLine;


		var lineBreak = exports.lineBreak = /\r\n?|\n|\u2028|\u2029/;
		var lineBreakG = exports.lineBreakG = new RegExp(lineBreak.source, "g");

		function isNewLine(code) {
			return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
		}

		var nonASCIIwhitespace = exports.nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	}, function (module, exports, __webpack_require__) {
		var $keys = __webpack_require__(237),
		    enumBugKeys = __webpack_require__(150);

		module.exports = Object.keys || function keys(O) {
			return $keys(O, enumBugKeys);
		};
	}, function (module, exports, __webpack_require__) {

		var baseMatches = __webpack_require__(501),
		    baseMatchesProperty = __webpack_require__(502),
		    identity = __webpack_require__(115),
		    isArray = __webpack_require__(6),
		    property = __webpack_require__(598);

		function baseIteratee(value) {
			if (typeof value == 'function') {
				return value;
			}
			if (value == null) {
				return identity;
			}
			if (typeof value == 'object') {
				return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
			}
			return property(value);
		}

		module.exports = baseIteratee;
	}, function (module, exports, __webpack_require__) {

		var assignValue = __webpack_require__(170),
		    baseAssignValue = __webpack_require__(171);

		function copyObject(source, props, object, customizer) {
			var isNew = !object;
			object || (object = {});

			var index = -1,
			    length = props.length;

			while (++index < length) {
				var key = props[index];

				var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

				if (newValue === undefined) {
					newValue = source[key];
				}
				if (isNew) {
					baseAssignValue(object, key, newValue);
				} else {
					assignValue(object, key, newValue);
				}
			}
			return object;
		}

		module.exports = copyObject;
	}, function (module, exports) {
		function eq(value, other) {
			return value === other || value !== value && other !== other;
		}

		module.exports = eq;
	}, function (module, exports, __webpack_require__) {

		var toFinite = __webpack_require__(604);

		function toInteger(value) {
			var result = toFinite(value),
			    remainder = result % 1;

			return result === result ? remainder ? result - remainder : result : 0;
		}

		module.exports = toInteger;
	}, function (module, exports) {

		"use strict";

		module.exports = {
			filename: {
				type: "filename",
				description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
				default: "unknown",
				shorthand: "f"
			},

			filenameRelative: {
				hidden: true,
				type: "string"
			},

			inputSourceMap: {
				hidden: true
			},

			env: {
				hidden: true,
				default: {}
			},

			mode: {
				description: "",
				hidden: true
			},

			retainLines: {
				type: "boolean",
				default: false,
				description: "retain line numbers - will result in really ugly code"
			},

			highlightCode: {
				description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
				type: "boolean",
				default: true
			},

			suppressDeprecationMessages: {
				type: "boolean",
				default: false,
				hidden: true
			},

			presets: {
				type: "list",
				description: "",
				default: []
			},

			plugins: {
				type: "list",
				default: [],
				description: ""
			},

			ignore: {
				type: "list",
				description: "list of glob paths to **not** compile",
				default: []
			},

			only: {
				type: "list",
				description: "list of glob paths to **only** compile"
			},

			code: {
				hidden: true,
				default: true,
				type: "boolean"
			},

			metadata: {
				hidden: true,
				default: true,
				type: "boolean"
			},

			ast: {
				hidden: true,
				default: true,
				type: "boolean"
			},

			extends: {
				type: "string",
				hidden: true
			},

			comments: {
				type: "boolean",
				default: true,
				description: "write comments to generated output (true by default)"
			},

			shouldPrintComment: {
				hidden: true,
				description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
			},

			wrapPluginVisitorMethod: {
				hidden: true,
				description: "optional callback to wrap all visitor methods"
			},

			compact: {
				type: "booleanString",
				default: "auto",
				description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
			},

			minified: {
				type: "boolean",
				default: false,
				description: "save as much bytes when printing [true|false]"
			},

			sourceMap: {
				alias: "sourceMaps",
				hidden: true
			},

			sourceMaps: {
				type: "booleanString",
				description: "[true|false|inline]",
				default: false,
				shorthand: "s"
			},

			sourceMapTarget: {
				type: "string",
				description: "set `file` on returned source map"
			},

			sourceFileName: {
				type: "string",
				description: "set `sources[0]` on returned source map"
			},

			sourceRoot: {
				type: "filename",
				description: "the root from which all sources are relative"
			},

			babelrc: {
				description: "Whether or not to look up .babelrc and .babelignore files",
				type: "boolean",
				default: true
			},

			sourceType: {
				description: "",
				default: "module"
			},

			auxiliaryCommentBefore: {
				type: "string",
				description: "print a comment before any injected non-user code"
			},

			auxiliaryCommentAfter: {
				type: "string",
				description: "print a comment after any injected non-user code"
			},

			resolveModuleSource: {
				hidden: true
			},

			getModuleId: {
				hidden: true
			},

			moduleRoot: {
				type: "filename",
				description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
			},

			moduleIds: {
				type: "boolean",
				default: false,
				shorthand: "M",
				description: "insert an explicit id for modules"
			},

			moduleId: {
				description: "specify a custom name for module ids",
				type: "string"
			},

			passPerPreset: {
				description: "Whether to spawn a traversal pass per a preset. By default all presets are merged.",
				type: "boolean",
				default: false,
				hidden: true
			}
		};
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			"use strict";

			exports.__esModule = true;

			var _stringify = __webpack_require__(27);

			var _stringify2 = _interopRequireDefault(_stringify);

			var _assign = __webpack_require__(85);

			var _assign2 = _interopRequireDefault(_assign);

			var _getIterator2 = __webpack_require__(2);

			var _getIterator3 = _interopRequireDefault(_getIterator2);

			var _typeof2 = __webpack_require__(7);

			var _typeof3 = _interopRequireDefault(_typeof2);

			var _classCallCheck2 = __webpack_require__(3);

			var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

			var _node = __webpack_require__(186);

			var context = _interopRequireWildcard(_node);

			var _plugin2 = __webpack_require__(77);

			var _plugin3 = _interopRequireDefault(_plugin2);

			var _babelMessages = __webpack_require__(17);

			var messages = _interopRequireWildcard(_babelMessages);

			var _index = __webpack_require__(123);

			var _resolve = __webpack_require__(187);

			var _resolve2 = _interopRequireDefault(_resolve);

			var _cloneDeepWith = __webpack_require__(580);

			var _cloneDeepWith2 = _interopRequireDefault(_cloneDeepWith);

			var _clone = __webpack_require__(113);

			var _clone2 = _interopRequireDefault(_clone);

			var _merge = __webpack_require__(287);

			var _merge2 = _interopRequireDefault(_merge);

			var _config2 = __webpack_require__(46);

			var _config3 = _interopRequireDefault(_config2);

			var _removed = __webpack_require__(125);

			var _removed2 = _interopRequireDefault(_removed);

			var _buildConfigChain = __webpack_require__(122);

			var _buildConfigChain2 = _interopRequireDefault(_buildConfigChain);

			var _path = __webpack_require__(16);

			var _path2 = _interopRequireDefault(_path);

			function _interopRequireWildcard(obj) {
				if (obj && obj.__esModule) {
					return obj;
				} else {
					var newObj = {};if (obj != null) {
						for (var key in obj) {
							if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
						}
					}newObj.default = obj;return newObj;
				}
			}

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var OptionManager = function () {
				function OptionManager(log) {
					(0, _classCallCheck3.default)(this, OptionManager);

					this.resolvedConfigs = [];
					this.options = OptionManager.createBareOptions();
					this.log = log;
				}

				OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
					for (var _iterator = OptionManager.memoisedPlugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var cache = _ref;

						if (cache.container === fn) return cache.plugin;
					}

					var obj = void 0;

					if (typeof fn === "function") {
						obj = fn(context);
					} else {
						obj = fn;
					}

					if ((typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) === "object") {
						var _plugin = new _plugin3.default(obj, alias);
						OptionManager.memoisedPlugins.push({
							container: fn,
							plugin: _plugin
						});
						return _plugin;
					} else {
						throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj === "undefined" ? "undefined" : (0, _typeof3.default)(obj)) + loc + i);
					}
				};

				OptionManager.createBareOptions = function createBareOptions() {
					var opts = {};

					for (var _key in _config3.default) {
						var opt = _config3.default[_key];
						opts[_key] = (0, _clone2.default)(opt.default);
					}

					return opts;
				};

				OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
					plugin = plugin.__esModule ? plugin.default : plugin;

					if (!(plugin instanceof _plugin3.default)) {
						if (typeof plugin === "function" || (typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)) === "object") {
							plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
						} else {
							throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin === "undefined" ? "undefined" : (0, _typeof3.default)(plugin)));
						}
					}

					plugin.init(loc, i);

					return plugin;
				};

				OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
					return plugins.map(function (val, i) {
						var plugin = void 0,
						    options = void 0;

						if (!val) {
							throw new TypeError("Falsy value found in plugins");
						}

						if (Array.isArray(val)) {
							plugin = val[0];
							options = val[1];
						} else {
							plugin = val;
						}

						var alias = typeof plugin === "string" ? plugin : loc + "$" + i;

						if (typeof plugin === "string") {
							var pluginLoc = (0, _resolve2.default)("babel-plugin-" + plugin, dirname) || (0, _resolve2.default)(plugin, dirname);
							if (pluginLoc) {
								plugin = __webpack_require__(188)(pluginLoc);
							} else {
								throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
							}
						}

						plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);

						return [plugin, options];
					});
				};

				OptionManager.prototype.mergeOptions = function mergeOptions(_ref2) {
					var _this = this;

					var rawOpts = _ref2.options;
					var extendingOpts = _ref2.extending;
					var alias = _ref2.alias;
					var loc = _ref2.loc;
					var dirname = _ref2.dirname;

					alias = alias || "foreign";
					if (!rawOpts) return;

					if ((typeof rawOpts === "undefined" ? "undefined" : (0, _typeof3.default)(rawOpts)) !== "object" || Array.isArray(rawOpts)) {
						this.log.error("Invalid options type for " + alias, TypeError);
					}

					var opts = (0, _cloneDeepWith2.default)(rawOpts, function (val) {
						if (val instanceof _plugin3.default) {
							return val;
						}
					});

					dirname = dirname || process.cwd();
					loc = loc || alias;

					for (var _key2 in opts) {
						var option = _config3.default[_key2];

						if (!option && this.log) {
							var pluginOptsInfo = "Check out http://babeljs.io/docs/usage/options/ for more info";

							if (_removed2.default[_key2]) {
								this.log.error("Using removed Babel 5 option: " + alias + "." + _key2 + " - " + _removed2.default[_key2].message, ReferenceError);
							} else {
								this.log.error("Unknown option: " + alias + "." + _key2 + ". " + pluginOptsInfo, ReferenceError);
							}
						}
					}

					(0, _index.normaliseOptions)(opts);

					if (opts.plugins) {
						opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
					}

					if (opts.presets) {
						if (opts.passPerPreset) {
							opts.presets = this.resolvePresets(opts.presets, dirname, function (preset, presetLoc) {
								_this.mergeOptions({
									options: preset,
									extending: preset,
									alias: presetLoc,
									loc: presetLoc,
									dirname: dirname
								});
							});
						} else {
							this.mergePresets(opts.presets, dirname);
							delete opts.presets;
						}
					}

					if (rawOpts === extendingOpts) {
						(0, _assign2.default)(extendingOpts, opts);
					} else {
						(0, _merge2.default)(extendingOpts || this.options, opts);
					}
				};

				OptionManager.prototype.mergePresets = function mergePresets(presets, dirname) {
					var _this2 = this;

					this.resolvePresets(presets, dirname, function (presetOpts, presetLoc) {
						_this2.mergeOptions({
							options: presetOpts,
							alias: presetLoc,
							loc: presetLoc,
							dirname: _path2.default.dirname(presetLoc || "")
						});
					});
				};

				OptionManager.prototype.resolvePresets = function resolvePresets(presets, dirname, onResolve) {
					return presets.map(function (val) {
						var options = void 0;
						if (Array.isArray(val)) {
							if (val.length > 2) {
								throw new Error("Unexpected extra options " + (0, _stringify2.default)(val.slice(2)) + " passed to preset.");
							}

							var _val = val;
							val = _val[0];
							options = _val[1];
						}

						var presetLoc = void 0;
						if (typeof val === "string") {
							presetLoc = (0, _resolve2.default)("babel-preset-" + val, dirname) || (0, _resolve2.default)(val, dirname);
							if (!presetLoc) {
								throw new Error("Couldn't find preset " + (0, _stringify2.default)(val) + " relative to directory " + (0, _stringify2.default)(dirname));
							}

							val = __webpack_require__(188)(presetLoc);
						}

						if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) === "object" && val.buildPreset) val = val.buildPreset;

						if (typeof val !== "function" && options !== undefined) {
							throw new Error("Options " + (0, _stringify2.default)(options) + " passed to " + (presetLoc || "a preset") + " which does not accept options.");
						}

						if (typeof val === "function") val = val(context, options);

						if ((typeof val === "undefined" ? "undefined" : (0, _typeof3.default)(val)) !== "object") {
							throw new Error("Unsupported preset format: " + val + ".");
						}

						onResolve && onResolve(val);
						return val;
					});
				};

				OptionManager.prototype.normaliseOptions = function normaliseOptions() {
					var opts = this.options;

					for (var _key3 in _config3.default) {
						var option = _config3.default[_key3];
						var val = opts[_key3];

						if (!val && option.optional) continue;

						if (option.alias) {
							opts[option.alias] = opts[option.alias] || val;
						} else {
							opts[_key3] = val;
						}
					}
				};

				OptionManager.prototype.init = function init() {
					var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

					for (var _iterator2 = (0, _buildConfigChain2.default)(opts, this.log), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
						var _ref3;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref3 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref3 = _i2.value;
						}

						var _config = _ref3;

						this.mergeOptions(_config);
					}

					this.normaliseOptions(opts);

					return this.options;
				};

				return OptionManager;
			}();

			exports.default = OptionManager;

			OptionManager.memoisedPlugins = [];
			module.exports = exports["default"];
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var messages = _ref.messages;

			return {
				visitor: {
					Scope: function Scope(_ref2) {
						var scope = _ref2.scope;

						for (var name in scope.bindings) {
							var binding = scope.bindings[name];
							if (binding.kind !== "const" && binding.kind !== "module") continue;

							for (var _iterator = binding.constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
								var _ref3;

								if (_isArray) {
									if (_i >= _iterator.length) break;
									_ref3 = _iterator[_i++];
								} else {
									_i = _iterator.next();
									if (_i.done) break;
									_ref3 = _i.value;
								}

								var violation = _ref3;

								throw violation.buildCodeFrameError(messages.get("readOnly", name));
							}
						}
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("asyncFunctions");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("trailingFunctionCommas");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {
						if (state.opts.spec) {
							var node = path.node;

							if (node.shadow) return;

							node.shadow = { this: false };
							node.type = "FunctionExpression";

							var boundThis = t.thisExpression();
							boundThis._forceShadow = path;

							path.ensureBlock();
							path.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(state.addHelper("newArrowCheck"), [t.thisExpression(), boundThis])));

							path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]));
						} else {
							path.arrowFunctionToShadowed();
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		exports.default = function () {
			return {
				visitor: {
					VariableDeclaration: function VariableDeclaration(path, file) {
						var node = path.node;
						var parent = path.parent;
						var scope = path.scope;

						if (!isBlockScoped(node)) return;
						convertBlockScopedToVar(path, null, parent, scope, true);

						if (node._tdzThis) {
							var nodes = [node];

							for (var i = 0; i < node.declarations.length; i++) {
								var decl = node.declarations[i];
								if (decl.init) {
									var assign = t.assignmentExpression("=", decl.id, decl.init);
									assign._ignoreBlockScopingTDZ = true;
									nodes.push(t.expressionStatement(assign));
								}
								decl.init = file.addHelper("temporalUndefined");
							}

							node._blockHoist = 2;

							if (path.isCompletionRecord()) {
								nodes.push(t.expressionStatement(scope.buildUndefinedNode()));
							}

							path.replaceWithMultiple(nodes);
						}
					},
					Loop: function Loop(path, file) {
						var node = path.node;
						var parent = path.parent;
						var scope = path.scope;

						t.ensureBlock(node);
						var blockScoping = new BlockScoping(path, path.get("body"), parent, scope, file);
						var replace = blockScoping.run();
						if (replace) path.replaceWith(replace);
					},
					CatchClause: function CatchClause(path, file) {
						var parent = path.parent;
						var scope = path.scope;

						var blockScoping = new BlockScoping(null, path.get("body"), parent, scope, file);
						blockScoping.run();
					},
					"BlockStatement|SwitchStatement|Program": function BlockStatementSwitchStatementProgram(path, file) {
						if (!ignoreBlock(path)) {
							var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);
							blockScoping.run();
						}
					}
				}
			};
		};

		var _babelTraverse = __webpack_require__(10);

		var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

		var _tdz = __webpack_require__(323);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _values = __webpack_require__(277);

		var _values2 = _interopRequireDefault(_values);

		var _extend = __webpack_require__(584);

		var _extend2 = _interopRequireDefault(_extend);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function ignoreBlock(path) {
			return t.isLoop(path.parent) || t.isCatchClause(path.parent);
		}

		var buildRetCheck = (0, _babelTemplate2.default)("\n  if (typeof RETURN === \"object\") return RETURN.v;\n");

		function isBlockScoped(node) {
			if (!t.isVariableDeclaration(node)) return false;
			if (node[t.BLOCK_SCOPED_SYMBOL]) return true;
			if (node.kind !== "let" && node.kind !== "const") return false;
			return true;
		}

		function convertBlockScopedToVar(path, node, parent, scope) {
			var moveBindingsToParent = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

			if (!node) {
				node = path.node;
			}

			if (!t.isFor(parent)) {
				for (var i = 0; i < node.declarations.length; i++) {
					var declar = node.declarations[i];
					declar.init = declar.init || scope.buildUndefinedNode();
				}
			}

			node[t.BLOCK_SCOPED_SYMBOL] = true;
			node.kind = "var";

			if (moveBindingsToParent) {
				var parentScope = scope.getFunctionParent();
				var ids = path.getBindingIdentifiers();
				for (var name in ids) {
					var binding = scope.getOwnBinding(name);
					if (binding) binding.kind = "var";
					scope.moveBindingTo(name, parentScope);
				}
			}
		}

		function isVar(node) {
			return t.isVariableDeclaration(node, { kind: "var" }) && !isBlockScoped(node);
		}

		var letReferenceBlockVisitor = _babelTraverse2.default.visitors.merge([{
			Function: function Function(path, state) {
				path.traverse(letReferenceFunctionVisitor, state);
				return path.skip();
			}
		}, _tdz.visitor]);

		var letReferenceFunctionVisitor = _babelTraverse2.default.visitors.merge([{
			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				var ref = state.letReferences[path.node.name];

				if (!ref) return;

				var localBinding = path.scope.getBindingIdentifier(path.node.name);
				if (localBinding && localBinding !== ref) return;

				state.closurify = true;
			}
		}, _tdz.visitor]);

		var hoistVarDeclarationsVisitor = {
			enter: function enter(path, self) {
				var node = path.node;
				var parent = path.parent;

				if (path.isForStatement()) {
					if (isVar(node.init, node)) {
						var nodes = self.pushDeclar(node.init);
						if (nodes.length === 1) {
							node.init = nodes[0];
						} else {
							node.init = t.sequenceExpression(nodes);
						}
					}
				} else if (path.isFor()) {
					if (isVar(node.left, node)) {
						self.pushDeclar(node.left);
						node.left = node.left.declarations[0].id;
					}
				} else if (isVar(node, parent)) {
					path.replaceWithMultiple(self.pushDeclar(node).map(function (expr) {
						return t.expressionStatement(expr);
					}));
				} else if (path.isFunction()) {
					return path.skip();
				}
			}
		};

		var loopLabelVisitor = {
			LabeledStatement: function LabeledStatement(_ref, state) {
				var node = _ref.node;

				state.innerLabels.push(node.label.name);
			}
		};

		var continuationVisitor = {
			enter: function enter(path, state) {
				if (path.isAssignmentExpression() || path.isUpdateExpression()) {
					var bindings = path.getBindingIdentifiers();
					for (var name in bindings) {
						if (state.outsideReferences[name] !== path.scope.getBindingIdentifier(name)) continue;
						state.reassignments[name] = true;
					}
				}
			}
		};

		function loopNodeTo(node) {
			if (t.isBreakStatement(node)) {
				return "break";
			} else if (t.isContinueStatement(node)) {
				return "continue";
			}
		}

		var loopVisitor = {
			Loop: function Loop(path, state) {
				var oldIgnoreLabeless = state.ignoreLabeless;
				state.ignoreLabeless = true;
				path.traverse(loopVisitor, state);
				state.ignoreLabeless = oldIgnoreLabeless;
				path.skip();
			},
			Function: function Function(path) {
				path.skip();
			},
			SwitchCase: function SwitchCase(path, state) {
				var oldInSwitchCase = state.inSwitchCase;
				state.inSwitchCase = true;
				path.traverse(loopVisitor, state);
				state.inSwitchCase = oldInSwitchCase;
				path.skip();
			},
			"BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(path, state) {
				var node = path.node;
				var parent = path.parent;
				var scope = path.scope;

				if (node[this.LOOP_IGNORE]) return;

				var replace = void 0;
				var loopText = loopNodeTo(node);

				if (loopText) {
					if (node.label) {
						if (state.innerLabels.indexOf(node.label.name) >= 0) {
							return;
						}

						loopText = loopText + "|" + node.label.name;
					} else {
						if (state.ignoreLabeless) return;

						if (state.inSwitchCase) return;

						if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;
					}

					state.hasBreakContinue = true;
					state.map[loopText] = node;
					replace = t.stringLiteral(loopText);
				}

				if (path.isReturnStatement()) {
					state.hasReturn = true;
					replace = t.objectExpression([t.objectProperty(t.identifier("v"), node.argument || scope.buildUndefinedNode())]);
				}

				if (replace) {
					replace = t.returnStatement(replace);
					replace[this.LOOP_IGNORE] = true;
					path.skip();
					path.replaceWith(t.inherits(replace, node));
				}
			}
		};

		var BlockScoping = function () {
			function BlockScoping(loopPath, blockPath, parent, scope, file) {
				(0, _classCallCheck3.default)(this, BlockScoping);

				this.parent = parent;
				this.scope = scope;
				this.file = file;

				this.blockPath = blockPath;
				this.block = blockPath.node;

				this.outsideLetReferences = (0, _create2.default)(null);
				this.hasLetReferences = false;
				this.letReferences = (0, _create2.default)(null);
				this.body = [];

				if (loopPath) {
					this.loopParent = loopPath.parent;
					this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
					this.loopPath = loopPath;
					this.loop = loopPath.node;
				}
			}

			BlockScoping.prototype.run = function run() {
				var block = this.block;
				if (block._letDone) return;
				block._letDone = true;

				var needsClosure = this.getLetReferences();

				if (t.isFunction(this.parent) || t.isProgram(this.block)) {
					this.updateScopeInfo();
					return;
				}

				if (!this.hasLetReferences) return;

				if (needsClosure) {
					this.wrapClosure();
				} else {
					this.remap();
				}

				this.updateScopeInfo();

				if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
					return t.labeledStatement(this.loopLabel, this.loop);
				}
			};

			BlockScoping.prototype.updateScopeInfo = function updateScopeInfo() {
				var scope = this.scope;
				var parentScope = scope.getFunctionParent();
				var letRefs = this.letReferences;

				for (var key in letRefs) {
					var ref = letRefs[key];
					var binding = scope.getBinding(ref.name);
					if (!binding) continue;
					if (binding.kind === "let" || binding.kind === "const") {
						binding.kind = "var";
						scope.moveBindingTo(ref.name, parentScope);
					}
				}
			};

			BlockScoping.prototype.remap = function remap() {
				var letRefs = this.letReferences;
				var scope = this.scope;

				for (var key in letRefs) {
					var ref = letRefs[key];

					if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
						if (scope.hasOwnBinding(key)) scope.rename(ref.name);

						if (this.blockPath.scope.hasOwnBinding(key)) this.blockPath.scope.rename(ref.name);
					}
				}
			};

			BlockScoping.prototype.wrapClosure = function wrapClosure() {
				var block = this.block;

				var outsideRefs = this.outsideLetReferences;

				if (this.loop) {
					for (var name in outsideRefs) {
						var id = outsideRefs[name];

						if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
							delete outsideRefs[id.name];
							delete this.letReferences[id.name];

							this.scope.rename(id.name);

							this.letReferences[id.name] = id;
							outsideRefs[id.name] = id;
						}
					}
				}

				this.has = this.checkLoop();

				this.hoistVarDeclarations();

				var params = (0, _values2.default)(outsideRefs);
				var args = (0, _values2.default)(outsideRefs);

				var isSwitch = this.blockPath.isSwitchStatement();

				var fn = t.functionExpression(null, params, t.blockStatement(isSwitch ? [block] : block.body));
				fn.shadow = true;

				this.addContinuations(fn);

				var ref = fn;

				if (this.loop) {
					ref = this.scope.generateUidIdentifier("loop");
					this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
				}

				var call = t.callExpression(ref, args);
				var ret = this.scope.generateUidIdentifier("ret");

				var hasYield = _babelTraverse2.default.hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
				if (hasYield) {
					fn.generator = true;
					call = t.yieldExpression(call, true);
				}

				var hasAsync = _babelTraverse2.default.hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
				if (hasAsync) {
					fn.async = true;
					call = t.awaitExpression(call);
				}

				this.buildClosure(ret, call);

				if (isSwitch) this.blockPath.replaceWithMultiple(this.body);else block.body = this.body;
			};

			BlockScoping.prototype.buildClosure = function buildClosure(ret, call) {
				var has = this.has;
				if (has.hasReturn || has.hasBreakContinue) {
					this.buildHas(ret, call);
				} else {
					this.body.push(t.expressionStatement(call));
				}
			};

			BlockScoping.prototype.addContinuations = function addContinuations(fn) {
				var state = {
					reassignments: {},
					outsideReferences: this.outsideLetReferences
				};

				this.scope.traverse(fn, continuationVisitor, state);

				for (var i = 0; i < fn.params.length; i++) {
					var param = fn.params[i];
					if (!state.reassignments[param.name]) continue;

					var newParam = this.scope.generateUidIdentifier(param.name);
					fn.params[i] = newParam;

					this.scope.rename(param.name, newParam.name, fn);

					fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
				}
			};

			BlockScoping.prototype.getLetReferences = function getLetReferences() {
				var block = this.block;

				var declarators = [];

				if (this.loop) {
					var init = this.loop.left || this.loop.init;
					if (isBlockScoped(init)) {
						declarators.push(init);
						(0, _extend2.default)(this.outsideLetReferences, t.getBindingIdentifiers(init));
					}
				}

				if (block.body) {
					for (var i = 0; i < block.body.length; i++) {
						var declar = block.body[i];
						if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {
							var declarPath = this.blockPath.get("body")[i];
							if (isBlockScoped(declar)) {
								convertBlockScopedToVar(declarPath, null, block, this.scope);
							}
							declarators = declarators.concat(declar.declarations || declar);
						}
					}
				}

				if (block.cases) {
					for (var _i = 0; _i < block.cases.length; _i++) {
						var consequents = block.cases[_i].consequent;

						for (var j = 0; j < consequents.length; j++) {
							var _declar = consequents[j];
							if (t.isClassDeclaration(_declar) || t.isFunctionDeclaration(_declar) || isBlockScoped(_declar)) {
								var _declarPath = this.blockPath.get("cases")[_i];
								if (isBlockScoped(_declar)) {
									convertBlockScopedToVar(_declarPath, _declar, block, this.scope);
								}
								declarators = declarators.concat(_declar.declarations || _declar);
							}
						}
					}
				}

				for (var _i2 = 0; _i2 < declarators.length; _i2++) {
					var _declar2 = declarators[_i2];
					var keys = t.getBindingIdentifiers(_declar2);
					(0, _extend2.default)(this.letReferences, keys);
					this.hasLetReferences = true;
				}

				if (!this.hasLetReferences) return;

				var state = {
					letReferences: this.letReferences,
					closurify: false,
					file: this.file
				};

				this.blockPath.traverse(letReferenceBlockVisitor, state);

				return state.closurify;
			};

			BlockScoping.prototype.checkLoop = function checkLoop() {
				var state = {
					hasBreakContinue: false,
					ignoreLabeless: false,
					inSwitchCase: false,
					innerLabels: [],
					hasReturn: false,
					isLoop: !!this.loop,
					map: {},
					LOOP_IGNORE: (0, _symbol2.default)()
				};

				this.blockPath.traverse(loopLabelVisitor, state);
				this.blockPath.traverse(loopVisitor, state);

				return state;
			};

			BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
				this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
			};

			BlockScoping.prototype.pushDeclar = function pushDeclar(node) {
				var declars = [];
				var names = t.getBindingIdentifiers(node);
				for (var name in names) {
					declars.push(t.variableDeclarator(names[name]));
				}

				this.body.push(t.variableDeclaration(node.kind, declars));

				var replace = [];

				for (var i = 0; i < node.declarations.length; i++) {
					var declar = node.declarations[i];
					if (!declar.init) continue;

					var expr = t.assignmentExpression("=", declar.id, declar.init);
					replace.push(t.inherits(expr, declar));
				}

				return replace;
			};

			BlockScoping.prototype.buildHas = function buildHas(ret, call) {
				var body = this.body;

				body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));

				var retCheck = void 0;
				var has = this.has;
				var cases = [];

				if (has.hasReturn) {
					retCheck = buildRetCheck({
						RETURN: ret
					});
				}

				if (has.hasBreakContinue) {
					for (var key in has.map) {
						cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));
					}

					if (has.hasReturn) {
						cases.push(t.switchCase(null, [retCheck]));
					}

					if (cases.length === 1) {
						var single = cases[0];
						body.push(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0]));
					} else {
						if (this.loop) {
							for (var i = 0; i < cases.length; i++) {
								var caseConsequent = cases[i].consequent[0];
								if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
									caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier("loop");
								}
							}
						}

						body.push(t.switchStatement(ret, cases));
					}
				} else {
					if (has.hasReturn) {
						body.push(retCheck);
					}
				}
			};

			return BlockScoping;
		}();

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (_ref) {
			var t = _ref.types;

			var VISITED = (0, _symbol2.default)();

			return {
				visitor: {
					ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
						if (!path.get("declaration").isClassDeclaration()) return;

						var node = path.node;

						var ref = node.declaration.id || path.scope.generateUidIdentifier("class");
						node.declaration.id = ref;

						path.replaceWith(node.declaration);
						path.insertAfter(t.exportDefaultDeclaration(ref));
					},
					ClassDeclaration: function ClassDeclaration(path) {
						var node = path.node;

						var ref = node.id || path.scope.generateUidIdentifier("class");

						path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
					},
					ClassExpression: function ClassExpression(path, state) {
						var node = path.node;

						if (node[VISITED]) return;

						var inferred = (0, _babelHelperFunctionName2.default)(path);
						if (inferred && inferred !== node) return path.replaceWith(inferred);

						node[VISITED] = true;

						var Constructor = _vanilla2.default;
						if (state.opts.loose) Constructor = _loose2.default;

						path.replaceWith(new Constructor(path, state.file).run());
					}
				}
			};
		};

		var _loose = __webpack_require__(324);

		var _loose2 = _interopRequireDefault(_loose);

		var _vanilla = __webpack_require__(208);

		var _vanilla2 = _interopRequireDefault(_vanilla);

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;
			var template = _ref.template;

			var buildMutatorMapAssign = template("\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ");

			function getValue(prop) {
				if (t.isObjectProperty(prop)) {
					return prop.value;
				} else if (t.isObjectMethod(prop)) {
					return t.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
				}
			}

			function pushAssign(objId, prop, body) {
				if (prop.kind === "get" && prop.kind === "set") {
					pushMutatorDefine(objId, prop, body);
				} else {
					body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), getValue(prop))));
				}
			}

			function pushMutatorDefine(_ref2, prop) {
				var objId = _ref2.objId;
				var body = _ref2.body;
				var getMutatorId = _ref2.getMutatorId;
				var scope = _ref2.scope;

				var key = !prop.computed && t.isIdentifier(prop.key) ? t.stringLiteral(prop.key.name) : prop.key;

				var maybeMemoise = scope.maybeGenerateMemoised(key);
				if (maybeMemoise) {
					body.push(t.expressionStatement(t.assignmentExpression("=", maybeMemoise, key)));
					key = maybeMemoise;
				}

				body.push.apply(body, buildMutatorMapAssign({
					MUTATOR_MAP_REF: getMutatorId(),
					KEY: key,
					VALUE: getValue(prop),
					KIND: t.identifier(prop.kind)
				}));
			}

			function loose(info) {
				for (var _iterator = info.computedProps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref3;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref3 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref3 = _i.value;
					}

					var prop = _ref3;

					if (prop.kind === "get" || prop.kind === "set") {
						pushMutatorDefine(info, prop);
					} else {
						pushAssign(info.objId, prop, info.body);
					}
				}
			}

			function spec(info) {
				var objId = info.objId;
				var body = info.body;
				var computedProps = info.computedProps;
				var state = info.state;

				for (var _iterator2 = computedProps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref4;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref4 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref4 = _i2.value;
					}

					var prop = _ref4;

					var key = t.toComputedKey(prop);

					if (prop.kind === "get" || prop.kind === "set") {
						pushMutatorDefine(info, prop);
					} else if (t.isStringLiteral(key, { value: "__proto__" })) {
						pushAssign(objId, prop, body);
					} else {
						if (computedProps.length === 1) {
							return t.callExpression(state.addHelper("defineProperty"), [info.initPropExpression, key, getValue(prop)]);
						} else {
							body.push(t.expressionStatement(t.callExpression(state.addHelper("defineProperty"), [objId, key, getValue(prop)])));
						}
					}
				}
			}

			return {
				visitor: {
					ObjectExpression: {
						exit: function exit(path, state) {
							var node = path.node;
							var parent = path.parent;
							var scope = path.scope;

							var hasComputed = false;
							for (var _iterator3 = node.properties, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
								var _ref5;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref5 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref5 = _i3.value;
								}

								var prop = _ref5;

								hasComputed = prop.computed === true;
								if (hasComputed) break;
							}
							if (!hasComputed) return;

							var initProps = [];
							var computedProps = [];
							var foundComputed = false;

							for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
								var _ref6;

								if (_isArray4) {
									if (_i4 >= _iterator4.length) break;
									_ref6 = _iterator4[_i4++];
								} else {
									_i4 = _iterator4.next();
									if (_i4.done) break;
									_ref6 = _i4.value;
								}

								var _prop = _ref6;

								if (_prop.computed) {
									foundComputed = true;
								}

								if (foundComputed) {
									computedProps.push(_prop);
								} else {
									initProps.push(_prop);
								}
							}

							var objId = scope.generateUidIdentifierBasedOnNode(parent);
							var initPropExpression = t.objectExpression(initProps);
							var body = [];

							body.push(t.variableDeclaration("var", [t.variableDeclarator(objId, initPropExpression)]));

							var callback = spec;
							if (state.opts.loose) callback = loose;

							var mutatorRef = void 0;

							var getMutatorId = function getMutatorId() {
								if (!mutatorRef) {
									mutatorRef = scope.generateUidIdentifier("mutatorMap");

									body.push(t.variableDeclaration("var", [t.variableDeclarator(mutatorRef, t.objectExpression([]))]));
								}

								return mutatorRef;
							};

							var single = callback({
								scope: scope,
								objId: objId,
								body: body,
								computedProps: computedProps,
								initPropExpression: initPropExpression,
								getMutatorId: getMutatorId,
								state: state
							});

							if (mutatorRef) {
								body.push(t.expressionStatement(t.callExpression(state.addHelper("defineEnumerableProperties"), [objId, mutatorRef])));
							}

							if (single) {
								path.replaceWith(single);
							} else {
								body.push(t.expressionStatement(objId));
								path.replaceWithMultiple(body);
							}
						}
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function variableDeclarationHasPattern(node) {
				for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var declar = _ref2;

					if (t.isPattern(declar.id)) {
						return true;
					}
				}
				return false;
			}

			function hasRest(pattern) {
				for (var _iterator2 = pattern.elements, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref3;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref3 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref3 = _i2.value;
					}

					var elem = _ref3;

					if (t.isRestElement(elem)) {
						return true;
					}
				}
				return false;
			}

			var arrayUnpackVisitor = {
				ReferencedIdentifier: function ReferencedIdentifier(path, state) {
					if (state.bindings[path.node.name]) {
						state.deopt = true;
						path.stop();
					}
				}
			};

			var DestructuringTransformer = function () {
				function DestructuringTransformer(opts) {
					(0, _classCallCheck3.default)(this, DestructuringTransformer);

					this.blockHoist = opts.blockHoist;
					this.operator = opts.operator;
					this.arrays = {};
					this.nodes = opts.nodes || [];
					this.scope = opts.scope;
					this.file = opts.file;
					this.kind = opts.kind;
				}

				DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
					var op = this.operator;
					if (t.isMemberExpression(id)) op = "=";

					var node = void 0;

					if (op) {
						node = t.expressionStatement(t.assignmentExpression(op, id, init));
					} else {
						node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
					}

					node._blockHoist = this.blockHoist;

					return node;
				};

				DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
					var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
					declar._blockHoist = this.blockHoist;
					return declar;
				};

				DestructuringTransformer.prototype.push = function push(id, init) {
					if (t.isObjectPattern(id)) {
						this.pushObjectPattern(id, init);
					} else if (t.isArrayPattern(id)) {
						this.pushArrayPattern(id, init);
					} else if (t.isAssignmentPattern(id)) {
						this.pushAssignmentPattern(id, init);
					} else {
						this.nodes.push(this.buildVariableAssignment(id, init));
					}
				};

				DestructuringTransformer.prototype.toArray = function toArray(node, count) {
					if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {
						return node;
					} else {
						return this.scope.toArray(node, count);
					}
				};

				DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {

					var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);

					var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
					declar._blockHoist = this.blockHoist;
					this.nodes.push(declar);

					var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);

					var left = pattern.left;
					if (t.isPattern(left)) {
						var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
						tempValueDefault._blockHoist = this.blockHoist;

						this.nodes.push(tempValueDefault);
						this.push(left, tempValueRef);
					} else {
						this.nodes.push(this.buildVariableAssignment(left, tempConditional));
					}
				};

				DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {

					var keys = [];

					for (var i = 0; i < pattern.properties.length; i++) {
						var prop = pattern.properties[i];

						if (i >= spreadPropIndex) break;

						if (t.isRestProperty(prop)) continue;

						var key = prop.key;
						if (t.isIdentifier(key) && !prop.computed) key = t.stringLiteral(prop.key.name);
						keys.push(key);
					}

					keys = t.arrayExpression(keys);

					var value = t.callExpression(this.file.addHelper("objectWithoutProperties"), [objRef, keys]);
					this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
				};

				DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
					if (t.isLiteral(prop.key)) prop.computed = true;

					var pattern = prop.value;
					var objRef = t.memberExpression(propRef, prop.key, prop.computed);

					if (t.isPattern(pattern)) {
						this.push(pattern, objRef);
					} else {
						this.nodes.push(this.buildVariableAssignment(pattern, objRef));
					}
				};

				DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {

					if (!pattern.properties.length) {
						this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("objectDestructuringEmpty"), [objRef])));
					}

					if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
						var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
						this.nodes.push(this.buildVariableDeclaration(temp, objRef));
						objRef = temp;
					}

					for (var i = 0; i < pattern.properties.length; i++) {
						var prop = pattern.properties[i];
						if (t.isRestProperty(prop)) {
							this.pushObjectRest(pattern, objRef, prop, i);
						} else {
							this.pushObjectProperty(prop, objRef);
						}
					}
				};

				DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
					if (!t.isArrayExpression(arr)) return false;

					if (pattern.elements.length > arr.elements.length) return;
					if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;

					for (var _iterator3 = pattern.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
						var _ref4;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref4 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref4 = _i3.value;
						}

						var elem = _ref4;

						if (!elem) return false;

						if (t.isMemberExpression(elem)) return false;
					}

					for (var _iterator4 = arr.elements, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
						var _ref5;

						if (_isArray4) {
							if (_i4 >= _iterator4.length) break;
							_ref5 = _iterator4[_i4++];
						} else {
							_i4 = _iterator4.next();
							if (_i4.done) break;
							_ref5 = _i4.value;
						}

						var _elem = _ref5;

						if (t.isSpreadElement(_elem)) return false;
					}

					var bindings = t.getBindingIdentifiers(pattern);
					var state = { deopt: false, bindings: bindings };
					this.scope.traverse(arr, arrayUnpackVisitor, state);
					return !state.deopt;
				};

				DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
					for (var i = 0; i < pattern.elements.length; i++) {
						var elem = pattern.elements[i];
						if (t.isRestElement(elem)) {
							this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
						} else {
							this.push(elem, arr.elements[i]);
						}
					}
				};

				DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
					if (!pattern.elements) return;

					if (this.canUnpackArrayPattern(pattern, arrayRef)) {
						return this.pushUnpackedArrayPattern(pattern, arrayRef);
					}

					var count = !hasRest(pattern) && pattern.elements.length;

					var toArray = this.toArray(arrayRef, count);

					if (t.isIdentifier(toArray)) {
						arrayRef = toArray;
					} else {
						arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
						this.arrays[arrayRef.name] = true;
						this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
					}

					for (var i = 0; i < pattern.elements.length; i++) {
						var elem = pattern.elements[i];

						if (!elem) continue;

						var elemRef = void 0;

						if (t.isRestElement(elem)) {
							elemRef = this.toArray(arrayRef);

							if (i > 0) {
								elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.numericLiteral(i)]);
							}

							elem = elem.argument;
						} else {
							elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);
						}

						this.push(elem, elemRef);
					}
				};

				DestructuringTransformer.prototype.init = function init(pattern, ref) {

					if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
						var memo = this.scope.maybeGenerateMemoised(ref, true);
						if (memo) {
							this.nodes.push(this.buildVariableDeclaration(memo, ref));
							ref = memo;
						}
					}

					this.push(pattern, ref);

					return this.nodes;
				};

				return DestructuringTransformer;
			}();

			return {
				visitor: {
					ExportNamedDeclaration: function ExportNamedDeclaration(path) {
						var declaration = path.get("declaration");
						if (!declaration.isVariableDeclaration()) return;
						if (!variableDeclarationHasPattern(declaration.node)) return;

						var specifiers = [];

						for (var name in path.getOuterBindingIdentifiers(path)) {
							var id = t.identifier(name);
							specifiers.push(t.exportSpecifier(id, id));
						}

						path.replaceWith(declaration.node);
						path.insertAfter(t.exportNamedDeclaration(null, specifiers));
					},
					ForXStatement: function ForXStatement(path, file) {
						var node = path.node;
						var scope = path.scope;

						var left = node.left;

						if (t.isPattern(left)) {

							var temp = scope.generateUidIdentifier("ref");

							node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);

							path.ensureBlock();

							node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));

							return;
						}

						if (!t.isVariableDeclaration(left)) return;

						var pattern = left.declarations[0].id;
						if (!t.isPattern(pattern)) return;

						var key = scope.generateUidIdentifier("ref");
						node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);

						var nodes = [];

						var destructuring = new DestructuringTransformer({
							kind: left.kind,
							file: file,
							scope: scope,
							nodes: nodes
						});

						destructuring.init(pattern, key);

						path.ensureBlock();

						var block = node.body;
						block.body = nodes.concat(block.body);
					},
					CatchClause: function CatchClause(_ref6, file) {
						var node = _ref6.node;
						var scope = _ref6.scope;

						var pattern = node.param;
						if (!t.isPattern(pattern)) return;

						var ref = scope.generateUidIdentifier("ref");
						node.param = ref;

						var nodes = [];

						var destructuring = new DestructuringTransformer({
							kind: "let",
							file: file,
							scope: scope,
							nodes: nodes
						});
						destructuring.init(pattern, ref);

						node.body.body = nodes.concat(node.body.body);
					},
					AssignmentExpression: function AssignmentExpression(path, file) {
						var node = path.node;
						var scope = path.scope;

						if (!t.isPattern(node.left)) return;

						var nodes = [];

						var destructuring = new DestructuringTransformer({
							operator: node.operator,
							file: file,
							scope: scope,
							nodes: nodes
						});

						var ref = void 0;
						if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {
							ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");

							nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));

							if (t.isArrayExpression(node.right)) {
								destructuring.arrays[ref.name] = true;
							}
						}

						destructuring.init(node.left, ref || node.right);

						if (ref) {
							nodes.push(t.expressionStatement(ref));
						}

						path.replaceWithMultiple(nodes);
					},
					VariableDeclaration: function VariableDeclaration(path, file) {
						var node = path.node;
						var scope = path.scope;
						var parent = path.parent;

						if (t.isForXStatement(parent)) return;
						if (!parent || !path.container) return;
						if (!variableDeclarationHasPattern(node)) return;

						var nodes = [];
						var declar = void 0;

						for (var i = 0; i < node.declarations.length; i++) {
							declar = node.declarations[i];

							var patternId = declar.init;
							var pattern = declar.id;

							var destructuring = new DestructuringTransformer({
								blockHoist: node._blockHoist,
								nodes: nodes,
								scope: scope,
								kind: node.kind,
								file: file
							});

							if (t.isPattern(pattern)) {
								destructuring.init(pattern, patternId);

								if (+i !== node.declarations.length - 1) {
									t.inherits(nodes[nodes.length - 1], declar);
								}
							} else {
								nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
							}
						}

						path.replaceWithMultiple(nodes);
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var messages = _ref.messages;
			var template = _ref.template;
			var t = _ref.types;

			var buildForOfArray = template("\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ");

			var buildForOfLoose = template("\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  ");

			var buildForOf = template("\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  ");

			function _ForOfStatementArray(path) {
				var node = path.node;
				var scope = path.scope;

				var nodes = [];
				var right = node.right;

				if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
					var uid = scope.generateUidIdentifier("arr");
					nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
					right = uid;
				}

				var iterationKey = scope.generateUidIdentifier("i");

				var loop = buildForOfArray({
					BODY: node.body,
					KEY: iterationKey,
					ARR: right
				});

				t.inherits(loop, node);
				t.ensureBlock(loop);

				var iterationValue = t.memberExpression(right, iterationKey, true);

				var left = node.left;
				if (t.isVariableDeclaration(left)) {
					left.declarations[0].init = iterationValue;
					loop.body.body.unshift(left);
				} else {
					loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
				}

				if (path.parentPath.isLabeledStatement()) {
					loop = t.labeledStatement(path.parentPath.node.label, loop);
				}

				nodes.push(loop);

				return nodes;
			}

			return {
				visitor: {
					ForOfStatement: function ForOfStatement(path, state) {
						if (path.get("right").isArrayExpression()) {
							return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));
						}

						var callback = spec;
						if (state.opts.loose) callback = loose;

						var node = path.node;

						var build = callback(path, state);
						var declar = build.declar;
						var loop = build.loop;
						var block = loop.body;

						path.ensureBlock();

						if (declar) {
							block.body.push(declar);
						}

						block.body = block.body.concat(node.body.body);

						t.inherits(loop, node);
						t.inherits(loop.body, node.body);

						if (build.replaceParent) {
							path.parentPath.replaceWithMultiple(build.node);
							path.remove();
						} else {
							path.replaceWithMultiple(build.node);
						}
					}
				}
			};

			function loose(path, file) {
				var node = path.node;
				var scope = path.scope;

				var left = node.left;
				var declar = void 0,
				    id = void 0;

				if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
					id = left;
				} else if (t.isVariableDeclaration(left)) {
					id = scope.generateUidIdentifier("ref");
					declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
				} else {
					throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
				}

				var iteratorKey = scope.generateUidIdentifier("iterator");
				var isArrayKey = scope.generateUidIdentifier("isArray");

				var loop = buildForOfLoose({
					LOOP_OBJECT: iteratorKey,
					IS_ARRAY: isArrayKey,
					OBJECT: node.right,
					INDEX: scope.generateUidIdentifier("i"),
					ID: id
				});

				if (!declar) {
					loop.body.body.shift();
				}

				return {
					declar: declar,
					node: loop,
					loop: loop
				};
			}

			function spec(path, file) {
				var node = path.node;
				var scope = path.scope;
				var parent = path.parent;

				var left = node.left;
				var declar = void 0;

				var stepKey = scope.generateUidIdentifier("step");
				var stepValue = t.memberExpression(stepKey, t.identifier("value"));

				if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
					declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
				} else if (t.isVariableDeclaration(left)) {
					declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
				} else {
					throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
				}

				var iteratorKey = scope.generateUidIdentifier("iterator");

				var template = buildForOf({
					ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
					ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
					ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
					ITERATOR_KEY: iteratorKey,
					STEP_KEY: stepKey,
					OBJECT: node.right,
					BODY: null
				});

				var isLabeledParent = t.isLabeledStatement(parent);

				var tryBody = template[3].block.body;
				var loop = tryBody[0];

				if (isLabeledParent) {
					tryBody[0] = t.labeledStatement(parent.label, loop);
				}

				return {
					replaceParent: isLabeledParent,
					declar: declar,
					loop: loop,
					node: template
				};
			}
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					"ArrowFunctionExpression|FunctionExpression": {
						exit: function exit(path) {
							if (path.key !== "value" && !path.parentPath.isObjectProperty()) {
								var replacement = (0, _babelHelperFunctionName2.default)(path);
								if (replacement) path.replaceWith(replacement);
							}
						}
					},

					ObjectProperty: function ObjectProperty(path) {
						var value = path.get("value");
						if (value.isFunction()) {
							var newNode = (0, _babelHelperFunctionName2.default)(value);
							if (newNode) value.replaceWith(newNode);
						}
					}
				}
			};
		};

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					NumericLiteral: function NumericLiteral(_ref) {
						var node = _ref.node;

						if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
							node.extra = undefined;
						}
					},
					StringLiteral: function StringLiteral(_ref2) {
						var node = _ref2.node;

						if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
							node.extra = undefined;
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function () {
			var REASSIGN_REMAP_SKIP = (0, _symbol2.default)();

			var reassignmentVisitor = {
				ReferencedIdentifier: function ReferencedIdentifier(path) {
					var name = path.node.name;
					var remap = this.remaps[name];
					if (!remap) return;

					if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

					if (path.parentPath.isCallExpression({ callee: path.node })) {
						path.replaceWith(t.sequenceExpression([t.numericLiteral(0), remap]));
					} else {
						path.replaceWith(remap);
					}
					this.requeueInParent(path);
				},
				AssignmentExpression: function AssignmentExpression(path) {
					var node = path.node;
					if (node[REASSIGN_REMAP_SKIP]) return;

					var left = path.get("left");
					if (!left.isIdentifier()) return;

					var name = left.node.name;
					var exports = this.exports[name];
					if (!exports) return;

					if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

					node[REASSIGN_REMAP_SKIP] = true;

					for (var _iterator = exports, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var reid = _ref;

						node = buildExportsAssignment(reid, node).expression;
					}

					path.replaceWith(node);
					this.requeueInParent(path);
				},
				UpdateExpression: function UpdateExpression(path) {
					var arg = path.get("argument");
					if (!arg.isIdentifier()) return;

					var name = arg.node.name;
					var exports = this.exports[name];
					if (!exports) return;

					if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

					var node = t.assignmentExpression(path.node.operator[0] + "=", arg.node, t.numericLiteral(1));

					if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord() || path.node.prefix) {
						path.replaceWith(node);
						this.requeueInParent(path);
						return;
					}

					var nodes = [];
					nodes.push(node);

					var operator = void 0;
					if (path.node.operator === "--") {
						operator = "+";
					} else {
						operator = "-";
					}
					nodes.push(t.binaryExpression(operator, arg.node, t.numericLiteral(1)));

					var newPaths = path.replaceWithMultiple(t.sequenceExpression(nodes));
					for (var _iterator2 = newPaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var newPath = _ref2;
						this.requeueInParent(newPath);
					}
				}
			};

			return {
				inherits: __webpack_require__(214),

				visitor: {
					ThisExpression: function ThisExpression(path, state) {
						if (this.ranCommonJS) return;

						if (state.opts.allowTopLevelThis !== true && !path.findParent(function (path) {
							return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
						})) {
							path.replaceWith(t.identifier("undefined"));
						}
					},

					Program: {
						exit: function exit(path) {
							this.ranCommonJS = true;

							var strict = !!this.opts.strict;

							var scope = path.scope;

							scope.rename("module");
							scope.rename("exports");
							scope.rename("require");

							var hasExports = false;
							var hasImports = false;

							var body = path.get("body");
							var imports = (0, _create2.default)(null);
							var exports = (0, _create2.default)(null);

							var nonHoistedExportNames = (0, _create2.default)(null);

							var topNodes = [];
							var remaps = (0, _create2.default)(null);

							var requires = (0, _create2.default)(null);

							var exportDefaultFound = false;

							function addRequire(source, blockHoist) {
								var cached = requires[source];
								if (cached) return cached;

								var ref = path.scope.generateUidIdentifier((0, _path2.basename)(source, (0, _path2.extname)(source)));

								var varDecl = t.variableDeclaration("var", [t.variableDeclarator(ref, buildRequire(t.stringLiteral(source)).expression)]);

								if (imports[source]) {
									varDecl.loc = imports[source].loc;
								}

								if (typeof blockHoist === "number" && blockHoist > 0) {
									varDecl._blockHoist = blockHoist;
								}

								topNodes.push(varDecl);

								return requires[source] = ref;
							}

							function addTo(obj, key, arr) {
								var existing = obj[key] || [];
								obj[key] = existing.concat(arr);
							}

							for (var _iterator3 = body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
								var _ref3;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref3 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref3 = _i3.value;
								}

								var _path = _ref3;

								if (_path.isExportDeclaration()) {
									hasExports = true;

									var specifiers = [].concat(_path.get("declaration"), _path.get("specifiers"));
									for (var _iterator5 = specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
										var _ref5;

										if (_isArray5) {
											if (_i5 >= _iterator5.length) break;
											_ref5 = _iterator5[_i5++];
										} else {
											_i5 = _iterator5.next();
											if (_i5.done) break;
											_ref5 = _i5.value;
										}

										var _specifier2 = _ref5;

										var ids = _specifier2.getBindingIdentifiers();
										if (ids.__esModule) {
											throw _specifier2.buildCodeFrameError("Illegal export \"__esModule\"");
										}
									}
								}

								if (_path.isImportDeclaration()) {
									var _importsEntry$specifi;

									hasImports = true;

									var key = _path.node.source.value;
									var importsEntry = imports[key] || {
										specifiers: [],
										maxBlockHoist: 0,
										loc: _path.node.loc
									};

									(_importsEntry$specifi = importsEntry.specifiers).push.apply(_importsEntry$specifi, _path.node.specifiers);

									if (typeof _path.node._blockHoist === "number") {
										importsEntry.maxBlockHoist = Math.max(_path.node._blockHoist, importsEntry.maxBlockHoist);
									}

									imports[key] = importsEntry;

									_path.remove();
								} else if (_path.isExportDefaultDeclaration()) {
									if (exportDefaultFound) {
										throw _path.buildCodeFrameError("Only one default export allowed per module.");
									}

									var declaration = _path.get("declaration");
									if (declaration.isFunctionDeclaration()) {
										var id = declaration.node.id;
										var defNode = t.identifier("default");
										if (id) {
											addTo(exports, id.name, defNode);
											topNodes.push(buildExportsAssignment(defNode, id));
											_path.replaceWith(declaration.node);
										} else {
											topNodes.push(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
											_path.remove();
										}
									} else if (declaration.isClassDeclaration()) {
										var _id = declaration.node.id;
										var _defNode = t.identifier("default");
										if (_id) {
											addTo(exports, _id.name, _defNode);
											_path.replaceWithMultiple([declaration.node, buildExportsAssignment(_defNode, _id)]);
										} else {
											_path.replaceWith(buildExportsAssignment(_defNode, t.toExpression(declaration.node)));
										}
									} else {
										_path.replaceWith(buildExportsAssignment(t.identifier("default"), declaration.node));

										_path.parentPath.requeue(_path.get("expression.left"));
									}
									exportDefaultFound = true;
								} else if (_path.isExportNamedDeclaration()) {
									var _declaration = _path.get("declaration");
									if (_declaration.node) {
										if (_declaration.isFunctionDeclaration()) {
											var _id2 = _declaration.node.id;
											addTo(exports, _id2.name, _id2);
											topNodes.push(buildExportsAssignment(_id2, _id2));
											_path.replaceWith(_declaration.node);
										} else if (_declaration.isClassDeclaration()) {
											var _id3 = _declaration.node.id;
											addTo(exports, _id3.name, _id3);
											_path.replaceWithMultiple([_declaration.node, buildExportsAssignment(_id3, _id3)]);
											nonHoistedExportNames[_id3.name] = true;
										} else if (_declaration.isVariableDeclaration()) {
											var declarators = _declaration.get("declarations");
											for (var _iterator6 = declarators, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
												var _ref6;

												if (_isArray6) {
													if (_i6 >= _iterator6.length) break;
													_ref6 = _iterator6[_i6++];
												} else {
													_i6 = _iterator6.next();
													if (_i6.done) break;
													_ref6 = _i6.value;
												}

												var decl = _ref6;

												var _id4 = decl.get("id");

												var init = decl.get("init");
												if (!init.node) init.replaceWith(t.identifier("undefined"));

												if (_id4.isIdentifier()) {
													addTo(exports, _id4.node.name, _id4.node);
													init.replaceWith(buildExportsAssignment(_id4.node, init.node).expression);
													nonHoistedExportNames[_id4.node.name] = true;
												} else {}
											}
											_path.replaceWith(_declaration.node);
										}
										continue;
									}

									var _specifiers = _path.get("specifiers");
									var nodes = [];
									var _source = _path.node.source;
									if (_source) {
										var ref = addRequire(_source.value, _path.node._blockHoist);

										for (var _iterator7 = _specifiers, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
											var _ref7;

											if (_isArray7) {
												if (_i7 >= _iterator7.length) break;
												_ref7 = _iterator7[_i7++];
											} else {
												_i7 = _iterator7.next();
												if (_i7.done) break;
												_ref7 = _i7.value;
											}

											var _specifier3 = _ref7;

											if (_specifier3.isExportNamespaceSpecifier()) {} else if (_specifier3.isExportDefaultSpecifier()) {} else if (_specifier3.isExportSpecifier()) {
												if (_specifier3.node.local.name === "default") {
													topNodes.push(buildExportsFrom(t.stringLiteral(_specifier3.node.exported.name), t.memberExpression(t.callExpression(this.addHelper("interopRequireDefault"), [ref]), _specifier3.node.local)));
												} else {
													topNodes.push(buildExportsFrom(t.stringLiteral(_specifier3.node.exported.name), t.memberExpression(ref, _specifier3.node.local)));
												}
												nonHoistedExportNames[_specifier3.node.exported.name] = true;
											}
										}
									} else {
										for (var _iterator8 = _specifiers, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
											var _ref8;

											if (_isArray8) {
												if (_i8 >= _iterator8.length) break;
												_ref8 = _iterator8[_i8++];
											} else {
												_i8 = _iterator8.next();
												if (_i8.done) break;
												_ref8 = _i8.value;
											}

											var _specifier4 = _ref8;

											if (_specifier4.isExportSpecifier()) {
												addTo(exports, _specifier4.node.local.name, _specifier4.node.exported);
												nonHoistedExportNames[_specifier4.node.exported.name] = true;
												nodes.push(buildExportsAssignment(_specifier4.node.exported, _specifier4.node.local));
											}
										}
									}
									_path.replaceWithMultiple(nodes);
								} else if (_path.isExportAllDeclaration()) {
									var exportNode = buildExportAll({
										OBJECT: addRequire(_path.node.source.value, _path.node._blockHoist)
									});
									exportNode.loc = _path.node.loc;
									topNodes.push(exportNode);
									_path.remove();
								}
							}

							for (var source in imports) {
								var _imports$source = imports[source];
								var specifiers = _imports$source.specifiers;
								var maxBlockHoist = _imports$source.maxBlockHoist;

								if (specifiers.length) {
									var uid = addRequire(source, maxBlockHoist);

									var wildcard = void 0;

									for (var i = 0; i < specifiers.length; i++) {
										var specifier = specifiers[i];
										if (t.isImportNamespaceSpecifier(specifier)) {
											if (strict) {
												remaps[specifier.local.name] = uid;
											} else {
												var varDecl = t.variableDeclaration("var", [t.variableDeclarator(specifier.local, t.callExpression(this.addHelper("interopRequireWildcard"), [uid]))]);

												if (maxBlockHoist > 0) {
													varDecl._blockHoist = maxBlockHoist;
												}

												topNodes.push(varDecl);
											}
											wildcard = specifier.local;
										} else if (t.isImportDefaultSpecifier(specifier)) {
											specifiers[i] = t.importSpecifier(specifier.local, t.identifier("default"));
										}
									}

									for (var _iterator4 = specifiers, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
										var _ref4;

										if (_isArray4) {
											if (_i4 >= _iterator4.length) break;
											_ref4 = _iterator4[_i4++];
										} else {
											_i4 = _iterator4.next();
											if (_i4.done) break;
											_ref4 = _i4.value;
										}

										var _specifier = _ref4;

										if (t.isImportSpecifier(_specifier)) {
											var target = uid;
											if (_specifier.imported.name === "default") {
												if (wildcard) {
													target = wildcard;
												} else {
													target = wildcard = path.scope.generateUidIdentifier(uid.name);
													var _varDecl = t.variableDeclaration("var", [t.variableDeclarator(target, t.callExpression(this.addHelper("interopRequireDefault"), [uid]))]);

													if (maxBlockHoist > 0) {
														_varDecl._blockHoist = maxBlockHoist;
													}

													topNodes.push(_varDecl);
												}
											}
											remaps[_specifier.local.name] = t.memberExpression(target, t.cloneWithoutLoc(_specifier.imported));
										}
									}
								} else {
									var requireNode = buildRequire(t.stringLiteral(source));
									requireNode.loc = imports[source].loc;
									topNodes.push(requireNode);
								}
							}

							if (hasImports && (0, _keys2.default)(nonHoistedExportNames).length) {
								var hoistedExportsNode = t.identifier("undefined");

								for (var name in nonHoistedExportNames) {
									hoistedExportsNode = buildExportsAssignment(t.identifier(name), hoistedExportsNode).expression;
								}

								var node = t.expressionStatement(hoistedExportsNode);
								node._blockHoist = 3;

								topNodes.unshift(node);
							}

							if (hasExports && !strict) {
								var buildTemplate = buildExportsModuleDeclaration;
								if (this.opts.loose) buildTemplate = buildLooseExportsModuleDeclaration;

								var declar = buildTemplate();
								declar._blockHoist = 3;

								topNodes.unshift(declar);
							}

							path.unshiftContainer("body", topNodes);
							path.traverse(reassignmentVisitor, {
								remaps: remaps,
								scope: scope,
								exports: exports,
								requeueInParent: function requeueInParent(newPath) {
									return path.requeue(newPath);
								}
							});
						}
					}
				}
			};
		};

		var _path2 = __webpack_require__(16);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildRequire = (0, _babelTemplate2.default)("\n  require($0);\n");

		var buildExportsModuleDeclaration = (0, _babelTemplate2.default)("\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n");

		var buildExportsFrom = (0, _babelTemplate2.default)("\n  Object.defineProperty(exports, $0, {\n    enumerable: true,\n    get: function () {\n      return $1;\n    }\n  });\n");

		var buildLooseExportsModuleDeclaration = (0, _babelTemplate2.default)("\n  exports.__esModule = true;\n");

		var buildExportsAssignment = (0, _babelTemplate2.default)("\n  exports.$0 = $1;\n");

		var buildExportAll = (0, _babelTemplate2.default)("\n  Object.keys(OBJECT).forEach(function (key) {\n    if (key === \"default\" || key === \"__esModule\") return;\n    Object.defineProperty(exports, key, {\n      enumerable: true,\n      get: function () {\n        return OBJECT[key];\n      }\n    });\n  });\n");

		var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty", "ClassMethod", "ObjectMethod"];

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function () {
			return {
				visitor: _babelTraverse.visitors.merge([{
					ArrowFunctionExpression: function ArrowFunctionExpression(path) {
						var params = path.get("params");
						for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var param = _ref;

							if (param.isRestElement() || param.isAssignmentPattern()) {
								path.arrowFunctionToShadowed();
								break;
							}
						}
					}
				}, destructuring.visitor, rest.visitor, def.visitor])
			};
		};

		var _babelTraverse = __webpack_require__(10);

		var _destructuring = __webpack_require__(327);

		var destructuring = _interopRequireWildcard(_destructuring);

		var _default = __webpack_require__(326);

		var def = _interopRequireWildcard(_default);

		var _rest = __webpack_require__(328);

		var rest = _interopRequireWildcard(_rest);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					ObjectMethod: function ObjectMethod(path) {
						var node = path.node;

						if (node.kind === "method") {
							path.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async), node.computed));
						}
					},
					ObjectProperty: function ObjectProperty(_ref) {
						var node = _ref.node;

						if (node.shorthand) {
							node.shorthand = false;
						}
					}
				}
			};
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function getSpreadLiteral(spread, scope, state) {
				if (state.opts.loose && !t.isIdentifier(spread.argument, { name: "arguments" })) {
					return spread.argument;
				} else {
					return scope.toArray(spread.argument, true);
				}
			}

			function hasSpread(nodes) {
				for (var i = 0; i < nodes.length; i++) {
					if (t.isSpreadElement(nodes[i])) {
						return true;
					}
				}
				return false;
			}

			function build(props, scope, state) {
				var nodes = [];

				var _props = [];

				function push() {
					if (!_props.length) return;
					nodes.push(t.arrayExpression(_props));
					_props = [];
				}

				for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var prop = _ref2;

					if (t.isSpreadElement(prop)) {
						push();
						nodes.push(getSpreadLiteral(prop, scope, state));
					} else {
						_props.push(prop);
					}
				}

				push();

				return nodes;
			}

			return {
				visitor: {
					ArrayExpression: function ArrayExpression(path, state) {
						var node = path.node;
						var scope = path.scope;

						var elements = node.elements;
						if (!hasSpread(elements)) return;

						var nodes = build(elements, scope, state);
						var first = nodes.shift();

						if (!t.isArrayExpression(first)) {
							nodes.unshift(first);
							first = t.arrayExpression([]);
						}

						path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
					},
					CallExpression: function CallExpression(path, state) {
						var node = path.node;
						var scope = path.scope;

						var args = node.arguments;
						if (!hasSpread(args)) return;

						var calleePath = path.get("callee");
						if (calleePath.isSuper()) return;

						var contextLiteral = t.identifier("undefined");

						node.arguments = [];

						var nodes = void 0;
						if (args.length === 1 && args[0].argument.name === "arguments") {
							nodes = [args[0].argument];
						} else {
							nodes = build(args, scope, state);
						}

						var first = nodes.shift();
						if (nodes.length) {
							node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
						} else {
							node.arguments.push(first);
						}

						var callee = node.callee;

						if (calleePath.isMemberExpression()) {
							var temp = scope.maybeGenerateMemoised(callee.object);
							if (temp) {
								callee.object = t.assignmentExpression("=", temp, callee.object);
								contextLiteral = temp;
							} else {
								contextLiteral = callee.object;
							}
							t.appendToMemberExpression(callee, t.identifier("apply"));
						} else {
							node.callee = t.memberExpression(node.callee, t.identifier("apply"));
						}

						if (t.isSuper(contextLiteral)) {
							contextLiteral = t.thisExpression();
						}

						node.arguments.unshift(contextLiteral);
					},
					NewExpression: function NewExpression(path, state) {
						var node = path.node;
						var scope = path.scope;

						var args = node.arguments;
						if (!hasSpread(args)) return;

						var nodes = build(args, scope, state);

						var context = t.arrayExpression([t.nullLiteral()]);

						args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);

						path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Function"), t.identifier("prototype")), t.identifier("bind")), t.identifier("apply")), [node.callee, args]), []));
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function isString(node) {
				return t.isLiteral(node) && typeof node.value === "string";
			}

			function buildBinaryExpression(left, right) {
				return t.binaryExpression("+", left, right);
			}

			return {
				visitor: {
					TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
						var node = path.node;

						var quasi = node.quasi;
						var args = [];

						var strings = [];
						var raw = [];

						for (var _iterator = quasi.quasis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref2;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref2 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref2 = _i.value;
							}

							var elem = _ref2;

							strings.push(t.stringLiteral(elem.value.cooked));
							raw.push(t.stringLiteral(elem.value.raw));
						}

						strings = t.arrayExpression(strings);
						raw = t.arrayExpression(raw);

						var templateName = "taggedTemplateLiteral";
						if (state.opts.loose) templateName += "Loose";

						var templateObject = state.file.addTemplateObject(templateName, strings, raw);
						args.push(templateObject);

						args = args.concat(quasi.expressions);

						path.replaceWith(t.callExpression(node.tag, args));
					},
					TemplateLiteral: function TemplateLiteral(path, state) {
						var nodes = [];

						var expressions = path.get("expressions");

						for (var _iterator2 = path.node.quasis, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
							var _ref3;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref3 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref3 = _i2.value;
							}

							var elem = _ref3;

							nodes.push(t.stringLiteral(elem.value.cooked));

							var expr = expressions.shift();
							if (expr) {
								if (state.opts.spec && !expr.isBaseType("string") && !expr.isBaseType("number")) {
									nodes.push(t.callExpression(t.identifier("String"), [expr.node]));
								} else {
									nodes.push(expr.node);
								}
							}
						}

						nodes = nodes.filter(function (n) {
							return !t.isLiteral(n, { value: "" });
						});

						if (!isString(nodes[0]) && !isString(nodes[1])) {
							nodes.unshift(t.stringLiteral(""));
						}

						if (nodes.length > 1) {
							var root = buildBinaryExpression(nodes.shift(), nodes.shift());

							for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
								var _ref4;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref4 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref4 = _i3.value;
								}

								var node = _ref4;

								root = buildBinaryExpression(root, node);
							}

							path.replaceWith(root);
						} else {
							path.replaceWith(nodes[0]);
						}
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return __webpack_require__(345);
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.types = exports.TokContext = undefined;

		var _types = __webpack_require__(14);

		var _whitespace = __webpack_require__(40);

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var TokContext = exports.TokContext = function TokContext(token, isExpr, preserveSpace, override) {
			_classCallCheck(this, TokContext);

			this.token = token;
			this.isExpr = !!isExpr;
			this.preserveSpace = !!preserveSpace;
			this.override = override;
		};

		var types = exports.types = {
			braceStatement: new TokContext("{", false),
			braceExpression: new TokContext("{", true),
			templateQuasi: new TokContext("${", true),
			parenStatement: new TokContext("(", false),
			parenExpression: new TokContext("(", true),
			template: new TokContext("`", true, true, function (p) {
				return p.readTmplToken();
			}),
			functionExpression: new TokContext("function", true)
		};

		_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
			if (this.state.context.length === 1) {
				this.state.exprAllowed = true;
				return;
			}

			var out = this.state.context.pop();
			if (out === types.braceStatement && this.curContext() === types.functionExpression) {
				this.state.context.pop();
				this.state.exprAllowed = false;
			} else if (out === types.templateQuasi) {
				this.state.exprAllowed = true;
			} else {
				this.state.exprAllowed = !out.isExpr;
			}
		};

		_types.types.name.updateContext = function (prevType) {
			this.state.exprAllowed = false;

			if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
				if (_whitespace.lineBreak.test(this.input.slice(this.state.end))) {
					this.state.exprAllowed = true;
				}
			}
		};

		_types.types.braceL.updateContext = function (prevType) {
			this.state.context.push(this.braceIsBlock(prevType) ? types.braceStatement : types.braceExpression);
			this.state.exprAllowed = true;
		};

		_types.types.dollarBraceL.updateContext = function () {
			this.state.context.push(types.templateQuasi);
			this.state.exprAllowed = true;
		};

		_types.types.parenL.updateContext = function (prevType) {
			var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
			this.state.context.push(statementParens ? types.parenStatement : types.parenExpression);
			this.state.exprAllowed = true;
		};

		_types.types.incDec.updateContext = function () {};

		_types.types._function.updateContext = function () {
			if (this.curContext() !== types.braceStatement) {
				this.state.context.push(types.functionExpression);
			}

			this.state.exprAllowed = false;
		};

		_types.types.backQuote.updateContext = function () {
			if (this.curContext() === types.template) {
				this.state.context.pop();
			} else {
				this.state.context.push(types.template);
			}
			this.state.exprAllowed = false;
		};
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.isIdentifierStart = isIdentifierStart;
		exports.isIdentifierChar = isIdentifierChar;


		function makePredicate(words) {
			words = words.split(" ");
			return function (str) {
				return words.indexOf(str) >= 0;
			};
		}

		var reservedWords = exports.reservedWords = {
			6: makePredicate("enum await"),
			strict: makePredicate("implements interface let package private protected public static yield"),
			strictBind: makePredicate("eval arguments")
		};

		var isKeyword = exports.isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

		var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
		var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷻-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︯︳︴﹍-﹏０-９＿";

		var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
		var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

		nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

		var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];
		var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];

		function isInAstralSet(code, set) {
			var pos = 0x10000;
			for (var i = 0; i < set.length; i += 2) {
				pos += set[i];
				if (pos > code) return false;

				pos += set[i + 1];
				if (pos >= code) return true;
			}
		}

		function isIdentifierStart(code) {
			if (code < 65) return code === 36;
			if (code < 91) return true;
			if (code < 97) return code === 95;
			if (code < 123) return true;
			if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
			return isInAstralSet(code, astralIdentifierStartCodes);
		}

		function isIdentifierChar(code) {
			if (code < 48) return code === 36;
			if (code < 58) return true;
			if (code < 65) return false;
			if (code < 91) return true;
			if (code < 97) return code === 95;
			if (code < 123) return true;
			if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
			return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
		}
	}, function (module, exports, __webpack_require__) {
		var aFunction = __webpack_require__(421);
		module.exports = function (fn, that, length) {
			aFunction(fn);
			if (that === undefined) return fn;
			switch (length) {
				case 1:
					return function (a) {
						return fn.call(that, a);
					};
				case 2:
					return function (a, b) {
						return fn.call(that, a, b);
					};
				case 3:
					return function (a, b, c) {
						return fn.call(that, a, b, c);
					};
			}
			return function () {
				return fn.apply(that, arguments);
			};
		};
	}, function (module, exports) {

		module.exports = {};
	}, function (module, exports, __webpack_require__) {

		var META = __webpack_require__(95)('meta'),
		    isObject = __webpack_require__(21),
		    has = __webpack_require__(30),
		    setDesc = __webpack_require__(22).f,
		    id = 0;
		var isExtensible = Object.isExtensible || function () {
			return true;
		};
		var FREEZE = !__webpack_require__(34)(function () {
			return isExtensible(Object.preventExtensions({}));
		});
		var setMeta = function setMeta(it) {
			setDesc(it, META, { value: {
					i: 'O' + ++id,
					w: {} } });
		};
		var fastKey = function fastKey(it, create) {
			if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
			if (!has(it, META)) {
				if (!isExtensible(it)) return 'F';

				if (!create) return 'E';

				setMeta(it);
			}return it[META].i;
		};
		var getWeak = function getWeak(it, create) {
			if (!has(it, META)) {
				if (!isExtensible(it)) return true;

				if (!create) return false;

				setMeta(it);
			}return it[META].w;
		};

		var onFreeze = function onFreeze(it) {
			if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
			return it;
		};
		var meta = module.exports = {
			KEY: META,
			NEED: false,
			fastKey: fastKey,
			getWeak: getWeak,
			onFreeze: onFreeze
		};
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(444);
		var global = __webpack_require__(15),
		    hide = __webpack_require__(31),
		    Iterators = __webpack_require__(68),
		    TO_STRING_TAG = __webpack_require__(11)('toStringTag');

		for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
			var NAME = collections[i],
			    Collection = global[NAME],
			    proto = Collection && Collection.prototype;
			if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
			Iterators[NAME] = Iterators.Array;
		}
	}, function (module, exports, __webpack_require__) {

		var isObjectLike = __webpack_require__(32);

		var symbolTag = '[object Symbol]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function isSymbol(value) {
			return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
		}

		module.exports = isSymbol;
	}, function (module, exports, __webpack_require__) {

		var baseToString = __webpack_require__(173);

		function toString(value) {
			return value == null ? '' : baseToString(value);
		}

		module.exports = toString;
	}, function (module, exports) {}, function (module, exports) {
		function getArg(aArgs, aName, aDefaultValue) {
			if (aName in aArgs) {
				return aArgs[aName];
			} else if (arguments.length === 3) {
				return aDefaultValue;
			} else {
				throw new Error('"' + aName + '" is a required argument.');
			}
		}
		exports.getArg = getArg;

		var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
		var dataUrlRegexp = /^data:.+\,.+$/;

		function urlParse(aUrl) {
			var match = aUrl.match(urlRegexp);
			if (!match) {
				return null;
			}
			return {
				scheme: match[1],
				auth: match[2],
				host: match[3],
				port: match[4],
				path: match[5]
			};
		}
		exports.urlParse = urlParse;

		function urlGenerate(aParsedUrl) {
			var url = '';
			if (aParsedUrl.scheme) {
				url += aParsedUrl.scheme + ':';
			}
			url += '//';
			if (aParsedUrl.auth) {
				url += aParsedUrl.auth + '@';
			}
			if (aParsedUrl.host) {
				url += aParsedUrl.host;
			}
			if (aParsedUrl.port) {
				url += ":" + aParsedUrl.port;
			}
			if (aParsedUrl.path) {
				url += aParsedUrl.path;
			}
			return url;
		}
		exports.urlGenerate = urlGenerate;

		function normalize(aPath) {
			var path = aPath;
			var url = urlParse(aPath);
			if (url) {
				if (!url.path) {
					return aPath;
				}
				path = url.path;
			}
			var isAbsolute = exports.isAbsolute(path);

			var parts = path.split(/\/+/);
			for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
				part = parts[i];
				if (part === '.') {
					parts.splice(i, 1);
				} else if (part === '..') {
					up++;
				} else if (up > 0) {
					if (part === '') {
						parts.splice(i + 1, up);
						up = 0;
					} else {
						parts.splice(i, 2);
						up--;
					}
				}
			}
			path = parts.join('/');

			if (path === '') {
				path = isAbsolute ? '/' : '.';
			}

			if (url) {
				url.path = path;
				return urlGenerate(url);
			}
			return path;
		}
		exports.normalize = normalize;

		function join(aRoot, aPath) {
			if (aRoot === "") {
				aRoot = ".";
			}
			if (aPath === "") {
				aPath = ".";
			}
			var aPathUrl = urlParse(aPath);
			var aRootUrl = urlParse(aRoot);
			if (aRootUrl) {
				aRoot = aRootUrl.path || '/';
			}

			if (aPathUrl && !aPathUrl.scheme) {
				if (aRootUrl) {
					aPathUrl.scheme = aRootUrl.scheme;
				}
				return urlGenerate(aPathUrl);
			}

			if (aPathUrl || aPath.match(dataUrlRegexp)) {
				return aPath;
			}

			if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
				aRootUrl.host = aPath;
				return urlGenerate(aRootUrl);
			}

			var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

			if (aRootUrl) {
				aRootUrl.path = joined;
				return urlGenerate(aRootUrl);
			}
			return joined;
		}
		exports.join = join;

		exports.isAbsolute = function (aPath) {
			return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
		};

		function relative(aRoot, aPath) {
			if (aRoot === "") {
				aRoot = ".";
			}

			aRoot = aRoot.replace(/\/$/, '');

			var level = 0;
			while (aPath.indexOf(aRoot + '/') !== 0) {
				var index = aRoot.lastIndexOf("/");
				if (index < 0) {
					return aPath;
				}

				aRoot = aRoot.slice(0, index);
				if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
					return aPath;
				}

				++level;
			}

			return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
		}
		exports.relative = relative;

		var supportsNullProto = function () {
			var obj = Object.create(null);
			return !('__proto__' in obj);
		}();

		function identity(s) {
			return s;
		}

		function toSetString(aStr) {
			if (isProtoString(aStr)) {
				return '$' + aStr;
			}

			return aStr;
		}
		exports.toSetString = supportsNullProto ? identity : toSetString;

		function fromSetString(aStr) {
			if (isProtoString(aStr)) {
				return aStr.slice(1);
			}

			return aStr;
		}
		exports.fromSetString = supportsNullProto ? identity : fromSetString;

		function isProtoString(s) {
			if (!s) {
				return false;
			}

			var length = s.length;

			if (length < 9) {
					return false;
				}

			if (s.charCodeAt(length - 1) !== 95 || s.charCodeAt(length - 2) !== 95 || s.charCodeAt(length - 3) !== 111 || s.charCodeAt(length - 4) !== 116 || s.charCodeAt(length - 5) !== 111 || s.charCodeAt(length - 6) !== 114 || s.charCodeAt(length - 7) !== 112 || s.charCodeAt(length - 8) !== 95 || s.charCodeAt(length - 9) !== 95) {
					return false;
				}

			for (var i = length - 10; i >= 0; i--) {
				if (s.charCodeAt(i) !== 36) {
						return false;
					}
			}

			return true;
		}

		function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
			var cmp = mappingA.source - mappingB.source;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0 || onlyCompareOriginal) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			return mappingA.name - mappingB.name;
		}
		exports.compareByOriginalPositions = compareByOriginalPositions;

		function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
			var cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0 || onlyCompareGenerated) {
				return cmp;
			}

			cmp = mappingA.source - mappingB.source;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0) {
				return cmp;
			}

			return mappingA.name - mappingB.name;
		}
		exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

		function strcmp(aStr1, aStr2) {
			if (aStr1 === aStr2) {
				return 0;
			}

			if (aStr1 > aStr2) {
				return 1;
			}

			return -1;
		}

		function compareByGeneratedPositionsInflated(mappingA, mappingB) {
			var cmp = mappingA.generatedLine - mappingB.generatedLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.generatedColumn - mappingB.generatedColumn;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = strcmp(mappingA.source, mappingB.source);
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalLine - mappingB.originalLine;
			if (cmp !== 0) {
				return cmp;
			}

			cmp = mappingA.originalColumn - mappingB.originalColumn;
			if (cmp !== 0) {
				return cmp;
			}

			return strcmp(mappingA.name, mappingB.name);
		}
		exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}, function (module, exports) {

		module.exports = function (module) {
			if (!module.webpackPolyfill) {
				module.deprecate = function () {};
				module.paths = [];

				module.children = [];
				module.webpackPolyfill = 1;
			}
			return module;
		};
	}, function (module, exports, __webpack_require__) {
		(function (global) {
			'use strict';

			/*!
    * The buffer module from node.js, for the browser.
    *
    * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
    * @license  MIT
    */

			function compare(a, b) {
				if (a === b) {
					return 0;
				}

				var x = a.length;
				var y = b.length;

				for (var i = 0, len = Math.min(x, y); i < len; ++i) {
					if (a[i] !== b[i]) {
						x = a[i];
						y = b[i];
						break;
					}
				}

				if (x < y) {
					return -1;
				}
				if (y < x) {
					return 1;
				}
				return 0;
			}
			function isBuffer(b) {
				if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
					return global.Buffer.isBuffer(b);
				}
				return !!(b != null && b._isBuffer);
			}

			var util = __webpack_require__(119);
			var hasOwn = Object.prototype.hasOwnProperty;
			var pSlice = Array.prototype.slice;
			var functionsHaveNames = function () {
				return function foo() {}.name === 'foo';
			}();
			function pToString(obj) {
				return Object.prototype.toString.call(obj);
			}
			function isView(arrbuf) {
				if (isBuffer(arrbuf)) {
					return false;
				}
				if (typeof global.ArrayBuffer !== 'function') {
					return false;
				}
				if (typeof ArrayBuffer.isView === 'function') {
					return ArrayBuffer.isView(arrbuf);
				}
				if (!arrbuf) {
					return false;
				}
				if (arrbuf instanceof DataView) {
					return true;
				}
				if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
					return true;
				}
				return false;
			}


			var assert = module.exports = ok;

			var regex = /\s*function\s+([^\(\s]*)\s*/;

			function getName(func) {
				if (!util.isFunction(func)) {
					return;
				}
				if (functionsHaveNames) {
					return func.name;
				}
				var str = func.toString();
				var match = str.match(regex);
				return match && match[1];
			}
			assert.AssertionError = function AssertionError(options) {
				this.name = 'AssertionError';
				this.actual = options.actual;
				this.expected = options.expected;
				this.operator = options.operator;
				if (options.message) {
					this.message = options.message;
					this.generatedMessage = false;
				} else {
					this.message = getMessage(this);
					this.generatedMessage = true;
				}
				var stackStartFunction = options.stackStartFunction || fail;
				if (Error.captureStackTrace) {
					Error.captureStackTrace(this, stackStartFunction);
				} else {
					var err = new Error();
					if (err.stack) {
						var out = err.stack;

						var fn_name = getName(stackStartFunction);
						var idx = out.indexOf('\n' + fn_name);
						if (idx >= 0) {
							var next_line = out.indexOf('\n', idx + 1);
							out = out.substring(next_line + 1);
						}

						this.stack = out;
					}
				}
			};

			util.inherits(assert.AssertionError, Error);

			function truncate(s, n) {
				if (typeof s === 'string') {
					return s.length < n ? s : s.slice(0, n);
				} else {
					return s;
				}
			}
			function inspect(something) {
				if (functionsHaveNames || !util.isFunction(something)) {
					return util.inspect(something);
				}
				var rawname = getName(something);
				var name = rawname ? ': ' + rawname : '';
				return '[Function' + name + ']';
			}
			function getMessage(self) {
				return truncate(inspect(self.actual), 128) + ' ' + self.operator + ' ' + truncate(inspect(self.expected), 128);
			}

			function fail(actual, expected, message, operator, stackStartFunction) {
				throw new assert.AssertionError({
					message: message,
					actual: actual,
					expected: expected,
					operator: operator,
					stackStartFunction: stackStartFunction
				});
			}

			assert.fail = fail;

			function ok(value, message) {
				if (!value) fail(value, true, message, '==', assert.ok);
			}
			assert.ok = ok;

			assert.equal = function equal(actual, expected, message) {
				if (actual != expected) fail(actual, expected, message, '==', assert.equal);
			};

			assert.notEqual = function notEqual(actual, expected, message) {
				if (actual == expected) {
					fail(actual, expected, message, '!=', assert.notEqual);
				}
			};

			assert.deepEqual = function deepEqual(actual, expected, message) {
				if (!_deepEqual(actual, expected, false)) {
					fail(actual, expected, message, 'deepEqual', assert.deepEqual);
				}
			};

			assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
				if (!_deepEqual(actual, expected, true)) {
					fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
				}
			};

			function _deepEqual(actual, expected, strict, memos) {
				if (actual === expected) {
					return true;
				} else if (isBuffer(actual) && isBuffer(expected)) {
					return compare(actual, expected) === 0;
				} else if (util.isDate(actual) && util.isDate(expected)) {
					return actual.getTime() === expected.getTime();
				} else if (util.isRegExp(actual) && util.isRegExp(expected)) {
					return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
				} else if ((actual === null || typeof actual !== 'object') && (expected === null || typeof expected !== 'object')) {
					return strict ? actual === expected : actual == expected;
				} else if (isView(actual) && isView(expected) && pToString(actual) === pToString(expected) && !(actual instanceof Float32Array || actual instanceof Float64Array)) {
					return compare(new Uint8Array(actual.buffer), new Uint8Array(expected.buffer)) === 0;
				} else if (isBuffer(actual) !== isBuffer(expected)) {
					return false;
				} else {
					memos = memos || { actual: [], expected: [] };

					var actualIndex = memos.actual.indexOf(actual);
					if (actualIndex !== -1) {
						if (actualIndex === memos.expected.indexOf(expected)) {
							return true;
						}
					}

					memos.actual.push(actual);
					memos.expected.push(expected);

					return objEquiv(actual, expected, strict, memos);
				}
			}

			function isArguments(object) {
				return Object.prototype.toString.call(object) == '[object Arguments]';
			}

			function objEquiv(a, b, strict, actualVisitedObjects) {
				if (a === null || a === undefined || b === null || b === undefined) return false;

				if (util.isPrimitive(a) || util.isPrimitive(b)) return a === b;
				if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b)) return false;
				var aIsArgs = isArguments(a);
				var bIsArgs = isArguments(b);
				if (aIsArgs && !bIsArgs || !aIsArgs && bIsArgs) return false;
				if (aIsArgs) {
					a = pSlice.call(a);
					b = pSlice.call(b);
					return _deepEqual(a, b, strict);
				}
				var ka = objectKeys(a);
				var kb = objectKeys(b);
				var key, i;

				if (ka.length !== kb.length) return false;

				ka.sort();
				kb.sort();

				for (i = ka.length - 1; i >= 0; i--) {
					if (ka[i] !== kb[i]) return false;
				}

				for (i = ka.length - 1; i >= 0; i--) {
					key = ka[i];
					if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects)) return false;
				}
				return true;
			}

			assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
				if (_deepEqual(actual, expected, false)) {
					fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
				}
			};

			assert.notDeepStrictEqual = notDeepStrictEqual;
			function notDeepStrictEqual(actual, expected, message) {
				if (_deepEqual(actual, expected, true)) {
					fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
				}
			}

			assert.strictEqual = function strictEqual(actual, expected, message) {
				if (actual !== expected) {
					fail(actual, expected, message, '===', assert.strictEqual);
				}
			};

			assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
				if (actual === expected) {
					fail(actual, expected, message, '!==', assert.notStrictEqual);
				}
			};

			function expectedException(actual, expected) {
				if (!actual || !expected) {
					return false;
				}

				if (Object.prototype.toString.call(expected) == '[object RegExp]') {
					return expected.test(actual);
				}

				try {
					if (actual instanceof expected) {
						return true;
					}
				} catch (e) {}

				if (Error.isPrototypeOf(expected)) {
					return false;
				}

				return expected.call({}, actual) === true;
			}

			function _tryBlock(block) {
				var error;
				try {
					block();
				} catch (e) {
					error = e;
				}
				return error;
			}

			function _throws(shouldThrow, block, expected, message) {
				var actual;

				if (typeof block !== 'function') {
					throw new TypeError('"block" argument must be a function');
				}

				if (typeof expected === 'string') {
					message = expected;
					expected = null;
				}

				actual = _tryBlock(block);

				message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');

				if (shouldThrow && !actual) {
					fail(actual, expected, 'Missing expected exception' + message);
				}

				var userProvidedMessage = typeof message === 'string';
				var isUnwantedException = !shouldThrow && util.isError(actual);
				var isUnexpectedException = !shouldThrow && actual && !expected;

				if (isUnwantedException && userProvidedMessage && expectedException(actual, expected) || isUnexpectedException) {
					fail(actual, expected, 'Got unwanted exception' + message);
				}

				if (shouldThrow && actual && expected && !expectedException(actual, expected) || !shouldThrow && actual) {
					throw actual;
				}
			}

			assert.throws = function (block, error, message) {
				_throws(true, block, error, message);
			};

			assert.doesNotThrow = function (block, error, message) {
				_throws(false, block, error, message);
			};

			assert.ifError = function (err) {
				if (err) throw err;
			};

			var objectKeys = Object.keys || function (obj) {
				var keys = [];
				for (var key in obj) {
					if (hasOwn.call(obj, key)) keys.push(key);
				}
				return keys;
			};
		}).call(exports, function () {
			return this;
		}());
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _possibleConstructorReturn2 = __webpack_require__(39);

		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

		var _inherits2 = __webpack_require__(38);

		var _inherits3 = _interopRequireDefault(_inherits2);

		var _optionManager = __webpack_require__(47);

		var _optionManager2 = _interopRequireDefault(_optionManager);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _store = __webpack_require__(120);

		var _store2 = _interopRequireDefault(_store);

		var _babelTraverse = __webpack_require__(10);

		var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

		var _assign = __webpack_require__(179);

		var _assign2 = _interopRequireDefault(_assign);

		var _clone = __webpack_require__(113);

		var _clone2 = _interopRequireDefault(_clone);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var GLOBAL_VISITOR_PROPS = ["enter", "exit"];

		var Plugin = function (_Store) {
			(0, _inherits3.default)(Plugin, _Store);

			function Plugin(plugin, key) {
				(0, _classCallCheck3.default)(this, Plugin);

				var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

				_this.initialized = false;
				_this.raw = (0, _assign2.default)({}, plugin);
				_this.key = _this.take("name") || key;

				_this.manipulateOptions = _this.take("manipulateOptions");
				_this.post = _this.take("post");
				_this.pre = _this.take("pre");
				_this.visitor = _this.normaliseVisitor((0, _clone2.default)(_this.take("visitor")) || {});
				return _this;
			}

			Plugin.prototype.take = function take(key) {
				var val = this.raw[key];
				delete this.raw[key];
				return val;
			};

			Plugin.prototype.chain = function chain(target, key) {
				if (!target[key]) return this[key];
				if (!this[key]) return target[key];

				var fns = [target[key], this[key]];

				return function () {
					var val = void 0;

					for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						args[_key] = arguments[_key];
					}

					for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var fn = _ref;

						if (fn) {
							var ret = fn.apply(this, args);
							if (ret != null) val = ret;
						}
					}
					return val;
				};
			};

			Plugin.prototype.maybeInherit = function maybeInherit(loc) {
				var inherits = this.take("inherits");
				if (!inherits) return;

				inherits = _optionManager2.default.normalisePlugin(inherits, loc, "inherits");

				this.manipulateOptions = this.chain(inherits, "manipulateOptions");
				this.post = this.chain(inherits, "post");
				this.pre = this.chain(inherits, "pre");
				this.visitor = _babelTraverse2.default.visitors.merge([inherits.visitor, this.visitor]);
			};

			Plugin.prototype.init = function init(loc, i) {
				if (this.initialized) return;
				this.initialized = true;

				this.maybeInherit(loc);

				for (var key in this.raw) {
					throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
				}
			};

			Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor) {
				for (var _iterator2 = GLOBAL_VISITOR_PROPS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var key = _ref2;

					if (visitor[key]) {
						throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
					}
				}

				_babelTraverse2.default.explode(visitor);
				return visitor;
			};

			return Plugin;
		}(_store2.default);

		exports.default = Plugin;
		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("flow");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function statementList(key, path) {
				var paths = path.get(key);

				for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var _path = _ref2;

					var func = _path.node;
					if (!_path.isFunctionDeclaration()) continue;

					var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);

					declar._blockHoist = 2;

					func.id = null;

					_path.replaceWith(declar);
				}
			}

			return {
				visitor: {
					BlockStatement: function BlockStatement(path) {
						var node = path.node;
						var parent = path.parent;

						if (t.isFunction(parent, { body: node }) || t.isExportDeclaration(parent)) {
							return;
						}

						statementList("body", path);
					},
					SwitchCase: function SwitchCase(path) {
						statementList("consequent", path);
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (_ref) {
			var t = _ref.types;

			function Property(path, node, scope, getObjectRef, file) {
				var replaceSupers = new _babelHelperReplaceSupers2.default({
					getObjectRef: getObjectRef,
					methodNode: node,
					methodPath: path,
					isStatic: true,
					scope: scope,
					file: file
				});

				replaceSupers.replace();
			}

			var CONTAINS_SUPER = (0, _symbol2.default)();

			return {
				visitor: {
					Super: function Super(path) {
						var parentObj = path.findParent(function (path) {
							return path.isObjectExpression();
						});
						if (parentObj) parentObj.node[CONTAINS_SUPER] = true;
					},

					ObjectExpression: {
						exit: function exit(path, file) {
							if (!path.node[CONTAINS_SUPER]) return;

							var objectRef = void 0;
							var getObjectRef = function getObjectRef() {
								return objectRef = objectRef || path.scope.generateUidIdentifier("obj");
							};

							var propPaths = path.get("properties");
							for (var _iterator = propPaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
								var _ref2;

								if (_isArray) {
									if (_i >= _iterator.length) break;
									_ref2 = _iterator[_i++];
								} else {
									_i = _iterator.next();
									if (_i.done) break;
									_ref2 = _i.value;
								}

								var propPath = _ref2;

								if (propPath.isObjectProperty()) propPath = propPath.get("value");
								Property(propPath, propPath.node, path.scope, getObjectRef, file);
							}

							if (objectRef) {
								path.scope.push({ id: objectRef });
								path.replaceWith(t.assignmentExpression("=", objectRef, path.node));
							}
						}
					}
				}
			};
		};

		var _babelHelperReplaceSupers = __webpack_require__(198);

		var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					RegExpLiteral: function RegExpLiteral(path) {
						var node = path.node;

						if (!regex.is(node, "y")) return;

						path.replaceWith(t.newExpression(t.identifier("RegExp"), [t.stringLiteral(node.pattern), t.stringLiteral(node.flags)]));
					}
				}
			};
		};

		var _babelHelperRegex = __webpack_require__(196);

		var regex = _interopRequireWildcard(_babelHelperRegex);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (_ref) {
			var t = _ref.types;

			var IGNORE = (0, _symbol2.default)();

			return {
				visitor: {
					Scope: function Scope(_ref2) {
						var scope = _ref2.scope;

						if (!scope.getBinding("Symbol")) {
							return;
						}

						scope.rename("Symbol");
					},
					UnaryExpression: function UnaryExpression(path) {
						var node = path.node;
						var parent = path.parent;

						if (node[IGNORE]) return;
						if (path.find(function (path) {
							return path.node && !!path.node._generated;
						})) return;

						if (path.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {
							var opposite = path.getOpposite();
							if (opposite.isLiteral() && opposite.node.value !== "symbol" && opposite.node.value !== "object") {
								return;
							}
						}

						if (node.operator === "typeof") {
							var call = t.callExpression(this.addHelper("typeof"), [node.argument]);
							if (path.get("argument").isIdentifier()) {
								var undefLiteral = t.stringLiteral("undefined");
								var unary = t.unaryExpression("typeof", node.argument);
								unary[IGNORE] = true;
								path.replaceWith(t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call));
							} else {
								path.replaceWith(call);
							}
						}
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					RegExpLiteral: function RegExpLiteral(_ref) {
						var node = _ref.node;

						if (!regex.is(node, "u")) return;
						node.pattern = (0, _regexpuCore2.default)(node.pattern, node.flags);
						regex.pullFlag(node, "u");
					}
				}
			};
		};

		var _regexpuCore = __webpack_require__(615);

		var _regexpuCore2 = _interopRequireDefault(_regexpuCore);

		var _babelHelperRegex = __webpack_require__(196);

		var regex = _interopRequireWildcard(_babelHelperRegex);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				inherits: __webpack_require__(202),

				visitor: (0, _babelHelperBuilderBinaryAssignmentOperatorVisitor2.default)({
					operator: "**",

					build: function build(left, right) {
						return t.callExpression(t.memberExpression(t.identifier("Math"), t.identifier("pow")), [left, right]);
					}
				})
			};
		};

		var _babelHelperBuilderBinaryAssignmentOperatorVisitor = __webpack_require__(312);

		var _babelHelperBuilderBinaryAssignmentOperatorVisitor2 = _interopRequireDefault(_babelHelperBuilderBinaryAssignmentOperatorVisitor);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(411), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.scope = exports.path = undefined;

		var _weakMap = __webpack_require__(357);

		var _weakMap2 = _interopRequireDefault(_weakMap);

		exports.clear = clear;

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var path = exports.path = new _weakMap2.default();
		var scope = exports.scope = new _weakMap2.default();

		function clear() {
			exports.path = path = new _weakMap2.default();
			exports.scope = scope = new _weakMap2.default();
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.SourceLocation = exports.Position = undefined;
		exports.getLineInfo = getLineInfo;

		var _whitespace = __webpack_require__(40);

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var Position = exports.Position = function Position(line, col) {
			_classCallCheck(this, Position);

			this.line = line;
			this.column = col;
		};

		var SourceLocation = exports.SourceLocation = function SourceLocation(start, end) {
			_classCallCheck(this, SourceLocation);

			this.start = start;
			this.end = end;
		};

		function getLineInfo(input, offset) {
			for (var line = 1, cur = 0;;) {
				_whitespace.lineBreakG.lastIndex = cur;
				var match = _whitespace.lineBreakG.exec(input);
				if (match && match.index < offset) {
					++line;
					cur = match.index + match[0].length;
				} else {
					return new Position(line, offset - cur);
				}
			}
		}
	}, function (module, exports) {
		module.exports = function (it) {
			if (it == undefined) throw TypeError("Can't call method on  " + it);
			return it;
		};
	}, function (module, exports, __webpack_require__) {

		var ctx = __webpack_require__(67),
		    call = __webpack_require__(432),
		    isArrayIter = __webpack_require__(431),
		    anObject = __webpack_require__(18),
		    toLength = __webpack_require__(160),
		    getIterFn = __webpack_require__(238),
		    BREAK = {},
		    RETURN = {};
		var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
			var iterFn = ITERATOR ? function () {
				return iterable;
			} : getIterFn(iterable),
			    f = ctx(fn, that, entries ? 2 : 1),
			    index = 0,
			    length,
			    step,
			    iterator,
			    result;
			if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');

			if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
				result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
				if (result === BREAK || result === RETURN) return result;
			} else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
				result = call(iterator, f, step.value, entries);
				if (result === BREAK || result === RETURN) return result;
			}
		};
		exports.BREAK = BREAK;
		exports.RETURN = RETURN;
	}, function (module, exports, __webpack_require__) {
		var anObject = __webpack_require__(18),
		    dPs = __webpack_require__(435),
		    enumBugKeys = __webpack_require__(150),
		    IE_PROTO = __webpack_require__(157)('IE_PROTO'),
		    Empty = function Empty() {},
		    PROTOTYPE = 'prototype';

		var _createDict = function createDict() {
			var iframe = __webpack_require__(230)('iframe'),
			    i = enumBugKeys.length,
			    lt = '<',
			    gt = '>',
			    iframeDocument;
			iframe.style.display = 'none';
			__webpack_require__(430).appendChild(iframe);
			iframe.src = 'javascript:';
			iframeDocument = iframe.contentWindow.document;
			iframeDocument.open();
			iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
			iframeDocument.close();
			_createDict = iframeDocument.F;
			while (i--) {
				delete _createDict[PROTOTYPE][enumBugKeys[i]];
			}return _createDict();
		};

		module.exports = Object.create || function create(O, Properties) {
			var result;
			if (O !== null) {
				Empty[PROTOTYPE] = anObject(O);
				result = new Empty();
				Empty[PROTOTYPE] = null;

				result[IE_PROTO] = O;
			} else result = _createDict();
			return Properties === undefined ? result : dPs(result, Properties);
		};
	}, function (module, exports) {

		exports.f = {}.propertyIsEnumerable;
	}, function (module, exports) {

		module.exports = function (bitmap, value) {
			return {
				enumerable: !(bitmap & 1),
				configurable: !(bitmap & 2),
				writable: !(bitmap & 4),
				value: value
			};
		};
	}, function (module, exports, __webpack_require__) {

		var def = __webpack_require__(22).f,
		    has = __webpack_require__(30),
		    TAG = __webpack_require__(11)('toStringTag');

		module.exports = function (it, tag, stat) {
			if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
		};
	}, function (module, exports, __webpack_require__) {
		var defined = __webpack_require__(88);
		module.exports = function (it) {
			return Object(defined(it));
		};
	}, function (module, exports) {

		var id = 0,
		    px = Math.random();
		module.exports = function (key) {
			return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
		};
	}, 73, function (module, exports, __webpack_require__) {

		var listCacheClear = __webpack_require__(549),
		    listCacheDelete = __webpack_require__(550),
		    listCacheGet = __webpack_require__(551),
		    listCacheHas = __webpack_require__(552),
		    listCacheSet = __webpack_require__(553);

		function ListCache(entries) {
			var index = -1,
			    length = entries ? entries.length : 0;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		module.exports = ListCache;
	}, function (module, exports, __webpack_require__) {

		var ListCache = __webpack_require__(97),
		    stackClear = __webpack_require__(568),
		    stackDelete = __webpack_require__(569),
		    stackGet = __webpack_require__(570),
		    stackHas = __webpack_require__(571),
		    stackSet = __webpack_require__(572);

		function Stack(entries) {
			var data = this.__data__ = new ListCache(entries);
			this.size = data.size;
		}

		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		module.exports = Stack;
	}, function (module, exports, __webpack_require__) {

		var root = __webpack_require__(23);

		var Symbol = root.Symbol;

		module.exports = Symbol;
	}, function (module, exports) {
		function arrayMap(array, iteratee) {
			var index = -1,
			    length = array ? array.length : 0,
			    result = Array(length);

			while (++index < length) {
				result[index] = iteratee(array[index], index, array);
			}
			return result;
		}

		module.exports = arrayMap;
	}, function (module, exports, __webpack_require__) {

		var eq = __webpack_require__(44);

		function assocIndexOf(array, key) {
			var length = array.length;
			while (length--) {
				if (eq(array[length][0], key)) {
					return length;
				}
			}
			return -1;
		}

		module.exports = assocIndexOf;
	}, function (module, exports, __webpack_require__) {

		var Stack = __webpack_require__(98),
		    arrayEach = __webpack_require__(169),
		    assignValue = __webpack_require__(170),
		    baseAssign = __webpack_require__(483),
		    cloneBuffer = __webpack_require__(518),
		    copyArray = __webpack_require__(175),
		    copySymbols = __webpack_require__(527),
		    getAllKeys = __webpack_require__(534),
		    getTag = __webpack_require__(261),
		    initCloneArray = __webpack_require__(543),
		    initCloneByTag = __webpack_require__(544),
		    initCloneObject = __webpack_require__(545),
		    isArray = __webpack_require__(6),
		    isBuffer = __webpack_require__(592),
		    isObject = __webpack_require__(8),
		    keys = __webpack_require__(25);

		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		var cloneableTags = {};
		cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
		cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

		function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
			var result;
			if (customizer) {
				result = object ? customizer(value, key, object, stack) : customizer(value);
			}
			if (result !== undefined) {
				return result;
			}
			if (!isObject(value)) {
				return value;
			}
			var isArr = isArray(value);
			if (isArr) {
				result = initCloneArray(value);
				if (!isDeep) {
					return copyArray(value, result);
				}
			} else {
				var tag = getTag(value),
				    isFunc = tag == funcTag || tag == genTag;

				if (isBuffer(value)) {
					return cloneBuffer(value, isDeep);
				}
				if (tag == objectTag || tag == argsTag || isFunc && !object) {
					result = initCloneObject(isFunc ? {} : value);
					if (!isDeep) {
						return copySymbols(value, baseAssign(result, value));
					}
				} else {
					if (!cloneableTags[tag]) {
						return object ? value : {};
					}
					result = initCloneByTag(value, tag, baseClone, isDeep);
				}
			}

			stack || (stack = new Stack());
			var stacked = stack.get(value);
			if (stacked) {
				return stacked;
			}
			stack.set(value, result);

			if (!isArr) {
				var props = isFull ? getAllKeys(value) : keys(value);
			}
			arrayEach(props || value, function (subValue, key) {
				if (props) {
					key = subValue;
					subValue = value[key];
				}

				assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
			});
			return result;
		}

		module.exports = baseClone;
	}, function (module, exports, __webpack_require__) {

		var baseFindIndex = __webpack_require__(172),
		    baseIsNaN = __webpack_require__(496),
		    strictIndexOf = __webpack_require__(573);

		function baseIndexOf(array, value, fromIndex) {
			return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
		}

		module.exports = baseIndexOf;
	}, function (module, exports, __webpack_require__) {

		var identity = __webpack_require__(115),
		    overRest = __webpack_require__(563),
		    setToString = __webpack_require__(566);

		function baseRest(func, start) {
			return setToString(overRest(func, start, identity), func + '');
		}

		module.exports = baseRest;
	}, function (module, exports) {
		function baseUnary(func) {
			return function (value) {
				return func(value);
			};
		}

		module.exports = baseUnary;
	}, function (module, exports, __webpack_require__) {

		var baseRest = __webpack_require__(104),
		    isIterateeCall = __webpack_require__(177);

		function createAssigner(assigner) {
			return baseRest(function (object, sources) {
				var index = -1,
				    length = sources.length,
				    customizer = length > 1 ? sources[length - 1] : undefined,
				    guard = length > 2 ? sources[2] : undefined;

				customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

				if (guard && isIterateeCall(sources[0], sources[1], guard)) {
					customizer = length < 3 ? undefined : customizer;
					length = 1;
				}
				object = Object(object);
				while (++index < length) {
					var source = sources[index];
					if (source) {
						assigner(object, source, index, customizer);
					}
				}
				return object;
			});
		}

		module.exports = createAssigner;
	}, function (module, exports, __webpack_require__) {

		var isKeyable = __webpack_require__(547);

		function getMapData(map, key) {
			var data = map.__data__;
			return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
		}

		module.exports = getMapData;
	}, function (module, exports, __webpack_require__) {

		var isArray = __webpack_require__(6),
		    isSymbol = __webpack_require__(71);

		var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
		    reIsPlainProp = /^\w*$/;

		function isKey(value, object) {
			if (isArray(value)) {
				return false;
			}
			var type = typeof value;
			if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
				return true;
			}
			return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
		}

		module.exports = isKey;
	}, function (module, exports) {
		var objectProto = Object.prototype;

		function isPrototype(value) {
			var Ctor = value && value.constructor,
			    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

			return value === proto;
		}

		module.exports = isPrototype;
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36);

		var nativeCreate = getNative(Object, 'create');

		module.exports = nativeCreate;
	}, function (module, exports) {
		function setToArray(set) {
			var index = -1,
			    result = Array(set.size);

			set.forEach(function (value) {
				result[++index] = value;
			});
			return result;
		}

		module.exports = setToArray;
	}, function (module, exports, __webpack_require__) {

		var isSymbol = __webpack_require__(71);

		var INFINITY = 1 / 0;

		function toKey(value) {
			if (typeof value == 'string' || isSymbol(value)) {
				return value;
			}
			var result = value + '';
			return result == '0' && 1 / value == -INFINITY ? '-0' : result;
		}

		module.exports = toKey;
	}, function (module, exports, __webpack_require__) {

		var baseClone = __webpack_require__(102);

		function clone(value) {
			return baseClone(value, false, true);
		}

		module.exports = clone;
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(589);
	}, function (module, exports) {
		function identity(value) {
			return value;
		}

		module.exports = identity;
	}, function (module, exports, __webpack_require__) {

		var baseIndexOf = __webpack_require__(103),
		    isArrayLike = __webpack_require__(24),
		    isString = __webpack_require__(181),
		    toInteger = __webpack_require__(45),
		    values = __webpack_require__(277);

		var nativeMax = Math.max;

		function includes(collection, value, fromIndex, guard) {
			collection = isArrayLike(collection) ? collection : values(collection);
			fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;

			var length = collection.length;
			if (fromIndex < 0) {
				fromIndex = nativeMax(length + fromIndex, 0);
			}
			return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
		}

		module.exports = includes;
	}, function (module, exports, __webpack_require__) {

		var isArrayLikeObject = __webpack_require__(270);

		var argsTag = '[object Arguments]';

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		var objectToString = objectProto.toString;

		var propertyIsEnumerable = objectProto.propertyIsEnumerable;

		function isArguments(value) {
			return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
		}

		module.exports = isArguments;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8);

		var funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function isFunction(value) {
			var tag = isObject(value) ? objectToString.call(value) : '';
			return tag == funcTag || tag == genTag;
		}

		module.exports = isFunction;
	}, function (module, exports, __webpack_require__) {
		(function (global, process) {

			var formatRegExp = /%[sdj%]/g;
			exports.format = function (f) {
				if (!isString(f)) {
					var objects = [];
					for (var i = 0; i < arguments.length; i++) {
						objects.push(inspect(arguments[i]));
					}
					return objects.join(' ');
				}

				var i = 1;
				var args = arguments;
				var len = args.length;
				var str = String(f).replace(formatRegExp, function (x) {
					if (x === '%%') return '%';
					if (i >= len) return x;
					switch (x) {
						case '%s':
							return String(args[i++]);
						case '%d':
							return Number(args[i++]);
						case '%j':
							try {
								return JSON.stringify(args[i++]);
							} catch (_) {
								return '[Circular]';
							}
						default:
							return x;
					}
				});
				for (var x = args[i]; i < len; x = args[++i]) {
					if (isNull(x) || !isObject(x)) {
						str += ' ' + x;
					} else {
						str += ' ' + inspect(x);
					}
				}
				return str;
			};

			exports.deprecate = function (fn, msg) {
				if (isUndefined(global.process)) {
					return function () {
						return exports.deprecate(fn, msg).apply(this, arguments);
					};
				}

				if (process.noDeprecation === true) {
					return fn;
				}

				var warned = false;
				function deprecated() {
					if (!warned) {
						if (process.throwDeprecation) {
							throw new Error(msg);
						} else if (process.traceDeprecation) {
							console.trace(msg);
						} else {
							console.error(msg);
						}
						warned = true;
					}
					return fn.apply(this, arguments);
				}

				return deprecated;
			};

			var debugs = {};
			var debugEnviron;
			exports.debuglog = function (set) {
				if (isUndefined(debugEnviron)) debugEnviron = process.env.NODE_DEBUG || '';
				set = set.toUpperCase();
				if (!debugs[set]) {
					if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
						var pid = process.pid;
						debugs[set] = function () {
							var msg = exports.format.apply(exports, arguments);
							console.error('%s %d: %s', set, pid, msg);
						};
					} else {
						debugs[set] = function () {};
					}
				}
				return debugs[set];
			};

			function inspect(obj, opts) {
				var ctx = {
					seen: [],
					stylize: stylizeNoColor
				};

				if (arguments.length >= 3) ctx.depth = arguments[2];
				if (arguments.length >= 4) ctx.colors = arguments[3];
				if (isBoolean(opts)) {
					ctx.showHidden = opts;
				} else if (opts) {
					exports._extend(ctx, opts);
				}

				if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
				if (isUndefined(ctx.depth)) ctx.depth = 2;
				if (isUndefined(ctx.colors)) ctx.colors = false;
				if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
				if (ctx.colors) ctx.stylize = stylizeWithColor;
				return formatValue(ctx, obj, ctx.depth);
			}
			exports.inspect = inspect;

			inspect.colors = {
				'bold': [1, 22],
				'italic': [3, 23],
				'underline': [4, 24],
				'inverse': [7, 27],
				'white': [37, 39],
				'grey': [90, 39],
				'black': [30, 39],
				'blue': [34, 39],
				'cyan': [36, 39],
				'green': [32, 39],
				'magenta': [35, 39],
				'red': [31, 39],
				'yellow': [33, 39]
			};

			inspect.styles = {
				'special': 'cyan',
				'number': 'yellow',
				'boolean': 'yellow',
				'undefined': 'grey',
				'null': 'bold',
				'string': 'green',
				'date': 'magenta',

				'regexp': 'red'
			};

			function stylizeWithColor(str, styleType) {
				var style = inspect.styles[styleType];

				if (style) {
					return '\x1B[' + inspect.colors[style][0] + 'm' + str + '\x1B[' + inspect.colors[style][1] + 'm';
				} else {
					return str;
				}
			}

			function stylizeNoColor(str, styleType) {
				return str;
			}

			function arrayToHash(array) {
				var hash = {};

				array.forEach(function (val, idx) {
					hash[val] = true;
				});

				return hash;
			}

			function formatValue(ctx, value, recurseTimes) {
				if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
					var ret = value.inspect(recurseTimes, ctx);
					if (!isString(ret)) {
						ret = formatValue(ctx, ret, recurseTimes);
					}
					return ret;
				}

				var primitive = formatPrimitive(ctx, value);
				if (primitive) {
					return primitive;
				}

				var keys = Object.keys(value);
				var visibleKeys = arrayToHash(keys);

				if (ctx.showHidden) {
					keys = Object.getOwnPropertyNames(value);
				}

				if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
					return formatError(value);
				}

				if (keys.length === 0) {
					if (isFunction(value)) {
						var name = value.name ? ': ' + value.name : '';
						return ctx.stylize('[Function' + name + ']', 'special');
					}
					if (isRegExp(value)) {
						return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
					}
					if (isDate(value)) {
						return ctx.stylize(Date.prototype.toString.call(value), 'date');
					}
					if (isError(value)) {
						return formatError(value);
					}
				}

				var base = '',
				    array = false,
				    braces = ['{', '}'];

				if (isArray(value)) {
					array = true;
					braces = ['[', ']'];
				}

				if (isFunction(value)) {
					var n = value.name ? ': ' + value.name : '';
					base = ' [Function' + n + ']';
				}

				if (isRegExp(value)) {
					base = ' ' + RegExp.prototype.toString.call(value);
				}

				if (isDate(value)) {
					base = ' ' + Date.prototype.toUTCString.call(value);
				}

				if (isError(value)) {
					base = ' ' + formatError(value);
				}

				if (keys.length === 0 && (!array || value.length == 0)) {
					return braces[0] + base + braces[1];
				}

				if (recurseTimes < 0) {
					if (isRegExp(value)) {
						return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
					} else {
						return ctx.stylize('[Object]', 'special');
					}
				}

				ctx.seen.push(value);

				var output;
				if (array) {
					output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
				} else {
					output = keys.map(function (key) {
						return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
					});
				}

				ctx.seen.pop();

				return reduceToSingleString(output, base, braces);
			}

			function formatPrimitive(ctx, value) {
				if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
				if (isString(value)) {
					var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
					return ctx.stylize(simple, 'string');
				}
				if (isNumber(value)) return ctx.stylize('' + value, 'number');
				if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');

				if (isNull(value)) return ctx.stylize('null', 'null');
			}

			function formatError(value) {
				return '[' + Error.prototype.toString.call(value) + ']';
			}

			function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
				var output = [];
				for (var i = 0, l = value.length; i < l; ++i) {
					if (hasOwnProperty(value, String(i))) {
						output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
					} else {
						output.push('');
					}
				}
				keys.forEach(function (key) {
					if (!key.match(/^\d+$/)) {
						output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
					}
				});
				return output;
			}

			function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
				var name, str, desc;
				desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
				if (desc.get) {
					if (desc.set) {
						str = ctx.stylize('[Getter/Setter]', 'special');
					} else {
						str = ctx.stylize('[Getter]', 'special');
					}
				} else {
					if (desc.set) {
						str = ctx.stylize('[Setter]', 'special');
					}
				}
				if (!hasOwnProperty(visibleKeys, key)) {
					name = '[' + key + ']';
				}
				if (!str) {
					if (ctx.seen.indexOf(desc.value) < 0) {
						if (isNull(recurseTimes)) {
							str = formatValue(ctx, desc.value, null);
						} else {
							str = formatValue(ctx, desc.value, recurseTimes - 1);
						}
						if (str.indexOf('\n') > -1) {
							if (array) {
								str = str.split('\n').map(function (line) {
									return '  ' + line;
								}).join('\n').substr(2);
							} else {
								str = '\n' + str.split('\n').map(function (line) {
									return '   ' + line;
								}).join('\n');
							}
						}
					} else {
						str = ctx.stylize('[Circular]', 'special');
					}
				}
				if (isUndefined(name)) {
					if (array && key.match(/^\d+$/)) {
						return str;
					}
					name = JSON.stringify('' + key);
					if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
						name = name.substr(1, name.length - 2);
						name = ctx.stylize(name, 'name');
					} else {
						name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
						name = ctx.stylize(name, 'string');
					}
				}

				return name + ': ' + str;
			}

			function reduceToSingleString(output, base, braces) {
				var numLinesEst = 0;
				var length = output.reduce(function (prev, cur) {
					numLinesEst++;
					if (cur.indexOf('\n') >= 0) numLinesEst++;
					return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
				}, 0);

				if (length > 60) {
					return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
				}

				return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
			}

			function isArray(ar) {
				return Array.isArray(ar);
			}
			exports.isArray = isArray;

			function isBoolean(arg) {
				return typeof arg === 'boolean';
			}
			exports.isBoolean = isBoolean;

			function isNull(arg) {
				return arg === null;
			}
			exports.isNull = isNull;

			function isNullOrUndefined(arg) {
				return arg == null;
			}
			exports.isNullOrUndefined = isNullOrUndefined;

			function isNumber(arg) {
				return typeof arg === 'number';
			}
			exports.isNumber = isNumber;

			function isString(arg) {
				return typeof arg === 'string';
			}
			exports.isString = isString;

			function isSymbol(arg) {
				return typeof arg === 'symbol';
			}
			exports.isSymbol = isSymbol;

			function isUndefined(arg) {
				return arg === void 0;
			}
			exports.isUndefined = isUndefined;

			function isRegExp(re) {
				return isObject(re) && objectToString(re) === '[object RegExp]';
			}
			exports.isRegExp = isRegExp;

			function isObject(arg) {
				return typeof arg === 'object' && arg !== null;
			}
			exports.isObject = isObject;

			function isDate(d) {
				return isObject(d) && objectToString(d) === '[object Date]';
			}
			exports.isDate = isDate;

			function isError(e) {
				return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
			}
			exports.isError = isError;

			function isFunction(arg) {
				return typeof arg === 'function';
			}
			exports.isFunction = isFunction;

			function isPrimitive(arg) {
				return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
			}
			exports.isPrimitive = isPrimitive;

			exports.isBuffer = __webpack_require__(630);

			function objectToString(o) {
				return Object.prototype.toString.call(o);
			}

			function pad(n) {
				return n < 10 ? '0' + n.toString(10) : n.toString(10);
			}

			var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

			function timestamp() {
				var d = new Date();
				var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
				return [d.getDate(), months[d.getMonth()], time].join(' ');
			}

			exports.log = function () {
				console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
			};

			exports.inherits = __webpack_require__(629);

			exports._extend = function (origin, add) {
				if (!add || !isObject(add)) return origin;

				var keys = Object.keys(add);
				var i = keys.length;
				while (i--) {
					origin[keys[i]] = add[keys[i]];
				}
				return origin;
			};

			function hasOwnProperty(obj, prop) {
				return Object.prototype.hasOwnProperty.call(obj, prop);
			}
		}).call(exports, function () {
			return this;
		}(), __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _map = __webpack_require__(221);

		var _map2 = _interopRequireDefault(_map);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _possibleConstructorReturn2 = __webpack_require__(39);

		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

		var _inherits2 = __webpack_require__(38);

		var _inherits3 = _interopRequireDefault(_inherits2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Store = function (_Map) {
			(0, _inherits3.default)(Store, _Map);

			function Store() {
				(0, _classCallCheck3.default)(this, Store);

				var _this = (0, _possibleConstructorReturn3.default)(this, _Map.call(this));

				_this.dynamicData = {};
				return _this;
			}

			Store.prototype.setDynamic = function setDynamic(key, fn) {
				this.dynamicData[key] = fn;
			};

			Store.prototype.get = function get(key) {
				if (this.has(key)) {
					return _Map.prototype.get.call(this, key);
				} else {
					if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
						var val = this.dynamicData[key]();
						this.set(key, val);
						return val;
					}
				}
			};

			return Store;
		}(_map2.default);

		exports.default = Store;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			"use strict";

			exports.__esModule = true;
			exports.File = undefined;

			var _typeof2 = __webpack_require__(7);

			var _typeof3 = _interopRequireDefault(_typeof2);

			var _getIterator2 = __webpack_require__(2);

			var _getIterator3 = _interopRequireDefault(_getIterator2);

			var _create = __webpack_require__(12);

			var _create2 = _interopRequireDefault(_create);

			var _assign = __webpack_require__(85);

			var _assign2 = _interopRequireDefault(_assign);

			var _classCallCheck2 = __webpack_require__(3);

			var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

			var _possibleConstructorReturn2 = __webpack_require__(39);

			var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

			var _inherits2 = __webpack_require__(38);

			var _inherits3 = _interopRequireDefault(_inherits2);

			var _babelHelpers = __webpack_require__(199);

			var _babelHelpers2 = _interopRequireDefault(_babelHelpers);

			var _metadata = __webpack_require__(291);

			var metadataVisitor = _interopRequireWildcard(_metadata);

			var _convertSourceMap = __webpack_require__(406);

			var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);

			var _optionManager = __webpack_require__(47);

			var _optionManager2 = _interopRequireDefault(_optionManager);

			var _pluginPass = __webpack_require__(295);

			var _pluginPass2 = _interopRequireDefault(_pluginPass);

			var _shebangRegex = __webpack_require__(619);

			var _shebangRegex2 = _interopRequireDefault(_shebangRegex);

			var _babelTraverse = __webpack_require__(10);

			var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

			var _sourceMap = __webpack_require__(284);

			var _sourceMap2 = _interopRequireDefault(_sourceMap);

			var _babelGenerator = __webpack_require__(189);

			var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

			var _babelCodeFrame = __webpack_require__(185);

			var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

			var _defaults = __webpack_require__(268);

			var _defaults2 = _interopRequireDefault(_defaults);

			var _logger = __webpack_require__(290);

			var _logger2 = _interopRequireDefault(_logger);

			var _store = __webpack_require__(120);

			var _store2 = _interopRequireDefault(_store);

			var _babylon = __webpack_require__(145);

			var _util = __webpack_require__(126);

			var util = _interopRequireWildcard(_util);

			var _path = __webpack_require__(16);

			var _path2 = _interopRequireDefault(_path);

			var _babelTypes = __webpack_require__(1);

			var t = _interopRequireWildcard(_babelTypes);

			var _blockHoist = __webpack_require__(292);

			var _blockHoist2 = _interopRequireDefault(_blockHoist);

			var _shadowFunctions = __webpack_require__(293);

			var _shadowFunctions2 = _interopRequireDefault(_shadowFunctions);

			function _interopRequireWildcard(obj) {
				if (obj && obj.__esModule) {
					return obj;
				} else {
					var newObj = {};if (obj != null) {
						for (var key in obj) {
							if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
						}
					}newObj.default = obj;return newObj;
				}
			}

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var INTERNAL_PLUGINS = [[_blockHoist2.default], [_shadowFunctions2.default]];

			var errorVisitor = {
				enter: function enter(path, state) {
					var loc = path.node.loc;
					if (loc) {
						state.loc = loc;
						path.stop();
					}
				}
			};

			var File = function (_Store) {
				(0, _inherits3.default)(File, _Store);

				function File() {
					var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
					var pipeline = arguments[1];
					(0, _classCallCheck3.default)(this, File);

					var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

					_this.pipeline = pipeline;

					_this.log = new _logger2.default(_this, opts.filename || "unknown");
					_this.opts = _this.initOptions(opts);

					_this.parserOpts = {
						highlightCode: _this.opts.highlightCode,
						nonStandard: _this.opts.nonStandard,
						sourceType: _this.opts.sourceType,
						filename: _this.opts.filename,
						plugins: []
					};

					_this.pluginVisitors = [];
					_this.pluginPasses = [];

					_this.buildPluginsForOptions(_this.opts);

					if (_this.opts.passPerPreset) {
						_this.perPresetOpts = [];
						_this.opts.presets.forEach(function (presetOpts) {
							var perPresetOpts = (0, _assign2.default)((0, _create2.default)(_this.opts), presetOpts);
							_this.perPresetOpts.push(perPresetOpts);
							_this.buildPluginsForOptions(perPresetOpts);
						});
					}

					_this.metadata = {
						usedHelpers: [],
						marked: [],
						modules: {
							imports: [],
							exports: {
								exported: [],
								specifiers: []
							}
						}
					};

					_this.dynamicImportTypes = {};
					_this.dynamicImportIds = {};
					_this.dynamicImports = [];
					_this.declarations = {};
					_this.usedHelpers = {};

					_this.path = null;
					_this.ast = {};

					_this.code = "";
					_this.shebang = "";

					_this.hub = new _babelTraverse.Hub(_this);
					return _this;
				}

				File.prototype.getMetadata = function getMetadata() {
					var has = false;
					for (var _iterator = this.ast.program.body, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var node = _ref;

						if (t.isModuleDeclaration(node)) {
							has = true;
							break;
						}
					}
					if (has) {
						this.path.traverse(metadataVisitor, this);
					}
				};

				File.prototype.initOptions = function initOptions(opts) {
					opts = new _optionManager2.default(this.log, this.pipeline).init(opts);

					if (opts.inputSourceMap) {
						opts.sourceMaps = true;
					}

					if (opts.moduleId) {
						opts.moduleIds = true;
					}

					opts.basename = _path2.default.basename(opts.filename, _path2.default.extname(opts.filename));

					opts.ignore = util.arrayify(opts.ignore, util.regexify);

					if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);

					(0, _defaults2.default)(opts, {
						moduleRoot: opts.sourceRoot
					});

					(0, _defaults2.default)(opts, {
						sourceRoot: opts.moduleRoot
					});

					(0, _defaults2.default)(opts, {
						filenameRelative: opts.filename
					});

					var basenameRelative = _path2.default.basename(opts.filenameRelative);

					(0, _defaults2.default)(opts, {
						sourceFileName: basenameRelative,
						sourceMapTarget: basenameRelative
					});

					return opts;
				};

				File.prototype.buildPluginsForOptions = function buildPluginsForOptions(opts) {
					if (!Array.isArray(opts.plugins)) {
						return;
					}

					var plugins = opts.plugins.concat(INTERNAL_PLUGINS);
					var currentPluginVisitors = [];
					var currentPluginPasses = [];

					for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var ref = _ref2;
						var plugin = ref[0];
						var pluginOpts = ref[1];

						currentPluginVisitors.push(plugin.visitor);
						currentPluginPasses.push(new _pluginPass2.default(this, plugin, pluginOpts));

						if (plugin.manipulateOptions) {
							plugin.manipulateOptions(opts, this.parserOpts, this);
						}
					}

					this.pluginVisitors.push(currentPluginVisitors);
					this.pluginPasses.push(currentPluginPasses);
				};

				File.prototype.getModuleName = function getModuleName() {
					var opts = this.opts;
					if (!opts.moduleIds) {
						return null;
					}

					if (opts.moduleId != null && !opts.getModuleId) {
						return opts.moduleId;
					}

					var filenameRelative = opts.filenameRelative;
					var moduleName = "";

					if (opts.moduleRoot != null) {
						moduleName = opts.moduleRoot + "/";
					}

					if (!opts.filenameRelative) {
						return moduleName + opts.filename.replace(/^\//, "");
					}

					if (opts.sourceRoot != null) {
						var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
						filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
					}

					filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");

					moduleName += filenameRelative;

					moduleName = moduleName.replace(/\\/g, "/");

					if (opts.getModuleId) {
						return opts.getModuleId(moduleName) || moduleName;
					} else {
						return moduleName;
					}
				};

				File.prototype.resolveModuleSource = function resolveModuleSource(source) {
					var resolveModuleSource = this.opts.resolveModuleSource;
					if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
					return source;
				};

				File.prototype.addImport = function addImport(source, imported) {
					var name = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];

					var alias = source + ":" + imported;
					var id = this.dynamicImportIds[alias];

					if (!id) {
						source = this.resolveModuleSource(source);
						id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);

						var specifiers = [];

						if (imported === "*") {
							specifiers.push(t.importNamespaceSpecifier(id));
						} else if (imported === "default") {
							specifiers.push(t.importDefaultSpecifier(id));
						} else {
							specifiers.push(t.importSpecifier(id, t.identifier(imported)));
						}

						var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
						declar._blockHoist = 3;

						this.path.unshiftContainer("body", declar);
					}

					return id;
				};

				File.prototype.addHelper = function addHelper(name) {
					var declar = this.declarations[name];
					if (declar) return declar;

					if (!this.usedHelpers[name]) {
						this.metadata.usedHelpers.push(name);
						this.usedHelpers[name] = true;
					}

					var generator = this.get("helperGenerator");
					var runtime = this.get("helpersNamespace");
					if (generator) {
						var res = generator(name);
						if (res) return res;
					} else if (runtime) {
						return t.memberExpression(runtime, t.identifier(name));
					}

					var ref = (0, _babelHelpers2.default)(name);
					var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);

					if (t.isFunctionExpression(ref) && !ref.id) {
						ref.body._compact = true;
						ref._generated = true;
						ref.id = uid;
						ref.type = "FunctionDeclaration";
						this.path.unshiftContainer("body", ref);
					} else {
						ref._compact = true;
						this.scope.push({
							id: uid,
							init: ref,
							unique: true
						});
					}

					return uid;
				};

				File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {
					var stringIds = raw.elements.map(function (string) {
						return string.value;
					});
					var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");

					var declar = this.declarations[name];
					if (declar) return declar;

					var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");

					var helperId = this.addHelper(helperName);
					var init = t.callExpression(helperId, [strings, raw]);
					init._compact = true;
					this.scope.push({
						id: uid,
						init: init,
						_blockHoist: 1.9 });
					return uid;
				};

				File.prototype.buildCodeFrameError = function buildCodeFrameError(node, msg) {
					var Error = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];

					var loc = node && (node.loc || node._loc);

					var err = new Error(msg);

					if (loc) {
						err.loc = loc.start;
					} else {
						(0, _babelTraverse2.default)(node, errorVisitor, this.scope, err);

						err.message += " (This is an error on an internal node. Probably an internal error";

						if (err.loc) {
							err.message += ". Location has been estimated.";
						}

						err.message += ")";
					}

					return err;
				};

				File.prototype.mergeSourceMap = function mergeSourceMap(map) {
					var inputMap = this.opts.inputSourceMap;

					if (inputMap) {
						var _ret = function () {
							var inputMapConsumer = new _sourceMap2.default.SourceMapConsumer(inputMap);
							var outputMapConsumer = new _sourceMap2.default.SourceMapConsumer(map);

							var mergedGenerator = new _sourceMap2.default.SourceMapGenerator({
								file: inputMapConsumer.file,
								sourceRoot: inputMapConsumer.sourceRoot
							});

							var source = outputMapConsumer.sources[0];

							inputMapConsumer.eachMapping(function (mapping) {
								var generatedPosition = outputMapConsumer.generatedPositionFor({
									line: mapping.generatedLine,
									column: mapping.generatedColumn,
									source: source
								});
								if (generatedPosition.column != null) {
									mergedGenerator.addMapping({
										source: mapping.source,

										original: mapping.source == null ? null : {
											line: mapping.originalLine,
											column: mapping.originalColumn
										},

										generated: generatedPosition
									});
								}
							});

							var mergedMap = mergedGenerator.toJSON();
							inputMap.mappings = mergedMap.mappings;
							return {
								v: inputMap
							};
						}();

						if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
					} else {
						return map;
					}
				};

				File.prototype.parse = function parse(code) {
					this.log.debug("Parse start");
					var ast = (0, _babylon.parse)(code, this.parserOpts);
					this.log.debug("Parse stop");
					return ast;
				};

				File.prototype._addAst = function _addAst(ast) {
					this.path = _babelTraverse.NodePath.get({
						hub: this.hub,
						parentPath: null,
						parent: ast,
						container: ast,
						key: "program"
					}).setContext();
					this.scope = this.path.scope;
					this.ast = ast;
					this.getMetadata();
				};

				File.prototype.addAst = function addAst(ast) {
					this.log.debug("Start set AST");
					this._addAst(ast);
					this.log.debug("End set AST");
				};

				File.prototype.transform = function transform() {
					for (var i = 0; i < this.pluginPasses.length; i++) {
						var pluginPasses = this.pluginPasses[i];
						this.call("pre", pluginPasses);
						this.log.debug("Start transform traverse");

						var visitor = _babelTraverse2.default.visitors.merge(this.pluginVisitors[i], pluginPasses, this.opts.wrapPluginVisitorMethod);
						(0, _babelTraverse2.default)(this.ast, visitor, this.scope);

						this.log.debug("End transform traverse");
						this.call("post", pluginPasses);
					}

					return this.generate();
				};

				File.prototype.wrap = function wrap(code, callback) {
					code = code + "";

					try {
						if (this.shouldIgnore()) {
							return this.makeResult({ code: code, ignored: true });
						} else {
							return callback();
						}
					} catch (err) {
						if (err._babel) {
							throw err;
						} else {
							err._babel = true;
						}

						var message = err.message = this.opts.filename + ": " + err.message;

						var loc = err.loc;
						if (loc) {
							err.codeFrame = (0, _babelCodeFrame2.default)(code, loc.line, loc.column + 1, this.opts);
							message += "\n" + err.codeFrame;
						}

						if (process.browser) {
							err.message = message;
						}

						if (err.stack) {
							var newStack = err.stack.replace(err.message, message);
							err.stack = newStack;
						}

						throw err;
					}
				};

				File.prototype.addCode = function addCode(code) {
					code = (code || "") + "";
					code = this.parseInputSourceMap(code);
					this.code = code;
				};

				File.prototype.parseCode = function parseCode() {
					this.parseShebang();
					var ast = this.parse(this.code);
					this.addAst(ast);
				};

				File.prototype.shouldIgnore = function shouldIgnore() {
					var opts = this.opts;
					return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
				};

				File.prototype.call = function call(key, pluginPasses) {
					for (var _iterator3 = pluginPasses, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var pass = _ref3;

						var plugin = pass.plugin;
						var fn = plugin[key];
						if (fn) fn.call(pass, this);
					}
				};

				File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {
					var opts = this.opts;

					if (opts.inputSourceMap !== false) {
						var inputMap = _convertSourceMap2.default.fromSource(code);
						if (inputMap) {
							opts.inputSourceMap = inputMap.toObject();
							code = _convertSourceMap2.default.removeComments(code);
						}
					}

					return code;
				};

				File.prototype.parseShebang = function parseShebang() {
					var shebangMatch = _shebangRegex2.default.exec(this.code);
					if (shebangMatch) {
						this.shebang = shebangMatch[0];
						this.code = this.code.replace(_shebangRegex2.default, "");
					}
				};

				File.prototype.makeResult = function makeResult(_ref4) {
					var code = _ref4.code;
					var map = _ref4.map;
					var ast = _ref4.ast;
					var ignored = _ref4.ignored;

					var result = {
						metadata: null,
						options: this.opts,
						ignored: !!ignored,
						code: null,
						ast: null,
						map: map || null
					};

					if (this.opts.code) {
						result.code = code;
					}

					if (this.opts.ast) {
						result.ast = ast;
					}

					if (this.opts.metadata) {
						result.metadata = this.metadata;
					}

					return result;
				};

				File.prototype.generate = function generate() {
					var opts = this.opts;
					var ast = this.ast;

					var result = { ast: ast };
					if (!opts.code) return this.makeResult(result);

					this.log.debug("Generation start");

					var _result = (0, _babelGenerator2.default)(ast, opts, this.code);
					result.code = _result.code;
					result.map = _result.map;

					this.log.debug("Generation end");

					if (this.shebang) {
						result.code = this.shebang + "\n" + result.code;
					}

					if (result.map) {
						result.map = this.mergeSourceMap(result.map);
					}

					if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
						result.code += "\n" + _convertSourceMap2.default.fromObject(result.map).toComment();
					}

					if (opts.sourceMaps === "inline") {
						result.map = null;
					}

					return this.makeResult(result);
				};

				return File;
			}(_store2.default);

			exports.default = File;
			exports.File = File;
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			"use strict";

			exports.__esModule = true;

			var _assign = __webpack_require__(85);

			var _assign2 = _interopRequireDefault(_assign);

			var _classCallCheck2 = __webpack_require__(3);

			var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

			exports.default = buildConfigChain;

			var _resolve = __webpack_require__(187);

			var _resolve2 = _interopRequireDefault(_resolve);

			var _json = __webpack_require__(470);

			var _json2 = _interopRequireDefault(_json);

			var _pathIsAbsolute = __webpack_require__(613);

			var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

			var _pathExists = __webpack_require__(612);

			var _pathExists2 = _interopRequireDefault(_pathExists);

			var _path = __webpack_require__(16);

			var _path2 = _interopRequireDefault(_path);

			var _fs = __webpack_require__(73);

			var _fs2 = _interopRequireDefault(_fs);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var existsCache = {};
			var jsonCache = {};

			var BABELIGNORE_FILENAME = ".babelignore";
			var BABELRC_FILENAME = ".babelrc";
			var PACKAGE_FILENAME = "package.json";

			function exists(filename) {
				var cached = existsCache[filename];
				if (cached == null) {
					return existsCache[filename] = _pathExists2.default.sync(filename);
				} else {
					return cached;
				}
			}

			function buildConfigChain() {
				var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
				var log = arguments[1];

				var filename = opts.filename;
				var builder = new ConfigChainBuilder(log);

				if (opts.babelrc !== false) {
					builder.findConfigs(filename);
				}

				builder.mergeConfig({
					options: opts,
					alias: "base",
					dirname: filename && _path2.default.dirname(filename)
				});

				return builder.configs;
			}

			var ConfigChainBuilder = function () {
				function ConfigChainBuilder(log) {
					(0, _classCallCheck3.default)(this, ConfigChainBuilder);

					this.resolvedConfigs = [];
					this.configs = [];
					this.log = log;
				}

				ConfigChainBuilder.prototype.findConfigs = function findConfigs(loc) {
					if (!loc) return;

					if (!(0, _pathIsAbsolute2.default)(loc)) {
						loc = _path2.default.join(process.cwd(), loc);
					}

					var foundConfig = false;
					var foundIgnore = false;

					while (loc !== (loc = _path2.default.dirname(loc))) {
						if (!foundConfig) {
							var configLoc = _path2.default.join(loc, BABELRC_FILENAME);
							if (exists(configLoc)) {
								this.addConfig(configLoc);
								foundConfig = true;
							}

							var pkgLoc = _path2.default.join(loc, PACKAGE_FILENAME);
							if (!foundConfig && exists(pkgLoc)) {
								foundConfig = this.addConfig(pkgLoc, "babel", JSON);
							}
						}

						if (!foundIgnore) {
							var ignoreLoc = _path2.default.join(loc, BABELIGNORE_FILENAME);
							if (exists(ignoreLoc)) {
								this.addIgnoreConfig(ignoreLoc);
								foundIgnore = true;
							}
						}

						if (foundIgnore && foundConfig) return;
					}
				};

				ConfigChainBuilder.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
					var file = _fs2.default.readFileSync(loc, "utf8");
					var lines = file.split("\n");

					lines = lines.map(function (line) {
						return line.replace(/#(.*?)$/, "").trim();
					}).filter(function (line) {
						return !!line;
					});

					if (lines.length) {
						this.mergeConfig({
							options: { ignore: lines },
							alias: loc,
							dirname: _path2.default.dirname(loc)
						});
					}
				};

				ConfigChainBuilder.prototype.addConfig = function addConfig(loc, key) {
					var json = arguments.length <= 2 || arguments[2] === undefined ? _json2.default : arguments[2];

					if (this.resolvedConfigs.indexOf(loc) >= 0) {
						return false;
					}

					this.resolvedConfigs.push(loc);

					var content = _fs2.default.readFileSync(loc, "utf8");
					var options = void 0;

					try {
						options = jsonCache[content] = jsonCache[content] || json.parse(content);
						if (key) options = options[key];
					} catch (err) {
						err.message = loc + ": Error while parsing JSON - " + err.message;
						throw err;
					}

					this.mergeConfig({
						options: options,
						alias: loc,
						dirname: _path2.default.dirname(loc)
					});

					return !!options;
				};

				ConfigChainBuilder.prototype.mergeConfig = function mergeConfig(_ref) {
					var options = _ref.options;
					var alias = _ref.alias;
					var loc = _ref.loc;
					var dirname = _ref.dirname;

					if (!options) {
						return false;
					}

					options = (0, _assign2.default)({}, options);

					dirname = dirname || process.cwd();
					loc = loc || alias;

					if (options.extends) {
						var extendsLoc = (0, _resolve2.default)(options.extends, dirname);
						if (extendsLoc) {
							this.addConfig(extendsLoc);
						} else {
							if (this.log) this.log.error("Couldn't resolve extends clause of " + options.extends + " in " + alias);
						}
						delete options.extends;
					}

					this.configs.push({
						options: options,
						alias: alias,
						loc: loc,
						dirname: dirname
					});

					var envOpts = void 0;
					var envKey = process.env.BABEL_ENV || "production" || "development";
					if (options.env) {
						envOpts = options.env[envKey];
						delete options.env;
					}

					this.mergeConfig({
						options: envOpts,
						alias: alias + ".env." + envKey,
						dirname: dirname
					});
				};

				return ConfigChainBuilder;
			}();

			module.exports = exports["default"];
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.config = undefined;
		exports.normaliseOptions = normaliseOptions;

		var _parsers = __webpack_require__(124);

		var parsers = _interopRequireWildcard(_parsers);

		var _config = __webpack_require__(46);

		var _config2 = _interopRequireDefault(_config);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		exports.config = _config2.default;
		function normaliseOptions() {
			var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

			for (var key in options) {
				var val = options[key];
				if (val == null) continue;

				var opt = _config2.default[key];
				if (opt && opt.alias) opt = _config2.default[opt.alias];
				if (!opt) continue;

				var parser = parsers[opt.type];
				if (parser) val = parser(val);

				options[key] = val;
			}

			return options;
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.filename = undefined;
		exports.boolean = boolean;
		exports.booleanString = booleanString;
		exports.list = list;

		var _slash = __webpack_require__(280);

		var _slash2 = _interopRequireDefault(_slash);

		var _util = __webpack_require__(126);

		var util = _interopRequireWildcard(_util);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var filename = exports.filename = _slash2.default;

		function boolean(val) {
			return !!val;
		}

		function booleanString(val) {
			return util.booleanify(val);
		}

		function list(val) {
			return util.list(val);
		}
	}, function (module, exports) {

		"use strict";

		module.exports = {
			"auxiliaryComment": {
				"message": "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
			},
			"blacklist": {
				"message": "Put the specific transforms you want in the `plugins` option"
			},
			"breakConfig": {
				"message": "This is not a necessary option in Babel 6"
			},
			"experimental": {
				"message": "Put the specific transforms you want in the `plugins` option"
			},
			"externalHelpers": {
				"message": "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/"
			},
			"extra": {
				"message": ""
			},
			"jsxPragma": {
				"message": "use the `pragma` option in the `react-jsx` plugin . Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
			},

			"loose": {
				"message": "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option."
			},
			"metadataUsedHelpers": {
				"message": "Not required anymore as this is enabled by default"
			},
			"modules": {
				"message": "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules"
			},
			"nonStandard": {
				"message": "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
			},
			"optional": {
				"message": "Put the specific transforms you want in the `plugins` option"
			},
			"sourceMapName": {
				"message": "Use the `sourceMapTarget` option"
			},
			"stage": {
				"message": "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
			},
			"whitelist": {
				"message": "Put the specific transforms you want in the `plugins` option"
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.inspect = exports.inherits = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _util = __webpack_require__(119);

		Object.defineProperty(exports, "inherits", {
			enumerable: true,
			get: function get() {
				return _util.inherits;
			}
		});
		Object.defineProperty(exports, "inspect", {
			enumerable: true,
			get: function get() {
				return _util.inspect;
			}
		});
		exports.canCompile = canCompile;
		exports.list = list;
		exports.regexify = regexify;
		exports.arrayify = arrayify;
		exports.booleanify = booleanify;
		exports.shouldIgnore = shouldIgnore;

		var _escapeRegExp = __webpack_require__(583);

		var _escapeRegExp2 = _interopRequireDefault(_escapeRegExp);

		var _startsWith = __webpack_require__(601);

		var _startsWith2 = _interopRequireDefault(_startsWith);

		var _isBoolean = __webpack_require__(271);

		var _isBoolean2 = _interopRequireDefault(_isBoolean);

		var _minimatch = __webpack_require__(609);

		var _minimatch2 = _interopRequireDefault(_minimatch);

		var _includes = __webpack_require__(116);

		var _includes2 = _interopRequireDefault(_includes);

		var _isString = __webpack_require__(181);

		var _isString2 = _interopRequireDefault(_isString);

		var _isRegExp = __webpack_require__(274);

		var _isRegExp2 = _interopRequireDefault(_isRegExp);

		var _path = __webpack_require__(16);

		var _path2 = _interopRequireDefault(_path);

		var _slash = __webpack_require__(280);

		var _slash2 = _interopRequireDefault(_slash);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function canCompile(filename, altExts) {
			var exts = altExts || canCompile.EXTENSIONS;
			var ext = _path2.default.extname(filename);
			return (0, _includes2.default)(exts, ext);
		}

		canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];

		function list(val) {
			if (!val) {
				return [];
			} else if (Array.isArray(val)) {
				return val;
			} else if (typeof val === "string") {
				return val.split(",");
			} else {
				return [val];
			}
		}

		function regexify(val) {
			if (!val) {
				return new RegExp(/.^/);
			}

			if (Array.isArray(val)) {
				val = new RegExp(val.map(_escapeRegExp2.default).join("|"), "i");
			}

			if (typeof val === "string") {
				val = (0, _slash2.default)(val);

				if ((0, _startsWith2.default)(val, "./") || (0, _startsWith2.default)(val, "*/")) val = val.slice(2);
				if ((0, _startsWith2.default)(val, "**/")) val = val.slice(3);

				var regex = _minimatch2.default.makeRe(val, { nocase: true });
				return new RegExp(regex.source.slice(1, -1), "i");
			}

			if ((0, _isRegExp2.default)(val)) {
				return val;
			}

			throw new TypeError("illegal type for regexify");
		}

		function arrayify(val, mapFn) {
			if (!val) return [];
			if ((0, _isBoolean2.default)(val)) return arrayify([val], mapFn);
			if ((0, _isString2.default)(val)) return arrayify(list(val), mapFn);

			if (Array.isArray(val)) {
				if (mapFn) val = val.map(mapFn);
				return val;
			}

			return [val];
		}

		function booleanify(val) {
			if (val === "true" || val == 1) {
				return true;
			}

			if (val === "false" || val == 0 || !val) {
				return false;
			}

			return val;
		}

		function shouldIgnore(filename) {
			var ignore = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
			var only = arguments[2];

			filename = (0, _slash2.default)(filename);

			if (only) {
				for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var pattern = _ref;

					if (_shouldIgnore(pattern, filename)) return false;
				}
				return true;
			} else if (ignore.length) {
				for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var _pattern = _ref2;

					if (_shouldIgnore(_pattern, filename)) return true;
				}
			}

			return false;
		}

		function _shouldIgnore(pattern, filename) {
			if (typeof pattern === "function") {
				return pattern(filename);
			} else {
				return pattern.test(filename);
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.ArrayPattern = exports.ObjectPattern = exports.RestProperty = exports.SpreadProperty = exports.SpreadElement = undefined;

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		exports.Identifier = Identifier;
		exports.RestElement = RestElement;
		exports.ObjectExpression = ObjectExpression;
		exports.ObjectMethod = ObjectMethod;
		exports.ObjectProperty = ObjectProperty;
		exports.ArrayExpression = ArrayExpression;
		exports.RegExpLiteral = RegExpLiteral;
		exports.BooleanLiteral = BooleanLiteral;
		exports.NullLiteral = NullLiteral;
		exports.NumericLiteral = NumericLiteral;
		exports.StringLiteral = StringLiteral;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function Identifier(node) {
			if (node.variance) {
				if (node.variance === "plus") {
					this.token("+");
				} else if (node.variance === "minus") {
					this.token("-");
				}
			}

			this.word(node.name);
		}

		function RestElement(node) {
			this.token("...");
			this.print(node.argument, node);
		}

		exports.SpreadElement = RestElement;
		exports.SpreadProperty = RestElement;
		exports.RestProperty = RestElement;
		function ObjectExpression(node) {
			var props = node.properties;

			this.token("{");
			this.printInnerComments(node);

			if (props.length) {
				this.space();
				this.printList(props, node, { indent: true, statement: true });
				this.space();
			}

			this.token("}");
		}

		exports.ObjectPattern = ObjectExpression;
		function ObjectMethod(node) {
			this.printJoin(node.decorators, node);
			this._method(node);
		}

		function ObjectProperty(node) {
			this.printJoin(node.decorators, node);

			if (node.computed) {
				this.token("[");
				this.print(node.key, node);
				this.token("]");
			} else {
				if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
					this.print(node.value, node);
					return;
				}

				this.print(node.key, node);

				if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
					return;
				}
			}

			this.token(":");
			this.space();
			this.print(node.value, node);
		}

		function ArrayExpression(node) {
			var elems = node.elements;
			var len = elems.length;

			this.token("[");
			this.printInnerComments(node);

			for (var i = 0; i < elems.length; i++) {
				var elem = elems[i];
				if (elem) {
					if (i > 0) this.space();
					this.print(elem, node);
					if (i < len - 1) this.token(",");
				} else {
					this.token(",");
				}
			}

			this.token("]");
		}

		exports.ArrayPattern = ArrayExpression;
		function RegExpLiteral(node) {
			this.word("/" + node.pattern + "/" + node.flags);
		}

		function BooleanLiteral(node) {
			this.word(node.value ? "true" : "false");
		}

		function NullLiteral() {
			this.word("null");
		}

		function NumericLiteral(node) {
			var raw = this.getPossibleRaw(node);

			this.number(raw == null ? node.value + "" : raw);
		}

		function StringLiteral(node, parent) {
			var raw = this.getPossibleRaw(node);
			if (raw != null) {
				this.token(raw);
				return;
			}

			var val = (0, _stringify2.default)(node.value);

			val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
				return '\\u' + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
			});

			if (this.format.quotes === "single" && !t.isJSX(parent)) {
				val = val.slice(1, -1);

				val = val.replace(/\\"/g, '"');

				val = val.replace(/'/g, "\\'");

				val = "'" + val + "'";
			}

			return this.token(val);
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("classProperties");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("decorators");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("jsx");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				inherits: __webpack_require__(49),

				visitor: {
					Function: function Function(path, state) {
						if (!path.node.async || path.node.generator) return;

						(0, _babelHelperRemapAsyncToGenerator2.default)(path, state.addHelper("asyncToGenerator"));
					}
				}
			};
		};

		var _babelHelperRemapAsyncToGenerator = __webpack_require__(197);

		var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (_ref) {
			var t = _ref.types;

			var ALREADY_VISITED = (0, _symbol2.default)();

			function findConstructorCall(path) {
				var methods = path.get("body.body");

				for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var method = _ref2;

					if (method.node.kind === "constructorCall") {
						return method;
					}
				}

				return null;
			}

			function handleClassWithCall(constructorCall, classPath) {
				var _classPath = classPath;
				var node = _classPath.node;

				var ref = node.id || classPath.scope.generateUidIdentifier("class");

				if (classPath.parentPath.isExportDefaultDeclaration()) {
					classPath = classPath.parentPath;
					classPath.insertAfter(t.exportDefaultDeclaration(ref));
				}

				classPath.replaceWithMultiple(buildWrapper({
					CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),
					CALL_REF: classPath.scope.generateUidIdentifier(ref.name + "Call"),
					CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),
					CLASS: t.toExpression(node),
					WRAPPER_REF: ref
				}));

				constructorCall.remove();
			}

			return {
				inherits: __webpack_require__(200),

				visitor: {
					Class: function Class(path) {
						if (path.node[ALREADY_VISITED]) return;
						path.node[ALREADY_VISITED] = true;

						var constructorCall = findConstructorCall(path);

						if (constructorCall) {
							handleClassWithCall(constructorCall, path);
						} else {
							return;
						}
					}
				}
			};
		};

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildWrapper = (0, _babelTemplate2.default)("\n  let CLASS_REF = CLASS;\n  var CALL_REF = CALL;\n  var WRAPPER_REF = function (...args) {\n    if (this instanceof WRAPPER_REF) {\n      return Reflect.construct(CLASS_REF, args);\n    } else {\n      return CALL_REF.apply(this, args);\n    }\n  };\n  WRAPPER_REF.__proto__ = CLASS_REF;\n  WRAPPER_REF;\n");

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			var findBareSupers = {
				Super: function Super(path) {
					if (path.parentPath.isCallExpression({ callee: path.node })) {
						this.push(path.parentPath);
					}
				}
			};

			var referenceVisitor = {
				ReferencedIdentifier: function ReferencedIdentifier(path) {
					if (this.scope.hasOwnBinding(path.node.name)) {
						this.collision = true;
						path.skip();
					}
				}
			};

			return {
				inherits: __webpack_require__(128),

				visitor: {
					Class: function Class(path) {
						var isDerived = !!path.node.superClass;
						var constructor = void 0;
						var props = [];
						var body = path.get("body");

						for (var _iterator = body.get("body"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref2;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref2 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref2 = _i.value;
							}

							var _path = _ref2;

							if (_path.isClassProperty()) {
								props.push(_path);
							} else if (_path.isClassMethod({ kind: "constructor" })) {
								constructor = _path;
							}
						}

						if (!props.length) return;

						var nodes = [];
						var ref = void 0;

						if (path.isClassExpression() || !path.node.id) {
							(0, _babelHelperFunctionName2.default)(path);
							ref = path.scope.generateUidIdentifier("class");
						} else {
							ref = path.node.id;
						}

						var instanceBody = [];

						for (var _iterator2 = props, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
							var _ref3;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref3 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref3 = _i2.value;
							}

							var _prop = _ref3;

							var propNode = _prop.node;
							if (propNode.decorators && propNode.decorators.length > 0) continue;
							if (!propNode.value) continue;

							var isStatic = propNode.static;

							if (isStatic) {
								nodes.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(ref, propNode.key), propNode.value)));
							} else {
								instanceBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), propNode.key), propNode.value)));
							}
						}

						if (instanceBody.length) {
							if (!constructor) {
								var newConstructor = t.classMethod("constructor", t.identifier("constructor"), [], t.blockStatement([]));
								if (isDerived) {
									newConstructor.params = [t.restElement(t.identifier("args"))];
									newConstructor.body.body.push(t.returnStatement(t.callExpression(t.super(), [t.spreadElement(t.identifier("args"))])));
								}

								var _body$unshiftContaine = body.unshiftContainer("body", newConstructor);

								constructor = _body$unshiftContaine[0];
							}

							var collisionState = {
								collision: false,
								scope: constructor.scope
							};

							for (var _iterator3 = props, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
								var _ref4;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref4 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref4 = _i3.value;
								}

								var prop = _ref4;

								prop.traverse(referenceVisitor, collisionState);
								if (collisionState.collision) break;
							}

							if (collisionState.collision) {
								var initialisePropsRef = path.scope.generateUidIdentifier("initialiseProps");

								nodes.push(t.variableDeclaration("var", [t.variableDeclarator(initialisePropsRef, t.functionExpression(null, [], t.blockStatement(instanceBody)))]));

								instanceBody = [t.expressionStatement(t.callExpression(t.memberExpression(initialisePropsRef, t.identifier("call")), [t.thisExpression()]))];
							}

							if (isDerived) {
								var bareSupers = [];
								constructor.traverse(findBareSupers, bareSupers);
								for (var _iterator4 = bareSupers, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
									var _ref5;

									if (_isArray4) {
										if (_i4 >= _iterator4.length) break;
										_ref5 = _iterator4[_i4++];
									} else {
										_i4 = _iterator4.next();
										if (_i4.done) break;
										_ref5 = _i4.value;
									}

									var bareSuper = _ref5;

									bareSuper.insertAfter(instanceBody);
								}
							} else {
								constructor.get("body").unshiftContainer("body", instanceBody);
							}
						}

						for (var _iterator5 = props, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
							var _ref6;

							if (_isArray5) {
								if (_i5 >= _iterator5.length) break;
								_ref6 = _iterator5[_i5++];
							} else {
								_i5 = _iterator5.next();
								if (_i5.done) break;
								_ref6 = _i5.value;
							}

							var _prop2 = _ref6;

							_prop2.remove();
						}

						if (!nodes.length) return;

						if (path.isClassExpression()) {
							path.scope.push({ id: ref });
							path.replaceWith(t.assignmentExpression("=", ref, path.node));
						} else {
							if (!path.node.id) {
								path.node.id = ref;
							}

							if (path.parentPath.isExportDeclaration()) {
								path = path.parentPath;
							}
						}

						path.insertAfter(nodes);
					},
					ArrowFunctionExpression: function ArrowFunctionExpression(path) {
						var classExp = path.get("body");
						if (!classExp.isClassExpression()) return;

						var body = classExp.get("body");
						var members = body.get("body");
						if (members.some(function (member) {
							return member.isClassProperty();
						})) {
							path.ensureBlock();
						}
					}
				}
			};
		};

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				inherits: __webpack_require__(201),

				visitor: {
					DoExpression: function DoExpression(path) {
						var body = path.node.body.body;
						if (body.length) {
							path.replaceWithMultiple(body);
						} else {
							path.replaceWith(path.scope.buildUndefinedNode());
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		exports.default = function () {
			return {
				visitor: {
					ObjectExpression: function ObjectExpression(path) {
						var node = path.node;

						var plainProps = node.properties.filter(function (prop) {
							return !t.isSpreadProperty(prop) && !prop.computed;
						});

						var alreadySeenData = (0, _create2.default)(null);
						var alreadySeenGetters = (0, _create2.default)(null);
						var alreadySeenSetters = (0, _create2.default)(null);

						for (var _iterator = plainProps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var prop = _ref;

							var name = getName(prop.key);
							var isDuplicate = false;
							switch (prop.kind) {
								case "get":
									if (alreadySeenData[name] || alreadySeenGetters[name]) {
										isDuplicate = true;
									}
									alreadySeenGetters[name] = true;
									break;
								case "set":
									if (alreadySeenData[name] || alreadySeenSetters[name]) {
										isDuplicate = true;
									}
									alreadySeenSetters[name] = true;
									break;
								default:
									if (alreadySeenData[name] || alreadySeenGetters[name] || alreadySeenSetters[name]) {
										isDuplicate = true;
									}
									alreadySeenData[name] = true;
							}

							if (isDuplicate) {
								prop.computed = true;
								prop.key = t.stringLiteral(name);
							}
						}
					}
				}
			};
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function getName(key) {
			if (t.isIdentifier(key)) {
				return key.name;
			}
			return key.value.toString();
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		exports.default = function (_ref) {
			var t = _ref.types;

			function isValidRequireCall(path) {
				if (!path.isCallExpression()) return false;
				if (!path.get("callee").isIdentifier({ name: "require" })) return false;
				if (path.scope.getBinding("require")) return false;

				var args = path.get("arguments");
				if (args.length !== 1) return false;

				var arg = args[0];
				if (!arg.isStringLiteral()) return false;

				return true;
			}

			var amdVisitor = {
				ReferencedIdentifier: function ReferencedIdentifier(_ref2) {
					var node = _ref2.node;
					var scope = _ref2.scope;

					if (node.name === "exports" && !scope.getBinding("exports")) {
						this.hasExports = true;
					}

					if (node.name === "module" && !scope.getBinding("module")) {
						this.hasModule = true;
					}
				},
				CallExpression: function CallExpression(path) {
					if (!isValidRequireCall(path)) return;
					this.bareSources.push(path.node.arguments[0]);
					path.remove();
				},
				VariableDeclarator: function VariableDeclarator(path) {
					var id = path.get("id");
					if (!id.isIdentifier()) return;

					var init = path.get("init");
					if (!isValidRequireCall(init)) return;

					var source = init.node.arguments[0];
					this.sourceNames[source.value] = true;
					this.sources.push([id.node, source]);

					path.remove();
				}
			};

			return {
				inherits: __webpack_require__(59),

				pre: function pre() {
					this.sources = [];
					this.sourceNames = (0, _create2.default)(null);

					this.bareSources = [];

					this.hasExports = false;
					this.hasModule = false;
				},

				visitor: {
					Program: {
						exit: function exit(path) {
							var _this = this;

							if (this.ran) return;
							this.ran = true;

							path.traverse(amdVisitor, this);

							var params = this.sources.map(function (source) {
								return source[0];
							});
							var sources = this.sources.map(function (source) {
								return source[1];
							});

							sources = sources.concat(this.bareSources.filter(function (str) {
								return !_this.sourceNames[str.value];
							}));

							var moduleName = this.getModuleName();
							if (moduleName) moduleName = t.stringLiteral(moduleName);

							if (this.hasExports) {
								sources.unshift(t.stringLiteral("exports"));
								params.unshift(t.identifier("exports"));
							}

							if (this.hasModule) {
								sources.unshift(t.stringLiteral("module"));
								params.unshift(t.identifier("module"));
							}

							var node = path.node;

							var factory = buildFactory({
								PARAMS: params,
								BODY: node.body
							});
							factory.expression.body.directives = node.directives;
							node.directives = [];

							node.body = [buildDefine({
								MODULE_NAME: moduleName,
								SOURCES: sources,
								FACTORY: factory
							})];
						}
					}
				}
			};
		};

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildDefine = (0, _babelTemplate2.default)("\n  define(MODULE_NAME, [SOURCES], FACTORY);\n");

		var buildFactory = (0, _babelTemplate2.default)("\n  (function (PARAMS) {\n    BODY;\n  })\n");

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function build(node, nodes, scope) {
				var first = node.specifiers[0];
				if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first)) return;

				var specifier = node.specifiers.shift();
				var uid = scope.generateUidIdentifier(specifier.exported.name);

				var newSpecifier = void 0;
				if (t.isExportNamespaceSpecifier(specifier)) {
					newSpecifier = t.importNamespaceSpecifier(uid);
				} else {
					newSpecifier = t.importDefaultSpecifier(uid);
				}

				nodes.push(t.importDeclaration([newSpecifier], node.source));
				nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));

				build(node, nodes, scope);
			}

			return {
				inherits: __webpack_require__(203),

				visitor: {
					ExportNamedDeclaration: function ExportNamedDeclaration(path) {
						var node = path.node;
						var scope = path.scope;

						var nodes = [];
						build(node, nodes, scope);
						if (!nodes.length) return;

						if (node.specifiers.length >= 1) {
							nodes.push(node);
						}
						path.replaceWithMultiple(nodes);
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			var FLOW_DIRECTIVE = "@flow";

			return {
				inherits: __webpack_require__(78),

				visitor: {
					Program: function Program(path, _ref2) {
						var comments = _ref2.file.ast.comments;

						for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref3;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref3 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref3 = _i.value;
							}

							var comment = _ref3;

							if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
								comment.value = comment.value.replace(FLOW_DIRECTIVE, "");

								if (!comment.value.replace(/\*/g, "").trim()) comment.ignore = true;
							}
						}
					},
					Flow: function Flow(path) {
						path.remove();
					},
					ClassProperty: function ClassProperty(path) {
						path.node.typeAnnotation = null;
						if (!path.node.value) path.remove();
					},
					Class: function Class(path) {
						path.node.implements = null;

						path.get("body.body").forEach(function (child) {
							if (child.isClassProperty()) {
								child.node.typeAnnotation = null;
								if (!child.node.value) child.remove();
							}
						});
					},
					Function: function Function(_ref4) {
						var node = _ref4.node;

						for (var i = 0; i < node.params.length; i++) {
							var param = node.params[i];
							param.optional = false;
						}
					},
					TypeCastExpression: function TypeCastExpression(path) {
						var node = path.node;

						do {
							node = node.expression;
						} while (t.isTypeCastExpression(node));
						path.replaceWith(node);
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function getTempId(scope) {
				var id = scope.path.getData("functionBind");
				if (id) return id;

				id = scope.generateDeclaredUidIdentifier("context");
				return scope.path.setData("functionBind", id);
			}

			function getStaticContext(bind, scope) {
				var object = bind.object || bind.callee.object;
				return scope.isStatic(object) && object;
			}

			function inferBindContext(bind, scope) {
				var staticContext = getStaticContext(bind, scope);
				if (staticContext) return staticContext;

				var tempId = getTempId(scope);
				if (bind.object) {
					bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
				} else {
					bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
				}
				return tempId;
			}

			return {
				inherits: __webpack_require__(204),

				visitor: {
					CallExpression: function CallExpression(_ref2) {
						var node = _ref2.node;
						var scope = _ref2.scope;

						var bind = node.callee;
						if (!t.isBindExpression(bind)) return;

						var context = inferBindContext(bind, scope);
						node.callee = t.memberExpression(bind.callee, t.identifier("call"));
						node.arguments.unshift(context);
					},
					BindExpression: function BindExpression(path) {
						var node = path.node;
						var scope = path.scope;

						var context = inferBindContext(node, scope);
						path.replaceWith(t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]));
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function hasSpread(node) {
				for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var prop = _ref2;

					if (t.isSpreadProperty(prop)) {
						return true;
					}
				}
				return false;
			}

			return {
				inherits: __webpack_require__(205),

				visitor: {
					ObjectExpression: function ObjectExpression(path, file) {
						if (!hasSpread(path.node)) return;

						var args = [];
						var props = [];

						function push() {
							if (!props.length) return;
							args.push(t.objectExpression(props));
							props = [];
						}

						for (var _iterator2 = path.node.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
							var _ref3;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref3 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref3 = _i2.value;
							}

							var prop = _ref3;

							if (t.isSpreadProperty(prop)) {
								push();
								args.push(prop.argument);
							} else {
								props.push(prop);
							}
						}

						push();

						if (!t.isObjectExpression(args[0])) {
							args.unshift(t.objectExpression([]));
						}

						path.replaceWith(t.callExpression(file.addHelper("extends"), args));
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function addDisplayName(id, call) {
				var props = call.arguments[0].properties;
				var safe = true;

				for (var i = 0; i < props.length; i++) {
					var prop = props[i];
					var key = t.toComputedKey(prop);
					if (t.isLiteral(key, { value: "displayName" })) {
						safe = false;
						break;
					}
				}

				if (safe) {
					props.unshift(t.objectProperty(t.identifier("displayName"), t.stringLiteral(id)));
				}
			}

			var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");

			function isCreateClass(node) {
				if (!node || !t.isCallExpression(node)) return false;

				if (!isCreateClassCallExpression(node.callee)) return false;

				var args = node.arguments;
				if (args.length !== 1) return false;

				var first = args[0];
				if (!t.isObjectExpression(first)) return false;

				return true;
			}

			return {
				visitor: {
					ExportDefaultDeclaration: function ExportDefaultDeclaration(_ref2, state) {
						var node = _ref2.node;

						if (isCreateClass(node.declaration)) {
							var displayName = state.file.opts.basename;

							if (displayName === "index") {
								displayName = _path2.default.basename(_path2.default.dirname(state.file.opts.filename));
							}

							addDisplayName(displayName, node.declaration);
						}
					},
					CallExpression: function CallExpression(path) {
						var node = path.node;

						if (!isCreateClass(node)) return;

						var id = void 0;

						path.find(function (path) {
							if (path.isAssignmentExpression()) {
								id = path.node.left;
							} else if (path.isObjectProperty()) {
								id = path.node.key;
							} else if (path.isVariableDeclarator()) {
								id = path.node.id;
							} else if (path.isStatement()) {
								return true;
							}

							if (id) return true;
						});

						if (!id) return;

						if (t.isMemberExpression(id)) {
							id = id.property;
						}

						if (t.isIdentifier(id)) {
							addDisplayName(id.name, node);
						}
					}
				}
			};
		};

		var _path = __webpack_require__(16);

		var _path2 = _interopRequireDefault(_path);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			var JSX_ANNOTATION_REGEX = /\*?\s*@jsx\s+([^\s]+)/;

			var visitor = __webpack_require__(191)({
				pre: function pre(state) {
					var tagName = state.tagName;
					var args = state.args;
					if (t.react.isCompatTag(tagName)) {
						args.push(t.stringLiteral(tagName));
					} else {
						args.push(state.tagExpr);
					}
				},
				post: function post(state, pass) {
					state.callee = pass.get("jsxIdentifier")();
				}
			});

			visitor.Program = function (path, state) {
				var file = state.file;

				var id = state.opts.pragma || "React.createElement";

				for (var _iterator = file.ast.comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref2;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref2 = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref2 = _i.value;
					}

					var comment = _ref2;

					var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
					if (matches) {
						id = matches[1];
						if (id === "React.DOM") {
							throw file.buildCodeFrameError(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
						} else {
							break;
						}
					}
				}

				state.set("jsxIdentifier", function () {
					return id.split(".").map(function (name) {
						return t.identifier(name);
					}).reduce(function (object, property) {
						return t.memberExpression(object, property);
					});
				});
			};

			return {
				inherits: __webpack_require__(130),
				visitor: visitor
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _includes = __webpack_require__(116);

		var _includes2 = _interopRequireDefault(_includes);

		var _repeat = __webpack_require__(276);

		var _repeat2 = _interopRequireDefault(_repeat);

		var _renamer = __webpack_require__(375);

		var _renamer2 = _interopRequireDefault(_renamer);

		var _index = __webpack_require__(10);

		var _index2 = _interopRequireDefault(_index);

		var _defaults = __webpack_require__(268);

		var _defaults2 = _interopRequireDefault(_defaults);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _binding2 = __webpack_require__(224);

		var _binding3 = _interopRequireDefault(_binding2);

		var _globals = __webpack_require__(461);

		var _globals2 = _interopRequireDefault(_globals);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _cache = __webpack_require__(86);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var _crawlCallsCount = 0;

		function getCache(path, parentScope, self) {
			var scopes = _cache.scope.get(path.node) || [];

			for (var _iterator = scopes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var scope = _ref;

				if (scope.parent === parentScope && scope.path === path) return scope;
			}

			scopes.push(self);

			if (!_cache.scope.has(path.node)) {
				_cache.scope.set(path.node, scopes);
			}
		}

		var collectorVisitor = {
			For: function For(path) {
				for (var _iterator2 = t.FOR_INIT_KEYS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var key = _ref2;

					var declar = path.get(key);
					if (declar.isVar()) path.scope.getFunctionParent().registerBinding("var", declar);
				}
			},
			Declaration: function Declaration(path) {
				if (path.isBlockScoped()) return;

				if (path.isExportDeclaration() && path.get("declaration").isDeclaration()) return;

				path.scope.getFunctionParent().registerDeclaration(path);
			},
			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				state.references.push(path);
			},
			ForXStatement: function ForXStatement(path, state) {
				var left = path.get("left");
				if (left.isPattern() || left.isIdentifier()) {
					state.constantViolations.push(left);
				}
			},

			ExportDeclaration: {
				exit: function exit(path) {
					var node = path.node;
					var scope = path.scope;

					var declar = node.declaration;
					if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
						var _id = declar.id;
						if (!_id) return;

						var binding = scope.getBinding(_id.name);
						if (binding) binding.reference(path);
					} else if (t.isVariableDeclaration(declar)) {
						for (var _iterator3 = declar.declarations, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
							var _ref3;

							if (_isArray3) {
								if (_i3 >= _iterator3.length) break;
								_ref3 = _iterator3[_i3++];
							} else {
								_i3 = _iterator3.next();
								if (_i3.done) break;
								_ref3 = _i3.value;
							}

							var decl = _ref3;

							var ids = t.getBindingIdentifiers(decl);
							for (var name in ids) {
								var _binding = scope.getBinding(name);
								if (_binding) _binding.reference(path);
							}
						}
					}
				}
			},

			LabeledStatement: function LabeledStatement(path) {
				path.scope.getProgramParent().addGlobal(path.node);
				path.scope.getBlockParent().registerDeclaration(path);
			},
			AssignmentExpression: function AssignmentExpression(path, state) {
				state.assignments.push(path);
			},
			UpdateExpression: function UpdateExpression(path, state) {
				state.constantViolations.push(path.get("argument"));
			},
			UnaryExpression: function UnaryExpression(path, state) {
				if (path.node.operator === "delete") {
					state.constantViolations.push(path.get("argument"));
				}
			},
			BlockScoped: function BlockScoped(path) {
				var scope = path.scope;
				if (scope.path === path) scope = scope.parent;
				scope.getBlockParent().registerDeclaration(path);
			},
			ClassDeclaration: function ClassDeclaration(path) {
				var id = path.node.id;
				if (!id) return;

				var name = id.name;
				path.scope.bindings[name] = path.scope.getBinding(name);
			},
			Block: function Block(path) {
				var paths = path.get("body");
				for (var _iterator4 = paths, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
					var _ref4;

					if (_isArray4) {
						if (_i4 >= _iterator4.length) break;
						_ref4 = _iterator4[_i4++];
					} else {
						_i4 = _iterator4.next();
						if (_i4.done) break;
						_ref4 = _i4.value;
					}

					var bodyPath = _ref4;

					if (bodyPath.isFunctionDeclaration()) {
						path.scope.getBlockParent().registerDeclaration(bodyPath);
					}
				}
			}
		};

		var uid = 0;

		var Scope = function () {
			function Scope(path, parentScope) {
				(0, _classCallCheck3.default)(this, Scope);

				if (parentScope && parentScope.block === path.node) {
					return parentScope;
				}

				var cached = getCache(path, parentScope, this);
				if (cached) return cached;

				this.uid = uid++;
				this.parent = parentScope;
				this.hub = path.hub;

				this.parentBlock = path.parent;
				this.block = path.node;
				this.path = path;
			}

			Scope.prototype.traverse = function traverse(node, opts, state) {
				(0, _index2.default)(node, opts, this, state, this.path);
			};

			Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
				var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

				var id = this.generateUidIdentifier(name);
				this.push({ id: id });
				return id;
			};

			Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
				var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

				return t.identifier(this.generateUid(name));
			};

			Scope.prototype.generateUid = function generateUid() {
				var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

				name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");

				var uid = void 0;
				var i = 0;
				do {
					uid = this._generateUid(name, i);
					i++;
				} while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

				var program = this.getProgramParent();
				program.references[uid] = true;
				program.uids[uid] = true;

				return uid;
			};

			Scope.prototype._generateUid = function _generateUid(name, i) {
				var id = name;
				if (i > 1) id += i;
				return "_" + id;
			};

			Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent, defaultName) {
				var node = parent;

				if (t.isAssignmentExpression(parent)) {
					node = parent.left;
				} else if (t.isVariableDeclarator(parent)) {
					node = parent.id;
				} else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
					node = node.key;
				}

				var parts = [];

				var add = function add(node) {
					if (t.isModuleDeclaration(node)) {
						if (node.source) {
							add(node.source);
						} else if (node.specifiers && node.specifiers.length) {
							for (var _iterator5 = node.specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
								var _ref5;

								if (_isArray5) {
									if (_i5 >= _iterator5.length) break;
									_ref5 = _iterator5[_i5++];
								} else {
									_i5 = _iterator5.next();
									if (_i5.done) break;
									_ref5 = _i5.value;
								}

								var specifier = _ref5;

								add(specifier);
							}
						} else if (node.declaration) {
							add(node.declaration);
						}
					} else if (t.isModuleSpecifier(node)) {
						add(node.local);
					} else if (t.isMemberExpression(node)) {
						add(node.object);
						add(node.property);
					} else if (t.isIdentifier(node)) {
						parts.push(node.name);
					} else if (t.isLiteral(node)) {
						parts.push(node.value);
					} else if (t.isCallExpression(node)) {
						add(node.callee);
					} else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
						for (var _iterator6 = node.properties, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
							var _ref6;

							if (_isArray6) {
								if (_i6 >= _iterator6.length) break;
								_ref6 = _iterator6[_i6++];
							} else {
								_i6 = _iterator6.next();
								if (_i6.done) break;
								_ref6 = _i6.value;
							}

							var prop = _ref6;

							add(prop.key || prop.argument);
						}
					}
				};

				add(node);

				var id = parts.join("$");
				id = id.replace(/^_/, "") || defaultName || "ref";

				return this.generateUidIdentifier(id.slice(0, 20));
			};

			Scope.prototype.isStatic = function isStatic(node) {
				if (t.isThisExpression(node) || t.isSuper(node)) {
					return true;
				}

				if (t.isIdentifier(node)) {
					var binding = this.getBinding(node.name);
					if (binding) {
						return binding.constant;
					} else {
						return this.hasBinding(node.name);
					}
				}

				return false;
			};

			Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node, dontPush) {
				if (this.isStatic(node)) {
					return null;
				} else {
					var _id2 = this.generateUidIdentifierBasedOnNode(node);
					if (!dontPush) this.push({ id: _id2 });
					return _id2;
				}
			};

			Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind, name, id) {
				if (kind === "param") return;

				if (kind === "hoisted" && local.kind === "let") return;

				var duplicate = false;

				if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";

				if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");

				if (duplicate) {
					throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
				}
			};

			Scope.prototype.rename = function rename(oldName, newName, block) {
				var binding = this.getBinding(oldName);
				if (binding) {
					newName = newName || this.generateUidIdentifier(oldName).name;
					return new _renamer2.default(binding, oldName, newName).rename(block);
				}
			};

			Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
				if (map[oldName]) {
					map[newName] = value;
					map[oldName] = null;
				}
			};

			Scope.prototype.dump = function dump() {
				var sep = (0, _repeat2.default)("-", 60);
				console.log(sep);
				var scope = this;
				do {
					console.log("#", scope.block.type);
					for (var name in scope.bindings) {
						var binding = scope.bindings[name];
						console.log(" -", name, {
							constant: binding.constant,
							references: binding.references,
							violations: binding.constantViolations.length,
							kind: binding.kind
						});
					}
				} while (scope = scope.parent);
				console.log(sep);
			};

			Scope.prototype.toArray = function toArray(node, i) {
				var file = this.hub.file;

				if (t.isIdentifier(node)) {
					var binding = this.getBinding(node.name);
					if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
				}

				if (t.isArrayExpression(node)) {
					return node;
				}

				if (t.isIdentifier(node, { name: "arguments" })) {
					return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
				}

				var helperName = "toArray";
				var args = [node];
				if (i === true) {
					helperName = "toConsumableArray";
				} else if (i) {
					args.push(t.numericLiteral(i));
					helperName = "slicedToArray";
				}
				return t.callExpression(file.addHelper(helperName), args);
			};

			Scope.prototype.registerDeclaration = function registerDeclaration(path) {
				if (path.isLabeledStatement()) {
					this.registerBinding("label", path);
				} else if (path.isFunctionDeclaration()) {
					this.registerBinding("hoisted", path.get("id"), path);
				} else if (path.isVariableDeclaration()) {
					var declarations = path.get("declarations");
					for (var _iterator7 = declarations, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
						var _ref7;

						if (_isArray7) {
							if (_i7 >= _iterator7.length) break;
							_ref7 = _iterator7[_i7++];
						} else {
							_i7 = _iterator7.next();
							if (_i7.done) break;
							_ref7 = _i7.value;
						}

						var declar = _ref7;

						this.registerBinding(path.node.kind, declar);
					}
				} else if (path.isClassDeclaration()) {
					this.registerBinding("let", path);
				} else if (path.isImportDeclaration()) {
					var specifiers = path.get("specifiers");
					for (var _iterator8 = specifiers, _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : (0, _getIterator3.default)(_iterator8);;) {
						var _ref8;

						if (_isArray8) {
							if (_i8 >= _iterator8.length) break;
							_ref8 = _iterator8[_i8++];
						} else {
							_i8 = _iterator8.next();
							if (_i8.done) break;
							_ref8 = _i8.value;
						}

						var specifier = _ref8;

						this.registerBinding("module", specifier);
					}
				} else if (path.isExportDeclaration()) {
					var _declar = path.get("declaration");
					if (_declar.isClassDeclaration() || _declar.isFunctionDeclaration() || _declar.isVariableDeclaration()) {
						this.registerDeclaration(_declar);
					}
				} else {
					this.registerBinding("unknown", path);
				}
			};

			Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
				if (this.hasBinding("undefined")) {
					return t.unaryExpression("void", t.numericLiteral(0), true);
				} else {
					return t.identifier("undefined");
				}
			};

			Scope.prototype.registerConstantViolation = function registerConstantViolation(path) {
				var ids = path.getBindingIdentifiers();
				for (var name in ids) {
					var binding = this.getBinding(name);
					if (binding) binding.reassign(path);
				}
			};

			Scope.prototype.registerBinding = function registerBinding(kind, path) {
				var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];

				if (!kind) throw new ReferenceError("no `kind`");

				if (path.isVariableDeclaration()) {
					var declarators = path.get("declarations");
					for (var _iterator9 = declarators, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : (0, _getIterator3.default)(_iterator9);;) {
						var _ref9;

						if (_isArray9) {
							if (_i9 >= _iterator9.length) break;
							_ref9 = _iterator9[_i9++];
						} else {
							_i9 = _iterator9.next();
							if (_i9.done) break;
							_ref9 = _i9.value;
						}

						var declar = _ref9;

						this.registerBinding(kind, declar);
					}
					return;
				}

				var parent = this.getProgramParent();
				var ids = path.getBindingIdentifiers(true);

				for (var name in ids) {
					for (var _iterator10 = ids[name], _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : (0, _getIterator3.default)(_iterator10);;) {
						var _ref10;

						if (_isArray10) {
							if (_i10 >= _iterator10.length) break;
							_ref10 = _iterator10[_i10++];
						} else {
							_i10 = _iterator10.next();
							if (_i10.done) break;
							_ref10 = _i10.value;
						}

						var _id3 = _ref10;

						var local = this.getOwnBinding(name);
						if (local) {
							if (local.identifier === _id3) continue;

							this.checkBlockScopedCollisions(local, kind, name, _id3);
						}

						if (local && local.path.isFlow()) local = null;

						parent.references[name] = true;

						this.bindings[name] = new _binding3.default({
							identifier: _id3,
							existing: local,
							scope: this,
							path: bindingPath,
							kind: kind
						});
					}
				}
			};

			Scope.prototype.addGlobal = function addGlobal(node) {
				this.globals[node.name] = node;
			};

			Scope.prototype.hasUid = function hasUid(name) {
				var scope = this;

				do {
					if (scope.uids[name]) return true;
				} while (scope = scope.parent);

				return false;
			};

			Scope.prototype.hasGlobal = function hasGlobal(name) {
				var scope = this;

				do {
					if (scope.globals[name]) return true;
				} while (scope = scope.parent);

				return false;
			};

			Scope.prototype.hasReference = function hasReference(name) {
				var scope = this;

				do {
					if (scope.references[name]) return true;
				} while (scope = scope.parent);

				return false;
			};

			Scope.prototype.isPure = function isPure(node, constantsOnly) {
				if (t.isIdentifier(node)) {
					var binding = this.getBinding(node.name);
					if (!binding) return false;
					if (constantsOnly) return binding.constant;
					return true;
				} else if (t.isClass(node)) {
					if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
					return this.isPure(node.body, constantsOnly);
				} else if (t.isClassBody(node)) {
					for (var _iterator11 = node.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : (0, _getIterator3.default)(_iterator11);;) {
						var _ref11;

						if (_isArray11) {
							if (_i11 >= _iterator11.length) break;
							_ref11 = _iterator11[_i11++];
						} else {
							_i11 = _iterator11.next();
							if (_i11.done) break;
							_ref11 = _i11.value;
						}

						var method = _ref11;

						if (!this.isPure(method, constantsOnly)) return false;
					}
					return true;
				} else if (t.isBinary(node)) {
					return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
				} else if (t.isArrayExpression(node)) {
					for (var _iterator12 = node.elements, _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : (0, _getIterator3.default)(_iterator12);;) {
						var _ref12;

						if (_isArray12) {
							if (_i12 >= _iterator12.length) break;
							_ref12 = _iterator12[_i12++];
						} else {
							_i12 = _iterator12.next();
							if (_i12.done) break;
							_ref12 = _i12.value;
						}

						var elem = _ref12;

						if (!this.isPure(elem, constantsOnly)) return false;
					}
					return true;
				} else if (t.isObjectExpression(node)) {
					for (var _iterator13 = node.properties, _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : (0, _getIterator3.default)(_iterator13);;) {
						var _ref13;

						if (_isArray13) {
							if (_i13 >= _iterator13.length) break;
							_ref13 = _iterator13[_i13++];
						} else {
							_i13 = _iterator13.next();
							if (_i13.done) break;
							_ref13 = _i13.value;
						}

						var prop = _ref13;

						if (!this.isPure(prop, constantsOnly)) return false;
					}
					return true;
				} else if (t.isClassMethod(node)) {
					if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
					if (node.kind === "get" || node.kind === "set") return false;
					return true;
				} else if (t.isClassProperty(node) || t.isObjectProperty(node)) {
					if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
					return this.isPure(node.value, constantsOnly);
				} else if (t.isUnaryExpression(node)) {
					return this.isPure(node.argument, constantsOnly);
				} else {
					return t.isPureish(node);
				}
			};

			Scope.prototype.setData = function setData(key, val) {
				return this.data[key] = val;
			};

			Scope.prototype.getData = function getData(key) {
				var scope = this;
				do {
					var data = scope.data[key];
					if (data != null) return data;
				} while (scope = scope.parent);
			};

			Scope.prototype.removeData = function removeData(key) {
				var scope = this;
				do {
					var data = scope.data[key];
					if (data != null) scope.data[key] = null;
				} while (scope = scope.parent);
			};

			Scope.prototype.init = function init() {
				if (!this.references) this.crawl();
			};

			Scope.prototype.crawl = function crawl() {
				_crawlCallsCount++;
				this._crawl();
				_crawlCallsCount--;
			};

			Scope.prototype._crawl = function _crawl() {
				var path = this.path;

				this.references = (0, _create2.default)(null);
				this.bindings = (0, _create2.default)(null);
				this.globals = (0, _create2.default)(null);
				this.uids = (0, _create2.default)(null);
				this.data = (0, _create2.default)(null);

				if (path.isLoop()) {
					for (var _iterator14 = t.FOR_INIT_KEYS, _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : (0, _getIterator3.default)(_iterator14);;) {
						var _ref14;

						if (_isArray14) {
							if (_i14 >= _iterator14.length) break;
							_ref14 = _iterator14[_i14++];
						} else {
							_i14 = _iterator14.next();
							if (_i14.done) break;
							_ref14 = _i14.value;
						}

						var key = _ref14;

						var node = path.get(key);
						if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
					}
				}

				if (path.isFunctionExpression() && path.has("id")) {
					if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
						this.registerBinding("local", path.get("id"), path);
					}
				}

				if (path.isClassExpression() && path.has("id")) {
					if (!path.get("id").node[t.NOT_LOCAL_BINDING]) {
						this.registerBinding("local", path);
					}
				}

				if (path.isFunction()) {
					var params = path.get("params");
					for (var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : (0, _getIterator3.default)(_iterator15);;) {
						var _ref15;

						if (_isArray15) {
							if (_i15 >= _iterator15.length) break;
							_ref15 = _iterator15[_i15++];
						} else {
							_i15 = _iterator15.next();
							if (_i15.done) break;
							_ref15 = _i15.value;
						}

						var param = _ref15;

						this.registerBinding("param", param);
					}
				}

				if (path.isCatchClause()) {
					this.registerBinding("let", path);
				}

				var parent = this.getProgramParent();
				if (parent.crawling) return;

				var state = {
					references: [],
					constantViolations: [],
					assignments: []
				};

				this.crawling = true;
				path.traverse(collectorVisitor, state);
				this.crawling = false;

				for (var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : (0, _getIterator3.default)(_iterator16);;) {
					var _ref16;

					if (_isArray16) {
						if (_i16 >= _iterator16.length) break;
						_ref16 = _iterator16[_i16++];
					} else {
						_i16 = _iterator16.next();
						if (_i16.done) break;
						_ref16 = _i16.value;
					}

					var _path = _ref16;

					var ids = _path.getBindingIdentifiers();
					var programParent = void 0;
					for (var name in ids) {
						if (_path.scope.getBinding(name)) continue;

						programParent = programParent || _path.scope.getProgramParent();
						programParent.addGlobal(ids[name]);
					}

					_path.scope.registerConstantViolation(_path);
				}

				for (var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : (0, _getIterator3.default)(_iterator17);;) {
					var _ref17;

					if (_isArray17) {
						if (_i17 >= _iterator17.length) break;
						_ref17 = _iterator17[_i17++];
					} else {
						_i17 = _iterator17.next();
						if (_i17.done) break;
						_ref17 = _i17.value;
					}

					var ref = _ref17;

					var binding = ref.scope.getBinding(ref.node.name);
					if (binding) {
						binding.reference(ref);
					} else {
						ref.scope.getProgramParent().addGlobal(ref.node);
					}
				}

				for (var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i18 = 0, _iterator18 = _isArray18 ? _iterator18 : (0, _getIterator3.default)(_iterator18);;) {
					var _ref18;

					if (_isArray18) {
						if (_i18 >= _iterator18.length) break;
						_ref18 = _iterator18[_i18++];
					} else {
						_i18 = _iterator18.next();
						if (_i18.done) break;
						_ref18 = _i18.value;
					}

					var _path2 = _ref18;

					_path2.scope.registerConstantViolation(_path2);
				}
			};

			Scope.prototype.push = function push(opts) {
				var path = this.path;

				if (!path.isBlockStatement() && !path.isProgram()) {
					path = this.getBlockParent().path;
				}

				if (path.isSwitchStatement()) {
					path = this.getFunctionParent().path;
				}

				if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
					t.ensureBlock(path.node);
					path = path.get("body");
				}

				var unique = opts.unique;
				var kind = opts.kind || "var";
				var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;

				var dataKey = "declaration:" + kind + ":" + blockHoist;
				var declarPath = !unique && path.getData(dataKey);

				if (!declarPath) {
					var declar = t.variableDeclaration(kind, []);
					declar._generated = true;
					declar._blockHoist = blockHoist;

					var _path$unshiftContaine = path.unshiftContainer("body", [declar]);

					declarPath = _path$unshiftContaine[0];

					if (!unique) path.setData(dataKey, declarPath);
				}

				var declarator = t.variableDeclarator(opts.id, opts.init);
				declarPath.node.declarations.push(declarator);
				this.registerBinding(kind, declarPath.get("declarations").pop());
			};

			Scope.prototype.getProgramParent = function getProgramParent() {
				var scope = this;
				do {
					if (scope.path.isProgram()) {
						return scope;
					}
				} while (scope = scope.parent);
				throw new Error("We couldn't find a Function or Program...");
			};

			Scope.prototype.getFunctionParent = function getFunctionParent() {
				var scope = this;
				do {
					if (scope.path.isFunctionParent()) {
						return scope;
					}
				} while (scope = scope.parent);
				throw new Error("We couldn't find a Function or Program...");
			};

			Scope.prototype.getBlockParent = function getBlockParent() {
				var scope = this;
				do {
					if (scope.path.isBlockParent()) {
						return scope;
					}
				} while (scope = scope.parent);
				throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
			};

			Scope.prototype.getAllBindings = function getAllBindings() {
				var ids = (0, _create2.default)(null);

				var scope = this;
				do {
					(0, _defaults2.default)(ids, scope.bindings);
					scope = scope.parent;
				} while (scope);

				return ids;
			};

			Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() {
				var ids = (0, _create2.default)(null);

				for (var _iterator19 = arguments, _isArray19 = Array.isArray(_iterator19), _i19 = 0, _iterator19 = _isArray19 ? _iterator19 : (0, _getIterator3.default)(_iterator19);;) {
					var _ref19;

					if (_isArray19) {
						if (_i19 >= _iterator19.length) break;
						_ref19 = _iterator19[_i19++];
					} else {
						_i19 = _iterator19.next();
						if (_i19.done) break;
						_ref19 = _i19.value;
					}

					var kind = _ref19;

					var scope = this;
					do {
						for (var name in scope.bindings) {
							var binding = scope.bindings[name];
							if (binding.kind === kind) ids[name] = binding;
						}
						scope = scope.parent;
					} while (scope);
				}

				return ids;
			};

			Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name, node) {
				return this.getBindingIdentifier(name) === node;
			};

			Scope.prototype.warnOnFlowBinding = function warnOnFlowBinding(binding) {
				if (_crawlCallsCount === 0 && binding && binding.path.isFlow()) {
					console.warn("\n        You or one of the Babel plugins you are using are using Flow declarations as bindings.\n        Support for this will be removed in version 6.8. To find out the caller, grep for this\n        message and change it to a `console.trace()`.\n      ");
				}
				return binding;
			};

			Scope.prototype.getBinding = function getBinding(name) {
				var scope = this;

				do {
					var binding = scope.getOwnBinding(name);
					if (binding) return this.warnOnFlowBinding(binding);
				} while (scope = scope.parent);
			};

			Scope.prototype.getOwnBinding = function getOwnBinding(name) {
				return this.warnOnFlowBinding(this.bindings[name]);
			};

			Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name) {
				var info = this.getBinding(name);
				return info && info.identifier;
			};

			Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name) {
				var binding = this.bindings[name];
				return binding && binding.identifier;
			};

			Scope.prototype.hasOwnBinding = function hasOwnBinding(name) {
				return !!this.getOwnBinding(name);
			};

			Scope.prototype.hasBinding = function hasBinding(name, noGlobals) {
				if (!name) return false;
				if (this.hasOwnBinding(name)) return true;
				if (this.parentHasBinding(name, noGlobals)) return true;
				if (this.hasUid(name)) return true;
				if (!noGlobals && (0, _includes2.default)(Scope.globals, name)) return true;
				if (!noGlobals && (0, _includes2.default)(Scope.contextVariables, name)) return true;
				return false;
			};

			Scope.prototype.parentHasBinding = function parentHasBinding(name, noGlobals) {
				return this.parent && this.parent.hasBinding(name, noGlobals);
			};

			Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
				var info = this.getBinding(name);
				if (info) {
					info.scope.removeOwnBinding(name);
					info.scope = scope;
					scope.bindings[name] = info;
				}
			};

			Scope.prototype.removeOwnBinding = function removeOwnBinding(name) {
				delete this.bindings[name];
			};

			Scope.prototype.removeBinding = function removeBinding(name) {
				var info = this.getBinding(name);
				if (info) {
					info.scope.removeOwnBinding(name);
				}

				var scope = this;
				do {
					if (scope.uids[name]) {
						scope.uids[name] = false;
					}
				} while (scope = scope.parent);
			};

			return Scope;
		}();

		Scope.globals = (0, _keys2.default)(_globals2.default.builtin);
		Scope.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
		exports.default = Scope;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.NOT_LOCAL_BINDING = exports.BLOCK_SCOPED_SYMBOL = exports.INHERIT_KEYS = exports.UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = exports.BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = exports.UPDATE_OPERATORS = exports.LOGICAL_OPERATORS = exports.COMMENT_KEYS = exports.FOR_INIT_KEYS = exports.FLATTENABLE_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = undefined;

		var _for = __webpack_require__(355);

		var _for2 = _interopRequireDefault(_for);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var STATEMENT_OR_BLOCK_KEYS = exports.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
		var FLATTENABLE_KEYS = exports.FLATTENABLE_KEYS = ["body", "expressions"];
		var FOR_INIT_KEYS = exports.FOR_INIT_KEYS = ["left", "init"];
		var COMMENT_KEYS = exports.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];

		var LOGICAL_OPERATORS = exports.LOGICAL_OPERATORS = ["||", "&&"];
		var UPDATE_OPERATORS = exports.UPDATE_OPERATORS = ["++", "--"];

		var BOOLEAN_NUMBER_BINARY_OPERATORS = exports.BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
		var EQUALITY_BINARY_OPERATORS = exports.EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
		var COMPARISON_BINARY_OPERATORS = exports.COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
		var BOOLEAN_BINARY_OPERATORS = exports.BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
		var NUMBER_BINARY_OPERATORS = exports.NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
		var BINARY_OPERATORS = exports.BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);

		var BOOLEAN_UNARY_OPERATORS = exports.BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
		var NUMBER_UNARY_OPERATORS = exports.NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
		var STRING_UNARY_OPERATORS = exports.STRING_UNARY_OPERATORS = ["typeof"];
		var UNARY_OPERATORS = exports.UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);

		var INHERIT_KEYS = exports.INHERIT_KEYS = {
			optional: ["typeAnnotation", "typeParameters", "returnType"],
			force: ["start", "loc", "end"]
		};

		var BLOCK_SCOPED_SYMBOL = exports.BLOCK_SCOPED_SYMBOL = (0, _for2.default)("var used to be block scoped");
		var NOT_LOCAL_BINDING = exports.NOT_LOCAL_BINDING = (0, _for2.default)("should not be considered a local binding");
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.tokTypes = undefined;
		exports.parse = parse;

		var _parser = __webpack_require__(13);

		var _parser2 = _interopRequireDefault(_parser);

		__webpack_require__(395);

		__webpack_require__(394);

		__webpack_require__(392);

		__webpack_require__(390);

		__webpack_require__(393);

		__webpack_require__(391);

		__webpack_require__(389);

		var _types = __webpack_require__(14);

		__webpack_require__(226);

		__webpack_require__(65);

		var _flow = __webpack_require__(396);

		var _flow2 = _interopRequireDefault(_flow);

		var _jsx = __webpack_require__(397);

		var _jsx2 = _interopRequireDefault(_jsx);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		_parser.plugins.flow = _flow2.default;
		_parser.plugins.jsx = _jsx2.default;

		function parse(input, options) {
			return new _parser2.default(options, input).parse();
		}

		exports.tokTypes = _types.types;
	}, function (module, exports) {

		module.exports = function (it, Constructor, name, forbiddenField) {
			if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
				throw TypeError(name + ': incorrect invocation!');
			}return it;
		};
	}, function (module, exports, __webpack_require__) {
		var ctx = __webpack_require__(67),
		    IObject = __webpack_require__(151),
		    toObject = __webpack_require__(94),
		    toLength = __webpack_require__(160),
		    asc = __webpack_require__(426);
		module.exports = function (TYPE, $create) {
			var IS_MAP = TYPE == 1,
			    IS_FILTER = TYPE == 2,
			    IS_SOME = TYPE == 3,
			    IS_EVERY = TYPE == 4,
			    IS_FIND_INDEX = TYPE == 6,
			    NO_HOLES = TYPE == 5 || IS_FIND_INDEX,
			    create = $create || asc;
			return function ($this, callbackfn, that) {
				var O = toObject($this),
				    self = IObject(O),
				    f = ctx(callbackfn, that, 3),
				    length = toLength(self.length),
				    index = 0,
				    result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined,
				    val,
				    res;
				for (; length > index; index++) {
					if (NO_HOLES || index in self) {
						val = self[index];
						res = f(val, index, O);
						if (TYPE) {
							if (IS_MAP) result[index] = res;else if (res) switch (TYPE) {
									case 3:
										return true;
									case 5:
										return val;
									case 6:
										return index;
									case 2:
										result.push(val);} else if (IS_EVERY) return false;
						}
					}
				}return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
			};
		};
	}, function (module, exports) {

		var toString = {}.toString;

		module.exports = function (it) {
			return toString.call(it).slice(8, -1);
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var global = __webpack_require__(15),
		    $export = __webpack_require__(20),
		    meta = __webpack_require__(69),
		    fails = __webpack_require__(34),
		    hide = __webpack_require__(31),
		    redefineAll = __webpack_require__(155),
		    forOf = __webpack_require__(89),
		    anInstance = __webpack_require__(146),
		    isObject = __webpack_require__(21),
		    setToStringTag = __webpack_require__(93),
		    dP = __webpack_require__(22).f,
		    each = __webpack_require__(147)(0),
		    DESCRIPTORS = __webpack_require__(19);

		module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
			var Base = global[NAME],
			    C = Base,
			    ADDER = IS_MAP ? 'set' : 'add',
			    proto = C && C.prototype,
			    O = {};
			if (!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
				new C().entries().next();
			}))) {
				C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
				redefineAll(C.prototype, methods);
				meta.NEED = true;
			} else {
				C = wrapper(function (target, iterable) {
					anInstance(target, C, NAME, '_c');
					target._c = new Base();
					if (iterable != undefined) forOf(iterable, IS_MAP, target[ADDER], target);
				});
				each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','), function (KEY) {
					var IS_ADDER = KEY == 'add' || KEY == 'set';
					if (KEY in proto && !(IS_WEAK && KEY == 'clear')) hide(C.prototype, KEY, function (a, b) {
						anInstance(this, C, KEY);
						if (!IS_ADDER && IS_WEAK && !isObject(a)) return KEY == 'get' ? undefined : false;
						var result = this._c[KEY](a === 0 ? 0 : a, b);
						return IS_ADDER ? this : result;
					});
				});
				if ('size' in proto) dP(C.prototype, 'size', {
					get: function get() {
						return this._c.size;
					}
				});
			}

			setToStringTag(C, NAME);

			O[NAME] = C;
			$export($export.G + $export.W + $export.F, O);

			if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

			return C;
		};
	}, function (module, exports) {
		module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
	}, function (module, exports, __webpack_require__) {
		var cof = __webpack_require__(148);
		module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
			return cof(it) == 'String' ? it.split('') : Object(it);
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var LIBRARY = __webpack_require__(153),
		    $export = __webpack_require__(20),
		    redefine = __webpack_require__(156),
		    hide = __webpack_require__(31),
		    has = __webpack_require__(30),
		    Iterators = __webpack_require__(68),
		    $iterCreate = __webpack_require__(433),
		    setToStringTag = __webpack_require__(93),
		    getPrototypeOf = __webpack_require__(437),
		    ITERATOR = __webpack_require__(11)('iterator'),
		    BUGGY = !([].keys && 'next' in [].keys()),
		    FF_ITERATOR = '@@iterator',
		    KEYS = 'keys',
		    VALUES = 'values';

		var returnThis = function returnThis() {
			return this;
		};

		module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
			$iterCreate(Constructor, NAME, next);
			var getMethod = function getMethod(kind) {
				if (!BUGGY && kind in proto) return proto[kind];
				switch (kind) {
					case KEYS:
						return function keys() {
							return new Constructor(this, kind);
						};
					case VALUES:
						return function values() {
							return new Constructor(this, kind);
						};
				}return function entries() {
					return new Constructor(this, kind);
				};
			};
			var TAG = NAME + ' Iterator',
			    DEF_VALUES = DEFAULT == VALUES,
			    VALUES_BUG = false,
			    proto = Base.prototype,
			    $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
			    $default = $native || getMethod(DEFAULT),
			    $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
			    $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
			    methods,
			    key,
			    IteratorPrototype;

			if ($anyNative) {
				IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
				if (IteratorPrototype !== Object.prototype) {
					setToStringTag(IteratorPrototype, TAG, true);

					if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
				}
			}

			if (DEF_VALUES && $native && $native.name !== VALUES) {
				VALUES_BUG = true;
				$default = function values() {
					return $native.call(this);
				};
			}

			if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
				hide(proto, ITERATOR, $default);
			}

			Iterators[NAME] = $default;
			Iterators[TAG] = returnThis;
			if (DEFAULT) {
				methods = {
					values: DEF_VALUES ? $default : getMethod(VALUES),
					keys: IS_SET ? $default : getMethod(KEYS),
					entries: $entries
				};
				if (FORCED) for (key in methods) {
					if (!(key in proto)) redefine(proto, key, methods[key]);
				} else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
			}
			return methods;
		};
	}, function (module, exports) {

		module.exports = true;
	}, function (module, exports) {

		exports.f = Object.getOwnPropertySymbols;
	}, function (module, exports, __webpack_require__) {

		var hide = __webpack_require__(31);
		module.exports = function (target, src, safe) {
			for (var key in src) {
				if (safe && target[key]) target[key] = src[key];else hide(target, key, src[key]);
			}return target;
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(31);
	}, function (module, exports, __webpack_require__) {

		var shared = __webpack_require__(158)('keys'),
		    uid = __webpack_require__(95);
		module.exports = function (key) {
			return shared[key] || (shared[key] = uid(key));
		};
	}, function (module, exports, __webpack_require__) {

		var global = __webpack_require__(15),
		    SHARED = '__core-js_shared__',
		    store = global[SHARED] || (global[SHARED] = {});
		module.exports = function (key) {
			return store[key] || (store[key] = {});
		};
	}, function (module, exports) {
		var ceil = Math.ceil,
		    floor = Math.floor;
		module.exports = function (it) {
			return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
		};
	}, function (module, exports, __webpack_require__) {
		var toInteger = __webpack_require__(159),
		    min = Math.min;
		module.exports = function (it) {
			return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
		};
	}, function (module, exports, __webpack_require__) {
		var isObject = __webpack_require__(21);

		module.exports = function (it, S) {
			if (!isObject(it)) return it;
			var fn, val;
			if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
			if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
			if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
			throw TypeError("Can't convert object to primitive value");
		};
	}, function (module, exports, __webpack_require__) {

		var global = __webpack_require__(15),
		    core = __webpack_require__(4),
		    LIBRARY = __webpack_require__(153),
		    wksExt = __webpack_require__(163),
		    defineProperty = __webpack_require__(22).f;
		module.exports = function (name) {
			var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
			if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
		};
	}, function (module, exports, __webpack_require__) {

		exports.f = __webpack_require__(11);
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var $at = __webpack_require__(441)(true);

		__webpack_require__(152)(String, 'String', function (iterated) {
			this._t = String(iterated);
			this._i = 0;
		}, function () {
			var O = this._t,
			    index = this._i,
			    point;
			if (index >= O.length) return { value: undefined, done: true };
			point = $at(O, index);
			this._i += point.length;
			return { value: point, done: false };
		});
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var global = __webpack_require__(15),
		    has = __webpack_require__(30),
		    DESCRIPTORS = __webpack_require__(19),
		    $export = __webpack_require__(20),
		    redefine = __webpack_require__(156),
		    META = __webpack_require__(69).KEY,
		    $fails = __webpack_require__(34),
		    shared = __webpack_require__(158),
		    setToStringTag = __webpack_require__(93),
		    uid = __webpack_require__(95),
		    wks = __webpack_require__(11),
		    wksExt = __webpack_require__(163),
		    wksDefine = __webpack_require__(162),
		    keyOf = __webpack_require__(434),
		    enumKeys = __webpack_require__(429),
		    isArray = __webpack_require__(232),
		    anObject = __webpack_require__(18),
		    toIObject = __webpack_require__(35),
		    toPrimitive = __webpack_require__(161),
		    createDesc = __webpack_require__(92),
		    _create = __webpack_require__(90),
		    gOPNExt = __webpack_require__(436),
		    $GOPD = __webpack_require__(235),
		    $DP = __webpack_require__(22),
		    $keys = __webpack_require__(41),
		    gOPD = $GOPD.f,
		    dP = $DP.f,
		    gOPN = gOPNExt.f,
		    $Symbol = global.Symbol,
		    $JSON = global.JSON,
		    _stringify = $JSON && $JSON.stringify,
		    PROTOTYPE = 'prototype',
		    HIDDEN = wks('_hidden'),
		    TO_PRIMITIVE = wks('toPrimitive'),
		    isEnum = {}.propertyIsEnumerable,
		    SymbolRegistry = shared('symbol-registry'),
		    AllSymbols = shared('symbols'),
		    OPSymbols = shared('op-symbols'),
		    ObjectProto = Object[PROTOTYPE],
		    USE_NATIVE = typeof $Symbol == 'function',
		    QObject = global.QObject;

		var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

		var setSymbolDesc = DESCRIPTORS && $fails(function () {
			return _create(dP({}, 'a', {
				get: function get() {
					return dP(this, 'a', { value: 7 }).a;
				}
			})).a != 7;
		}) ? function (it, key, D) {
			var protoDesc = gOPD(ObjectProto, key);
			if (protoDesc) delete ObjectProto[key];
			dP(it, key, D);
			if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
		} : dP;

		var wrap = function wrap(tag) {
			var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
			sym._k = tag;
			return sym;
		};

		var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
			return typeof it == 'symbol';
		} : function (it) {
			return it instanceof $Symbol;
		};

		var $defineProperty = function defineProperty(it, key, D) {
			if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
			anObject(it);
			key = toPrimitive(key, true);
			anObject(D);
			if (has(AllSymbols, key)) {
				if (!D.enumerable) {
					if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
					it[HIDDEN][key] = true;
				} else {
					if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
					D = _create(D, { enumerable: createDesc(0, false) });
				}return setSymbolDesc(it, key, D);
			}return dP(it, key, D);
		};
		var $defineProperties = function defineProperties(it, P) {
			anObject(it);
			var keys = enumKeys(P = toIObject(P)),
			    i = 0,
			    l = keys.length,
			    key;
			while (l > i) {
				$defineProperty(it, key = keys[i++], P[key]);
			}return it;
		};
		var $create = function create(it, P) {
			return P === undefined ? _create(it) : $defineProperties(_create(it), P);
		};
		var $propertyIsEnumerable = function propertyIsEnumerable(key) {
			var E = isEnum.call(this, key = toPrimitive(key, true));
			if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
			return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
		};
		var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
			it = toIObject(it);
			key = toPrimitive(key, true);
			if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
			var D = gOPD(it, key);
			if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
			return D;
		};
		var $getOwnPropertyNames = function getOwnPropertyNames(it) {
			var names = gOPN(toIObject(it)),
			    result = [],
			    i = 0,
			    key;
			while (names.length > i) {
				if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
			}return result;
		};
		var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
			var IS_OP = it === ObjectProto,
			    names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
			    result = [],
			    i = 0,
			    key;
			while (names.length > i) {
				if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
			}return result;
		};

		if (!USE_NATIVE) {
			$Symbol = function Symbol() {
				if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
				var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
				var $set = function $set(value) {
					if (this === ObjectProto) $set.call(OPSymbols, value);
					if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
					setSymbolDesc(this, tag, createDesc(1, value));
				};
				if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
				return wrap(tag);
			};
			redefine($Symbol[PROTOTYPE], 'toString', function toString() {
				return this._k;
			});

			$GOPD.f = $getOwnPropertyDescriptor;
			$DP.f = $defineProperty;
			__webpack_require__(236).f = gOPNExt.f = $getOwnPropertyNames;
			__webpack_require__(91).f = $propertyIsEnumerable;
			__webpack_require__(154).f = $getOwnPropertySymbols;

			if (DESCRIPTORS && !__webpack_require__(153)) {
				redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
			}

			wksExt.f = function (name) {
				return wrap(wks(name));
			};
		}

		$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

		for (var symbols = 'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) {
			wks(symbols[i++]);
		}for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) {
			wksDefine(symbols[i++]);
		}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
			'for': function _for(key) {
				return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
			},

			keyFor: function keyFor(key) {
				if (isSymbol(key)) return keyOf(SymbolRegistry, key);
				throw TypeError(key + ' is not a symbol!');
			},
			useSetter: function useSetter() {
				setter = true;
			},
			useSimple: function useSimple() {
				setter = false;
			}
		});

		$export($export.S + $export.F * !USE_NATIVE, 'Object', {
			create: $create,

			defineProperty: $defineProperty,

			defineProperties: $defineProperties,

			getOwnPropertyDescriptor: $getOwnPropertyDescriptor,

			getOwnPropertyNames: $getOwnPropertyNames,

			getOwnPropertySymbols: $getOwnPropertySymbols
		});

		$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
			var S = $Symbol();

			return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
		})), 'JSON', {
			stringify: function stringify(it) {
				if (it === undefined || isSymbol(it)) return;
				var args = [it],
				    i = 1,
				    replacer,
				    $replacer;
				while (arguments.length > i) {
					args.push(arguments[i++]);
				}replacer = args[1];
				if (typeof replacer == 'function') $replacer = replacer;
				if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
					if ($replacer) value = $replacer.call(this, key, value);
					if (!isSymbol(value)) return value;
				};
				args[1] = replacer;
				return _stringify.apply($JSON, args);
			}
		});

		$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(31)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);

		setToStringTag($Symbol, 'Symbol');

		setToStringTag(Math, 'Math', true);

		setToStringTag(global.JSON, 'JSON', true);
	}, function (module, exports, __webpack_require__) {

		(function () {
			'use strict';

			exports.ast = __webpack_require__(459);
			exports.code = __webpack_require__(240);
			exports.keyword = __webpack_require__(460);
		})();
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36),
		    root = __webpack_require__(23);

		var Map = getNative(root, 'Map');

		module.exports = Map;
	}, function (module, exports, __webpack_require__) {

		var mapCacheClear = __webpack_require__(554),
		    mapCacheDelete = __webpack_require__(555),
		    mapCacheGet = __webpack_require__(556),
		    mapCacheHas = __webpack_require__(557),
		    mapCacheSet = __webpack_require__(558);

		function MapCache(entries) {
			var index = -1,
			    length = entries ? entries.length : 0;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		module.exports = MapCache;
	}, function (module, exports) {
		function arrayEach(array, iteratee) {
			var index = -1,
			    length = array ? array.length : 0;

			while (++index < length) {
				if (iteratee(array[index], index, array) === false) {
					break;
				}
			}
			return array;
		}

		module.exports = arrayEach;
	}, function (module, exports, __webpack_require__) {

		var baseAssignValue = __webpack_require__(171),
		    eq = __webpack_require__(44);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function assignValue(object, key, value) {
			var objValue = object[key];
			if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
				baseAssignValue(object, key, value);
			}
		}

		module.exports = assignValue;
	}, function (module, exports) {
		var defineProperty = Object.defineProperty;

		function baseAssignValue(object, key, value) {
			if (key == '__proto__' && defineProperty) {
				defineProperty(object, key, {
					'configurable': true,
					'enumerable': true,
					'value': value,
					'writable': true
				});
			} else {
				object[key] = value;
			}
		}

		module.exports = baseAssignValue;
	}, function (module, exports) {
		function baseFindIndex(array, predicate, fromIndex, fromRight) {
			var length = array.length,
			    index = fromIndex + (fromRight ? 1 : -1);

			while (fromRight ? index-- : ++index < length) {
				if (predicate(array[index], index, array)) {
					return index;
				}
			}
			return -1;
		}

		module.exports = baseFindIndex;
	}, function (module, exports, __webpack_require__) {

		var Symbol = __webpack_require__(99),
		    isSymbol = __webpack_require__(71);

		var INFINITY = 1 / 0;

		var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
		    symbolToString = symbolProto ? symbolProto.toString : undefined;

		function baseToString(value) {
			if (typeof value == 'string') {
				return value;
			}
			if (isSymbol(value)) {
				return symbolToString ? symbolToString.call(value) : '';
			}
			var result = value + '';
			return result == '0' && 1 / value == -INFINITY ? '-0' : result;
		}

		module.exports = baseToString;
	}, function (module, exports, __webpack_require__) {

		var Uint8Array = __webpack_require__(243);

		function cloneArrayBuffer(arrayBuffer) {
			var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
			new Uint8Array(result).set(new Uint8Array(arrayBuffer));
			return result;
		}

		module.exports = cloneArrayBuffer;
	}, function (module, exports) {
		function copyArray(source, array) {
			var index = -1,
			    length = source.length;

			array || (array = Array(length));
			while (++index < length) {
				array[index] = source[index];
			}
			return array;
		}

		module.exports = copyArray;
	}, function (module, exports) {
		var MAX_SAFE_INTEGER = 9007199254740991;

		var reIsUint = /^(?:0|[1-9]\d*)$/;

		function isIndex(value, length) {
			length = length == null ? MAX_SAFE_INTEGER : length;
			return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
		}

		module.exports = isIndex;
	}, function (module, exports, __webpack_require__) {

		var eq = __webpack_require__(44),
		    isArrayLike = __webpack_require__(24),
		    isIndex = __webpack_require__(176),
		    isObject = __webpack_require__(8);

		function isIterateeCall(value, index, object) {
			if (!isObject(object)) {
				return false;
			}
			var type = typeof index;
			if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
				return eq(object[index], value);
			}
			return false;
		}

		module.exports = isIterateeCall;
	}, function (module, exports) {
		function overArg(func, transform) {
			return function (arg) {
				return func(transform(arg));
			};
		}

		module.exports = overArg;
	}, function (module, exports, __webpack_require__) {

		var assignValue = __webpack_require__(170),
		    copyObject = __webpack_require__(43),
		    createAssigner = __webpack_require__(106),
		    isArrayLike = __webpack_require__(24),
		    isPrototype = __webpack_require__(109),
		    keys = __webpack_require__(25);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		var assign = createAssigner(function (object, source) {
			if (isPrototype(source) || isArrayLike(source)) {
				copyObject(source, keys(source), object);
				return;
			}
			for (var key in source) {
				if (hasOwnProperty.call(source, key)) {
					assignValue(object, key, source[key]);
				}
			}
		});

		module.exports = assign;
	}, function (module, exports) {
		var MAX_SAFE_INTEGER = 9007199254740991;

		function isLength(value) {
			return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		module.exports = isLength;
	}, function (module, exports, __webpack_require__) {

		var isArray = __webpack_require__(6),
		    isObjectLike = __webpack_require__(32);

		var stringTag = '[object String]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function isString(value) {
			return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
		}

		module.exports = isString;
	}, function (module, exports, __webpack_require__) {

		var baseIsTypedArray = __webpack_require__(499),
		    baseUnary = __webpack_require__(105),
		    nodeUtil = __webpack_require__(266);

		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		module.exports = isTypedArray;
	}, function (module, exports, __webpack_require__) {

		var arrayLikeKeys = __webpack_require__(245),
		    baseKeysIn = __webpack_require__(252),
		    isArrayLike = __webpack_require__(24);

		function keysIn(object) {
			return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		}

		module.exports = keysIn;
	}, function (module, exports) {

		'use strict';

		module.exports = function () {
			return (/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g
			);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (rawLines, lineNumber, colNumber) {
			var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

			colNumber = Math.max(colNumber, 0);

			var highlighted = opts.highlightCode && _chalk2.default.supportsColor;
			if (highlighted) rawLines = highlight(rawLines);

			var lines = rawLines.split(NEWLINE);
			var start = Math.max(lineNumber - 3, 0);
			var end = Math.min(lines.length, lineNumber + 3);

			if (!lineNumber && !colNumber) {
				start = 0;
				end = lines.length;
			}

			var numberMaxWidth = String(end).length;

			var frame = lines.slice(start, end).map(function (line, index) {
				var number = start + 1 + index;
				var paddedNumber = (" " + number).slice(-numberMaxWidth);
				var gutter = " " + paddedNumber + " | ";
				if (number === lineNumber) {
					var markerLine = "";
					if (colNumber) {
						var markerSpacing = line.slice(0, colNumber - 1).replace(/[^\t]/g, " ");
						markerLine = "\n " + gutter.replace(/\d/g, " ") + markerSpacing + "^";
					}
					return ">" + gutter + line + markerLine;
				} else {
					return " " + gutter + line;
				}
			}).join("\n");

			if (highlighted) {
				return _chalk2.default.reset(frame);
			} else {
				return frame;
			}
		};

		var _jsTokens = __webpack_require__(466);

		var _jsTokens2 = _interopRequireDefault(_jsTokens);

		var _esutils = __webpack_require__(166);

		var _esutils2 = _interopRequireDefault(_esutils);

		var _chalk = __webpack_require__(404);

		var _chalk2 = _interopRequireDefault(_chalk);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var defs = {
			string: _chalk2.default.red,
			punctuator: _chalk2.default.bold,
			curly: _chalk2.default.green,
			parens: _chalk2.default.blue.bold,
			square: _chalk2.default.yellow,
			keyword: _chalk2.default.cyan,
			number: _chalk2.default.magenta,
			regex: _chalk2.default.magenta,
			comment: _chalk2.default.grey,
			invalid: _chalk2.default.inverse
		};

		var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

		function getTokenType(match) {
			var token = _jsTokens2.default.matchToToken(match);
			if (token.type === "name" && _esutils2.default.keyword.isReservedWordES6(token.value)) {
				return "keyword";
			}

			if (token.type === "punctuator") {
				switch (token.value) {
					case "{":
					case "}":
						return "curly";
					case "(":
					case ")":
						return "parens";
					case "[":
					case "]":
						return "square";
				}
			}

			return token.type;
		}

		function highlight(text) {
			return text.replace(_jsTokens2.default, function () {
				for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
					args[_key] = arguments[_key];
				}

				var type = getTokenType(args);
				var colorize = defs[type];
				if (colorize) {
					return args[0].split(NEWLINE).map(function (str) {
						return colorize(str);
					}).join("\n");
				} else {
					return args[0];
				}
			});
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.transformFromAst = exports.transform = exports.analyse = exports.Pipeline = exports.OptionManager = exports.traverse = exports.types = exports.messages = exports.util = exports.version = exports.template = exports.buildExternalHelpers = exports.options = exports.File = undefined;

		var _file = __webpack_require__(121);

		Object.defineProperty(exports, "File", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_file).default;
			}
		});

		var _config = __webpack_require__(46);

		Object.defineProperty(exports, "options", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_config).default;
			}
		});

		var _buildExternalHelpers = __webpack_require__(289);

		Object.defineProperty(exports, "buildExternalHelpers", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_buildExternalHelpers).default;
			}
		});

		var _babelTemplate = __webpack_require__(5);

		Object.defineProperty(exports, "template", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_babelTemplate).default;
			}
		});

		var _package = __webpack_require__(467);

		Object.defineProperty(exports, "version", {
			enumerable: true,
			get: function get() {
				return _package.version;
			}
		});
		exports.Plugin = Plugin;
		exports.transformFile = transformFile;
		exports.transformFileSync = transformFileSync;

		var _isFunction = __webpack_require__(118);

		var _isFunction2 = _interopRequireDefault(_isFunction);

		var _fs = __webpack_require__(73);

		var _fs2 = _interopRequireDefault(_fs);

		var _util = __webpack_require__(126);

		var util = _interopRequireWildcard(_util);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _babelTraverse = __webpack_require__(10);

		var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

		var _optionManager = __webpack_require__(47);

		var _optionManager2 = _interopRequireDefault(_optionManager);

		var _pipeline = __webpack_require__(294);

		var _pipeline2 = _interopRequireDefault(_pipeline);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.util = util;
		exports.messages = messages;
		exports.types = t;
		exports.traverse = _babelTraverse2.default;
		exports.OptionManager = _optionManager2.default;
		function Plugin(alias) {
			throw new Error("The (" + alias + ") Babel 5 plugin is being run with Babel 6.");
		}

		exports.Pipeline = _pipeline2.default;

		var pipeline = new _pipeline2.default();
		var analyse = exports.analyse = pipeline.analyse.bind(pipeline);
		var transform = exports.transform = pipeline.transform.bind(pipeline);
		var transformFromAst = exports.transformFromAst = pipeline.transformFromAst.bind(pipeline);

		function transformFile(filename, opts, callback) {
			if ((0, _isFunction2.default)(opts)) {
				callback = opts;
				opts = {};
			}

			opts.filename = filename;

			_fs2.default.readFile(filename, function (err, code) {
				var result = void 0;

				if (!err) {
					try {
						result = transform(code, opts);
					} catch (_err) {
						err = _err;
					}
				}

				if (err) {
					callback(err);
				} else {
					callback(null, result);
				}
			});
		}

		function transformFileSync(filename) {
			var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			opts.filename = filename;
			return transform(_fs2.default.readFileSync(filename, "utf8"), opts);
		}
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			"use strict";

			exports.__esModule = true;

			var _typeof2 = __webpack_require__(7);

			var _typeof3 = _interopRequireDefault(_typeof2);

			exports.default = function (loc) {
				var relative = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];

				if ((typeof _module2.default === "undefined" ? "undefined" : (0, _typeof3.default)(_module2.default)) === "object") return null;

				var relativeMod = relativeModules[relative];

				if (!relativeMod) {
					relativeMod = new _module2.default();

					var filename = _path2.default.join(relative, ".babelrc");
					relativeMod.id = filename;
					relativeMod.filename = filename;

					relativeMod.paths = _module2.default._nodeModulePaths(relative);
					relativeModules[relative] = relativeMod;
				}

				try {
					return _module2.default._resolveFilename(loc, relativeMod);
				} catch (err) {
					return null;
				}
			};

			var _module = __webpack_require__(73);

			var _module2 = _interopRequireDefault(_module);

			var _path = __webpack_require__(16);

			var _path2 = _interopRequireDefault(_path);

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var relativeModules = {};

			module.exports = exports["default"];
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {

		var map = {
			"./build-config-chain": 122,
			"./build-config-chain.js": 122,
			"./config": 46,
			"./config.js": 46,
			"./index": 123,
			"./index.js": 123,
			"./option-manager": 47,
			"./option-manager.js": 47,
			"./parsers": 124,
			"./parsers.js": 124,
			"./removed": 125,
			"./removed.js": 125
		};
		function webpackContext(req) {
			return __webpack_require__(webpackContextResolve(req));
		}
		function webpackContextResolve(req) {
			return map[req] || function () {
				throw new Error("Cannot find module '" + req + "'.");
			}();
		}
		webpackContext.keys = function webpackContextKeys() {
			return Object.keys(map);
		};
		webpackContext.resolve = webpackContextResolve;
		module.exports = webpackContext;
		webpackContext.id = 188;
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.CodeGenerator = undefined;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _possibleConstructorReturn2 = __webpack_require__(39);

		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

		var _inherits2 = __webpack_require__(38);

		var _inherits3 = _interopRequireDefault(_inherits2);

		exports.default = function (ast, opts, code) {
			var gen = new Generator(ast, opts, code);
			return gen.generate();
		};

		var _detectIndent = __webpack_require__(457);

		var _detectIndent2 = _interopRequireDefault(_detectIndent);

		var _sourceMap = __webpack_require__(309);

		var _sourceMap2 = _interopRequireDefault(_sourceMap);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _printer = __webpack_require__(308);

		var _printer2 = _interopRequireDefault(_printer);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Generator = function (_Printer) {
			(0, _inherits3.default)(Generator, _Printer);

			function Generator(ast, opts, code) {
				(0, _classCallCheck3.default)(this, Generator);

				opts = opts || {};

				var tokens = ast.tokens || [];
				var format = normalizeOptions(code, opts, tokens);
				var map = opts.sourceMaps ? new _sourceMap2.default(opts, code) : null;

				var _this = (0, _possibleConstructorReturn3.default)(this, _Printer.call(this, format, map, tokens));

				_this.ast = ast;
				return _this;
			}

			Generator.prototype.generate = function generate() {
				return _Printer.prototype.generate.call(this, this.ast);
			};

			return Generator;
		}(_printer2.default);

		function normalizeOptions(code, opts, tokens) {
			var style = "  ";
			if (code && typeof code === "string") {
				var indent = (0, _detectIndent2.default)(code).indent;
				if (indent && indent !== " ") style = indent;
			}

			var format = {
				auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
				auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
				shouldPrintComment: opts.shouldPrintComment,
				retainLines: opts.retainLines,
				comments: opts.comments == null || opts.comments,
				compact: opts.compact,
				minified: opts.minified,
				concise: opts.concise,
				quotes: opts.quotes || findCommonStringDelimiter(code, tokens),
				indent: {
					adjustMultilineComment: true,
					style: style,
					base: 0
				}
			};

			if (format.minified) {
				format.compact = true;

				format.shouldPrintComment = format.shouldPrintComment || function () {
					return format.comments;
				};
			} else {
				format.shouldPrintComment = format.shouldPrintComment || function (value) {
					return format.comments || value.indexOf("@license") >= 0 || value.indexOf("@preserve") >= 0;
				};
			}

			if (format.compact === "auto") {
				format.compact = code.length > 100000;

				if (format.compact) {
					console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
				}
			}

			if (format.compact) {
				format.indent.adjustMultilineComment = false;
			}

			return format;
		}

		function findCommonStringDelimiter(code, tokens) {
			var occurences = {
				single: 0,
				double: 0
			};

			var checked = 0;

			for (var i = 0; i < tokens.length; i++) {
				var token = tokens[i];
				if (token.type.label !== "string") continue;

				var raw = code.slice(token.start, token.end);
				if (raw[0] === "'") {
					occurences.single++;
				} else {
					occurences.double++;
				}

				checked++;
				if (checked >= 3) break;
			}
			if (occurences.single > occurences.double) {
				return "single";
			} else {
				return "double";
			}
		}

		var CodeGenerator = exports.CodeGenerator = function () {
			function CodeGenerator(ast, opts, code) {
				(0, _classCallCheck3.default)(this, CodeGenerator);

				this._generator = new Generator(ast, opts, code);
			}

			CodeGenerator.prototype.generate = function generate() {
				return this._generator.generate();
			};

			return CodeGenerator;
		}();
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		exports.needsWhitespace = needsWhitespace;
		exports.needsWhitespaceBefore = needsWhitespaceBefore;
		exports.needsWhitespaceAfter = needsWhitespaceAfter;
		exports.needsParens = needsParens;

		var _whitespace = __webpack_require__(307);

		var _whitespace2 = _interopRequireDefault(_whitespace);

		var _parentheses = __webpack_require__(306);

		var parens = _interopRequireWildcard(_parentheses);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function expandAliases(obj) {
			var newObj = {};

			function add(type, func) {
				var fn = newObj[type];
				newObj[type] = fn ? function (node, parent, stack) {
					var result = fn(node, parent, stack);

					return result == null ? func(node, parent, stack) : result;
				} : func;
			}

			for (var _iterator = (0, _keys2.default)(obj), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var type = _ref;

				var aliases = t.FLIPPED_ALIAS_KEYS[type];
				if (aliases) {
					for (var _iterator2 = aliases, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var alias = _ref2;

						add(alias, obj[type]);
					}
				} else {
					add(type, obj[type]);
				}
			}

			return newObj;
		}

		var expandedParens = expandAliases(parens);
		var expandedWhitespaceNodes = expandAliases(_whitespace2.default.nodes);
		var expandedWhitespaceList = expandAliases(_whitespace2.default.list);

		function find(obj, node, parent, printStack) {
			var fn = obj[node.type];
			return fn ? fn(node, parent, printStack) : null;
		}

		function isOrHasCallExpression(node) {
			if (t.isCallExpression(node)) {
				return true;
			}

			if (t.isMemberExpression(node)) {
				return isOrHasCallExpression(node.object) || !node.computed && isOrHasCallExpression(node.property);
			} else {
				return false;
			}
		}

		function needsWhitespace(node, parent, type) {
			if (!node) return 0;

			if (t.isExpressionStatement(node)) {
				node = node.expression;
			}

			var linesInfo = find(expandedWhitespaceNodes, node, parent);

			if (!linesInfo) {
				var items = find(expandedWhitespaceList, node, parent);
				if (items) {
					for (var i = 0; i < items.length; i++) {
						linesInfo = needsWhitespace(items[i], node, type);
						if (linesInfo) break;
					}
				}
			}

			return linesInfo && linesInfo[type] || 0;
		}

		function needsWhitespaceBefore(node, parent) {
			return needsWhitespace(node, parent, "before");
		}

		function needsWhitespaceAfter(node, parent) {
			return needsWhitespace(node, parent, "after");
		}

		function needsParens(node, parent, printStack) {
			if (!parent) return false;

			if (t.isNewExpression(parent) && parent.callee === node) {
				if (isOrHasCallExpression(node)) return true;
			}

			return find(expandedParens, node, parent, printStack);
		}
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (opts) {
			var visitor = {};

			visitor.JSXNamespacedName = function (path) {
				throw path.buildCodeFrameError("Namespace tags are not supported. ReactJSX is not XML.");
			};

			visitor.JSXElement = {
				exit: function exit(path, file) {
					var callExpr = buildElementCall(path.get("openingElement"), file);

					callExpr.arguments = callExpr.arguments.concat(path.node.children);

					if (callExpr.arguments.length >= 3) {
						callExpr._prettyCall = true;
					}

					path.replaceWith(t.inherits(callExpr, path.node));
				}
			};

			return visitor;

			function convertJSXIdentifier(node, parent) {
				if (t.isJSXIdentifier(node)) {
					if (node.name === "this" && t.isReferenced(node, parent)) {
						return t.thisExpression();
					} else if (_esutils2.default.keyword.isIdentifierNameES6(node.name)) {
						node.type = "Identifier";
					} else {
						return t.stringLiteral(node.name);
					}
				} else if (t.isJSXMemberExpression(node)) {
					return t.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node));
				}

				return node;
			}

			function convertAttributeValue(node) {
				if (t.isJSXExpressionContainer(node)) {
					return node.expression;
				} else {
					return node;
				}
			}

			function convertAttribute(node) {
				var value = convertAttributeValue(node.value || t.booleanLiteral(true));

				if (t.isStringLiteral(value) && !t.isJSXExpressionContainer(node.value)) {
					value.value = value.value.replace(/\n\s+/g, " ");
				}

				if (t.isValidIdentifier(node.name.name)) {
					node.name.type = "Identifier";
				} else {
					node.name = t.stringLiteral(node.name.name);
				}

				return t.inherits(t.objectProperty(node.name, value), node);
			}

			function buildElementCall(path, file) {
				path.parent.children = t.react.buildChildren(path.parent);

				var tagExpr = convertJSXIdentifier(path.node.name, path.node);
				var args = [];

				var tagName = void 0;
				if (t.isIdentifier(tagExpr)) {
					tagName = tagExpr.name;
				} else if (t.isLiteral(tagExpr)) {
					tagName = tagExpr.value;
				}

				var state = {
					tagExpr: tagExpr,
					tagName: tagName,
					args: args
				};

				if (opts.pre) {
					opts.pre(state, file);
				}

				var attribs = path.node.attributes;
				if (attribs.length) {
					attribs = buildOpeningElementAttributes(attribs, file);
				} else {
					attribs = t.nullLiteral();
				}

				args.push(attribs);

				if (opts.post) {
					opts.post(state, file);
				}

				return state.call || t.callExpression(state.callee, args);
			}

			function buildOpeningElementAttributes(attribs, file) {
				var _props = [];
				var objs = [];

				function pushProps() {
					if (!_props.length) return;

					objs.push(t.objectExpression(_props));
					_props = [];
				}

				while (attribs.length) {
					var prop = attribs.shift();
					if (t.isJSXSpreadAttribute(prop)) {
						pushProps();
						objs.push(prop.argument);
					} else {
						_props.push(convertAttribute(prop));
					}
				}

				pushProps();

				if (objs.length === 1) {
					attribs = objs[0];
				} else {
					if (!t.isObjectExpression(objs[0])) {
						objs.unshift(t.objectExpression([]));
					}

					attribs = t.callExpression(file.addHelper("extends"), objs);
				}

				return attribs;
			}
		};

		var _esutils = __webpack_require__(166);

		var _esutils2 = _interopRequireDefault(_esutils);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;
		exports.push = push;
		exports.hasComputed = hasComputed;
		exports.toComputedObjectFromClass = toComputedObjectFromClass;
		exports.toClassObject = toClassObject;
		exports.toDefineObject = toDefineObject;

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		var _each = __webpack_require__(114);

		var _each2 = _interopRequireDefault(_each);

		var _has = __webpack_require__(269);

		var _has2 = _interopRequireDefault(_has);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function toKind(node) {
			if (t.isClassMethod(node) || t.isObjectMethod(node)) {
				if (node.kind === "get" || node.kind === "set") {
					return node.kind;
				}
			}

			return "value";
		}

		function push(mutatorMap, node, kind, file, scope) {
			var alias = t.toKeyAlias(node);

			var map = {};
			if ((0, _has2.default)(mutatorMap, alias)) map = mutatorMap[alias];
			mutatorMap[alias] = map;

			map._inherits = map._inherits || [];
			map._inherits.push(node);

			map._key = node.key;

			if (node.computed) {
				map._computed = true;
			}

			if (node.decorators) {
				var decorators = map.decorators = map.decorators || t.arrayExpression([]);
				decorators.elements = decorators.elements.concat(node.decorators.map(function (dec) {
					return dec.expression;
				}).reverse());
			}

			if (map.value || map.initializer) {
				throw file.buildCodeFrameError(node, "Key conflict with sibling node");
			}

			var key = void 0,
			    value = void 0;

			if (t.isObjectProperty(node) || t.isObjectMethod(node) || t.isClassMethod(node)) {
				key = t.toComputedKey(node, node.key);
			}

			if (t.isObjectProperty(node) || t.isClassProperty(node)) {
				value = node.value;
			} else if (t.isObjectMethod(node) || t.isClassMethod(node)) {
				value = t.functionExpression(null, node.params, node.body, node.generator, node.async);
			}

			var inheritedKind = toKind(node);
			if (!kind || inheritedKind !== "value") {
				kind = inheritedKind;
			}

			if (scope && t.isStringLiteral(key) && (kind === "value" || kind === "initializer") && t.isFunctionExpression(value)) {
				value = (0, _babelHelperFunctionName2.default)({ id: key, node: value, scope: scope });
			}

			if (value) {
				t.inheritsComments(value, node);
				map[kind] = value;
			}

			return map;
		}

		function hasComputed(mutatorMap) {
			for (var key in mutatorMap) {
				if (mutatorMap[key]._computed) {
					return true;
				}
			}
			return false;
		}

		function toComputedObjectFromClass(obj) {
			var objExpr = t.arrayExpression([]);

			for (var i = 0; i < obj.properties.length; i++) {
				var prop = obj.properties[i];
				var val = prop.value;
				val.properties.unshift(t.objectProperty(t.identifier("key"), t.toComputedKey(prop)));
				objExpr.elements.push(val);
			}

			return objExpr;
		}

		function toClassObject(mutatorMap) {
			var objExpr = t.objectExpression([]);

			(0, _each2.default)(mutatorMap, function (map) {
				var mapNode = t.objectExpression([]);

				var propNode = t.objectProperty(map._key, mapNode, map._computed);

				(0, _each2.default)(map, function (node, key) {
					if (key[0] === "_") return;

					var inheritNode = node;
					if (t.isClassMethod(node) || t.isClassProperty(node)) node = node.value;

					var prop = t.objectProperty(t.identifier(key), node);
					t.inheritsComments(prop, inheritNode);
					t.removeComments(inheritNode);

					mapNode.properties.push(prop);
				});

				objExpr.properties.push(propNode);
			});

			return objExpr;
		}

		function toDefineObject(mutatorMap) {
			(0, _each2.default)(mutatorMap, function (map) {
				if (map.value) map.writable = t.booleanLiteral(true);
				map.configurable = t.booleanLiteral(true);
				map.enumerable = t.booleanLiteral(true);
			});

			return toClassObject(mutatorMap);
		}
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (node) {
			var params = node.params;
			for (var i = 0; i < params.length; i++) {
				var param = params[i];
				if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
					return i;
				}
			}
			return params.length;
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (path, emit) {
			var kind = arguments.length <= 2 || arguments[2] === undefined ? "var" : arguments[2];

			path.traverse(visitor, { kind: kind, emit: emit });
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var visitor = {
			Scope: function Scope(path, state) {
				if (state.kind === "let") path.skip();
			},
			Function: function Function(path) {
				path.skip();
			},
			VariableDeclaration: function VariableDeclaration(path, state) {
				if (state.kind && path.node.kind !== state.kind) return;

				var nodes = [];

				var declarations = path.get("declarations");
				var firstId = void 0;

				for (var _iterator = declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var declar = _ref;

					firstId = declar.node.id;

					if (declar.node.init) {
						nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.node.id, declar.node.init)));
					}

					for (var name in declar.getBindingIdentifiers()) {
						state.emit(t.identifier(name), name);
					}
				}

				if (path.parentPath.isFor({ left: path.node })) {
					path.replaceWith(firstId);
				} else {
					path.replaceWithMultiple(nodes);
				}
			}
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (callee, thisNode, args) {
			if (args.length === 1 && t.isSpreadElement(args[0]) && t.isIdentifier(args[0].argument, { name: "arguments" })) {
				return t.callExpression(t.memberExpression(callee, t.identifier("apply")), [thisNode, args[0].argument]);
			} else {
				return t.callExpression(t.memberExpression(callee, t.identifier("call")), [thisNode].concat(args));
			}
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;
		exports.is = is;
		exports.pullFlag = pullFlag;

		var _pull = __webpack_require__(275);

		var _pull2 = _interopRequireDefault(_pull);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function is(node, flag) {
			return t.isRegExpLiteral(node) && node.flags.indexOf(flag) >= 0;
		}

		function pullFlag(node, flag) {
			var flags = node.flags.split("");
			if (node.flags.indexOf(flag) < 0) return;
			(0, _pull2.default)(flags, flag);
			node.flags = flags.join("");
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (path, callId) {
			var node = path.node;
			if (node.generator) return;

			path.traverse(awaitVisitor);

			if (path.isClassMethod() || path.isObjectMethod()) {
				return classOrObjectMethod(path, callId);
			} else {
				return plainFunction(path, callId);
			}
		};

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildWrapper = (0, _babelTemplate2.default)("\n  (() => {\n    var REF = FUNCTION;\n    return function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    };\n  })\n");

		var namedBuildWrapper = (0, _babelTemplate2.default)("\n  (() => {\n    var REF = FUNCTION;\n    function NAME(PARAMS) {\n      return REF.apply(this, arguments);\n    }\n    return NAME;\n  })\n");

		var awaitVisitor = {
			ArrowFunctionExpression: function ArrowFunctionExpression(path) {
				if (!path.node.async) {
					path.arrowFunctionToShadowed();
				}
			},
			AwaitExpression: function AwaitExpression(_ref) {
				var node = _ref.node;

				node.type = "YieldExpression";
			}
		};

		function classOrObjectMethod(path, callId) {
			var node = path.node;
			var body = node.body;

			node.async = false;

			var container = t.functionExpression(null, [], t.blockStatement(body.body), true);
			container.shadow = true;
			body.body = [t.returnStatement(t.callExpression(t.callExpression(callId, [container]), []))];
		}

		function plainFunction(path, callId) {
			var node = path.node;
			var isDeclaration = path.isFunctionDeclaration();
			var asyncFnId = node.id;
			var wrapper = buildWrapper;

			if (path.isArrowFunctionExpression()) {
				path.arrowFunctionToShadowed();
			} else if (!isDeclaration && asyncFnId) {
				wrapper = namedBuildWrapper;
			}

			node.async = false;
			node.generator = true;

			node.id = null;

			if (isDeclaration) {
				node.type = "FunctionExpression";
			}

			var built = t.callExpression(callId, [node]);
			var container = wrapper({
				NAME: asyncFnId,
				REF: path.scope.generateUidIdentifier("ref"),
				FUNCTION: built,
				PARAMS: node.params.map(function () {
					return path.scope.generateUidIdentifier("x");
				})
			}).expression;

			if (isDeclaration) {
				var declar = t.variableDeclaration("let", [t.variableDeclarator(t.identifier(asyncFnId.name), t.callExpression(container, []))]);
				declar._blockHoist = true;

				path.replaceWith(declar);
			} else {
				var retFunction = container.body.body[1].argument;
				if (!asyncFnId) {
					(0, _babelHelperFunctionName2.default)({
						node: retFunction,
						parent: path.parent,
						scope: path.scope
					});
				}

				if (!retFunction || retFunction.id || node.params.length) {
					path.replaceWith(t.callExpression(container, []));
				} else {
					path.replaceWith(built);
				}
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		var _babelHelperOptimiseCallExpression = __webpack_require__(195);

		var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var HARDCORE_THIS_REF = (0, _symbol2.default)();

		function isIllegalBareSuper(node, parent) {
			if (!t.isSuper(node)) return false;
			if (t.isMemberExpression(parent, { computed: false })) return false;
			if (t.isCallExpression(parent, { callee: node })) return false;
			return true;
		}

		function isMemberExpressionSuper(node) {
			return t.isMemberExpression(node) && t.isSuper(node.object);
		}

		function getPrototypeOfExpression(objectRef, isStatic) {
			var targetRef = isStatic ? objectRef : t.memberExpression(objectRef, t.identifier("prototype"));

			return t.logicalExpression("||", t.memberExpression(targetRef, t.identifier("__proto__")), t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [targetRef]));
		}

		var visitor = {
			Function: function Function(path) {
				if (!path.inShadow("this")) {
					path.skip();
				}
			},
			ReturnStatement: function ReturnStatement(path, state) {
				if (!path.inShadow("this")) {
					state.returns.push(path);
				}
			},
			ThisExpression: function ThisExpression(path, state) {
				if (!path.node[HARDCORE_THIS_REF]) {
					state.thises.push(path);
				}
			},
			enter: function enter(path, state) {
				var callback = state.specHandle;
				if (state.isLoose) callback = state.looseHandle;

				var isBareSuper = path.isCallExpression() && path.get("callee").isSuper();

				var result = callback.call(state, path);

				if (result) {
					state.hasSuper = true;
				}

				if (isBareSuper) {
					state.bareSupers.push(path);
				}

				if (result === true) {
					path.requeue();
				}

				if (result !== true && result) {
					if (Array.isArray(result)) {
						path.replaceWithMultiple(result);
					} else {
						path.replaceWith(result);
					}
				}
			}
		};

		var ReplaceSupers = function () {
			function ReplaceSupers(opts) {
				var inClass = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
				(0, _classCallCheck3.default)(this, ReplaceSupers);

				this.forceSuperMemoisation = opts.forceSuperMemoisation;
				this.methodPath = opts.methodPath;
				this.methodNode = opts.methodNode;
				this.superRef = opts.superRef;
				this.isStatic = opts.isStatic;
				this.hasSuper = false;
				this.inClass = inClass;
				this.isLoose = opts.isLoose;
				this.scope = this.methodPath.scope;
				this.file = opts.file;
				this.opts = opts;

				this.bareSupers = [];
				this.returns = [];
				this.thises = [];
			}

			ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
				return this.opts.objectRef || this.opts.getObjectRef();
			};

			ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property, value, isComputed) {
				return t.callExpression(this.file.addHelper("set"), [getPrototypeOfExpression(this.getObjectRef(), this.isStatic), isComputed ? property : t.stringLiteral(property.name), value, t.thisExpression()]);
			};

			ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property, isComputed) {
				return t.callExpression(this.file.addHelper("get"), [getPrototypeOfExpression(this.getObjectRef(), this.isStatic), isComputed ? property : t.stringLiteral(property.name), t.thisExpression()]);
			};

			ReplaceSupers.prototype.replace = function replace() {
				this.methodPath.traverse(visitor, this);
			};

			ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id, parent) {
				var methodNode = this.methodNode;
				var superRef = this.superRef || t.identifier("Function");

				if (parent.property === id) {
					return;
				} else if (t.isCallExpression(parent, { callee: id })) {
					return;
				} else if (t.isMemberExpression(parent) && !methodNode.static) {
					return t.memberExpression(superRef, t.identifier("prototype"));
				} else {
					return superRef;
				}
			};

			ReplaceSupers.prototype.looseHandle = function looseHandle(path) {
				var node = path.node;
				if (path.isSuper()) {
					return this.getLooseSuperProperty(node, path.parent);
				} else if (path.isCallExpression()) {
					var callee = node.callee;
					if (!t.isMemberExpression(callee)) return;
					if (!t.isSuper(callee.object)) return;

					t.appendToMemberExpression(callee, t.identifier("call"));
					node.arguments.unshift(t.thisExpression());
					return true;
				}
			};

			ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node) {
				if (node.operator === "=") {
					return this.setSuperProperty(node.left.property, node.right, node.left.computed);
				} else {
					ref = ref || path.scope.generateUidIdentifier("ref");
					return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
				}
			};

			ReplaceSupers.prototype.specHandle = function specHandle(path) {
				var property = void 0;
				var computed = void 0;
				var args = void 0;
				var thisReference = void 0;

				var parent = path.parent;
				var node = path.node;

				if (isIllegalBareSuper(node, parent)) {
					throw path.buildCodeFrameError(messages.get("classesIllegalBareSuper"));
				}

				if (t.isCallExpression(node)) {
					var callee = node.callee;
					if (t.isSuper(callee)) {
						return;
					} else if (isMemberExpressionSuper(callee)) {
						property = callee.property;
						computed = callee.computed;
						args = node.arguments;
					}
				} else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
					property = node.property;
					computed = node.computed;
				} else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
					var binary = t.binaryExpression(node.operator[0], node.argument, t.numericLiteral(1));
					if (node.prefix) {
						return this.specHandleAssignmentExpression(null, path, binary);
					} else {
						var ref = path.scope.generateUidIdentifier("ref");
						return this.specHandleAssignmentExpression(ref, path, binary).concat(t.expressionStatement(ref));
					}
				} else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
					return this.specHandleAssignmentExpression(null, path, node);
				}

				if (!property) return;

				var superProperty = this.getSuperProperty(property, computed, thisReference);

				if (args) {
					return this.optimiseCall(superProperty, args);
				} else {
					return superProperty;
				}
			};

			ReplaceSupers.prototype.optimiseCall = function optimiseCall(callee, args) {
				var thisNode = t.thisExpression();
				thisNode[HARDCORE_THIS_REF] = true;
				return (0, _babelHelperOptimiseCallExpression2.default)(callee, thisNode, args);
			};

			return ReplaceSupers;
		}();

		exports.default = ReplaceSupers;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;
		exports.list = undefined;

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		exports.get = get;

		var _helpers = __webpack_require__(316);

		var _helpers2 = _interopRequireDefault(_helpers);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function get(name) {
			var fn = _helpers2.default[name];
			if (!fn) throw new ReferenceError("Unknown helper " + name);

			return fn().expression;
		}

		var list = exports.list = (0, _keys2.default)(_helpers2.default).map(function (name) {
			return name[0] === "_" ? name.slice(1) : name;
		}).filter(function (name) {
			return name !== "__esModule";
		});

		exports.default = get;
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("classConstructorCall");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("doExpressions");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("exponentiationOperator");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("exportExtensions");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("functionBind");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("objectRestSpread");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		exports.default = function (_ref) {
			var t = _ref.types;

			function ensureApplyDecoratedDescriptorHelper(path, state) {
				if (!state.applyDecoratedDescriptor) {
					state.applyDecoratedDescriptor = path.scope.generateUidIdentifier('applyDecoratedDescriptor');
					var helper = buildApplyDecoratedDescriptor({
						NAME: state.applyDecoratedDescriptor
					});
					path.scope.getProgramParent().path.unshiftContainer('body', helper);
				}

				return state.applyDecoratedDescriptor;
			}

			function ensureInitializerDefineProp(path, state) {
				if (!state.initializerDefineProp) {
					state.initializerDefineProp = path.scope.generateUidIdentifier('initDefineProp');
					var helper = buildInitializerDefineProperty({
						NAME: state.initializerDefineProp
					});
					path.scope.getProgramParent().path.unshiftContainer('body', helper);
				}

				return state.initializerDefineProp;
			}

			function ensureInitializerWarning(path, state) {
				if (!state.initializerWarningHelper) {
					state.initializerWarningHelper = path.scope.generateUidIdentifier('initializerWarningHelper');
					var helper = buildInitializerWarningHelper({
						NAME: state.initializerWarningHelper
					});
					path.scope.getProgramParent().path.unshiftContainer('body', helper);
				}

				return state.initializerWarningHelper;
			}

			function applyEnsureOrdering(path) {
				var decorators = (path.isClass() ? [path].concat(path.get('body.body')) : path.get('properties')).reduce(function (acc, prop) {
					return acc.concat(prop.node.decorators || []);
				}, []);

				var identDecorators = decorators.filter(function (decorator) {
					return !t.isIdentifier(decorator.expression);
				});
				if (identDecorators.length === 0) return;

				return t.sequenceExpression(identDecorators.map(function (decorator) {
					var expression = decorator.expression;
					var id = decorator.expression = path.scope.generateDeclaredUidIdentifier('dec');
					return t.assignmentExpression('=', id, expression);
				}).concat([path.node]));
			}

			function applyClassDecorators(classPath, state) {
				var decorators = classPath.node.decorators || [];
				classPath.node.decorators = null;

				if (decorators.length === 0) return;

				var name = classPath.scope.generateDeclaredUidIdentifier('class');

				return decorators.map(function (dec) {
					return dec.expression;
				}).reverse().reduce(function (acc, decorator) {
					return buildClassDecorator({
						CLASS_REF: name,
						DECORATOR: decorator,
						INNER: acc
					}).expression;
				}, classPath.node);
			}

			function applyMethodDecorators(path, state) {
				var hasMethodDecorators = path.node.body.body.some(function (node) {
					return (node.decorators || []).length > 0;
				});

				if (!hasMethodDecorators) return;

				return applyTargetDecorators(path, state, path.node.body.body);
			}

			function applyObjectDecorators(path, state) {
				var hasMethodDecorators = path.node.properties.some(function (node) {
					return (node.decorators || []).length > 0;
				});

				if (!hasMethodDecorators) return;

				return applyTargetDecorators(path, state, path.node.properties);
			}

			function applyTargetDecorators(path, state, decoratedProps) {
				var descName = path.scope.generateDeclaredUidIdentifier('desc');
				var valueTemp = path.scope.generateDeclaredUidIdentifier('value');

				var name = path.scope.generateDeclaredUidIdentifier(path.isClass() ? 'class' : 'obj');

				var exprs = decoratedProps.reduce(function (acc, node) {
					var decorators = node.decorators || [];
					node.decorators = null;

					if (decorators.length === 0) return acc;

					if (node.computed) {
						throw path.buildCodeFrameError('Computed method/property decorators are not yet supported.');
					}

					var property = t.isLiteral(node.key) ? node.key : t.stringLiteral(node.key.name);

					var target = path.isClass() && !node.static ? buildClassPrototype({
						CLASS_REF: name
					}).expression : name;

					if (t.isClassProperty(node, { static: false })) {
						var descriptor = path.scope.generateDeclaredUidIdentifier('descriptor');

						var initializer = node.value ? t.functionExpression(null, [], t.blockStatement([t.returnStatement(node.value)])) : t.nullLiteral();
						node.value = t.callExpression(ensureInitializerWarning(path, state), [descriptor, t.thisExpression()]);

						acc = acc.concat([t.assignmentExpression('=', descriptor, t.callExpression(ensureApplyDecoratedDescriptorHelper(path, state), [target, property, t.arrayExpression(decorators.map(function (dec) {
							return dec.expression;
						})), t.objectExpression([t.objectProperty(t.identifier('enumerable'), t.booleanLiteral(true)), t.objectProperty(t.identifier('initializer'), initializer)])]))]);
					} else {
						acc = acc.concat(t.callExpression(ensureApplyDecoratedDescriptorHelper(path, state), [target, property, t.arrayExpression(decorators.map(function (dec) {
							return dec.expression;
						})), t.isObjectProperty(node) || t.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({
							TEMP: path.scope.generateDeclaredUidIdentifier('init'),
							TARGET: target,
							PROPERTY: property
						}).expression : buildGetDescriptor({
							TARGET: target,
							PROPERTY: property
						}).expression, target]));
					}

					return acc;
				}, []);

				return t.sequenceExpression([t.assignmentExpression('=', name, path.node), t.sequenceExpression(exprs), name]);
			}

			return {
				inherits: __webpack_require__(129),

				visitor: {
					ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
						if (!path.get("declaration").isClassDeclaration()) return;

						var node = path.node;

						var ref = node.declaration.id || path.scope.generateUidIdentifier("default");
						node.declaration.id = ref;

						path.replaceWith(node.declaration);
						path.insertAfter(t.exportNamedDeclaration(null, [t.exportSpecifier(ref, t.identifier('default'))]));
					},
					ClassDeclaration: function ClassDeclaration(path) {
						var node = path.node;

						var ref = node.id || path.scope.generateUidIdentifier("class");

						path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
					},
					ClassExpression: function ClassExpression(path, state) {
						var decoratedClass = applyEnsureOrdering(path) || applyClassDecorators(path, state) || applyMethodDecorators(path, state);

						if (decoratedClass) path.replaceWith(decoratedClass);
					},
					ObjectExpression: function ObjectExpression(path, state) {
						var decoratedObject = applyEnsureOrdering(path) || applyObjectDecorators(path, state);

						if (decoratedObject) path.replaceWith(decoratedObject);
					},
					AssignmentExpression: function AssignmentExpression(path, state) {
						if (!state.initializerWarningHelper) return;

						if (!path.get('left').isMemberExpression()) return;
						if (!path.get('left.property').isIdentifier()) return;
						if (!path.get('right').isCallExpression()) return;
						if (!path.get('right.callee').isIdentifier({ name: state.initializerWarningHelper.name })) return;

						path.replaceWith(t.callExpression(ensureInitializerDefineProp(path, state), [path.get('left.object').node, t.stringLiteral(path.get('left.property').node.name), path.get('right.arguments')[0].node, path.get('right.arguments')[1].node]));
					}
				}
			};
		};

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildClassDecorator = (0, _babelTemplate2.default)('\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n');

		var buildClassPrototype = (0, _babelTemplate2.default)('\n  CLASS_REF.prototype;\n');

		var buildGetDescriptor = (0, _babelTemplate2.default)('\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n');

		var buildGetObjectInitializer = (0, _babelTemplate2.default)('\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n');

		var buildInitializerWarningHelper = (0, _babelTemplate2.default)('\n    function NAME(descriptor, context){\n        throw new Error(\'Decorating class property failed. Please ensure that transform-class-properties is enabled.\');\n    }\n');

		var buildInitializerDefineProperty = (0, _babelTemplate2.default)('\n    function NAME(target, property, descriptor, context){\n        if (!descriptor) return;\n\n        Object.defineProperty(target, property, {\n            enumerable: descriptor.enumerable,\n            configurable: descriptor.configurable,\n            writable: descriptor.writable,\n            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,\n        });\n    }\n');

		var buildApplyDecoratedDescriptor = (0, _babelTemplate2.default)('\n    function NAME(target, property, decorators, descriptor, context){\n        var desc = {};\n        Object[\'ke\' + \'ys\'](descriptor).forEach(function(key){\n            desc[key] = descriptor[key];\n        });\n        desc.enumerable = !!desc.enumerable;\n        desc.configurable = !!desc.configurable;\n        if (\'value\' in desc || desc.initializer){\n            desc.writable = true;\n        }\n\n        desc = decorators.slice().reverse().reduce(function(desc, decorator){\n            return decorator(target, property, desc) || desc;\n        }, desc);\n\n        if (context && desc.initializer !== void 0){\n            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;\n            desc.initializer = undefined;\n        }\n\n        if (desc.initializer === void 0){\n            // This is a hack to avoid this being processed by \'transform-runtime\'.\n            // See issue #9.\n            Object[\'define\' + \'Property\'](target, property, desc);\n            desc = null;\n        }\n\n        return desc;\n    }\n');
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function cleanDecorators(decorators) {
				return decorators.reverse().map(function (dec) {
					return dec.expression;
				});
			}

			function transformClass(path, ref, state) {
				var nodes = [];

				state;

				var classDecorators = path.node.decorators;
				if (classDecorators) {
					path.node.decorators = null;
					classDecorators = cleanDecorators(classDecorators);

					for (var _iterator = classDecorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref2;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref2 = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref2 = _i.value;
						}

						var decorator = _ref2;

						nodes.push(buildClassDecorator({
							CLASS_REF: ref,
							DECORATOR: decorator
						}));
					}
				}

				var map = (0, _create2.default)(null);

				for (var _iterator2 = path.get("body.body"), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref3;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref3 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref3 = _i2.value;
					}

					var method = _ref3;

					var decorators = method.node.decorators;
					if (!decorators) continue;

					var _alias = t.toKeyAlias(method.node);
					map[_alias] = map[_alias] || [];
					map[_alias].push(method.node);

					method.remove();
				}

				for (var alias in map) {
					var items = map[alias];

					items;
				}

				return nodes;
			}

			function hasDecorators(path) {
				if (path.isClass()) {
					if (path.node.decorators) return true;

					for (var _iterator3 = path.node.body.body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
						var _ref4;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref4 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref4 = _i3.value;
						}

						var method = _ref4;

						if (method.decorators) {
							return true;
						}
					}
				} else if (path.isObjectExpression()) {
					for (var _iterator4 = path.node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
						var _ref5;

						if (_isArray4) {
							if (_i4 >= _iterator4.length) break;
							_ref5 = _iterator4[_i4++];
						} else {
							_i4 = _iterator4.next();
							if (_i4.done) break;
							_ref5 = _i4.value;
						}

						var prop = _ref5;

						if (prop.decorators) {
							return true;
						}
					}
				}

				return false;
			}

			function doError(path) {
				throw path.buildCodeFrameError("Decorators are not officially supported yet in 6.x pending a proposal update.\nHowever, if you need to use them you can install the legacy decorators transform with:\n\nnpm install babel-plugin-transform-decorators-legacy --save-dev\n\nand add the following line to your .babelrc file:\n\n{\n  \"plugins\": [\"transform-decorators-legacy\"]\n}\n\nThe repo url is: https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy.\n    ");
			}

			return {
				inherits: __webpack_require__(129),

				visitor: {
					ClassExpression: function ClassExpression(path) {
						if (!hasDecorators(path)) return;
						doError(path);

						(0, _babelHelperExplodeClass2.default)(path);

						var ref = path.scope.generateDeclaredUidIdentifier("ref");
						var nodes = [];

						nodes.push(t.assignmentExpression("=", ref, path.node));

						nodes = nodes.concat(transformClass(path, ref, this));

						nodes.push(ref);

						path.replaceWith(t.sequenceExpression(nodes));
					},
					ClassDeclaration: function ClassDeclaration(path) {
						if (!hasDecorators(path)) return;
						doError(path);
						(0, _babelHelperExplodeClass2.default)(path);

						var ref = path.node.id;
						var nodes = [];

						nodes = nodes.concat(transformClass(path, ref, this).map(function (expr) {
							return t.expressionStatement(expr);
						}));
						nodes.push(t.expressionStatement(ref));

						path.insertAfter(nodes);
					},
					ObjectExpression: function ObjectExpression(path) {
						if (!hasDecorators(path)) return;
						doError(path);
					}
				}
			};
		};

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelHelperExplodeClass = __webpack_require__(315);

		var _babelHelperExplodeClass2 = _interopRequireDefault(_babelHelperExplodeClass);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildClassDecorator = (0, _babelTemplate2.default)("\n  CLASS_REF = DECORATOR(CLASS_REF) || CLASS_REF;\n");

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _babelTraverse = __webpack_require__(10);

		var _babelHelperReplaceSupers = __webpack_require__(198);

		var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

		var _babelHelperOptimiseCallExpression = __webpack_require__(195);

		var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

		var _babelHelperDefineMap = __webpack_require__(192);

		var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildDerivedConstructor = (0, _babelTemplate2.default)("\n  (function () {\n    super(...arguments);\n  })\n");

		var noMethodVisitor = {
			"FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
				if (!path.is("shadow")) {
					path.skip();
				}
			},
			Method: function Method(path) {
				path.skip();
			}
		};

		var verifyConstructorVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
			Super: function Super(path) {
				if (this.isDerived && !this.hasBareSuper && !path.parentPath.isCallExpression({ callee: path.node })) {
					throw path.buildCodeFrameError("'super.*' is not allowed before super()");
				}
			},

			CallExpression: {
				exit: function exit(path) {
					if (path.get("callee").isSuper()) {
						this.hasBareSuper = true;

						if (!this.isDerived) {
							throw path.buildCodeFrameError("super() is only allowed in a derived constructor");
						}
					}
				}
			},

			ThisExpression: function ThisExpression(path) {
				if (this.isDerived && !this.hasBareSuper) {
					if (!path.inShadow("this")) {
						throw path.buildCodeFrameError("'this' is not allowed before super()");
					}
				}
			}
		}]);

		var findThisesVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
			ThisExpression: function ThisExpression(path) {
				this.superThises.push(path);
			}
		}]);

		var ClassTransformer = function () {
			function ClassTransformer(path, file) {
				(0, _classCallCheck3.default)(this, ClassTransformer);

				this.parent = path.parent;
				this.scope = path.scope;
				this.node = path.node;
				this.path = path;
				this.file = file;

				this.clearDescriptors();

				this.instancePropBody = [];
				this.instancePropRefs = {};
				this.staticPropBody = [];
				this.body = [];

				this.bareSuperAfter = [];
				this.bareSupers = [];

				this.pushedConstructor = false;
				this.pushedInherits = false;
				this.isLoose = false;

				this.superThises = [];

				this.classId = this.node.id;

				this.classRef = this.node.id ? t.identifier(this.node.id.name) : this.scope.generateUidIdentifier("class");

				this.superName = this.node.superClass || t.identifier("Function");
				this.isDerived = !!this.node.superClass;
			}

			ClassTransformer.prototype.run = function run() {
				var _this = this;

				var superName = this.superName;
				var file = this.file;
				var body = this.body;

				var constructorBody = this.constructorBody = t.blockStatement([]);
				this.constructor = this.buildConstructor();

				var closureParams = [];
				var closureArgs = [];

				if (this.isDerived) {
					closureArgs.push(superName);

					superName = this.scope.generateUidIdentifierBasedOnNode(superName);
					closureParams.push(superName);

					this.superName = superName;
				}

				this.buildBody();

				constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("classCallCheck"), [t.thisExpression(), this.classRef])));

				body = body.concat(this.staticPropBody.map(function (fn) {
					return fn(_this.classRef);
				}));

				if (this.classId) {
					if (body.length === 1) return t.toExpression(body[0]);
				}

				body.push(t.returnStatement(this.classRef));

				var container = t.functionExpression(null, closureParams, t.blockStatement(body));
				container.shadow = true;
				return t.callExpression(container, closureArgs);
			};

			ClassTransformer.prototype.buildConstructor = function buildConstructor() {
				var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
				t.inherits(func, this.node);
				return func;
			};

			ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable) {
				var kind = arguments.length <= 2 || arguments[2] === undefined ? "value" : arguments[2];
				var scope = arguments[3];

				var mutatorMap = void 0;
				if (node.static) {
					this.hasStaticDescriptors = true;
					mutatorMap = this.staticMutatorMap;
				} else {
					this.hasInstanceDescriptors = true;
					mutatorMap = this.instanceMutatorMap;
				}

				var map = defineMap.push(mutatorMap, node, kind, this.file, scope);

				if (enumerable) {
					map.enumerable = t.booleanLiteral(true);
				}

				return map;
			};

			ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
				var hasConstructor = false;
				var paths = this.path.get("body.body");
				for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var path = _ref;

					hasConstructor = path.equals("kind", "constructor");
					if (hasConstructor) break;
				}
				if (hasConstructor) return;

				var params = void 0,
				    body = void 0;

				if (this.isDerived) {
					var _constructor = buildDerivedConstructor().expression;
					params = _constructor.params;
					body = _constructor.body;
				} else {
					params = [];
					body = t.blockStatement([]);
				}

				this.path.get("body").unshiftContainer("body", t.classMethod("constructor", t.identifier("constructor"), params, body));
			};

			ClassTransformer.prototype.buildBody = function buildBody() {
				this.constructorMeMaybe();
				this.pushBody();
				this.verifyConstructor();

				if (this.userConstructor) {
					var constructorBody = this.constructorBody;
					constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
					t.inherits(this.constructor, this.userConstructor);
					t.inherits(constructorBody, this.userConstructor.body);
				}

				this.pushDescriptors();
			};

			ClassTransformer.prototype.pushBody = function pushBody() {
				var classBodyPaths = this.path.get("body.body");

				for (var _iterator2 = classBodyPaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var path = _ref2;

					var node = path.node;

					if (path.isClassProperty()) {
						throw path.buildCodeFrameError("Missing class properties transform.");
					}

					if (node.decorators) {
						throw path.buildCodeFrameError("Method has decorators, put the decorator plugin before the classes one.");
					}

					if (t.isClassMethod(node)) {
						var isConstructor = node.kind === "constructor";

						if (isConstructor) {
							path.traverse(verifyConstructorVisitor, this);

							if (!this.hasBareSuper && this.isDerived) {
								throw path.buildCodeFrameError("missing super() call in constructor");
							}
						}

						var replaceSupers = new _babelHelperReplaceSupers2.default({
							forceSuperMemoisation: isConstructor,
							methodPath: path,
							methodNode: node,
							objectRef: this.classRef,
							superRef: this.superName,
							isStatic: node.static,
							isLoose: this.isLoose,
							scope: this.scope,
							file: this.file
						}, true);

						replaceSupers.replace();

						if (isConstructor) {
							this.pushConstructor(replaceSupers, node, path);
						} else {
							this.pushMethod(node, path);
						}
					}
				}
			};

			ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
				this.hasInstanceDescriptors = false;
				this.hasStaticDescriptors = false;

				this.instanceMutatorMap = {};
				this.staticMutatorMap = {};
			};

			ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
				this.pushInherits();

				var body = this.body;

				var instanceProps = void 0;
				var staticProps = void 0;

				if (this.hasInstanceDescriptors) {
					instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
				}

				if (this.hasStaticDescriptors) {
					staticProps = defineMap.toClassObject(this.staticMutatorMap);
				}

				if (instanceProps || staticProps) {
					if (instanceProps) instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
					if (staticProps) staticProps = defineMap.toComputedObjectFromClass(staticProps);

					var nullNode = t.nullLiteral();

					var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];

					if (instanceProps) args[1] = instanceProps;
					if (staticProps) args[2] = staticProps;

					if (this.instanceInitializersId) {
						args[3] = this.instanceInitializersId;
						body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
					}

					if (this.staticInitializersId) {
						args[4] = this.staticInitializersId;
						body.unshift(this.buildObjectAssignment(this.staticInitializersId));
					}

					var lastNonNullIndex = 0;
					for (var i = 0; i < args.length; i++) {
						if (args[i] !== nullNode) lastNonNullIndex = i;
					}
					args = args.slice(0, lastNonNullIndex + 1);

					body.push(t.expressionStatement(t.callExpression(this.file.addHelper("createClass"), args)));
				}

				this.clearDescriptors();
			};

			ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
				return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
			};

			ClassTransformer.prototype.wrapSuperCall = function wrapSuperCall(bareSuper, superRef, thisRef, body) {
				var bareSuperNode = bareSuper.node;

				if (this.isLoose) {
					bareSuperNode.arguments.unshift(t.thisExpression());
					if (bareSuperNode.arguments.length === 2 && t.isSpreadElement(bareSuperNode.arguments[1]) && t.isIdentifier(bareSuperNode.arguments[1].argument, { name: "arguments" })) {
						bareSuperNode.arguments[1] = bareSuperNode.arguments[1].argument;
						bareSuperNode.callee = t.memberExpression(superRef, t.identifier("apply"));
					} else {
						bareSuperNode.callee = t.memberExpression(superRef, t.identifier("call"));
					}
				} else {
					bareSuperNode = (0, _babelHelperOptimiseCallExpression2.default)(t.logicalExpression("||", t.memberExpression(this.classRef, t.identifier("__proto__")), t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.classRef])), t.thisExpression(), bareSuperNode.arguments);
				}

				var call = t.callExpression(this.file.addHelper("possibleConstructorReturn"), [t.thisExpression(), bareSuperNode]);

				var bareSuperAfter = this.bareSuperAfter.map(function (fn) {
					return fn(thisRef);
				});

				if (bareSuper.parentPath.isExpressionStatement() && bareSuper.parentPath.container === body.node.body && body.node.body.length - 1 === bareSuper.parentPath.key) {

					if (this.superThises.length || bareSuperAfter.length) {
						bareSuper.scope.push({ id: thisRef });
						call = t.assignmentExpression("=", thisRef, call);
					}

					if (bareSuperAfter.length) {
						call = t.toSequenceExpression([call].concat(bareSuperAfter, [thisRef]));
					}

					bareSuper.parentPath.replaceWith(t.returnStatement(call));
				} else {
					bareSuper.replaceWithMultiple([t.variableDeclaration("var", [t.variableDeclarator(thisRef, call)])].concat(bareSuperAfter, [t.expressionStatement(thisRef)]));
				}
			};

			ClassTransformer.prototype.verifyConstructor = function verifyConstructor() {
				var _this2 = this;

				if (!this.isDerived) return;

				var path = this.userConstructorPath;
				var body = path.get("body");

				path.traverse(findThisesVisitor, this);

				var guaranteedSuperBeforeFinish = !!this.bareSupers.length;

				var superRef = this.superName || t.identifier("Function");
				var thisRef = path.scope.generateUidIdentifier("this");

				for (var _iterator3 = this.bareSupers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var bareSuper = _ref3;

					this.wrapSuperCall(bareSuper, superRef, thisRef, body);

					if (guaranteedSuperBeforeFinish) {
						bareSuper.find(function (parentPath) {
							if (parentPath === path) {
								return true;
							}

							if (parentPath.isLoop() || parentPath.isConditional()) {
								guaranteedSuperBeforeFinish = false;
								return true;
							}
						});
					}
				}

				for (var _iterator4 = this.superThises, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
					var _ref4;

					if (_isArray4) {
						if (_i4 >= _iterator4.length) break;
						_ref4 = _iterator4[_i4++];
					} else {
						_i4 = _iterator4.next();
						if (_i4.done) break;
						_ref4 = _i4.value;
					}

					var thisPath = _ref4;

					thisPath.replaceWith(thisRef);
				}

				var wrapReturn = function wrapReturn(returnArg) {
					return t.callExpression(_this2.file.addHelper("possibleConstructorReturn"), [thisRef].concat(returnArg || []));
				};

				var bodyPaths = body.get("body");
				if (bodyPaths.length && !bodyPaths.pop().isReturnStatement()) {
					body.pushContainer("body", t.returnStatement(guaranteedSuperBeforeFinish ? thisRef : wrapReturn()));
				}

				for (var _iterator5 = this.superReturns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
					var _ref5;

					if (_isArray5) {
						if (_i5 >= _iterator5.length) break;
						_ref5 = _iterator5[_i5++];
					} else {
						_i5 = _iterator5.next();
						if (_i5.done) break;
						_ref5 = _i5.value;
					}

					var returnPath = _ref5;

					if (returnPath.node.argument) {
						var ref = returnPath.scope.generateDeclaredUidIdentifier("ret");
						returnPath.get("argument").replaceWithMultiple([t.assignmentExpression("=", ref, returnPath.node.argument), wrapReturn(ref)]);
					} else {
						returnPath.get("argument").replaceWith(wrapReturn());
					}
				}
			};

			ClassTransformer.prototype.pushMethod = function pushMethod(node, path) {
				var scope = path ? path.scope : this.scope;

				if (node.kind === "method") {
					if (this._processMethod(node, scope)) return;
				}

				this.pushToMap(node, false, null, scope);
			};

			ClassTransformer.prototype._processMethod = function _processMethod() {
				return false;
			};

			ClassTransformer.prototype.pushConstructor = function pushConstructor(replaceSupers, method, path) {
				this.bareSupers = replaceSupers.bareSupers;
				this.superReturns = replaceSupers.returns;

				if (path.scope.hasOwnBinding(this.classRef.name)) {
					path.scope.rename(this.classRef.name);
				}

				var construct = this.constructor;

				this.userConstructorPath = path;
				this.userConstructor = method;
				this.hasConstructor = true;

				t.inheritsComments(construct, method);

				construct._ignoreUserWhitespace = true;
				construct.params = method.params;

				t.inherits(construct.body, method.body);
				construct.body.directives = method.body.directives;

				this._pushConstructor();
			};

			ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
				if (this.pushedConstructor) return;
				this.pushedConstructor = true;

				if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
					this.pushDescriptors();
				}

				this.body.push(this.constructor);

				this.pushInherits();
			};

			ClassTransformer.prototype.pushInherits = function pushInherits() {
				if (!this.isDerived || this.pushedInherits) return;

				this.pushedInherits = true;
				this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
			};

			return ClassTransformer;
		}();

		exports.default = ClassTransformer;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		exports.default = function (_ref) {
			var t = _ref.types;

			var IGNORE_REASSIGNMENT_SYMBOL = (0, _symbol2.default)();

			var reassignmentVisitor = {
				"AssignmentExpression|UpdateExpression": function AssignmentExpressionUpdateExpression(path) {
					if (path.node[IGNORE_REASSIGNMENT_SYMBOL]) return;
					path.node[IGNORE_REASSIGNMENT_SYMBOL] = true;

					var arg = path.get(path.isAssignmentExpression() ? "left" : "argument");
					if (!arg.isIdentifier()) return;

					var name = arg.node.name;

					if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

					var exportedNames = this.exports[name];
					if (!exportedNames) return;

					var node = path.node;

					var isPostUpdateExpression = path.isUpdateExpression() && !node.prefix;
					if (isPostUpdateExpression) {
						if (node.operator === "++") node = t.binaryExpression("+", node.argument, t.numericLiteral(1));else if (node.operator === "--") node = t.binaryExpression("-", node.argument, t.numericLiteral(1));else isPostUpdateExpression = false;
					}

					for (var _iterator = exportedNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref2;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref2 = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref2 = _i.value;
						}

						var exportedName = _ref2;

						node = this.buildCall(exportedName, node).expression;
					}

					if (isPostUpdateExpression) node = t.sequenceExpression([node, path.node]);

					path.replaceWith(node);
				}
			};

			return {
				visitor: {
					ReferencedIdentifier: function ReferencedIdentifier(path, state) {
						if (path.node.name == "__moduleName" && !path.scope.hasBinding("__moduleName")) {
							path.replaceWith(t.memberExpression(state.contextIdent, t.identifier("id")));
						}
					},

					Program: {
						enter: function enter(path, state) {
							state.contextIdent = path.scope.generateUidIdentifier("context");
						},
						exit: function exit(path, state) {
							var exportIdent = path.scope.generateUidIdentifier("export");
							var contextIdent = state.contextIdent;

							var exportNames = (0, _create2.default)(null);
							var modules = (0, _create2.default)(null);

							var beforeBody = [];
							var setters = [];
							var sources = [];
							var variableIds = [];
							var removedPaths = [];

							function addExportName(key, val) {
								exportNames[key] = exportNames[key] || [];
								exportNames[key].push(val);
							}

							function pushModule(source, key, specifiers) {
								var _modules = modules[source] = modules[source] || { imports: [], exports: [] };
								_modules[key] = _modules[key].concat(specifiers);
							}

							function buildExportCall(name, val) {
								return t.expressionStatement(t.callExpression(exportIdent, [t.stringLiteral(name), val]));
							}

							var body = path.get("body");

							var canHoist = true;
							for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
								var _ref3;

								if (_isArray2) {
									if (_i2 >= _iterator2.length) break;
									_ref3 = _iterator2[_i2++];
								} else {
									_i2 = _iterator2.next();
									if (_i2.done) break;
									_ref3 = _i2.value;
								}

								var _path = _ref3;

								if (_path.isExportDeclaration()) _path = _path.get("declaration");
								if (_path.isVariableDeclaration() && _path.node.kind !== "var") {
									canHoist = false;
									break;
								}
							}

							for (var _iterator3 = body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
								var _ref4;

								if (_isArray3) {
									if (_i3 >= _iterator3.length) break;
									_ref4 = _iterator3[_i3++];
								} else {
									_i3 = _iterator3.next();
									if (_i3.done) break;
									_ref4 = _i3.value;
								}

								var _path2 = _ref4;

								if (canHoist && _path2.isFunctionDeclaration()) {
									beforeBody.push(_path2.node);
									removedPaths.push(_path2);
								} else if (_path2.isImportDeclaration()) {
									var _source = _path2.node.source.value;
									pushModule(_source, "imports", _path2.node.specifiers);
									for (var name in _path2.getBindingIdentifiers()) {
										_path2.scope.removeBinding(name);
										variableIds.push(t.identifier(name));
									}
									_path2.remove();
								} else if (_path2.isExportAllDeclaration()) {
									pushModule(_path2.node.source.value, "exports", _path2.node);
									_path2.remove();
								} else if (_path2.isExportDefaultDeclaration()) {
									var declar = _path2.get("declaration");
									if (declar.isClassDeclaration() || declar.isFunctionDeclaration()) {
										var id = declar.node.id;
										var nodes = [];

										if (id) {
											nodes.push(declar.node);
											nodes.push(buildExportCall("default", id));
											addExportName(id.name, "default");
										} else {
											nodes.push(buildExportCall("default", t.toExpression(declar.node)));
										}

										if (!canHoist || declar.isClassDeclaration()) {
											_path2.replaceWithMultiple(nodes);
										} else {
											beforeBody = beforeBody.concat(nodes);
											removedPaths.push(_path2);
										}
									} else {
										_path2.replaceWith(buildExportCall("default", declar.node));
									}
								} else if (_path2.isExportNamedDeclaration()) {
									var _declar = _path2.get("declaration");

									if (_declar.node) {
										_path2.replaceWith(_declar);

										var _nodes = [];
										var bindingIdentifiers = void 0;
										if (_path2.isFunction()) {
											var _node = _declar.node;
											var _name = _node.id.name;
											if (canHoist) {
												addExportName(_name, _name);
												beforeBody.push(_node);
												beforeBody.push(buildExportCall(_name, _node.id));
												removedPaths.push(_path2);
											} else {
												var _bindingIdentifiers;

												bindingIdentifiers = (_bindingIdentifiers = {}, _bindingIdentifiers[_name] = _node.id, _bindingIdentifiers);
											}
										} else {
											bindingIdentifiers = _declar.getBindingIdentifiers();
										}
										for (var _name2 in bindingIdentifiers) {
											addExportName(_name2, _name2);
											_nodes.push(buildExportCall(_name2, t.identifier(_name2)));
										}
										_path2.insertAfter(_nodes);
									} else {
										var _specifiers = _path2.node.specifiers;
										if (_specifiers && _specifiers.length) {
											if (_path2.node.source) {
												pushModule(_path2.node.source.value, "exports", _specifiers);
												_path2.remove();
											} else {
												var _nodes2 = [];

												for (var _iterator7 = _specifiers, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : (0, _getIterator3.default)(_iterator7);;) {
													var _ref8;

													if (_isArray7) {
														if (_i7 >= _iterator7.length) break;
														_ref8 = _iterator7[_i7++];
													} else {
														_i7 = _iterator7.next();
														if (_i7.done) break;
														_ref8 = _i7.value;
													}

													var _specifier = _ref8;

													_nodes2.push(buildExportCall(_specifier.exported.name, _specifier.local));
													addExportName(_specifier.local.name, _specifier.exported.name);
												}

												_path2.replaceWithMultiple(_nodes2);
											}
										}
									}
								}
							}

							for (var source in modules) {
								var specifiers = modules[source];

								var setterBody = [];
								var target = path.scope.generateUidIdentifier(source);

								for (var _iterator4 = specifiers.imports, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
									var _ref5;

									if (_isArray4) {
										if (_i4 >= _iterator4.length) break;
										_ref5 = _iterator4[_i4++];
									} else {
										_i4 = _iterator4.next();
										if (_i4.done) break;
										_ref5 = _i4.value;
									}

									var specifier = _ref5;

									if (t.isImportNamespaceSpecifier(specifier)) {
										setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, target)));
									} else if (t.isImportDefaultSpecifier(specifier)) {
										specifier = t.importSpecifier(specifier.local, t.identifier("default"));
									}

									if (t.isImportSpecifier(specifier)) {
										setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, t.memberExpression(target, specifier.imported))));
									}
								}

								if (specifiers.exports.length) {
									var exportObjRef = path.scope.generateUidIdentifier("exportObj");

									setterBody.push(t.variableDeclaration("var", [t.variableDeclarator(exportObjRef, t.objectExpression([]))]));

									for (var _iterator5 = specifiers.exports, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
										var _ref6;

										if (_isArray5) {
											if (_i5 >= _iterator5.length) break;
											_ref6 = _iterator5[_i5++];
										} else {
											_i5 = _iterator5.next();
											if (_i5.done) break;
											_ref6 = _i5.value;
										}

										var node = _ref6;

										if (t.isExportAllDeclaration(node)) {
											setterBody.push(buildExportAll({
												KEY: path.scope.generateUidIdentifier("key"),
												EXPORT_OBJ: exportObjRef,
												TARGET: target
											}));
										} else if (t.isExportSpecifier(node)) {
											setterBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(exportObjRef, node.exported), t.memberExpression(target, node.local))));
										} else {}
									}

									setterBody.push(t.expressionStatement(t.callExpression(exportIdent, [exportObjRef])));
								}

								sources.push(t.stringLiteral(source));
								setters.push(t.functionExpression(null, [target], t.blockStatement(setterBody)));
							}

							var moduleName = this.getModuleName();
							if (moduleName) moduleName = t.stringLiteral(moduleName);

							if (canHoist) {
								(0, _babelHelperHoistVariables2.default)(path, function (id) {
									return variableIds.push(id);
								});
							}

							if (variableIds.length) {
								beforeBody.unshift(t.variableDeclaration("var", variableIds.map(function (id) {
									return t.variableDeclarator(id);
								})));
							}

							path.traverse(reassignmentVisitor, {
								exports: exportNames,
								buildCall: buildExportCall,
								scope: path.scope
							});

							for (var _iterator6 = removedPaths, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : (0, _getIterator3.default)(_iterator6);;) {
								var _ref7;

								if (_isArray6) {
									if (_i6 >= _iterator6.length) break;
									_ref7 = _iterator6[_i6++];
								} else {
									_i6 = _iterator6.next();
									if (_i6.done) break;
									_ref7 = _i6.value;
								}

								var _path3 = _ref7;

								_path3.remove();
							}

							path.node.body = [buildTemplate({
								SYSTEM_REGISTER: t.memberExpression(t.identifier(state.opts.systemGlobal || "System"), t.identifier("register")),
								BEFORE_BODY: beforeBody,
								MODULE_NAME: moduleName,
								SETTERS: setters,
								SOURCES: sources,
								BODY: path.node.body,
								EXPORT_IDENTIFIER: exportIdent,
								CONTEXT_IDENTIFIER: contextIdent
							})];
						}
					}
				}
			};
		};

		var _babelHelperHoistVariables = __webpack_require__(194);

		var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildTemplate = (0, _babelTemplate2.default)("\n  SYSTEM_REGISTER(MODULE_NAME, [SOURCES], function (EXPORT_IDENTIFIER, CONTEXT_IDENTIFIER) {\n    \"use strict\";\n    BEFORE_BODY;\n    return {\n      setters: [SETTERS],\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n");

		var buildExportAll = (0, _babelTemplate2.default)("\n  for (var KEY in TARGET) {\n    if (KEY !== \"default\" && KEY !== \"__esModule\") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n");

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function isValidDefine(path) {
				if (!path.isExpressionStatement()) return;

				var expr = path.get("expression");
				if (!expr.isCallExpression()) return false;
				if (!expr.get("callee").isIdentifier({ name: "define" })) return false;

				var args = expr.get("arguments");
				if (args.length === 3 && !args.shift().isStringLiteral()) return false;
				if (args.length !== 2) return false;
				if (!args.shift().isArrayExpression()) return false;
				if (!args.shift().isFunctionExpression()) return false;

				return true;
			}

			return {
				inherits: __webpack_require__(136),

				visitor: {
					Program: {
						exit: function exit(path, state) {
							var last = path.get("body").pop();
							if (!isValidDefine(last)) return;

							var call = last.node.expression;
							var args = call.arguments;

							var moduleName = args.length === 3 ? args.shift() : null;
							var amdArgs = call.arguments[0];
							var func = call.arguments[1];
							var browserGlobals = state.opts.globals || {};

							var commonArgs = amdArgs.elements.map(function (arg) {
								if (arg.value === "module" || arg.value === "exports") {
									return t.identifier(arg.value);
								} else {
									return t.callExpression(t.identifier("require"), [arg]);
								}
							});

							var browserArgs = amdArgs.elements.map(function (arg) {
								if (arg.value === "module") {
									return t.identifier("mod");
								} else if (arg.value === "exports") {
									return t.memberExpression(t.identifier("mod"), t.identifier("exports"));
								} else {
									var memberExpression = void 0;

									if (state.opts.exactGlobals) {
										var globalRef = browserGlobals[arg.value];
										if (globalRef) {
											memberExpression = globalRef.split(".").reduce(function (accum, curr) {
												return t.memberExpression(accum, t.identifier(curr));
											}, t.identifier("global"));
										} else {
											memberExpression = t.memberExpression(t.identifier("global"), t.identifier(t.toIdentifier(arg.value)));
										}
									} else {
										var requireName = (0, _path.basename)(arg.value, (0, _path.extname)(arg.value));
										var globalName = browserGlobals[requireName] || requireName;
										memberExpression = t.memberExpression(t.identifier("global"), t.identifier(t.toIdentifier(globalName)));
									}

									return memberExpression;
								}
							});

							var moduleNameOrBasename = moduleName ? moduleName.value : this.file.opts.basename;
							var globalToAssign = t.memberExpression(t.identifier("global"), t.identifier(t.toIdentifier(moduleNameOrBasename)));
							var prerequisiteAssignments = null;

							if (state.opts.exactGlobals) {
								var globalName = browserGlobals[moduleNameOrBasename];

								if (globalName) {
									prerequisiteAssignments = [];

									var members = globalName.split(".");
									globalToAssign = members.slice(1).reduce(function (accum, curr) {
										prerequisiteAssignments.push(buildPrerequisiteAssignment({ GLOBAL_REFERENCE: accum }));
										return t.memberExpression(accum, t.identifier(curr));
									}, t.memberExpression(t.identifier("global"), t.identifier(members[0])));
								}
							}

							var globalExport = buildGlobalExport({
								BROWSER_ARGUMENTS: browserArgs,
								PREREQUISITE_ASSIGNMENTS: prerequisiteAssignments,
								GLOBAL_TO_ASSIGN: globalToAssign
							});

							last.replaceWith(buildWrapper({
								MODULE_NAME: moduleName,
								AMD_ARGUMENTS: amdArgs,
								COMMON_ARGUMENTS: commonArgs,
								GLOBAL_EXPORT: globalExport,
								FUNC: func
							}));
						}
					}
				}
			};
		};

		var _path = __webpack_require__(16);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildPrerequisiteAssignment = (0, _babelTemplate2.default)("\n  GLOBAL_REFERENCE = GLOBAL_REFERENCE || {}\n");

		var buildGlobalExport = (0, _babelTemplate2.default)("\n  var mod = { exports: {} };\n  factory(BROWSER_ARGUMENTS);\n  PREREQUISITE_ASSIGNMENTS\n  GLOBAL_TO_ASSIGN = mod.exports;\n");

		var buildWrapper = (0, _babelTemplate2.default)("\n  (function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(MODULE_NAME, AMD_ARGUMENTS, factory);\n    } else if (typeof exports !== \"undefined\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      GLOBAL_EXPORT\n    }\n  })(this, FUNC);\n");

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					CallExpression: function CallExpression(path, file) {
						if (path.get("callee").matchesPattern("Object.assign")) {
							path.node.callee = file.addHelper("extends");
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		var _assert = __webpack_require__(76);

		var _assert2 = _interopRequireDefault(_assert);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _leap = __webpack_require__(343);

		var leap = _interopRequireWildcard(_leap);

		var _meta = __webpack_require__(344);

		var meta = _interopRequireWildcard(_meta);

		var _util = __webpack_require__(213);

		var util = _interopRequireWildcard(_util);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var hasOwn = Object.prototype.hasOwnProperty;

		function Emitter(contextId) {
			_assert2.default.ok(this instanceof Emitter);
			t.assertIdentifier(contextId);

			this.nextTempId = 0;

			this.contextId = contextId;

			this.listing = [];

			this.marked = [true];

			this.finalLoc = loc();

			this.tryEntries = [];

			this.leapManager = new leap.LeapManager(this);
		}

		var Ep = Emitter.prototype;
		exports.Emitter = Emitter;

		function loc() {
			return t.numericLiteral(-1);
		}

		Ep.mark = function (loc) {
			t.assertLiteral(loc);
			var index = this.listing.length;
			if (loc.value === -1) {
				loc.value = index;
			} else {
				_assert2.default.strictEqual(loc.value, index);
			}
			this.marked[index] = true;
			return loc;
		};

		Ep.emit = function (node) {
			if (t.isExpression(node)) {
				node = t.expressionStatement(node);
			}

			t.assertStatement(node);
			this.listing.push(node);
		};

		Ep.emitAssign = function (lhs, rhs) {
			this.emit(this.assign(lhs, rhs));
			return lhs;
		};

		Ep.assign = function (lhs, rhs) {
			return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
		};

		Ep.contextProperty = function (name, computed) {
			return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
		};

		Ep.stop = function (rval) {
			if (rval) {
				this.setReturnValue(rval);
			}

			this.jump(this.finalLoc);
		};

		Ep.setReturnValue = function (valuePath) {
			t.assertExpression(valuePath.value);

			this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
		};

		Ep.clearPendingException = function (tryLoc, assignee) {
			t.assertLiteral(tryLoc);

			var catchCall = t.callExpression(this.contextProperty("catch", true), [tryLoc]);

			if (assignee) {
				this.emitAssign(assignee, catchCall);
			} else {
				this.emit(catchCall);
			}
		};

		Ep.jump = function (toLoc) {
			this.emitAssign(this.contextProperty("next"), toLoc);
			this.emit(t.breakStatement());
		};

		Ep.jumpIf = function (test, toLoc) {
			t.assertExpression(test);
			t.assertLiteral(toLoc);

			this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
		};

		Ep.jumpIfNot = function (test, toLoc) {
			t.assertExpression(test);
			t.assertLiteral(toLoc);

			var negatedTest = void 0;
			if (t.isUnaryExpression(test) && test.operator === "!") {
				negatedTest = test.argument;
			} else {
				negatedTest = t.unaryExpression("!", test);
			}

			this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
		};

		Ep.makeTempVar = function () {
			return this.contextProperty("t" + this.nextTempId++);
		};

		Ep.getContextFunction = function (id) {
			return t.functionExpression(id || null, [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, false);
		};

		Ep.getDispatchLoop = function () {
			var self = this;
			var cases = [];
			var current = void 0;

			var alreadyEnded = false;

			self.listing.forEach(function (stmt, i) {
				if (self.marked.hasOwnProperty(i)) {
					cases.push(t.switchCase(t.numericLiteral(i), current = []));
					alreadyEnded = false;
				}

				if (!alreadyEnded) {
					current.push(stmt);
					if (t.isCompletionStatement(stmt)) alreadyEnded = true;
				}
			});

			this.finalLoc.value = this.listing.length;

			cases.push(t.switchCase(this.finalLoc, []), t.switchCase(t.stringLiteral("end"), [t.returnStatement(t.callExpression(this.contextProperty("stop"), []))]));

			return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
		};

		Ep.getTryLocsList = function () {
			if (this.tryEntries.length === 0) {
				return null;
			}

			var lastLocValue = 0;

			return t.arrayExpression(this.tryEntries.map(function (tryEntry) {
				var thisLocValue = tryEntry.firstLoc.value;
				_assert2.default.ok(thisLocValue >= lastLocValue, "try entries out of order");
				lastLocValue = thisLocValue;

				var ce = tryEntry.catchEntry;
				var fe = tryEntry.finallyEntry;

				var locs = [tryEntry.firstLoc, ce ? ce.firstLoc : null];

				if (fe) {
					locs[2] = fe.firstLoc;
					locs[3] = fe.afterLoc;
				}

				return t.arrayExpression(locs);
			}));
		};

		Ep.explode = function (path, ignoreResult) {
			var node = path.node;
			var self = this;

			t.assertNode(node);

			if (t.isDeclaration(node)) throw getDeclError(node);

			if (t.isStatement(node)) return self.explodeStatement(path);

			if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);

			switch (node.type) {
				case "Program":
					return path.get("body").map(self.explodeStatement, self);

				case "VariableDeclarator":
					throw getDeclError(node);

				case "Property":
				case "SwitchCase":
				case "CatchClause":
					throw new Error(node.type + " nodes should be handled by their parents");

				default:
					throw new Error("unknown Node of type " + (0, _stringify2.default)(node.type));
			}
		};

		function getDeclError(node) {
			return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + (0, _stringify2.default)(node));
		}

		Ep.explodeStatement = function (path, labelId) {
			var stmt = path.node;
			var self = this;
			var before = void 0,
			    after = void 0,
			    head = void 0;

			t.assertStatement(stmt);

			if (labelId) {
				t.assertIdentifier(labelId);
			} else {
				labelId = null;
			}

			if (t.isBlockStatement(stmt)) {
				path.get("body").forEach(function (path) {
					self.explodeStatement(path);
				});
				return;
			}

			if (!meta.containsLeap(stmt)) {
				self.emit(stmt);
				return;
			}

			var _ret = function () {
				switch (stmt.type) {
					case "ExpressionStatement":
						self.explodeExpression(path.get("expression"), true);
						break;

					case "LabeledStatement":
						after = loc();

						self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {
							self.explodeStatement(path.get("body"), stmt.label);
						});

						self.mark(after);

						break;

					case "WhileStatement":
						before = loc();
						after = loc();

						self.mark(before);
						self.jumpIfNot(self.explodeExpression(path.get("test")), after);
						self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {
							self.explodeStatement(path.get("body"));
						});
						self.jump(before);
						self.mark(after);

						break;

					case "DoWhileStatement":
						var first = loc();
						var test = loc();
						after = loc();

						self.mark(first);
						self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {
							self.explode(path.get("body"));
						});
						self.mark(test);
						self.jumpIf(self.explodeExpression(path.get("test")), first);
						self.mark(after);

						break;

					case "ForStatement":
						head = loc();
						var update = loc();
						after = loc();

						if (stmt.init) {
							self.explode(path.get("init"), true);
						}

						self.mark(head);

						if (stmt.test) {
							self.jumpIfNot(self.explodeExpression(path.get("test")), after);
						} else {}

						self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {
							self.explodeStatement(path.get("body"));
						});

						self.mark(update);

						if (stmt.update) {
							self.explode(path.get("update"), true);
						}

						self.jump(head);

						self.mark(after);

						break;

					case "TypeCastExpression":
						return {
							v: self.explodeExpression(path.get("expression"))
						};

					case "ForInStatement":
						head = loc();
						after = loc();

						var keyIterNextFn = self.makeTempVar();
						self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));

						self.mark(head);

						var keyInfoTmpVar = self.makeTempVar();
						self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier("done"), false), after);

						self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier("value"), false));

						self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {
							self.explodeStatement(path.get("body"));
						});

						self.jump(head);

						self.mark(after);

						break;

					case "BreakStatement":
						self.emitAbruptCompletion({
							type: "break",
							target: self.leapManager.getBreakLoc(stmt.label)
						});

						break;

					case "ContinueStatement":
						self.emitAbruptCompletion({
							type: "continue",
							target: self.leapManager.getContinueLoc(stmt.label)
						});

						break;

					case "SwitchStatement":
						var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));

						after = loc();
						var defaultLoc = loc();
						var condition = defaultLoc;
						var caseLocs = [];

						var cases = stmt.cases || [];

						for (var i = cases.length - 1; i >= 0; --i) {
							var c = cases[i];
							t.assertSwitchCase(c);

							if (c.test) {
								condition = t.conditionalExpression(t.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
							} else {
								caseLocs[i] = defaultLoc;
							}
						}

						var discriminant = path.get("discriminant");
						discriminant.replaceWith(condition);
						self.jump(self.explodeExpression(discriminant));

						self.leapManager.withEntry(new leap.SwitchEntry(after), function () {
							path.get("cases").forEach(function (casePath) {
								var i = casePath.key;
								self.mark(caseLocs[i]);

								casePath.get("consequent").forEach(function (path) {
									self.explodeStatement(path);
								});
							});
						});

						self.mark(after);
						if (defaultLoc.value === -1) {
							self.mark(defaultLoc);
							_assert2.default.strictEqual(after.value, defaultLoc.value);
						}

						break;

					case "IfStatement":
						var elseLoc = stmt.alternate && loc();
						after = loc();

						self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);

						self.explodeStatement(path.get("consequent"));

						if (elseLoc) {
							self.jump(after);
							self.mark(elseLoc);
							self.explodeStatement(path.get("alternate"));
						}

						self.mark(after);

						break;

					case "ReturnStatement":
						self.emitAbruptCompletion({
							type: "return",
							value: self.explodeExpression(path.get("argument"))
						});

						break;

					case "WithStatement":
						throw new Error("WithStatement not supported in generator functions.");

					case "TryStatement":
						after = loc();

						var handler = stmt.handler;

						var catchLoc = handler && loc();
						var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);

						var finallyLoc = stmt.finalizer && loc();
						var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);

						var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);

						self.tryEntries.push(tryEntry);
						self.updateContextPrevLoc(tryEntry.firstLoc);

						self.leapManager.withEntry(tryEntry, function () {
							self.explodeStatement(path.get("block"));

							if (catchLoc) {
								(function () {
									if (finallyLoc) {
										self.jump(finallyLoc);
									} else {
										self.jump(after);
									}

									self.updateContextPrevLoc(self.mark(catchLoc));

									var bodyPath = path.get("handler.body");
									var safeParam = self.makeTempVar();
									self.clearPendingException(tryEntry.firstLoc, safeParam);

									bodyPath.traverse(catchParamVisitor, {
										safeParam: safeParam,
										catchParamName: handler.param.name
									});

									self.leapManager.withEntry(catchEntry, function () {
										self.explodeStatement(bodyPath);
									});
								})();
							}

							if (finallyLoc) {
								self.updateContextPrevLoc(self.mark(finallyLoc));

								self.leapManager.withEntry(finallyEntry, function () {
									self.explodeStatement(path.get("finalizer"));
								});

								self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
							}
						});

						self.mark(after);

						break;

					case "ThrowStatement":
						self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));

						break;

					default:
						throw new Error("unknown Statement of type " + (0, _stringify2.default)(stmt.type));
				}
			}();

			if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
		};

		var catchParamVisitor = {
			Identifier: function Identifier(path, state) {
				if (path.node.name === state.catchParamName && util.isReference(path)) {
					path.replaceWith(state.safeParam);
				}
			},

			Scope: function Scope(path, state) {
				if (path.scope.hasOwnBinding(state.catchParamName)) {
					path.skip();
				}
			}
		};

		Ep.emitAbruptCompletion = function (record) {
			if (!isValidCompletion(record)) {
				_assert2.default.ok(false, "invalid completion record: " + (0, _stringify2.default)(record));
			}

			_assert2.default.notStrictEqual(record.type, "normal", "normal completions are not abrupt");

			var abruptArgs = [t.stringLiteral(record.type)];

			if (record.type === "break" || record.type === "continue") {
				t.assertLiteral(record.target);
				abruptArgs[1] = record.target;
			} else if (record.type === "return" || record.type === "throw") {
				if (record.value) {
					t.assertExpression(record.value);
					abruptArgs[1] = record.value;
				}
			}

			this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
		};

		function isValidCompletion(record) {
			var type = record.type;

			if (type === "normal") {
				return !hasOwn.call(record, "target");
			}

			if (type === "break" || type === "continue") {
				return !hasOwn.call(record, "value") && t.isLiteral(record.target);
			}

			if (type === "return" || type === "throw") {
				return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
			}

			return false;
		}

		Ep.getUnmarkedCurrentLoc = function () {
			return t.numericLiteral(this.listing.length);
		};

		Ep.updateContextPrevLoc = function (loc) {
			if (loc) {
				t.assertLiteral(loc);

				if (loc.value === -1) {
					loc.value = this.listing.length;
				} else {
					_assert2.default.strictEqual(loc.value, this.listing.length);
				}
			} else {
				loc = this.getUnmarkedCurrentLoc();
			}

			this.emitAssign(this.contextProperty("prev"), loc);
		};

		Ep.explodeExpression = function (path, ignoreResult) {
			var expr = path.node;
			if (expr) {
				t.assertExpression(expr);
			} else {
				return expr;
			}

			var self = this;
			var result = void 0;
			var after = void 0;

			function finish(expr) {
				t.assertExpression(expr);
				if (ignoreResult) {
					self.emit(expr);
				} else {
					return expr;
				}
			}

			if (!meta.containsLeap(expr)) {
				return finish(expr);
			}

			var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);

			function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
				_assert2.default.ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");

				var result = self.explodeExpression(childPath, ignoreChildResult);

				if (ignoreChildResult) {} else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
					result = self.emitAssign(tempVar || self.makeTempVar(), result);
				}
				return result;
			}

			var _ret3 = function () {

				switch (expr.type) {
					case "MemberExpression":
						return {
							v: finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed))
						};

					case "CallExpression":
						var calleePath = path.get("callee");
						var argsPath = path.get("arguments");

						var newCallee = void 0;
						var newArgs = [];

						var hasLeapingArgs = false;
						argsPath.forEach(function (argPath) {
							hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);
						});

						if (t.isMemberExpression(calleePath.node)) {
							if (hasLeapingArgs) {

								var newObject = explodeViaTempVar(self.makeTempVar(), calleePath.get("object"));

								var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.node.property;

								newArgs.unshift(newObject);

								newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier("call"), false);
							} else {
								newCallee = self.explodeExpression(calleePath);
							}
						} else {
							newCallee = self.explodeExpression(calleePath);

							if (t.isMemberExpression(newCallee)) {
								newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);
							}
						}

						argsPath.forEach(function (argPath) {
							newArgs.push(explodeViaTempVar(null, argPath));
						});

						return {
							v: finish(t.callExpression(newCallee, newArgs))
						};

					case "NewExpression":
						return {
							v: finish(t.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function (argPath) {
								return explodeViaTempVar(null, argPath);
							})))
						};

					case "ObjectExpression":
						return {
							v: finish(t.objectExpression(path.get("properties").map(function (propPath) {
								if (propPath.isObjectProperty()) {
									return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get("value")), propPath.node.computed);
								} else {
									return propPath.node;
								}
							})))
						};

					case "ArrayExpression":
						return {
							v: finish(t.arrayExpression(path.get("elements").map(function (elemPath) {
								return explodeViaTempVar(null, elemPath);
							})))
						};

					case "SequenceExpression":
						var lastIndex = expr.expressions.length - 1;

						path.get("expressions").forEach(function (exprPath) {
							if (exprPath.key === lastIndex) {
								result = self.explodeExpression(exprPath, ignoreResult);
							} else {
								self.explodeExpression(exprPath, true);
							}
						});

						return {
							v: result
						};

					case "LogicalExpression":
						after = loc();

						if (!ignoreResult) {
							result = self.makeTempVar();
						}

						var left = explodeViaTempVar(result, path.get("left"));

						if (expr.operator === "&&") {
							self.jumpIfNot(left, after);
						} else {
							_assert2.default.strictEqual(expr.operator, "||");
							self.jumpIf(left, after);
						}

						explodeViaTempVar(result, path.get("right"), ignoreResult);

						self.mark(after);

						return {
							v: result
						};

					case "ConditionalExpression":
						var elseLoc = loc();
						after = loc();
						var test = self.explodeExpression(path.get("test"));

						self.jumpIfNot(test, elseLoc);

						if (!ignoreResult) {
							result = self.makeTempVar();
						}

						explodeViaTempVar(result, path.get("consequent"), ignoreResult);
						self.jump(after);

						self.mark(elseLoc);
						explodeViaTempVar(result, path.get("alternate"), ignoreResult);

						self.mark(after);

						return {
							v: result
						};

					case "UnaryExpression":
						return {
							v: finish(t.unaryExpression(expr.operator, self.explodeExpression(path.get("argument")), !!expr.prefix))
						};

					case "BinaryExpression":
						return {
							v: finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))))
						};

					case "AssignmentExpression":
						return {
							v: finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))))
						};

					case "UpdateExpression":
						return {
							v: finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix))
						};

					case "YieldExpression":
						after = loc();
						var arg = expr.argument && self.explodeExpression(path.get("argument"));

						if (arg && expr.delegate) {
							var _result = self.makeTempVar();

							self.emit(t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [arg, t.stringLiteral(_result.property.name), after])));

							self.mark(after);

							return {
								v: _result
							};
						}

						self.emitAssign(self.contextProperty("next"), after);
						self.emit(t.returnStatement(arg || null));
						self.mark(after);

						return {
							v: self.contextProperty("sent")
						};

					default:
						throw new Error("unknown Expression of type " + (0, _stringify2.default)(expr.type));
				}
			}();

			if ((typeof _ret3 === "undefined" ? "undefined" : (0, _typeof3.default)(_ret3)) === "object") return _ret3.v;
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.runtimeProperty = runtimeProperty;
		exports.isReference = isReference;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function runtimeProperty(name) {
			return t.memberExpression(t.identifier("regeneratorRuntime"), t.identifier(name), false);
		}

		function isReference(path) {
			return path.isReferenced() || path.parentPath.isAssignmentExpression({ left: path.node });
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function () {
			return {
				visitor: {
					Program: function Program(path, state) {
						if (state.opts.strict === false || state.opts.strictMode === false) return;

						var node = path.node;

						for (var _iterator = node.directives, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var directive = _ref;

							if (directive.value.value === "use strict") return;
						}

						path.unshiftContainer("directives", t.directive(t.directiveLiteral("use strict")));
					}
				}
			};
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		module.exports = preset({});

		Object.defineProperty(module.exports, "buildPreset", {
			configurable: true,
			writable: true,

			enumerable: false,
			value: preset
		});

		function preset(context, opts) {
			var moduleTypes = ["commonjs", "amd", "umd", "systemjs"];
			var loose = false;
			var modules = "commonjs";
			var spec = false;

			if (opts !== undefined) {
				if (opts.loose !== undefined) loose = opts.loose;
				if (opts.modules !== undefined) modules = opts.modules;
				if (opts.spec !== undefined) spec = opts.spec;
			}

			if (typeof loose !== "boolean") throw new Error("Preset es2015 'loose' option must be a boolean.");
			if (typeof spec !== "boolean") throw new Error("Preset es2015 'spec' option must be a boolean.");
			if (modules !== false && moduleTypes.indexOf(modules) === -1) {
				throw new Error("Preset es2015 'modules' option must be 'false' to indicate no modules\n" + "or a module type which be be one of: 'commonjs' (default), 'amd', 'umd', 'systemjs'");
			}

			return {
				plugins: [[__webpack_require__(63), { loose: loose, spec: spec }], __webpack_require__(58), __webpack_require__(57), [__webpack_require__(51), { spec: spec }], __webpack_require__(79), [__webpack_require__(53), { loose: loose }], __webpack_require__(80), __webpack_require__(61), __webpack_require__(135), [__webpack_require__(54), { loose: loose }], [__webpack_require__(56), { loose: loose }], __webpack_require__(81), __webpack_require__(83), __webpack_require__(48), [__webpack_require__(62), { loose: loose }], __webpack_require__(60), [__webpack_require__(55), { loose: loose }], __webpack_require__(52), __webpack_require__(82), modules === "commonjs" && [__webpack_require__(59), { loose: loose }], modules === "systemjs" && [__webpack_require__(209), { loose: loose }], modules === "amd" && [__webpack_require__(136), { loose: loose }], modules === "umd" && [__webpack_require__(210), { loose: loose }], [__webpack_require__(64), { async: false, asyncGenerators: false }]].filter(Boolean)
			};
		}
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			plugins: [__webpack_require__(84)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			plugins: [__webpack_require__(50), __webpack_require__(131)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			presets: [__webpack_require__(219)],
			plugins: [__webpack_require__(132), __webpack_require__(137)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			presets: [__webpack_require__(220)],
			plugins: [__webpack_require__(133), __webpack_require__(140), __webpack_require__(207)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			plugins: [__webpack_require__(50), __webpack_require__(131), __webpack_require__(84)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(409), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Hub = function Hub(file, options) {
			(0, _classCallCheck3.default)(this, Hub);

			this.file = file;
			this.options = options;
		};

		exports.default = Hub;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.Flow = exports.Pure = exports.Generated = exports.User = exports.Var = exports.BlockScoped = exports.Referenced = exports.Scope = exports.Expression = exports.Statement = exports.BindingIdentifier = exports.ReferencedMemberExpression = exports.ReferencedIdentifier = undefined;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var ReferencedIdentifier = exports.ReferencedIdentifier = {
			types: ["Identifier", "JSXIdentifier"],
			checkPath: function checkPath(_ref, opts) {
				var node = _ref.node;
				var parent = _ref.parent;

				if (!t.isIdentifier(node, opts)) {
					if (t.isJSXIdentifier(node, opts)) {
						if (_babelTypes.react.isCompatTag(node.name)) return false;
					} else {
						return false;
					}
				}

				return t.isReferenced(node, parent);
			}
		};

		var ReferencedMemberExpression = exports.ReferencedMemberExpression = {
			types: ["MemberExpression"],
			checkPath: function checkPath(_ref2) {
				var node = _ref2.node;
				var parent = _ref2.parent;

				return t.isMemberExpression(node) && t.isReferenced(node, parent);
			}
		};

		var BindingIdentifier = exports.BindingIdentifier = {
			types: ["Identifier"],
			checkPath: function checkPath(_ref3) {
				var node = _ref3.node;
				var parent = _ref3.parent;

				return t.isIdentifier(node) && t.isBinding(node, parent);
			}
		};

		var Statement = exports.Statement = {
			types: ["Statement"],
			checkPath: function checkPath(_ref4) {
				var node = _ref4.node;
				var parent = _ref4.parent;

				if (t.isStatement(node)) {
					if (t.isVariableDeclaration(node)) {
						if (t.isForXStatement(parent, { left: node })) return false;
						if (t.isForStatement(parent, { init: node })) return false;
					}

					return true;
				} else {
					return false;
				}
			}
		};

		var Expression = exports.Expression = {
			types: ["Expression"],
			checkPath: function checkPath(path) {
				if (path.isIdentifier()) {
					return path.isReferencedIdentifier();
				} else {
					return t.isExpression(path.node);
				}
			}
		};

		var Scope = exports.Scope = {
			types: ["Scopable"],
			checkPath: function checkPath(path) {
				return t.isScope(path.node, path.parent);
			}
		};

		var Referenced = exports.Referenced = {
			checkPath: function checkPath(path) {
				return t.isReferenced(path.node, path.parent);
			}
		};

		var BlockScoped = exports.BlockScoped = {
			checkPath: function checkPath(path) {
				return t.isBlockScoped(path.node);
			}
		};

		var Var = exports.Var = {
			types: ["VariableDeclaration"],
			checkPath: function checkPath(path) {
				return t.isVar(path.node);
			}
		};

		var User = exports.User = {
			checkPath: function checkPath(path) {
				return path.node && !!path.node.loc;
			}
		};

		var Generated = exports.Generated = {
			checkPath: function checkPath(path) {
				return !path.isUser();
			}
		};

		var Pure = exports.Pure = {
			checkPath: function checkPath(path, opts) {
				return path.scope.isPure(path.node, opts);
			}
		};

		var Flow = exports.Flow = {
			types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
			checkPath: function checkPath(_ref5) {
				var node = _ref5.node;

				if (t.isFlow(node)) {
					return true;
				} else if (t.isImportDeclaration(node)) {
					return node.importKind === "type" || node.importKind === "typeof";
				} else if (t.isExportDeclaration(node)) {
					return node.exportKind === "type";
				} else {
					return false;
				}
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Binding = function () {
			function Binding(_ref) {
				var existing = _ref.existing;
				var identifier = _ref.identifier;
				var scope = _ref.scope;
				var path = _ref.path;
				var kind = _ref.kind;
				(0, _classCallCheck3.default)(this, Binding);

				this.identifier = identifier;
				this.scope = scope;
				this.path = path;
				this.kind = kind;

				this.constantViolations = [];
				this.constant = true;

				this.referencePaths = [];
				this.referenced = false;
				this.references = 0;

				this.clearValue();

				if (existing) {
					this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
				}
			}

			Binding.prototype.deoptValue = function deoptValue() {
				this.clearValue();
				this.hasDeoptedValue = true;
			};

			Binding.prototype.setValue = function setValue(value) {
				if (this.hasDeoptedValue) return;
				this.hasValue = true;
				this.value = value;
			};

			Binding.prototype.clearValue = function clearValue() {
				this.hasDeoptedValue = false;
				this.hasValue = false;
				this.value = null;
			};

			Binding.prototype.reassign = function reassign(path) {
				this.constant = false;
				if (this.constantViolations.indexOf(path) !== -1) {
					return;
				}
				this.constantViolations.push(path);
			};

			Binding.prototype.reference = function reference(path) {
				if (this.referencePaths.indexOf(path) !== -1) {
					return;
				}
				this.referenced = true;
				this.references++;
				this.referencePaths.push(path);
			};

			Binding.prototype.dereference = function dereference() {
				this.references--;
				this.referenced = !!this.references;
			};

			return Binding;
		}();

		exports.default = Binding;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _create = __webpack_require__(12);

		var _create2 = _interopRequireDefault(_create);

		exports.getBindingIdentifiers = getBindingIdentifiers;
		exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function getBindingIdentifiers(node, duplicates, outerOnly) {
			var search = [].concat(node);
			var ids = (0, _create2.default)(null);

			while (search.length) {
				var id = search.shift();
				if (!id) continue;

				var keys = t.getBindingIdentifiers.keys[id.type];

				if (t.isIdentifier(id)) {
					if (duplicates) {
						var _ids = ids[id.name] = ids[id.name] || [];
						_ids.push(id);
					} else {
						ids[id.name] = id;
					}
					continue;
				}

				if (t.isExportDeclaration(id)) {
					if (t.isDeclaration(node.declaration)) {
						search.push(node.declaration);
					}
					continue;
				}

				if (outerOnly) {
					if (t.isFunctionDeclaration(id)) {
						search.push(id.id);
						continue;
					}

					if (t.isFunctionExpression(id)) {
						continue;
					}
				}

				if (keys) {
					for (var i = 0; i < keys.length; i++) {
						var key = keys[i];
						if (id[key]) {
							search = search.concat(id[key]);
						}
					}
				}
			}

			return ids;
		}

		getBindingIdentifiers.keys = {
			DeclareClass: ["id"],
			DeclareFunction: ["id"],
			DeclareModule: ["id"],
			DeclareVariable: ["id"],
			InterfaceDeclaration: ["id"],
			TypeAlias: ["id"],

			CatchClause: ["param"],
			LabeledStatement: ["label"],
			UnaryExpression: ["argument"],
			AssignmentExpression: ["left"],

			ImportSpecifier: ["local"],
			ImportNamespaceSpecifier: ["local"],
			ImportDefaultSpecifier: ["local"],
			ImportDeclaration: ["specifiers"],

			ExportSpecifier: ["exported"],
			ExportNamespaceSpecifier: ["exported"],
			ExportDefaultSpecifier: ["exported"],

			FunctionDeclaration: ["id", "params"],
			FunctionExpression: ["id", "params"],

			ClassDeclaration: ["id"],
			ClassExpression: ["id"],

			RestElement: ["argument"],
			UpdateExpression: ["argument"],

			RestProperty: ["argument"],
			ObjectProperty: ["value"],

			AssignmentPattern: ["left"],
			ArrayPattern: ["elements"],
			ObjectPattern: ["properties"],

			VariableDeclaration: ["declarations"],
			VariableDeclarator: ["id"]
		};

		function getOuterBindingIdentifiers(node, duplicates) {
			return getBindingIdentifiers(node, duplicates, true);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.Token = undefined;

		var _identifier = __webpack_require__(66);

		var _types = __webpack_require__(14);

		var _context = __webpack_require__(65);

		var _location = __webpack_require__(87);

		var _whitespace = __webpack_require__(40);

		var _state = __webpack_require__(399);

		var _state2 = _interopRequireDefault(_state);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var Token = exports.Token = function Token(state) {
			_classCallCheck(this, Token);

			this.type = state.type;
			this.value = state.value;
			this.start = state.start;
			this.end = state.end;
			this.loc = new _location.SourceLocation(state.startLoc, state.endLoc);
		};

		function codePointToString(code) {
			if (code <= 0xFFFF) {
				return String.fromCharCode(code);
			} else {
				return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
			}
		}

		var Tokenizer = function () {
			function Tokenizer(options, input) {
				_classCallCheck(this, Tokenizer);

				this.state = new _state2.default();
				this.state.init(options, input);
			}

			Tokenizer.prototype.next = function next() {
				if (!this.isLookahead) {
					this.state.tokens.push(new Token(this.state));
				}

				this.state.lastTokEnd = this.state.end;
				this.state.lastTokStart = this.state.start;
				this.state.lastTokEndLoc = this.state.endLoc;
				this.state.lastTokStartLoc = this.state.startLoc;
				this.nextToken();
			};

			Tokenizer.prototype.eat = function eat(type) {
				if (this.match(type)) {
					this.next();
					return true;
				} else {
					return false;
				}
			};

			Tokenizer.prototype.match = function match(type) {
				return this.state.type === type;
			};

			Tokenizer.prototype.isKeyword = function isKeyword(word) {
				return (0, _identifier.isKeyword)(word);
			};

			Tokenizer.prototype.lookahead = function lookahead() {
				var old = this.state;
				this.state = old.clone(true);

				this.isLookahead = true;
				this.next();
				this.isLookahead = false;

				var curr = this.state.clone(true);
				this.state = old;
				return curr;
			};

			Tokenizer.prototype.setStrict = function setStrict(strict) {
				this.state.strict = strict;
				if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
				this.state.pos = this.state.start;
				while (this.state.pos < this.state.lineStart) {
					this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
					--this.state.curLine;
				}
				this.nextToken();
			};

			Tokenizer.prototype.curContext = function curContext() {
				return this.state.context[this.state.context.length - 1];
			};

			Tokenizer.prototype.nextToken = function nextToken() {
				var curContext = this.curContext();
				if (!curContext || !curContext.preserveSpace) this.skipSpace();

				this.state.containsOctal = false;
				this.state.octalPosition = null;
				this.state.start = this.state.pos;
				this.state.startLoc = this.state.curPosition();
				if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);

				if (curContext.override) {
					return curContext.override(this);
				} else {
					return this.readToken(this.fullCharCodeAtPos());
				}
			};

			Tokenizer.prototype.readToken = function readToken(code) {
				if ((0, _identifier.isIdentifierStart)(code) || code === 92) {
						return this.readWord();
					} else {
					return this.getTokenFromCode(code);
				}
			};

			Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
				var code = this.input.charCodeAt(this.state.pos);
				if (code <= 0xd7ff || code >= 0xe000) return code;

				var next = this.input.charCodeAt(this.state.pos + 1);
				return (code << 10) + next - 0x35fdc00;
			};

			Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
				var comment = {
					type: block ? "CommentBlock" : "CommentLine",
					value: text,
					start: start,
					end: end,
					loc: new _location.SourceLocation(startLoc, endLoc)
				};

				if (!this.isLookahead) {
					this.state.tokens.push(comment);
					this.state.comments.push(comment);
					this.addComment(comment);
				}
			};

			Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
				var startLoc = this.state.curPosition();
				var start = this.state.pos,
				    end = this.input.indexOf("*/", this.state.pos += 2);
				if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

				this.state.pos = end + 2;
				_whitespace.lineBreakG.lastIndex = start;
				var match = void 0;
				while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
					++this.state.curLine;
					this.state.lineStart = match.index + match[0].length;
				}

				this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
			};

			Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
				var start = this.state.pos;
				var startLoc = this.state.curPosition();
				var ch = this.input.charCodeAt(this.state.pos += startSkip);
				while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
					++this.state.pos;
					ch = this.input.charCodeAt(this.state.pos);
				}

				this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
			};

			Tokenizer.prototype.skipSpace = function skipSpace() {
				loop: while (this.state.pos < this.input.length) {
					var ch = this.input.charCodeAt(this.state.pos);
					switch (ch) {
						case 32:case 160:
							++this.state.pos;
							break;

						case 13:
							if (this.input.charCodeAt(this.state.pos + 1) === 10) {
								++this.state.pos;
							}

						case 10:case 8232:case 8233:
							++this.state.pos;
							++this.state.curLine;
							this.state.lineStart = this.state.pos;
							break;

						case 47:
							switch (this.input.charCodeAt(this.state.pos + 1)) {
								case 42:
									this.skipBlockComment();
									break;

								case 47:
									this.skipLineComment(2);
									break;

								default:
									break loop;
							}
							break;

						default:
							if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
								++this.state.pos;
							} else {
								break loop;
							}
					}
				}
			};

			Tokenizer.prototype.finishToken = function finishToken(type, val) {
				this.state.end = this.state.pos;
				this.state.endLoc = this.state.curPosition();
				var prevType = this.state.type;
				this.state.type = type;
				this.state.value = val;

				this.updateContext(prevType);
			};

			Tokenizer.prototype.readToken_dot = function readToken_dot() {
				var next = this.input.charCodeAt(this.state.pos + 1);
				if (next >= 48 && next <= 57) {
					return this.readNumber(true);
				}

				var next2 = this.input.charCodeAt(this.state.pos + 2);
				if (next === 46 && next2 === 46) {
					this.state.pos += 3;
					return this.finishToken(_types.types.ellipsis);
				} else {
					++this.state.pos;
					return this.finishToken(_types.types.dot);
				}
			};

			Tokenizer.prototype.readToken_slash = function readToken_slash() {
				if (this.state.exprAllowed) {
					++this.state.pos;
					return this.readRegexp();
				}

				var next = this.input.charCodeAt(this.state.pos + 1);
				if (next === 61) {
					return this.finishOp(_types.types.assign, 2);
				} else {
					return this.finishOp(_types.types.slash, 1);
				}
			};

			Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
				var type = code === 42 ? _types.types.star : _types.types.modulo;
				var width = 1;
				var next = this.input.charCodeAt(this.state.pos + 1);

				if (next === 42) {
					width++;
					next = this.input.charCodeAt(this.state.pos + 2);
					type = _types.types.exponent;
				}

				if (next === 61) {
					width++;
					type = _types.types.assign;
				}

				return this.finishOp(type, width);
			};

			Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
				var next = this.input.charCodeAt(this.state.pos + 1);
				if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
				if (next === 61) return this.finishOp(_types.types.assign, 2);
				if (code === 124 && next === 125 && this.hasPlugin("flow")) return this.finishOp(_types.types.braceBarR, 2);
				return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
			};

			Tokenizer.prototype.readToken_caret = function readToken_caret() {
				var next = this.input.charCodeAt(this.state.pos + 1);
				if (next === 61) {
					return this.finishOp(_types.types.assign, 2);
				} else {
					return this.finishOp(_types.types.bitwiseXOR, 1);
				}
			};

			Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
				var next = this.input.charCodeAt(this.state.pos + 1);

				if (next === code) {
					if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
						this.skipLineComment(3);
						this.skipSpace();
						return this.nextToken();
					}
					return this.finishOp(_types.types.incDec, 2);
				}

				if (next === 61) {
					return this.finishOp(_types.types.assign, 2);
				} else {
					return this.finishOp(_types.types.plusMin, 1);
				}
			};

			Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
				var next = this.input.charCodeAt(this.state.pos + 1);
				var size = 1;

				if (next === code) {
					size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
					if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
					return this.finishOp(_types.types.bitShift, size);
				}

				if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
					if (this.inModule) this.unexpected();

					this.skipLineComment(4);
					this.skipSpace();
					return this.nextToken();
				}

				if (next === 61) {
					size = 2;
				}

				return this.finishOp(_types.types.relational, size);
			};

			Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
				var next = this.input.charCodeAt(this.state.pos + 1);
				if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
				if (code === 61 && next === 62) {
					this.state.pos += 2;
					return this.finishToken(_types.types.arrow);
				}
				return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
			};

			Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
				switch (code) {
					case 46:
						return this.readToken_dot();

					case 40:
						++this.state.pos;return this.finishToken(_types.types.parenL);
					case 41:
						++this.state.pos;return this.finishToken(_types.types.parenR);
					case 59:
						++this.state.pos;return this.finishToken(_types.types.semi);
					case 44:
						++this.state.pos;return this.finishToken(_types.types.comma);
					case 91:
						++this.state.pos;return this.finishToken(_types.types.bracketL);
					case 93:
						++this.state.pos;return this.finishToken(_types.types.bracketR);

					case 123:
						if (this.hasPlugin("flow") && this.input.charCodeAt(this.state.pos + 1) === 124) {
							return this.finishOp(_types.types.braceBarL, 2);
						} else {
							++this.state.pos;
							return this.finishToken(_types.types.braceL);
						}

					case 125:
						++this.state.pos;return this.finishToken(_types.types.braceR);

					case 58:
						if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
							return this.finishOp(_types.types.doubleColon, 2);
						} else {
							++this.state.pos;
							return this.finishToken(_types.types.colon);
						}

					case 63:
						++this.state.pos;return this.finishToken(_types.types.question);
					case 64:
						++this.state.pos;return this.finishToken(_types.types.at);

					case 96:
						++this.state.pos;
						return this.finishToken(_types.types.backQuote);

					case 48:
						var next = this.input.charCodeAt(this.state.pos + 1);
						if (next === 120 || next === 88) return this.readRadixNumber(16);
						if (next === 111 || next === 79) return this.readRadixNumber(8);
						if (next === 98 || next === 66) return this.readRadixNumber(2);
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						return this.readNumber(false);

					case 34:case 39:
						return this.readString(code);

					case 47:
						return this.readToken_slash();

					case 37:case 42:
						return this.readToken_mult_modulo(code);

					case 124:case 38:
						return this.readToken_pipe_amp(code);

					case 94:
						return this.readToken_caret();

					case 43:case 45:
						return this.readToken_plus_min(code);

					case 60:case 62:
						return this.readToken_lt_gt(code);

					case 61:case 33:
						return this.readToken_eq_excl(code);

					case 126:
						return this.finishOp(_types.types.prefix, 1);
				}

				this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
			};

			Tokenizer.prototype.finishOp = function finishOp(type, size) {
				var str = this.input.slice(this.state.pos, this.state.pos + size);
				this.state.pos += size;
				return this.finishToken(type, str);
			};

			Tokenizer.prototype.readRegexp = function readRegexp() {
				var escaped = void 0,
				    inClass = void 0,
				    start = this.state.pos;
				for (;;) {
					if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
					var ch = this.input.charAt(this.state.pos);
					if (_whitespace.lineBreak.test(ch)) {
						this.raise(start, "Unterminated regular expression");
					}
					if (escaped) {
						escaped = false;
					} else {
						if (ch === "[") {
							inClass = true;
						} else if (ch === "]" && inClass) {
							inClass = false;
						} else if (ch === "/" && !inClass) {
							break;
						}
						escaped = ch === "\\";
					}
					++this.state.pos;
				}
				var content = this.input.slice(start, this.state.pos);
				++this.state.pos;

				var mods = this.readWord1();
				if (mods) {
					var validFlags = /^[gmsiyu]*$/;
					if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
				}
				return this.finishToken(_types.types.regexp, {
					pattern: content,
					flags: mods
				});
			};

			Tokenizer.prototype.readInt = function readInt(radix, len) {
				var start = this.state.pos,
				    total = 0;
				for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
					var code = this.input.charCodeAt(this.state.pos),
					    val = void 0;
					if (code >= 97) {
						val = code - 97 + 10;
					} else if (code >= 65) {
						val = code - 65 + 10;
					} else if (code >= 48 && code <= 57) {
						val = code - 48;
					} else {
						val = Infinity;
					}
					if (val >= radix) break;
					++this.state.pos;
					total = total * radix + val;
				}
				if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

				return total;
			};

			Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
				this.state.pos += 2;
				var val = this.readInt(radix);
				if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
				if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
				return this.finishToken(_types.types.num, val);
			};

			Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
				var start = this.state.pos,
				    isFloat = false,
				    octal = this.input.charCodeAt(this.state.pos) === 48;
				if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
				var next = this.input.charCodeAt(this.state.pos);
				if (next === 46) {
					++this.state.pos;
					this.readInt(10);
					isFloat = true;
					next = this.input.charCodeAt(this.state.pos);
				}
				if (next === 69 || next === 101) {
					next = this.input.charCodeAt(++this.state.pos);
					if (next === 43 || next === 45) ++this.state.pos;
					if (this.readInt(10) === null) this.raise(start, "Invalid number");
					isFloat = true;
				}
				if ((0, _identifier.isIdentifierStart)(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

				var str = this.input.slice(start, this.state.pos),
				    val = void 0;
				if (isFloat) {
					val = parseFloat(str);
				} else if (!octal || str.length === 1) {
					val = parseInt(str, 10);
				} else if (/[89]/.test(str) || this.state.strict) {
					this.raise(start, "Invalid number");
				} else {
					val = parseInt(str, 8);
				}
				return this.finishToken(_types.types.num, val);
			};

			Tokenizer.prototype.readCodePoint = function readCodePoint() {
				var ch = this.input.charCodeAt(this.state.pos),
				    code = void 0;

				if (ch === 123) {
					var codePos = ++this.state.pos;
					code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
					++this.state.pos;
					if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
				} else {
					code = this.readHexChar(4);
				}
				return code;
			};

			Tokenizer.prototype.readString = function readString(quote) {
				var out = "",
				    chunkStart = ++this.state.pos;
				for (;;) {
					if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
					var ch = this.input.charCodeAt(this.state.pos);
					if (ch === quote) break;
					if (ch === 92) {
						out += this.input.slice(chunkStart, this.state.pos);
						out += this.readEscapedChar(false);
						chunkStart = this.state.pos;
					} else {
						if ((0, _whitespace.isNewLine)(ch)) this.raise(this.state.start, "Unterminated string constant");
						++this.state.pos;
					}
				}
				out += this.input.slice(chunkStart, this.state.pos++);
				return this.finishToken(_types.types.string, out);
			};

			Tokenizer.prototype.readTmplToken = function readTmplToken() {
				var out = "",
				    chunkStart = this.state.pos;
				for (;;) {
					if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
					var ch = this.input.charCodeAt(this.state.pos);
					if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
						if (this.state.pos === this.state.start && this.match(_types.types.template)) {
							if (ch === 36) {
								this.state.pos += 2;
								return this.finishToken(_types.types.dollarBraceL);
							} else {
								++this.state.pos;
								return this.finishToken(_types.types.backQuote);
							}
						}
						out += this.input.slice(chunkStart, this.state.pos);
						return this.finishToken(_types.types.template, out);
					}
					if (ch === 92) {
						out += this.input.slice(chunkStart, this.state.pos);
						out += this.readEscapedChar(true);
						chunkStart = this.state.pos;
					} else if ((0, _whitespace.isNewLine)(ch)) {
						out += this.input.slice(chunkStart, this.state.pos);
						++this.state.pos;
						switch (ch) {
							case 13:
								if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
							case 10:
								out += "\n";
								break;
							default:
								out += String.fromCharCode(ch);
								break;
						}
						++this.state.curLine;
						this.state.lineStart = this.state.pos;
						chunkStart = this.state.pos;
					} else {
						++this.state.pos;
					}
				}
			};

			Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
				var ch = this.input.charCodeAt(++this.state.pos);
				++this.state.pos;
				switch (ch) {
					case 110:
						return "\n";
					case 114:
						return "\r";
					case 120:
						return String.fromCharCode(this.readHexChar(2));
					case 117:
						return codePointToString(this.readCodePoint());
					case 116:
						return "\t";
					case 98:
						return "\b";
					case 118:
						return '\x0B';
					case 102:
						return "\f";
					case 13:
						if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
					case 10:
						this.state.lineStart = this.state.pos;
						++this.state.curLine;
						return "";
					default:
						if (ch >= 48 && ch <= 55) {
							var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
							var octal = parseInt(octalStr, 8);
							if (octal > 255) {
								octalStr = octalStr.slice(0, -1);
								octal = parseInt(octalStr, 8);
							}
							if (octal > 0) {
								if (!this.state.containsOctal) {
									this.state.containsOctal = true;
									this.state.octalPosition = this.state.pos - 2;
								}
								if (this.state.strict || inTemplate) {
									this.raise(this.state.pos - 2, "Octal literal in strict mode");
								}
							}
							this.state.pos += octalStr.length - 1;
							return String.fromCharCode(octal);
						}
						return String.fromCharCode(ch);
				}
			};

			Tokenizer.prototype.readHexChar = function readHexChar(len) {
				var codePos = this.state.pos;
				var n = this.readInt(16, len);
				if (n === null) this.raise(codePos, "Bad character escape sequence");
				return n;
			};

			Tokenizer.prototype.readWord1 = function readWord1() {
				this.state.containsEsc = false;
				var word = "",
				    first = true,
				    chunkStart = this.state.pos;
				while (this.state.pos < this.input.length) {
					var ch = this.fullCharCodeAtPos();
					if ((0, _identifier.isIdentifierChar)(ch)) {
						this.state.pos += ch <= 0xffff ? 1 : 2;
					} else if (ch === 92) {
						this.state.containsEsc = true;

						word += this.input.slice(chunkStart, this.state.pos);
						var escStart = this.state.pos;

						if (this.input.charCodeAt(++this.state.pos) !== 117) {
							this.raise(this.state.pos, 'Expecting Unicode escape sequence \\uXXXX');
						}

						++this.state.pos;
						var esc = this.readCodePoint();
						if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, true)) {
							this.raise(escStart, "Invalid Unicode escape");
						}

						word += codePointToString(esc);
						chunkStart = this.state.pos;
					} else {
						break;
					}
					first = false;
				}
				return word + this.input.slice(chunkStart, this.state.pos);
			};

			Tokenizer.prototype.readWord = function readWord() {
				var word = this.readWord1();
				var type = _types.types.name;
				if (!this.state.containsEsc && this.isKeyword(word)) {
					type = _types.keywords[word];
				}
				return this.finishToken(type, word);
			};

			Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
				if (prevType === _types.types.colon) {
					var parent = this.curContext();
					if (parent === _context.types.braceStatement || parent === _context.types.braceExpression) {
						return !parent.isExpr;
					}
				}

				if (prevType === _types.types._return) {
					return _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
				}

				if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
					return true;
				}

				if (prevType === _types.types.braceL) {
					return this.curContext() === _context.types.braceStatement;
				}

				return !this.state.exprAllowed;
			};

			Tokenizer.prototype.updateContext = function updateContext(prevType) {
				var update = void 0,
				    type = this.state.type;
				if (type.keyword && prevType === _types.types.dot) {
					this.state.exprAllowed = false;
				} else if (update = type.updateContext) {
					update.call(this, prevType);
				} else {
					this.state.exprAllowed = type.beforeExpr;
				}
			};

			return Tokenizer;
		}();

		exports.default = Tokenizer;
	}, function (module, exports, __webpack_require__) {
		(function (Buffer, global) {
			/*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
			'use strict';

			var base64 = __webpack_require__(401);
			var ieee754 = __webpack_require__(463);
			var isArray = __webpack_require__(403);

			exports.Buffer = Buffer;
			exports.SlowBuffer = SlowBuffer;
			exports.INSPECT_MAX_BYTES = 50;

			Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();

			exports.kMaxLength = kMaxLength();

			function typedArraySupport() {
				try {
					var arr = new Uint8Array(1);
					arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {
							return 42;
						} };
					return arr.foo() === 42 && typeof arr.subarray === 'function' && arr.subarray(1, 1).byteLength === 0;
				} catch (e) {
					return false;
				}
			}

			function kMaxLength() {
				return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
			}

			function createBuffer(that, length) {
				if (kMaxLength() < length) {
					throw new RangeError('Invalid typed array length');
				}
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					that = new Uint8Array(length);
					that.__proto__ = Buffer.prototype;
				} else {
					if (that === null) {
						that = new Buffer(length);
					}
					that.length = length;
				}

				return that;
			}

			function Buffer(arg, encodingOrOffset, length) {
				if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
					return new Buffer(arg, encodingOrOffset, length);
				}

				if (typeof arg === 'number') {
					if (typeof encodingOrOffset === 'string') {
						throw new Error('If encoding is specified then the first argument must be a string');
					}
					return allocUnsafe(this, arg);
				}
				return from(this, arg, encodingOrOffset, length);
			}

			Buffer.poolSize = 8192;
			Buffer._augment = function (arr) {
				arr.__proto__ = Buffer.prototype;
				return arr;
			};

			function from(that, value, encodingOrOffset, length) {
				if (typeof value === 'number') {
					throw new TypeError('"value" argument must not be a number');
				}

				if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
					return fromArrayBuffer(that, value, encodingOrOffset, length);
				}

				if (typeof value === 'string') {
					return fromString(that, value, encodingOrOffset);
				}

				return fromObject(that, value);
			}

			Buffer.from = function (value, encodingOrOffset, length) {
				return from(null, value, encodingOrOffset, length);
			};

			if (Buffer.TYPED_ARRAY_SUPPORT) {
				Buffer.prototype.__proto__ = Uint8Array.prototype;
				Buffer.__proto__ = Uint8Array;
				if (typeof Symbol !== 'undefined' && (typeof Symbol === 'function' ? Symbol.species : '@@species') && Buffer[typeof Symbol === 'function' ? Symbol.species : '@@species'] === Buffer) {
					Object.defineProperty(Buffer, typeof Symbol === 'function' ? Symbol.species : '@@species', {
						value: null,
						configurable: true
					});
				}
			}

			function assertSize(size) {
				if (typeof size !== 'number') {
					throw new TypeError('"size" argument must be a number');
				} else if (size < 0) {
					throw new RangeError('"size" argument must not be negative');
				}
			}

			function alloc(that, size, fill, encoding) {
				assertSize(size);
				if (size <= 0) {
					return createBuffer(that, size);
				}
				if (fill !== undefined) {
					return typeof encoding === 'string' ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
				}
				return createBuffer(that, size);
			}

			Buffer.alloc = function (size, fill, encoding) {
				return alloc(null, size, fill, encoding);
			};

			function allocUnsafe(that, size) {
				assertSize(size);
				that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
				if (!Buffer.TYPED_ARRAY_SUPPORT) {
					for (var i = 0; i < size; ++i) {
						that[i] = 0;
					}
				}
				return that;
			}

			Buffer.allocUnsafe = function (size) {
				return allocUnsafe(null, size);
			};

			Buffer.allocUnsafeSlow = function (size) {
				return allocUnsafe(null, size);
			};

			function fromString(that, string, encoding) {
				if (typeof encoding !== 'string' || encoding === '') {
					encoding = 'utf8';
				}

				if (!Buffer.isEncoding(encoding)) {
					throw new TypeError('"encoding" must be a valid string encoding');
				}

				var length = byteLength(string, encoding) | 0;
				that = createBuffer(that, length);

				var actual = that.write(string, encoding);

				if (actual !== length) {
					that = that.slice(0, actual);
				}

				return that;
			}

			function fromArrayLike(that, array) {
				var length = array.length < 0 ? 0 : checked(array.length) | 0;
				that = createBuffer(that, length);
				for (var i = 0; i < length; i += 1) {
					that[i] = array[i] & 255;
				}
				return that;
			}

			function fromArrayBuffer(that, array, byteOffset, length) {
				array.byteLength;

				if (byteOffset < 0 || array.byteLength < byteOffset) {
					throw new RangeError('\'offset\' is out of bounds');
				}

				if (array.byteLength < byteOffset + (length || 0)) {
					throw new RangeError('\'length\' is out of bounds');
				}

				if (byteOffset === undefined && length === undefined) {
					array = new Uint8Array(array);
				} else if (length === undefined) {
					array = new Uint8Array(array, byteOffset);
				} else {
					array = new Uint8Array(array, byteOffset, length);
				}

				if (Buffer.TYPED_ARRAY_SUPPORT) {
					that = array;
					that.__proto__ = Buffer.prototype;
				} else {
					that = fromArrayLike(that, array);
				}
				return that;
			}

			function fromObject(that, obj) {
				if (Buffer.isBuffer(obj)) {
					var len = checked(obj.length) | 0;
					that = createBuffer(that, len);

					if (that.length === 0) {
						return that;
					}

					obj.copy(that, 0, 0, len);
					return that;
				}

				if (obj) {
					if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {
						if (typeof obj.length !== 'number' || isnan(obj.length)) {
							return createBuffer(that, 0);
						}
						return fromArrayLike(that, obj);
					}

					if (obj.type === 'Buffer' && isArray(obj.data)) {
						return fromArrayLike(that, obj.data);
					}
				}

				throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');
			}

			function checked(length) {
				if (length >= kMaxLength()) {
					throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
				}
				return length | 0;
			}

			function SlowBuffer(length) {
				if (+length != length) {
					length = 0;
				}
				return Buffer.alloc(+length);
			}

			Buffer.isBuffer = function isBuffer(b) {
				return !!(b != null && b._isBuffer);
			};

			Buffer.compare = function compare(a, b) {
				if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
					throw new TypeError('Arguments must be Buffers');
				}

				if (a === b) return 0;

				var x = a.length;
				var y = b.length;

				for (var i = 0, len = Math.min(x, y); i < len; ++i) {
					if (a[i] !== b[i]) {
						x = a[i];
						y = b[i];
						break;
					}
				}

				if (x < y) return -1;
				if (y < x) return 1;
				return 0;
			};

			Buffer.isEncoding = function isEncoding(encoding) {
				switch (String(encoding).toLowerCase()) {
					case 'hex':
					case 'utf8':
					case 'utf-8':
					case 'ascii':
					case 'latin1':
					case 'binary':
					case 'base64':
					case 'ucs2':
					case 'ucs-2':
					case 'utf16le':
					case 'utf-16le':
						return true;
					default:
						return false;
				}
			};

			Buffer.concat = function concat(list, length) {
				if (!isArray(list)) {
					throw new TypeError('"list" argument must be an Array of Buffers');
				}

				if (list.length === 0) {
					return Buffer.alloc(0);
				}

				var i;
				if (length === undefined) {
					length = 0;
					for (i = 0; i < list.length; ++i) {
						length += list[i].length;
					}
				}

				var buffer = Buffer.allocUnsafe(length);
				var pos = 0;
				for (i = 0; i < list.length; ++i) {
					var buf = list[i];
					if (!Buffer.isBuffer(buf)) {
						throw new TypeError('"list" argument must be an Array of Buffers');
					}
					buf.copy(buffer, pos);
					pos += buf.length;
				}
				return buffer;
			};

			function byteLength(string, encoding) {
				if (Buffer.isBuffer(string)) {
					return string.length;
				}
				if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
					return string.byteLength;
				}
				if (typeof string !== 'string') {
					string = '' + string;
				}

				var len = string.length;
				if (len === 0) return 0;

				var loweredCase = false;
				for (;;) {
					switch (encoding) {
						case 'ascii':
						case 'latin1':
						case 'binary':
							return len;
						case 'utf8':
						case 'utf-8':
						case undefined:
							return utf8ToBytes(string).length;
						case 'ucs2':
						case 'ucs-2':
						case 'utf16le':
						case 'utf-16le':
							return len * 2;
						case 'hex':
							return len >>> 1;
						case 'base64':
							return base64ToBytes(string).length;
						default:
							if (loweredCase) return utf8ToBytes(string).length;
							encoding = ('' + encoding).toLowerCase();
							loweredCase = true;
					}
				}
			}
			Buffer.byteLength = byteLength;

			function slowToString(encoding, start, end) {
				var loweredCase = false;

				if (start === undefined || start < 0) {
					start = 0;
				}

				if (start > this.length) {
					return '';
				}

				if (end === undefined || end > this.length) {
					end = this.length;
				}

				if (end <= 0) {
					return '';
				}

				end >>>= 0;
				start >>>= 0;

				if (end <= start) {
					return '';
				}

				if (!encoding) encoding = 'utf8';

				while (true) {
					switch (encoding) {
						case 'hex':
							return hexSlice(this, start, end);

						case 'utf8':
						case 'utf-8':
							return utf8Slice(this, start, end);

						case 'ascii':
							return asciiSlice(this, start, end);

						case 'latin1':
						case 'binary':
							return latin1Slice(this, start, end);

						case 'base64':
							return base64Slice(this, start, end);

						case 'ucs2':
						case 'ucs-2':
						case 'utf16le':
						case 'utf-16le':
							return utf16leSlice(this, start, end);

						default:
							if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
							encoding = (encoding + '').toLowerCase();
							loweredCase = true;
					}
				}
			}

			Buffer.prototype._isBuffer = true;

			function swap(b, n, m) {
				var i = b[n];
				b[n] = b[m];
				b[m] = i;
			}

			Buffer.prototype.swap16 = function swap16() {
				var len = this.length;
				if (len % 2 !== 0) {
					throw new RangeError('Buffer size must be a multiple of 16-bits');
				}
				for (var i = 0; i < len; i += 2) {
					swap(this, i, i + 1);
				}
				return this;
			};

			Buffer.prototype.swap32 = function swap32() {
				var len = this.length;
				if (len % 4 !== 0) {
					throw new RangeError('Buffer size must be a multiple of 32-bits');
				}
				for (var i = 0; i < len; i += 4) {
					swap(this, i, i + 3);
					swap(this, i + 1, i + 2);
				}
				return this;
			};

			Buffer.prototype.swap64 = function swap64() {
				var len = this.length;
				if (len % 8 !== 0) {
					throw new RangeError('Buffer size must be a multiple of 64-bits');
				}
				for (var i = 0; i < len; i += 8) {
					swap(this, i, i + 7);
					swap(this, i + 1, i + 6);
					swap(this, i + 2, i + 5);
					swap(this, i + 3, i + 4);
				}
				return this;
			};

			Buffer.prototype.toString = function toString() {
				var length = this.length | 0;
				if (length === 0) return '';
				if (arguments.length === 0) return utf8Slice(this, 0, length);
				return slowToString.apply(this, arguments);
			};

			Buffer.prototype.equals = function equals(b) {
				if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
				if (this === b) return true;
				return Buffer.compare(this, b) === 0;
			};

			Buffer.prototype.inspect = function inspect() {
				var str = '';
				var max = exports.INSPECT_MAX_BYTES;
				if (this.length > 0) {
					str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
					if (this.length > max) str += ' ... ';
				}
				return '<Buffer ' + str + '>';
			};

			Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
				if (!Buffer.isBuffer(target)) {
					throw new TypeError('Argument must be a Buffer');
				}

				if (start === undefined) {
					start = 0;
				}
				if (end === undefined) {
					end = target ? target.length : 0;
				}
				if (thisStart === undefined) {
					thisStart = 0;
				}
				if (thisEnd === undefined) {
					thisEnd = this.length;
				}

				if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
					throw new RangeError('out of range index');
				}

				if (thisStart >= thisEnd && start >= end) {
					return 0;
				}
				if (thisStart >= thisEnd) {
					return -1;
				}
				if (start >= end) {
					return 1;
				}

				start >>>= 0;
				end >>>= 0;
				thisStart >>>= 0;
				thisEnd >>>= 0;

				if (this === target) return 0;

				var x = thisEnd - thisStart;
				var y = end - start;
				var len = Math.min(x, y);

				var thisCopy = this.slice(thisStart, thisEnd);
				var targetCopy = target.slice(start, end);

				for (var i = 0; i < len; ++i) {
					if (thisCopy[i] !== targetCopy[i]) {
						x = thisCopy[i];
						y = targetCopy[i];
						break;
					}
				}

				if (x < y) return -1;
				if (y < x) return 1;
				return 0;
			};

			function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
				if (buffer.length === 0) return -1;

				if (typeof byteOffset === 'string') {
					encoding = byteOffset;
					byteOffset = 0;
				} else if (byteOffset > 0x7fffffff) {
					byteOffset = 0x7fffffff;
				} else if (byteOffset < -0x80000000) {
					byteOffset = -0x80000000;
				}
				byteOffset = +byteOffset;
				if (isNaN(byteOffset)) {
					byteOffset = dir ? 0 : buffer.length - 1;
				}

				if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
				if (byteOffset >= buffer.length) {
					if (dir) return -1;else byteOffset = buffer.length - 1;
				} else if (byteOffset < 0) {
					if (dir) byteOffset = 0;else return -1;
				}

				if (typeof val === 'string') {
					val = Buffer.from(val, encoding);
				}

				if (Buffer.isBuffer(val)) {
					if (val.length === 0) {
						return -1;
					}
					return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
				} else if (typeof val === 'number') {
					val = val & 0xFF;
					if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === 'function') {
						if (dir) {
							return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
						} else {
							return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
						}
					}
					return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
				}

				throw new TypeError('val must be string, number or Buffer');
			}

			function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
				var indexSize = 1;
				var arrLength = arr.length;
				var valLength = val.length;

				if (encoding !== undefined) {
					encoding = String(encoding).toLowerCase();
					if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
						if (arr.length < 2 || val.length < 2) {
							return -1;
						}
						indexSize = 2;
						arrLength /= 2;
						valLength /= 2;
						byteOffset /= 2;
					}
				}

				function read(buf, i) {
					if (indexSize === 1) {
						return buf[i];
					} else {
						return buf.readUInt16BE(i * indexSize);
					}
				}

				var i;
				if (dir) {
					var foundIndex = -1;
					for (i = byteOffset; i < arrLength; i++) {
						if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
							if (foundIndex === -1) foundIndex = i;
							if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
						} else {
							if (foundIndex !== -1) i -= i - foundIndex;
							foundIndex = -1;
						}
					}
				} else {
					if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
					for (i = byteOffset; i >= 0; i--) {
						var found = true;
						for (var j = 0; j < valLength; j++) {
							if (read(arr, i + j) !== read(val, j)) {
								found = false;
								break;
							}
						}
						if (found) return i;
					}
				}

				return -1;
			}

			Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
				return this.indexOf(val, byteOffset, encoding) !== -1;
			};

			Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
				return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
			};

			Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
				return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
			};

			function hexWrite(buf, string, offset, length) {
				offset = Number(offset) || 0;
				var remaining = buf.length - offset;
				if (!length) {
					length = remaining;
				} else {
					length = Number(length);
					if (length > remaining) {
						length = remaining;
					}
				}

				var strLen = string.length;
				if (strLen % 2 !== 0) throw new TypeError('Invalid hex string');

				if (length > strLen / 2) {
					length = strLen / 2;
				}
				for (var i = 0; i < length; ++i) {
					var parsed = parseInt(string.substr(i * 2, 2), 16);
					if (isNaN(parsed)) return i;
					buf[offset + i] = parsed;
				}
				return i;
			}

			function utf8Write(buf, string, offset, length) {
				return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
			}

			function asciiWrite(buf, string, offset, length) {
				return blitBuffer(asciiToBytes(string), buf, offset, length);
			}

			function latin1Write(buf, string, offset, length) {
				return asciiWrite(buf, string, offset, length);
			}

			function base64Write(buf, string, offset, length) {
				return blitBuffer(base64ToBytes(string), buf, offset, length);
			}

			function ucs2Write(buf, string, offset, length) {
				return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
			}

			Buffer.prototype.write = function write(string, offset, length, encoding) {
				if (offset === undefined) {
					encoding = 'utf8';
					length = this.length;
					offset = 0;
				} else if (length === undefined && typeof offset === 'string') {
					encoding = offset;
					length = this.length;
					offset = 0;
				} else if (isFinite(offset)) {
					offset = offset | 0;
					if (isFinite(length)) {
						length = length | 0;
						if (encoding === undefined) encoding = 'utf8';
					} else {
						encoding = length;
						length = undefined;
					}
				} else {
					throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
				}

				var remaining = this.length - offset;
				if (length === undefined || length > remaining) length = remaining;

				if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
					throw new RangeError('Attempt to write outside buffer bounds');
				}

				if (!encoding) encoding = 'utf8';

				var loweredCase = false;
				for (;;) {
					switch (encoding) {
						case 'hex':
							return hexWrite(this, string, offset, length);

						case 'utf8':
						case 'utf-8':
							return utf8Write(this, string, offset, length);

						case 'ascii':
							return asciiWrite(this, string, offset, length);

						case 'latin1':
						case 'binary':
							return latin1Write(this, string, offset, length);

						case 'base64':
							return base64Write(this, string, offset, length);

						case 'ucs2':
						case 'ucs-2':
						case 'utf16le':
						case 'utf-16le':
							return ucs2Write(this, string, offset, length);

						default:
							if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
							encoding = ('' + encoding).toLowerCase();
							loweredCase = true;
					}
				}
			};

			Buffer.prototype.toJSON = function toJSON() {
				return {
					type: 'Buffer',
					data: Array.prototype.slice.call(this._arr || this, 0)
				};
			};

			function base64Slice(buf, start, end) {
				if (start === 0 && end === buf.length) {
					return base64.fromByteArray(buf);
				} else {
					return base64.fromByteArray(buf.slice(start, end));
				}
			}

			function utf8Slice(buf, start, end) {
				end = Math.min(buf.length, end);
				var res = [];

				var i = start;
				while (i < end) {
					var firstByte = buf[i];
					var codePoint = null;
					var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;

					if (i + bytesPerSequence <= end) {
						var secondByte, thirdByte, fourthByte, tempCodePoint;

						switch (bytesPerSequence) {
							case 1:
								if (firstByte < 0x80) {
									codePoint = firstByte;
								}
								break;
							case 2:
								secondByte = buf[i + 1];
								if ((secondByte & 0xC0) === 0x80) {
									tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
									if (tempCodePoint > 0x7F) {
										codePoint = tempCodePoint;
									}
								}
								break;
							case 3:
								secondByte = buf[i + 1];
								thirdByte = buf[i + 2];
								if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
									tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
									if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
										codePoint = tempCodePoint;
									}
								}
								break;
							case 4:
								secondByte = buf[i + 1];
								thirdByte = buf[i + 2];
								fourthByte = buf[i + 3];
								if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
									tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
									if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
										codePoint = tempCodePoint;
									}
								}
						}
					}

					if (codePoint === null) {
						codePoint = 0xFFFD;
						bytesPerSequence = 1;
					} else if (codePoint > 0xFFFF) {
						codePoint -= 0x10000;
						res.push(codePoint >>> 10 & 0x3FF | 0xD800);
						codePoint = 0xDC00 | codePoint & 0x3FF;
					}

					res.push(codePoint);
					i += bytesPerSequence;
				}

				return decodeCodePointsArray(res);
			}

			var MAX_ARGUMENTS_LENGTH = 0x1000;

			function decodeCodePointsArray(codePoints) {
				var len = codePoints.length;
				if (len <= MAX_ARGUMENTS_LENGTH) {
					return String.fromCharCode.apply(String, codePoints);
				}

				var res = '';
				var i = 0;
				while (i < len) {
					res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
				}
				return res;
			}

			function asciiSlice(buf, start, end) {
				var ret = '';
				end = Math.min(buf.length, end);

				for (var i = start; i < end; ++i) {
					ret += String.fromCharCode(buf[i] & 0x7F);
				}
				return ret;
			}

			function latin1Slice(buf, start, end) {
				var ret = '';
				end = Math.min(buf.length, end);

				for (var i = start; i < end; ++i) {
					ret += String.fromCharCode(buf[i]);
				}
				return ret;
			}

			function hexSlice(buf, start, end) {
				var len = buf.length;

				if (!start || start < 0) start = 0;
				if (!end || end < 0 || end > len) end = len;

				var out = '';
				for (var i = start; i < end; ++i) {
					out += toHex(buf[i]);
				}
				return out;
			}

			function utf16leSlice(buf, start, end) {
				var bytes = buf.slice(start, end);
				var res = '';
				for (var i = 0; i < bytes.length; i += 2) {
					res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
				}
				return res;
			}

			Buffer.prototype.slice = function slice(start, end) {
				var len = this.length;
				start = ~~start;
				end = end === undefined ? len : ~~end;

				if (start < 0) {
					start += len;
					if (start < 0) start = 0;
				} else if (start > len) {
					start = len;
				}

				if (end < 0) {
					end += len;
					if (end < 0) end = 0;
				} else if (end > len) {
					end = len;
				}

				if (end < start) end = start;

				var newBuf;
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					newBuf = this.subarray(start, end);
					newBuf.__proto__ = Buffer.prototype;
				} else {
					var sliceLen = end - start;
					newBuf = new Buffer(sliceLen, undefined);
					for (var i = 0; i < sliceLen; ++i) {
						newBuf[i] = this[i + start];
					}
				}

				return newBuf;
			};

			function checkOffset(offset, ext, length) {
				if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
				if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
			}

			Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) checkOffset(offset, byteLength, this.length);

				var val = this[offset];
				var mul = 1;
				var i = 0;
				while (++i < byteLength && (mul *= 0x100)) {
					val += this[offset + i] * mul;
				}

				return val;
			};

			Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) {
					checkOffset(offset, byteLength, this.length);
				}

				var val = this[offset + --byteLength];
				var mul = 1;
				while (byteLength > 0 && (mul *= 0x100)) {
					val += this[offset + --byteLength] * mul;
				}

				return val;
			};

			Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 1, this.length);
				return this[offset];
			};

			Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				return this[offset] | this[offset + 1] << 8;
			};

			Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				return this[offset] << 8 | this[offset + 1];
			};

			Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);

				return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
			};

			Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);

				return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
			};

			Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) checkOffset(offset, byteLength, this.length);

				var val = this[offset];
				var mul = 1;
				var i = 0;
				while (++i < byteLength && (mul *= 0x100)) {
					val += this[offset + i] * mul;
				}
				mul *= 0x80;

				if (val >= mul) val -= Math.pow(2, 8 * byteLength);

				return val;
			};

			Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) checkOffset(offset, byteLength, this.length);

				var i = byteLength;
				var mul = 1;
				var val = this[offset + --i];
				while (i > 0 && (mul *= 0x100)) {
					val += this[offset + --i] * mul;
				}
				mul *= 0x80;

				if (val >= mul) val -= Math.pow(2, 8 * byteLength);

				return val;
			};

			Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 1, this.length);
				if (!(this[offset] & 0x80)) return this[offset];
				return (0xff - this[offset] + 1) * -1;
			};

			Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				var val = this[offset] | this[offset + 1] << 8;
				return val & 0x8000 ? val | 0xFFFF0000 : val;
			};

			Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				var val = this[offset + 1] | this[offset] << 8;
				return val & 0x8000 ? val | 0xFFFF0000 : val;
			};

			Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);

				return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
			};

			Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);

				return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
			};

			Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return ieee754.read(this, offset, true, 23, 4);
			};

			Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return ieee754.read(this, offset, false, 23, 4);
			};

			Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 8, this.length);
				return ieee754.read(this, offset, true, 52, 8);
			};

			Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 8, this.length);
				return ieee754.read(this, offset, false, 52, 8);
			};

			function checkInt(buf, value, offset, ext, max, min) {
				if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
				if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
				if (offset + ext > buf.length) throw new RangeError('Index out of range');
			}

			Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
				value = +value;
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) {
					var maxBytes = Math.pow(2, 8 * byteLength) - 1;
					checkInt(this, value, offset, byteLength, maxBytes, 0);
				}

				var mul = 1;
				var i = 0;
				this[offset] = value & 0xFF;
				while (++i < byteLength && (mul *= 0x100)) {
					this[offset + i] = value / mul & 0xFF;
				}

				return offset + byteLength;
			};

			Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
				value = +value;
				offset = offset | 0;
				byteLength = byteLength | 0;
				if (!noAssert) {
					var maxBytes = Math.pow(2, 8 * byteLength) - 1;
					checkInt(this, value, offset, byteLength, maxBytes, 0);
				}

				var i = byteLength - 1;
				var mul = 1;
				this[offset + i] = value & 0xFF;
				while (--i >= 0 && (mul *= 0x100)) {
					this[offset + i] = value / mul & 0xFF;
				}

				return offset + byteLength;
			};

			Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
				if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
				this[offset] = value & 0xff;
				return offset + 1;
			};

			function objectWriteUInt16(buf, value, offset, littleEndian) {
				if (value < 0) value = 0xffff + value + 1;
				for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
					buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
				}
			}

			Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 0xff;
					this[offset + 1] = value >>> 8;
				} else {
					objectWriteUInt16(this, value, offset, true);
				}
				return offset + 2;
			};

			Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 8;
					this[offset + 1] = value & 0xff;
				} else {
					objectWriteUInt16(this, value, offset, false);
				}
				return offset + 2;
			};

			function objectWriteUInt32(buf, value, offset, littleEndian) {
				if (value < 0) value = 0xffffffff + value + 1;
				for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
					buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
				}
			}

			Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset + 3] = value >>> 24;
					this[offset + 2] = value >>> 16;
					this[offset + 1] = value >>> 8;
					this[offset] = value & 0xff;
				} else {
					objectWriteUInt32(this, value, offset, true);
				}
				return offset + 4;
			};

			Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 24;
					this[offset + 1] = value >>> 16;
					this[offset + 2] = value >>> 8;
					this[offset + 3] = value & 0xff;
				} else {
					objectWriteUInt32(this, value, offset, false);
				}
				return offset + 4;
			};

			Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) {
					var limit = Math.pow(2, 8 * byteLength - 1);

					checkInt(this, value, offset, byteLength, limit - 1, -limit);
				}

				var i = 0;
				var mul = 1;
				var sub = 0;
				this[offset] = value & 0xFF;
				while (++i < byteLength && (mul *= 0x100)) {
					if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
						sub = 1;
					}
					this[offset + i] = (value / mul >> 0) - sub & 0xFF;
				}

				return offset + byteLength;
			};

			Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) {
					var limit = Math.pow(2, 8 * byteLength - 1);

					checkInt(this, value, offset, byteLength, limit - 1, -limit);
				}

				var i = byteLength - 1;
				var mul = 1;
				var sub = 0;
				this[offset + i] = value & 0xFF;
				while (--i >= 0 && (mul *= 0x100)) {
					if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
						sub = 1;
					}
					this[offset + i] = (value / mul >> 0) - sub & 0xFF;
				}

				return offset + byteLength;
			};

			Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
				if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
				if (value < 0) value = 0xff + value + 1;
				this[offset] = value & 0xff;
				return offset + 1;
			};

			Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 0xff;
					this[offset + 1] = value >>> 8;
				} else {
					objectWriteUInt16(this, value, offset, true);
				}
				return offset + 2;
			};

			Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 8;
					this[offset + 1] = value & 0xff;
				} else {
					objectWriteUInt16(this, value, offset, false);
				}
				return offset + 2;
			};

			Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 0xff;
					this[offset + 1] = value >>> 8;
					this[offset + 2] = value >>> 16;
					this[offset + 3] = value >>> 24;
				} else {
					objectWriteUInt32(this, value, offset, true);
				}
				return offset + 4;
			};

			Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
				if (value < 0) value = 0xffffffff + value + 1;
				if (Buffer.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 24;
					this[offset + 1] = value >>> 16;
					this[offset + 2] = value >>> 8;
					this[offset + 3] = value & 0xff;
				} else {
					objectWriteUInt32(this, value, offset, false);
				}
				return offset + 4;
			};

			function checkIEEE754(buf, value, offset, ext, max, min) {
				if (offset + ext > buf.length) throw new RangeError('Index out of range');
				if (offset < 0) throw new RangeError('Index out of range');
			}

			function writeFloat(buf, value, offset, littleEndian, noAssert) {
				if (!noAssert) {
					checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
				}
				ieee754.write(buf, value, offset, littleEndian, 23, 4);
				return offset + 4;
			}

			Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
				return writeFloat(this, value, offset, true, noAssert);
			};

			Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
				return writeFloat(this, value, offset, false, noAssert);
			};

			function writeDouble(buf, value, offset, littleEndian, noAssert) {
				if (!noAssert) {
					checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
				}
				ieee754.write(buf, value, offset, littleEndian, 52, 8);
				return offset + 8;
			}

			Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
				return writeDouble(this, value, offset, true, noAssert);
			};

			Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
				return writeDouble(this, value, offset, false, noAssert);
			};

			Buffer.prototype.copy = function copy(target, targetStart, start, end) {
				if (!start) start = 0;
				if (!end && end !== 0) end = this.length;
				if (targetStart >= target.length) targetStart = target.length;
				if (!targetStart) targetStart = 0;
				if (end > 0 && end < start) end = start;

				if (end === start) return 0;
				if (target.length === 0 || this.length === 0) return 0;

				if (targetStart < 0) {
					throw new RangeError('targetStart out of bounds');
				}
				if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');
				if (end < 0) throw new RangeError('sourceEnd out of bounds');

				if (end > this.length) end = this.length;
				if (target.length - targetStart < end - start) {
					end = target.length - targetStart + start;
				}

				var len = end - start;
				var i;

				if (this === target && start < targetStart && targetStart < end) {
					for (i = len - 1; i >= 0; --i) {
						target[i + targetStart] = this[i + start];
					}
				} else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
					for (i = 0; i < len; ++i) {
						target[i + targetStart] = this[i + start];
					}
				} else {
					Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
				}

				return len;
			};

			Buffer.prototype.fill = function fill(val, start, end, encoding) {
				if (typeof val === 'string') {
					if (typeof start === 'string') {
						encoding = start;
						start = 0;
						end = this.length;
					} else if (typeof end === 'string') {
						encoding = end;
						end = this.length;
					}
					if (val.length === 1) {
						var code = val.charCodeAt(0);
						if (code < 256) {
							val = code;
						}
					}
					if (encoding !== undefined && typeof encoding !== 'string') {
						throw new TypeError('encoding must be a string');
					}
					if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
						throw new TypeError('Unknown encoding: ' + encoding);
					}
				} else if (typeof val === 'number') {
					val = val & 255;
				}

				if (start < 0 || this.length < start || this.length < end) {
					throw new RangeError('Out of range index');
				}

				if (end <= start) {
					return this;
				}

				start = start >>> 0;
				end = end === undefined ? this.length : end >>> 0;

				if (!val) val = 0;

				var i;
				if (typeof val === 'number') {
					for (i = start; i < end; ++i) {
						this[i] = val;
					}
				} else {
					var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
					var len = bytes.length;
					for (i = 0; i < end - start; ++i) {
						this[i + start] = bytes[i % len];
					}
				}

				return this;
			};

			var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

			function base64clean(str) {
				str = stringtrim(str).replace(INVALID_BASE64_RE, '');

				if (str.length < 2) return '';

				while (str.length % 4 !== 0) {
					str = str + '=';
				}
				return str;
			}

			function stringtrim(str) {
				if (str.trim) return str.trim();
				return str.replace(/^\s+|\s+$/g, '');
			}

			function toHex(n) {
				if (n < 16) return '0' + n.toString(16);
				return n.toString(16);
			}

			function utf8ToBytes(string, units) {
				units = units || Infinity;
				var codePoint;
				var length = string.length;
				var leadSurrogate = null;
				var bytes = [];

				for (var i = 0; i < length; ++i) {
					codePoint = string.charCodeAt(i);

					if (codePoint > 0xD7FF && codePoint < 0xE000) {
						if (!leadSurrogate) {
							if (codePoint > 0xDBFF) {
								if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
								continue;
							} else if (i + 1 === length) {
								if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
								continue;
							}

							leadSurrogate = codePoint;

							continue;
						}

						if (codePoint < 0xDC00) {
							if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
							leadSurrogate = codePoint;
							continue;
						}

						codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
					} else if (leadSurrogate) {
						if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
					}

					leadSurrogate = null;

					if (codePoint < 0x80) {
						if ((units -= 1) < 0) break;
						bytes.push(codePoint);
					} else if (codePoint < 0x800) {
						if ((units -= 2) < 0) break;
						bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
					} else if (codePoint < 0x10000) {
						if ((units -= 3) < 0) break;
						bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
					} else if (codePoint < 0x110000) {
						if ((units -= 4) < 0) break;
						bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
					} else {
						throw new Error('Invalid code point');
					}
				}

				return bytes;
			}

			function asciiToBytes(str) {
				var byteArray = [];
				for (var i = 0; i < str.length; ++i) {
					byteArray.push(str.charCodeAt(i) & 0xFF);
				}
				return byteArray;
			}

			function utf16leToBytes(str, units) {
				var c, hi, lo;
				var byteArray = [];
				for (var i = 0; i < str.length; ++i) {
					if ((units -= 2) < 0) break;

					c = str.charCodeAt(i);
					hi = c >> 8;
					lo = c % 256;
					byteArray.push(lo);
					byteArray.push(hi);
				}

				return byteArray;
			}

			function base64ToBytes(str) {
				return base64.toByteArray(base64clean(str));
			}

			function blitBuffer(src, dst, offset, length) {
				for (var i = 0; i < length; ++i) {
					if (i + offset >= dst.length || i >= src.length) break;
					dst[i + offset] = src[i];
				}
				return i;
			}

			function isnan(val) {
				return val !== val;
			}
		}).call(exports, __webpack_require__(227).Buffer, function () {
			return this;
		}());
	}, function (module, exports, __webpack_require__) {
		var cof = __webpack_require__(148),
		    TAG = __webpack_require__(11)('toStringTag'),
		    ARG = cof(function () {
			return arguments;
		}()) == 'Arguments';

		var tryGet = function tryGet(it, key) {
			try {
				return it[key];
			} catch (e) {}
		};

		module.exports = function (it) {
			var O, T, B;
			return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var redefineAll = __webpack_require__(155),
		    getWeak = __webpack_require__(69).getWeak,
		    anObject = __webpack_require__(18),
		    isObject = __webpack_require__(21),
		    anInstance = __webpack_require__(146),
		    forOf = __webpack_require__(89),
		    createArrayMethod = __webpack_require__(147),
		    $has = __webpack_require__(30),
		    arrayFind = createArrayMethod(5),
		    arrayFindIndex = createArrayMethod(6),
		    id = 0;

		var uncaughtFrozenStore = function uncaughtFrozenStore(that) {
			return that._l || (that._l = new UncaughtFrozenStore());
		};
		var UncaughtFrozenStore = function UncaughtFrozenStore() {
			this.a = [];
		};
		var findUncaughtFrozen = function findUncaughtFrozen(store, key) {
			return arrayFind(store.a, function (it) {
				return it[0] === key;
			});
		};
		UncaughtFrozenStore.prototype = {
			get: function get(key) {
				var entry = findUncaughtFrozen(this, key);
				if (entry) return entry[1];
			},
			has: function has(key) {
				return !!findUncaughtFrozen(this, key);
			},
			set: function set(key, value) {
				var entry = findUncaughtFrozen(this, key);
				if (entry) entry[1] = value;else this.a.push([key, value]);
			},
			'delete': function _delete(key) {
				var index = arrayFindIndex(this.a, function (it) {
					return it[0] === key;
				});
				if (~index) this.a.splice(index, 1);
				return !!~index;
			}
		};

		module.exports = {
			getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
				var C = wrapper(function (that, iterable) {
					anInstance(that, C, NAME, '_i');
					that._i = id++;
					that._l = undefined;
					if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
				});
				redefineAll(C.prototype, {
					'delete': function _delete(key) {
						if (!isObject(key)) return false;
						var data = getWeak(key);
						if (data === true) return uncaughtFrozenStore(this)['delete'](key);
						return data && $has(data, this._i) && delete data[this._i];
					},

					has: function has(key) {
						if (!isObject(key)) return false;
						var data = getWeak(key);
						if (data === true) return uncaughtFrozenStore(this).has(key);
						return data && $has(data, this._i);
					}
				});
				return C;
			},
			def: function def(that, key, value) {
				var data = getWeak(anObject(key), true);
				if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
				return that;
			},
			ufstore: uncaughtFrozenStore
		};
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(21),
		    document = __webpack_require__(15).document,
		    is = isObject(document) && isObject(document.createElement);
		module.exports = function (it) {
			return is ? document.createElement(it) : {};
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = !__webpack_require__(19) && !__webpack_require__(34)(function () {
			return Object.defineProperty(__webpack_require__(230)('div'), 'a', { get: function get() {
					return 7;
				} }).a != 7;
		});
	}, function (module, exports, __webpack_require__) {
		var cof = __webpack_require__(148);
		module.exports = Array.isArray || function isArray(arg) {
			return cof(arg) == 'Array';
		};
	}, function (module, exports) {

		module.exports = function (done, value) {
			return { value: value, done: !!done };
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var getKeys = __webpack_require__(41),
		    gOPS = __webpack_require__(154),
		    pIE = __webpack_require__(91),
		    toObject = __webpack_require__(94),
		    IObject = __webpack_require__(151),
		    $assign = Object.assign;

		module.exports = !$assign || __webpack_require__(34)(function () {
			var A = {},
			    B = {},
			    S = Symbol(),
			    K = 'abcdefghijklmnopqrst';
			A[S] = 7;
			K.split('').forEach(function (k) {
				B[k] = k;
			});
			return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
		}) ? function assign(target, source) {
			var T = toObject(target),
			    aLen = arguments.length,
			    index = 1,
			    getSymbols = gOPS.f,
			    isEnum = pIE.f;
			while (aLen > index) {
				var S = IObject(arguments[index++]),
				    keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
				    length = keys.length,
				    j = 0,
				    key;
				while (length > j) {
					if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
				}
			}return T;
		} : $assign;
	}, function (module, exports, __webpack_require__) {

		var pIE = __webpack_require__(91),
		    createDesc = __webpack_require__(92),
		    toIObject = __webpack_require__(35),
		    toPrimitive = __webpack_require__(161),
		    has = __webpack_require__(30),
		    IE8_DOM_DEFINE = __webpack_require__(231),
		    gOPD = Object.getOwnPropertyDescriptor;

		exports.f = __webpack_require__(19) ? gOPD : function getOwnPropertyDescriptor(O, P) {
			O = toIObject(O);
			P = toPrimitive(P, true);
			if (IE8_DOM_DEFINE) try {
				return gOPD(O, P);
			} catch (e) {}
			if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
		};
	}, function (module, exports, __webpack_require__) {
		var $keys = __webpack_require__(237),
		    hiddenKeys = __webpack_require__(150).concat('length', 'prototype');

		exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
			return $keys(O, hiddenKeys);
		};
	}, function (module, exports, __webpack_require__) {

		var has = __webpack_require__(30),
		    toIObject = __webpack_require__(35),
		    arrayIndexOf = __webpack_require__(424)(false),
		    IE_PROTO = __webpack_require__(157)('IE_PROTO');

		module.exports = function (object, names) {
			var O = toIObject(object),
			    i = 0,
			    result = [],
			    key;
			for (key in O) {
				if (key != IE_PROTO) has(O, key) && result.push(key);
			}
			while (names.length > i) {
				if (has(O, key = names[i++])) {
					~arrayIndexOf(result, key) || result.push(key);
				}
			}return result;
		};
	}, function (module, exports, __webpack_require__) {

		var classof = __webpack_require__(228),
		    ITERATOR = __webpack_require__(11)('iterator'),
		    Iterators = __webpack_require__(68);
		module.exports = __webpack_require__(4).getIteratorMethod = function (it) {
			if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
		};
	}, function (module, exports, __webpack_require__) {

		exports = module.exports = __webpack_require__(456);
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = 'undefined' != typeof chrome && 'undefined' != typeof chrome.storage ? chrome.storage.local : localstorage();

		exports.colors = ['lightseagreen', 'forestgreen', 'goldenrod', 'dodgerblue', 'darkorchid', 'crimson'];

		function useColors() {
			return 'WebkitAppearance' in document.documentElement.style || window.console && (console.firebug || console.exception && console.table) || navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31;
		}

		exports.formatters.j = function (v) {
			return JSON.stringify(v);
		};

		function formatArgs() {
			var args = arguments;
			var useColors = this.useColors;

			args[0] = (useColors ? '%c' : '') + this.namespace + (useColors ? ' %c' : ' ') + args[0] + (useColors ? '%c ' : ' ') + '+' + exports.humanize(this.diff);

			if (!useColors) return args;

			var c = 'color: ' + this.color;
			args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

			var index = 0;
			var lastC = 0;
			args[0].replace(/%[a-z%]/g, function (match) {
				if ('%%' === match) return;
				index++;
				if ('%c' === match) {
					lastC = index;
				}
			});

			args.splice(lastC, 0, c);
			return args;
		}

		function log() {
			return 'object' === typeof console && console.log && Function.prototype.apply.call(console.log, console, arguments);
		}

		function save(namespaces) {
			try {
				if (null == namespaces) {
					exports.storage.removeItem('debug');
				} else {
					exports.storage.debug = namespaces;
				}
			} catch (e) {}
		}

		function load() {
			var r;
			try {
				r = exports.storage.debug;
			} catch (e) {}
			return r;
		}

		exports.enable(load());

		function localstorage() {
			try {
				return window.localStorage;
			} catch (e) {}
		}
	}, function (module, exports) {

		(function () {
			'use strict';

			var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

			ES5Regex = {
				NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,

				NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
			};

			ES6Regex = {
				NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

				NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
			};

			function isDecimalDigit(ch) {
				return 0x30 <= ch && ch <= 0x39;
			}

			function isHexDigit(ch) {
				return 0x30 <= ch && ch <= 0x39 || 0x61 <= ch && ch <= 0x66 || 0x41 <= ch && ch <= 0x46;
			}

			function isOctalDigit(ch) {
				return ch >= 0x30 && ch <= 0x37;
			}

			NON_ASCII_WHITESPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];

			function isWhiteSpace(ch) {
				return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
			}

			function isLineTerminator(ch) {
				return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
			}

			function fromCodePoint(cp) {
				if (cp <= 0xFFFF) {
					return String.fromCharCode(cp);
				}
				var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
				var cu2 = String.fromCharCode((cp - 0x10000) % 0x400 + 0xDC00);
				return cu1 + cu2;
			}

			IDENTIFIER_START = new Array(0x80);
			for (ch = 0; ch < 0x80; ++ch) {
				IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch === 0x24 || ch === 0x5F;
			}

			IDENTIFIER_PART = new Array(0x80);
			for (ch = 0; ch < 0x80; ++ch) {
				IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch >= 0x30 && ch <= 0x39 || ch === 0x24 || ch === 0x5F;
			}

			function isIdentifierStartES5(ch) {
				return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
			}

			function isIdentifierPartES5(ch) {
				return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
			}

			function isIdentifierStartES6(ch) {
				return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
			}

			function isIdentifierPartES6(ch) {
				return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
			}

			module.exports = {
				isDecimalDigit: isDecimalDigit,
				isHexDigit: isHexDigit,
				isOctalDigit: isOctalDigit,
				isWhiteSpace: isWhiteSpace,
				isLineTerminator: isLineTerminator,
				isIdentifierStartES5: isIdentifierStartES5,
				isIdentifierPartES5: isIdentifierPartES5,
				isIdentifierStartES6: isIdentifierStartES6,
				isIdentifierPartES6: isIdentifierPartES6
			};
		})();
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36),
		    root = __webpack_require__(23);

		var Set = getNative(root, 'Set');

		module.exports = Set;
	}, function (module, exports, __webpack_require__) {

		var MapCache = __webpack_require__(168),
		    setCacheAdd = __webpack_require__(564),
		    setCacheHas = __webpack_require__(565);

		function SetCache(values) {
			var index = -1,
			    length = values ? values.length : 0;

			this.__data__ = new MapCache();
			while (++index < length) {
				this.add(values[index]);
			}
		}

		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		SetCache.prototype.has = setCacheHas;

		module.exports = SetCache;
	}, function (module, exports, __webpack_require__) {

		var root = __webpack_require__(23);

		var Uint8Array = root.Uint8Array;

		module.exports = Uint8Array;
	}, function (module, exports) {
		function apply(func, thisArg, args) {
			switch (args.length) {
				case 0:
					return func.call(thisArg);
				case 1:
					return func.call(thisArg, args[0]);
				case 2:
					return func.call(thisArg, args[0], args[1]);
				case 3:
					return func.call(thisArg, args[0], args[1], args[2]);
			}
			return func.apply(thisArg, args);
		}

		module.exports = apply;
	}, function (module, exports, __webpack_require__) {

		var baseTimes = __webpack_require__(513),
		    isArguments = __webpack_require__(117),
		    isArray = __webpack_require__(6),
		    isIndex = __webpack_require__(176);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function arrayLikeKeys(value, inherited) {
			var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];

			var length = result.length,
			    skipIndexes = !!length;

			for (var key in value) {
				if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
					result.push(key);
				}
			}
			return result;
		}

		module.exports = arrayLikeKeys;
	}, function (module, exports) {
		function arrayPush(array, values) {
			var index = -1,
			    length = values.length,
			    offset = array.length;

			while (++index < length) {
				array[offset + index] = values[index];
			}
			return array;
		}

		module.exports = arrayPush;
	}, function (module, exports) {
		function arrayReduce(array, iteratee, accumulator, initAccum) {
			var index = -1,
			    length = array ? array.length : 0;

			if (initAccum && length) {
				accumulator = array[++index];
			}
			while (++index < length) {
				accumulator = iteratee(accumulator, array[index], index, array);
			}
			return accumulator;
		}

		module.exports = arrayReduce;
	}, function (module, exports, __webpack_require__) {

		var baseAssignValue = __webpack_require__(171),
		    eq = __webpack_require__(44);

		function assignMergeValue(object, key, value) {
			if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
				baseAssignValue(object, key, value);
			}
		}

		module.exports = assignMergeValue;
	}, function (module, exports, __webpack_require__) {

		var baseForOwn = __webpack_require__(488),
		    createBaseEach = __webpack_require__(529);

		var baseEach = createBaseEach(baseForOwn);

		module.exports = baseEach;
	}, function (module, exports, __webpack_require__) {

		var castPath = __webpack_require__(255),
		    isKey = __webpack_require__(108),
		    toKey = __webpack_require__(112);

		function baseGet(object, path) {
			path = isKey(path, object) ? [path] : castPath(path);

			var index = 0,
			    length = path.length;

			while (object != null && index < length) {
				object = object[toKey(path[index++])];
			}
			return index && index == length ? object : undefined;
		}

		module.exports = baseGet;
	}, function (module, exports, __webpack_require__) {

		var baseIsEqualDeep = __webpack_require__(494),
		    isObject = __webpack_require__(8),
		    isObjectLike = __webpack_require__(32);

		function baseIsEqual(value, other, customizer, bitmask, stack) {
			if (value === other) {
				return true;
			}
			if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
				return value !== value && other !== other;
			}
			return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
		}

		module.exports = baseIsEqual;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8),
		    isPrototype = __webpack_require__(109),
		    nativeKeysIn = __webpack_require__(562);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function baseKeysIn(object) {
			if (!isObject(object)) {
				return nativeKeysIn(object);
			}
			var isProto = isPrototype(object),
			    result = [];

			for (var key in object) {
				if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
					result.push(key);
				}
			}
			return result;
		}

		module.exports = baseKeysIn;
	}, function (module, exports, __webpack_require__) {

		var baseEach = __webpack_require__(249),
		    isArrayLike = __webpack_require__(24);

		function baseMap(collection, iteratee) {
			var index = -1,
			    result = isArrayLike(collection) ? Array(collection.length) : [];

			baseEach(collection, function (value, key, collection) {
				result[++index] = iteratee(value, key, collection);
			});
			return result;
		}

		module.exports = baseMap;
	}, function (module, exports) {
		function cacheHas(cache, key) {
			return cache.has(key);
		}

		module.exports = cacheHas;
	}, function (module, exports, __webpack_require__) {

		var isArray = __webpack_require__(6),
		    stringToPath = __webpack_require__(575);

		function castPath(value) {
			return isArray(value) ? value : stringToPath(value);
		}

		module.exports = castPath;
	}, function (module, exports, __webpack_require__) {

		var baseIteratee = __webpack_require__(42),
		    isArrayLike = __webpack_require__(24),
		    keys = __webpack_require__(25);

		function createFind(findIndexFunc) {
			return function (collection, predicate, fromIndex) {
				var iterable = Object(collection);
				if (!isArrayLike(collection)) {
					var iteratee = baseIteratee(predicate, 3);
					collection = keys(collection);
					predicate = function predicate(key) {
						return iteratee(iterable[key], key, iterable);
					};
				}
				var index = findIndexFunc(collection, predicate, fromIndex);
				return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
			};
		}

		module.exports = createFind;
	}, function (module, exports, __webpack_require__) {

		var SetCache = __webpack_require__(242),
		    arraySome = __webpack_require__(480),
		    cacheHas = __webpack_require__(254);

		var UNORDERED_COMPARE_FLAG = 1,
		    PARTIAL_COMPARE_FLAG = 2;

		function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
			var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
			    arrLength = array.length,
			    othLength = other.length;

			if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
				return false;
			}

			var stacked = stack.get(array);
			if (stacked && stack.get(other)) {
				return stacked == other;
			}
			var index = -1,
			    result = true,
			    seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;

			stack.set(array, other);
			stack.set(other, array);

			while (++index < arrLength) {
				var arrValue = array[index],
				    othValue = other[index];

				if (customizer) {
					var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
				}
				if (compared !== undefined) {
					if (compared) {
						continue;
					}
					result = false;
					break;
				}

				if (seen) {
					if (!arraySome(other, function (othValue, othIndex) {
						if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
							return seen.push(othIndex);
						}
					})) {
						result = false;
						break;
					}
				} else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
					result = false;
					break;
				}
			}
			stack['delete'](array);
			stack['delete'](other);
			return result;
		}

		module.exports = equalArrays;
	}, function (module, exports) {
		(function (global) {
			var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

			module.exports = freeGlobal;
		}).call(exports, function () {
			return this;
		}());
	}, function (module, exports, __webpack_require__) {

		var overArg = __webpack_require__(178);

		var getPrototype = overArg(Object.getPrototypeOf, Object);

		module.exports = getPrototype;
	}, function (module, exports, __webpack_require__) {

		var overArg = __webpack_require__(178),
		    stubArray = __webpack_require__(602);

		var nativeGetSymbols = Object.getOwnPropertySymbols;

		var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

		module.exports = getSymbols;
	}, function (module, exports, __webpack_require__) {

		var DataView = __webpack_require__(472),
		    Map = __webpack_require__(167),
		    Promise = __webpack_require__(474),
		    Set = __webpack_require__(241),
		    WeakMap = __webpack_require__(475),
		    baseGetTag = __webpack_require__(490),
		    toSource = __webpack_require__(267);

		var mapTag = '[object Map]',
		    objectTag = '[object Object]',
		    promiseTag = '[object Promise]',
		    setTag = '[object Set]',
		    weakMapTag = '[object WeakMap]';

		var dataViewTag = '[object DataView]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		var dataViewCtorString = toSource(DataView),
		    mapCtorString = toSource(Map),
		    promiseCtorString = toSource(Promise),
		    setCtorString = toSource(Set),
		    weakMapCtorString = toSource(WeakMap);

		var getTag = baseGetTag;

		if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
			getTag = function getTag(value) {
				var result = objectToString.call(value),
				    Ctor = result == objectTag ? value.constructor : undefined,
				    ctorString = Ctor ? toSource(Ctor) : undefined;

				if (ctorString) {
					switch (ctorString) {
						case dataViewCtorString:
							return dataViewTag;
						case mapCtorString:
							return mapTag;
						case promiseCtorString:
							return promiseTag;
						case setCtorString:
							return setTag;
						case weakMapCtorString:
							return weakMapTag;
					}
				}
				return result;
			};
		}

		module.exports = getTag;
	}, function (module, exports, __webpack_require__) {

		var castPath = __webpack_require__(255),
		    isArguments = __webpack_require__(117),
		    isArray = __webpack_require__(6),
		    isIndex = __webpack_require__(176),
		    isKey = __webpack_require__(108),
		    isLength = __webpack_require__(180),
		    toKey = __webpack_require__(112);

		function hasPath(object, path, hasFunc) {
			path = isKey(path, object) ? [path] : castPath(path);

			var index = -1,
			    length = path.length,
			    result = false;

			while (++index < length) {
				var key = toKey(path[index]);
				if (!(result = object != null && hasFunc(object, key))) {
					break;
				}
				object = object[key];
			}
			if (result || ++index != length) {
				return result;
			}
			length = object ? object.length : 0;
			return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
		}

		module.exports = hasPath;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8);

		function isStrictComparable(value) {
			return value === value && !isObject(value);
		}

		module.exports = isStrictComparable;
	}, function (module, exports) {
		function mapToArray(map) {
			var index = -1,
			    result = Array(map.size);

			map.forEach(function (value, key) {
				result[++index] = [key, value];
			});
			return result;
		}

		module.exports = mapToArray;
	}, function (module, exports) {
		function matchesStrictComparable(key, srcValue) {
			return function (object) {
				if (object == null) {
					return false;
				}
				return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
			};
		}

		module.exports = matchesStrictComparable;
	}, function (module, exports, __webpack_require__) {
		(function (module) {
			var freeGlobal = __webpack_require__(258);

			var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

			var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

			var moduleExports = freeModule && freeModule.exports === freeExports;

			var freeProcess = moduleExports && freeGlobal.process;

			var nodeUtil = function () {
				try {
					return freeProcess && freeProcess.binding('util');
				} catch (e) {}
			}();

			module.exports = nodeUtil;
		}).call(exports, __webpack_require__(75)(module));
	}, function (module, exports) {
		var funcProto = Function.prototype;

		var funcToString = funcProto.toString;

		function toSource(func) {
			if (func != null) {
				try {
					return funcToString.call(func);
				} catch (e) {}
				try {
					return func + '';
				} catch (e) {}
			}
			return '';
		}

		module.exports = toSource;
	}, function (module, exports, __webpack_require__) {

		var apply = __webpack_require__(244),
		    assignInDefaults = __webpack_require__(482),
		    assignInWith = __webpack_require__(578),
		    baseRest = __webpack_require__(104);

		var defaults = baseRest(function (args) {
			args.push(undefined, assignInDefaults);
			return apply(assignInWith, undefined, args);
		});

		module.exports = defaults;
	}, function (module, exports, __webpack_require__) {

		var baseHas = __webpack_require__(491),
		    hasPath = __webpack_require__(262);

		function has(object, path) {
			return object != null && hasPath(object, path, baseHas);
		}

		module.exports = has;
	}, function (module, exports, __webpack_require__) {

		var isArrayLike = __webpack_require__(24),
		    isObjectLike = __webpack_require__(32);

		function isArrayLikeObject(value) {
			return isObjectLike(value) && isArrayLike(value);
		}

		module.exports = isArrayLikeObject;
	}, function (module, exports, __webpack_require__) {

		var isObjectLike = __webpack_require__(32);

		var boolTag = '[object Boolean]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function isBoolean(value) {
			return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
		}

		module.exports = isBoolean;
	}, function (module, exports, __webpack_require__) {

		var isObjectLike = __webpack_require__(32);

		var numberTag = '[object Number]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function isNumber(value) {
			return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;
		}

		module.exports = isNumber;
	}, function (module, exports, __webpack_require__) {

		var getPrototype = __webpack_require__(259),
		    isObjectLike = __webpack_require__(32);

		var objectTag = '[object Object]';

		var funcProto = Function.prototype,
		    objectProto = Object.prototype;

		var funcToString = funcProto.toString;

		var hasOwnProperty = objectProto.hasOwnProperty;

		var objectCtorString = funcToString.call(Object);

		var objectToString = objectProto.toString;

		function isPlainObject(value) {
			if (!isObjectLike(value) || objectToString.call(value) != objectTag) {
				return false;
			}
			var proto = getPrototype(value);
			if (proto === null) {
				return true;
			}
			var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
			return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
		}

		module.exports = isPlainObject;
	}, function (module, exports, __webpack_require__) {

		var baseIsRegExp = __webpack_require__(498),
		    baseUnary = __webpack_require__(105),
		    nodeUtil = __webpack_require__(266);

		var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

		var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

		module.exports = isRegExp;
	}, function (module, exports, __webpack_require__) {

		var baseRest = __webpack_require__(104),
		    pullAll = __webpack_require__(599);

		var pull = baseRest(pullAll);

		module.exports = pull;
	}, function (module, exports, __webpack_require__) {

		var baseRepeat = __webpack_require__(509),
		    isIterateeCall = __webpack_require__(177),
		    toInteger = __webpack_require__(45),
		    toString = __webpack_require__(72);

		function repeat(string, n, guard) {
			if (guard ? isIterateeCall(string, n, guard) : n === undefined) {
				n = 1;
			} else {
				n = toInteger(n);
			}
			return baseRepeat(toString(string), n);
		}

		module.exports = repeat;
	}, function (module, exports, __webpack_require__) {

		var baseValues = __webpack_require__(515),
		    keys = __webpack_require__(25);

		function values(object) {
			return object ? baseValues(object, keys(object)) : [];
		}

		module.exports = values;
	}, function (module, exports) {

		"use strict";

		var originalObject = Object;
		var originalDefProp = Object.defineProperty;
		var originalCreate = Object.create;

		function defProp(obj, name, value) {
			if (originalDefProp) try {
				originalDefProp.call(originalObject, obj, name, { value: value });
			} catch (definePropertyIsBrokenInIE8) {
				obj[name] = value;
			} else {
				obj[name] = value;
			}
		}

		function makeSafeToCall(fun) {
			if (fun) {
				defProp(fun, "call", fun.call);
				defProp(fun, "apply", fun.apply);
			}
			return fun;
		}

		makeSafeToCall(originalDefProp);
		makeSafeToCall(originalCreate);

		var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
		var numToStr = makeSafeToCall(Number.prototype.toString);
		var strSlice = makeSafeToCall(String.prototype.slice);

		var cloner = function cloner() {};
		function create(prototype) {
			if (originalCreate) {
				return originalCreate.call(originalObject, prototype);
			}
			cloner.prototype = prototype || null;
			return new cloner();
		}

		var rand = Math.random;
		var uniqueKeys = create(null);

		function makeUniqueKey() {
			do {
				var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
			} while (hasOwn.call(uniqueKeys, uniqueKey));
			return uniqueKeys[uniqueKey] = uniqueKey;
		}

		function internString(str) {
			var obj = {};
			obj[str] = true;
			return Object.keys(obj)[0];
		}

		defProp(exports, "makeUniqueKey", makeUniqueKey);

		var originalGetOPNs = Object.getOwnPropertyNames;
		Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
			for (var names = originalGetOPNs(object), src = 0, dst = 0, len = names.length; src < len; ++src) {
				if (!hasOwn.call(uniqueKeys, names[src])) {
					if (src > dst) {
						names[dst] = names[src];
					}
					++dst;
				}
			}
			names.length = dst;
			return names;
		};

		function defaultCreatorFn(object) {
			return create(null);
		}

		function makeAccessor(secretCreatorFn) {
			var brand = makeUniqueKey();
			var passkey = create(null);

			secretCreatorFn = secretCreatorFn || defaultCreatorFn;

			function register(object) {
				var secret;

				function vault(key, forget) {
					if (key === passkey) {
						return forget ? secret = null : secret || (secret = secretCreatorFn(object));
					}
				}

				defProp(object, brand, vault);
			}

			function accessor(object) {
				if (!hasOwn.call(object, brand)) register(object);
				return object[brand](passkey);
			}

			accessor.forget = function (object) {
				if (hasOwn.call(object, brand)) object[brand](passkey, true);
			};

			return accessor;
		}

		defProp(exports, "makeAccessor", makeAccessor);
	}, function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_RESULT__;(function (module, global) {
			(function (root) {
				var freeExports = typeof exports == 'object' && exports;

				var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;

				var freeGlobal = typeof global == 'object' && global;
				if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
					root = freeGlobal;
				}

				var ERRORS = {
					'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' + 'to the `start` value.',
					'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
				};

				var HIGH_SURROGATE_MIN = 0xD800;
				var HIGH_SURROGATE_MAX = 0xDBFF;
				var LOW_SURROGATE_MIN = 0xDC00;
				var LOW_SURROGATE_MAX = 0xDFFF;

				var regexNull = /\\x00([^0123456789]|$)/g;

				var object = {};
				var hasOwnProperty = object.hasOwnProperty;
				var extend = function extend(destination, source) {
					var key;
					for (key in source) {
						if (hasOwnProperty.call(source, key)) {
							destination[key] = source[key];
						}
					}
					return destination;
				};

				var forEach = function forEach(array, callback) {
					var index = -1;
					var length = array.length;
					while (++index < length) {
						callback(array[index], index);
					}
				};

				var toString = object.toString;
				var isArray = function isArray(value) {
					return toString.call(value) == '[object Array]';
				};
				var isNumber = function isNumber(value) {
					return typeof value == 'number' || toString.call(value) == '[object Number]';
				};

				var zeroes = '0000';
				var pad = function pad(number, totalCharacters) {
					var string = String(number);
					return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
				};

				var hex = function hex(number) {
					return Number(number).toString(16).toUpperCase();
				};

				var slice = [].slice;

				var dataFromCodePoints = function dataFromCodePoints(codePoints) {
					var index = -1;
					var length = codePoints.length;
					var max = length - 1;
					var result = [];
					var isStart = true;
					var tmp;
					var previous = 0;
					while (++index < length) {
						tmp = codePoints[index];
						if (isStart) {
							result.push(tmp);
							previous = tmp;
							isStart = false;
						} else {
							if (tmp == previous + 1) {
								if (index != max) {
									previous = tmp;
									continue;
								} else {
									isStart = true;
									result.push(tmp + 1);
								}
							} else {
								result.push(previous + 1, tmp);
								previous = tmp;
							}
						}
					}
					if (!isStart) {
						result.push(tmp + 1);
					}
					return result;
				};

				var dataRemove = function dataRemove(data, codePoint) {
					var index = 0;
					var start;
					var end;
					var length = data.length;
					while (index < length) {
						start = data[index];
						end = data[index + 1];
						if (codePoint >= start && codePoint < end) {
							if (codePoint == start) {
								if (end == start + 1) {
									data.splice(index, 2);
									return data;
								} else {
									data[index] = codePoint + 1;
									return data;
								}
							} else if (codePoint == end - 1) {
								data[index + 1] = codePoint;
								return data;
							} else {
								data.splice(index, 2, start, codePoint, codePoint + 1, end);
								return data;
							}
						}
						index += 2;
					}
					return data;
				};

				var dataRemoveRange = function dataRemoveRange(data, rangeStart, rangeEnd) {
					if (rangeEnd < rangeStart) {
						throw Error(ERRORS.rangeOrder);
					}

					var index = 0;
					var start;
					var end;
					while (index < data.length) {
						start = data[index];
						end = data[index + 1] - 1;
						if (start > rangeEnd) {
							return data;
						}

						if (rangeStart <= start && rangeEnd >= end) {
							data.splice(index, 2);
							continue;
						}

						if (rangeStart >= start && rangeEnd < end) {
							if (rangeStart == start) {
								data[index] = rangeEnd + 1;
								data[index + 1] = end + 1;
								return data;
							}

							data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
							return data;
						}

						if (rangeStart >= start && rangeStart <= end) {
							data[index + 1] = rangeStart;
						} else if (rangeEnd >= start && rangeEnd <= end) {
								data[index] = rangeEnd + 1;
								return data;
							}

						index += 2;
					}
					return data;
				};

				var dataAdd = function dataAdd(data, codePoint) {
					var index = 0;
					var start;
					var end;
					var lastIndex = null;
					var length = data.length;
					if (codePoint < 0x0 || codePoint > 0x10FFFF) {
						throw RangeError(ERRORS.codePointRange);
					}
					while (index < length) {
						start = data[index];
						end = data[index + 1];

						if (codePoint >= start && codePoint < end) {
							return data;
						}

						if (codePoint == start - 1) {
							data[index] = codePoint;
							return data;
						}

						if (start > codePoint) {
							data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
							return data;
						}

						if (codePoint == end) {
							if (codePoint + 1 == data[index + 2]) {
								data.splice(index, 4, start, data[index + 3]);
								return data;
							}

							data[index + 1] = codePoint + 1;
							return data;
						}
						lastIndex = index;
						index += 2;
					}

					data.push(codePoint, codePoint + 1);
					return data;
				};

				var dataAddData = function dataAddData(dataA, dataB) {
					var index = 0;
					var start;
					var end;
					var data = dataA.slice();
					var length = dataB.length;
					while (index < length) {
						start = dataB[index];
						end = dataB[index + 1] - 1;
						if (start == end) {
							data = dataAdd(data, start);
						} else {
							data = dataAddRange(data, start, end);
						}
						index += 2;
					}
					return data;
				};

				var dataRemoveData = function dataRemoveData(dataA, dataB) {
					var index = 0;
					var start;
					var end;
					var data = dataA.slice();
					var length = dataB.length;
					while (index < length) {
						start = dataB[index];
						end = dataB[index + 1] - 1;
						if (start == end) {
							data = dataRemove(data, start);
						} else {
							data = dataRemoveRange(data, start, end);
						}
						index += 2;
					}
					return data;
				};

				var dataAddRange = function dataAddRange(data, rangeStart, rangeEnd) {
					if (rangeEnd < rangeStart) {
						throw Error(ERRORS.rangeOrder);
					}
					if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
						throw RangeError(ERRORS.codePointRange);
					}

					var index = 0;
					var start;
					var end;
					var added = false;
					var length = data.length;
					while (index < length) {
						start = data[index];
						end = data[index + 1];

						if (added) {
							if (start == rangeEnd + 1) {
								data.splice(index - 1, 2);
								return data;
							}

							if (start > rangeEnd) {
								return data;
							}

							if (start >= rangeStart && start <= rangeEnd) {

								if (end > rangeStart && end - 1 <= rangeEnd) {
									data.splice(index, 2);
									index -= 2;
								} else {
									data.splice(index - 1, 2);
									index -= 2;
								}
							}
						} else if (start == rangeEnd + 1) {
							data[index] = rangeStart;
							return data;
						} else if (start > rangeEnd) {
								data.splice(index, 0, rangeStart, rangeEnd + 1);
								return data;
							} else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
								return data;
							} else if (rangeStart >= start && rangeStart < end || end == rangeStart) {
								data[index + 1] = rangeEnd + 1;

								added = true;
							} else if (rangeStart <= start && rangeEnd + 1 >= end) {
								data[index] = rangeStart;
								data[index + 1] = rangeEnd + 1;
								added = true;
							}

						index += 2;
					}

					if (!added) {
						data.push(rangeStart, rangeEnd + 1);
					}
					return data;
				};

				var dataContains = function dataContains(data, codePoint) {
					var index = 0;
					var length = data.length;

					var start = data[index];
					var end = data[length - 1];
					if (length >= 2) {
						if (codePoint < start || codePoint > end) {
							return false;
						}
					}

					while (index < length) {
						start = data[index];
						end = data[index + 1];
						if (codePoint >= start && codePoint < end) {
							return true;
						}
						index += 2;
					}
					return false;
				};

				var dataIntersection = function dataIntersection(data, codePoints) {
					var index = 0;
					var length = codePoints.length;
					var codePoint;
					var result = [];
					while (index < length) {
						codePoint = codePoints[index];
						if (dataContains(data, codePoint)) {
							result.push(codePoint);
						}
						++index;
					}
					return dataFromCodePoints(result);
				};

				var dataIsEmpty = function dataIsEmpty(data) {
					return !data.length;
				};

				var dataIsSingleton = function dataIsSingleton(data) {
					return data.length == 2 && data[0] + 1 == data[1];
				};

				var dataToArray = function dataToArray(data) {
					var index = 0;
					var start;
					var end;
					var result = [];
					var length = data.length;
					while (index < length) {
						start = data[index];
						end = data[index + 1];
						while (start < end) {
							result.push(start);
							++start;
						}
						index += 2;
					}
					return result;
				};

				var floor = Math.floor;
				var highSurrogate = function highSurrogate(codePoint) {
					return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
				};

				var lowSurrogate = function lowSurrogate(codePoint) {
					return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
				};

				var stringFromCharCode = String.fromCharCode;
				var codePointToString = function codePointToString(codePoint) {
					var string;

					if (codePoint == 0x09) {
						string = '\\t';
					} else if (codePoint == 0x0A) {
							string = '\\n';
						} else if (codePoint == 0x0C) {
							string = '\\f';
						} else if (codePoint == 0x0D) {
							string = '\\r';
						} else if (codePoint == 0x5C) {
							string = '\\\\';
						} else if (codePoint == 0x24 || codePoint >= 0x28 && codePoint <= 0x2B || codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F || codePoint >= 0x5B && codePoint <= 0x5E || codePoint >= 0x7B && codePoint <= 0x7D) {
							string = '\\' + stringFromCharCode(codePoint);
						} else if (codePoint >= 0x20 && codePoint <= 0x7E) {
							string = stringFromCharCode(codePoint);
						} else if (codePoint <= 0xFF) {
							string = '\\x' + pad(hex(codePoint), 2);
						} else {
							string = '\\u' + pad(hex(codePoint), 4);
						}

					return string;
				};

				var codePointToStringUnicode = function codePointToStringUnicode(codePoint) {
					if (codePoint <= 0xFFFF) {
						return codePointToString(codePoint);
					}
					return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
				};

				var symbolToCodePoint = function symbolToCodePoint(symbol) {
					var length = symbol.length;
					var first = symbol.charCodeAt(0);
					var second;
					if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1) {
							second = symbol.charCodeAt(1);

							return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
						}
					return first;
				};

				var createBMPCharacterClasses = function createBMPCharacterClasses(data) {
					var result = '';
					var index = 0;
					var start;
					var end;
					var length = data.length;
					if (dataIsSingleton(data)) {
						return codePointToString(data[0]);
					}
					while (index < length) {
						start = data[index];
						end = data[index + 1] - 1;
						if (start == end) {
							result += codePointToString(start);
						} else if (start + 1 == end) {
							result += codePointToString(start) + codePointToString(end);
						} else {
							result += codePointToString(start) + '-' + codePointToString(end);
						}
						index += 2;
					}
					return '[' + result + ']';
				};

				var createUnicodeCharacterClasses = function createUnicodeCharacterClasses(data) {
					var result = '';
					var index = 0;
					var start;
					var end;
					var length = data.length;
					if (dataIsSingleton(data)) {
						return codePointToStringUnicode(data[0]);
					}
					while (index < length) {
						start = data[index];
						end = data[index + 1] - 1;
						if (start == end) {
							result += codePointToStringUnicode(start);
						} else if (start + 1 == end) {
							result += codePointToStringUnicode(start) + codePointToStringUnicode(end);
						} else {
							result += codePointToStringUnicode(start) + '-' + codePointToStringUnicode(end);
						}
						index += 2;
					}
					return '[' + result + ']';
				};

				var splitAtBMP = function splitAtBMP(data) {
					var loneHighSurrogates = [];
					var loneLowSurrogates = [];
					var bmp = [];
					var astral = [];
					var index = 0;
					var start;
					var end;
					var length = data.length;
					while (index < length) {
						start = data[index];
						end = data[index + 1] - 1;

						if (start < HIGH_SURROGATE_MIN) {
							if (end < HIGH_SURROGATE_MIN) {
								bmp.push(start, end + 1);
							}

							if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
								bmp.push(start, HIGH_SURROGATE_MIN);
								loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
							}

							if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
								bmp.push(start, HIGH_SURROGATE_MIN);
								loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
								loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
							}

							if (end > LOW_SURROGATE_MAX) {
								bmp.push(start, HIGH_SURROGATE_MIN);
								loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
								loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
								if (end <= 0xFFFF) {
									bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
								} else {
									bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
									astral.push(0xFFFF + 1, end + 1);
								}
							}
						} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
							if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
								loneHighSurrogates.push(start, end + 1);
							}

							if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
								loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
								loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
							}

							if (end > LOW_SURROGATE_MAX) {
								loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
								loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
								if (end <= 0xFFFF) {
									bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
								} else {
									bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
									astral.push(0xFFFF + 1, end + 1);
								}
							}
						} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
							if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
								loneLowSurrogates.push(start, end + 1);
							}

							if (end > LOW_SURROGATE_MAX) {
								loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
								if (end <= 0xFFFF) {
									bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
								} else {
									bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
									astral.push(0xFFFF + 1, end + 1);
								}
							}
						} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
							if (end <= 0xFFFF) {
								bmp.push(start, end + 1);
							} else {
								bmp.push(start, 0xFFFF + 1);
								astral.push(0xFFFF + 1, end + 1);
							}
						} else {
							astral.push(start, end + 1);
						}

						index += 2;
					}
					return {
						'loneHighSurrogates': loneHighSurrogates,
						'loneLowSurrogates': loneLowSurrogates,
						'bmp': bmp,
						'astral': astral
					};
				};

				var optimizeSurrogateMappings = function optimizeSurrogateMappings(surrogateMappings) {
					var result = [];
					var tmpLow = [];
					var addLow = false;
					var mapping;
					var nextMapping;
					var highSurrogates;
					var lowSurrogates;
					var nextHighSurrogates;
					var nextLowSurrogates;
					var index = -1;
					var length = surrogateMappings.length;
					while (++index < length) {
						mapping = surrogateMappings[index];
						nextMapping = surrogateMappings[index + 1];
						if (!nextMapping) {
							result.push(mapping);
							continue;
						}
						highSurrogates = mapping[0];
						lowSurrogates = mapping[1];
						nextHighSurrogates = nextMapping[0];
						nextLowSurrogates = nextMapping[1];

						tmpLow = lowSurrogates;
						while (nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]) {
							if (dataIsSingleton(nextLowSurrogates)) {
								tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
							} else {
								tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
							}
							++index;
							mapping = surrogateMappings[index];
							highSurrogates = mapping[0];
							lowSurrogates = mapping[1];
							nextMapping = surrogateMappings[index + 1];
							nextHighSurrogates = nextMapping && nextMapping[0];
							nextLowSurrogates = nextMapping && nextMapping[1];
							addLow = true;
						}
						result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
						addLow = false;
					}
					return optimizeByLowSurrogates(result);
				};

				var optimizeByLowSurrogates = function optimizeByLowSurrogates(surrogateMappings) {
					if (surrogateMappings.length == 1) {
						return surrogateMappings;
					}
					var index = -1;
					var innerIndex = -1;
					while (++index < surrogateMappings.length) {
						var mapping = surrogateMappings[index];
						var lowSurrogates = mapping[1];
						var lowSurrogateStart = lowSurrogates[0];
						var lowSurrogateEnd = lowSurrogates[1];
						innerIndex = index;
						while (++innerIndex < surrogateMappings.length) {
							var otherMapping = surrogateMappings[innerIndex];
							var otherLowSurrogates = otherMapping[1];
							var otherLowSurrogateStart = otherLowSurrogates[0];
							var otherLowSurrogateEnd = otherLowSurrogates[1];
							if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd) {
								if (dataIsSingleton(otherMapping[0])) {
									mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
								} else {
									mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
								}

								surrogateMappings.splice(innerIndex, 1);
								--innerIndex;
							}
						}
					}
					return surrogateMappings;
				};

				var surrogateSet = function surrogateSet(data) {
					if (!data.length) {
						return [];
					}

					var index = 0;
					var start;
					var end;
					var startHigh;
					var startLow;
					var prevStartHigh = 0;
					var prevEndHigh = 0;
					var tmpLow = [];
					var endHigh;
					var endLow;
					var surrogateMappings = [];
					var length = data.length;
					var dataHigh = [];
					while (index < length) {
						start = data[index];
						end = data[index + 1] - 1;

						startHigh = highSurrogate(start);
						startLow = lowSurrogate(start);
						endHigh = highSurrogate(end);
						endLow = lowSurrogate(end);

						var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
						var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
						var complete = false;

						if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
							surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]);
							complete = true;
						} else {
							surrogateMappings.push([[startHigh, startHigh + 1], [startLow, LOW_SURROGATE_MAX + 1]]);
						}

						if (!complete && startHigh + 1 < endHigh) {
							if (endsWithHighestLowSurrogate) {
								surrogateMappings.push([[startHigh + 1, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
								complete = true;
							} else {
								surrogateMappings.push([[startHigh + 1, endHigh], [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]]);
							}
						}

						if (!complete) {
							surrogateMappings.push([[endHigh, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
						}

						prevStartHigh = startHigh;
						prevEndHigh = endHigh;

						index += 2;
					}

					return optimizeSurrogateMappings(surrogateMappings);
				};

				var createSurrogateCharacterClasses = function createSurrogateCharacterClasses(surrogateMappings) {
					var result = [];
					forEach(surrogateMappings, function (surrogateMapping) {
						var highSurrogates = surrogateMapping[0];
						var lowSurrogates = surrogateMapping[1];
						result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
					});
					return result.join('|');
				};

				var createCharacterClassesFromData = function createCharacterClassesFromData(data, bmpOnly, hasUnicodeFlag) {
					if (hasUnicodeFlag) {
						return createUnicodeCharacterClasses(data);
					}
					var result = [];

					var parts = splitAtBMP(data);
					var loneHighSurrogates = parts.loneHighSurrogates;
					var loneLowSurrogates = parts.loneLowSurrogates;
					var bmp = parts.bmp;
					var astral = parts.astral;
					var hasAstral = !dataIsEmpty(parts.astral);
					var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
					var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);

					var surrogateMappings = surrogateSet(astral);

					if (bmpOnly) {
						bmp = dataAddData(bmp, loneHighSurrogates);
						hasLoneHighSurrogates = false;
						bmp = dataAddData(bmp, loneLowSurrogates);
						hasLoneLowSurrogates = false;
					}

					if (!dataIsEmpty(bmp)) {
						result.push(createBMPCharacterClasses(bmp));
					}
					if (surrogateMappings.length) {
						result.push(createSurrogateCharacterClasses(surrogateMappings));
					}

					if (hasLoneHighSurrogates) {
						result.push(createBMPCharacterClasses(loneHighSurrogates) + '(?![\\uDC00-\\uDFFF])');
					}
					if (hasLoneLowSurrogates) {
						result.push('(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));
					}
					return result.join('|');
				};

				var regenerate = function regenerate(value) {
					if (arguments.length > 1) {
						value = slice.call(arguments);
					}
					if (this instanceof regenerate) {
						this.data = [];
						return value ? this.add(value) : this;
					}
					return new regenerate().add(value);
				};

				regenerate.version = '1.3.1';

				var proto = regenerate.prototype;
				extend(proto, {
					'add': function add(value) {
						var $this = this;
						if (value == null) {
							return $this;
						}
						if (value instanceof regenerate) {
							$this.data = dataAddData($this.data, value.data);
							return $this;
						}
						if (arguments.length > 1) {
							value = slice.call(arguments);
						}
						if (isArray(value)) {
							forEach(value, function (item) {
								$this.add(item);
							});
							return $this;
						}
						$this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
						return $this;
					},
					'remove': function remove(value) {
						var $this = this;
						if (value == null) {
							return $this;
						}
						if (value instanceof regenerate) {
							$this.data = dataRemoveData($this.data, value.data);
							return $this;
						}
						if (arguments.length > 1) {
							value = slice.call(arguments);
						}
						if (isArray(value)) {
							forEach(value, function (item) {
								$this.remove(item);
							});
							return $this;
						}
						$this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
						return $this;
					},
					'addRange': function addRange(start, end) {
						var $this = this;
						$this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
						return $this;
					},
					'removeRange': function removeRange(start, end) {
						var $this = this;
						var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
						var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
						$this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
						return $this;
					},
					'intersection': function intersection(argument) {
						var $this = this;

						var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
						$this.data = dataIntersection($this.data, array);
						return $this;
					},
					'contains': function contains(codePoint) {
						return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
					},
					'clone': function clone() {
						var set = new regenerate();
						set.data = this.data.slice(0);
						return set;
					},
					'toString': function toString(options) {
						var result = createCharacterClassesFromData(this.data, options ? options.bmpOnly : false, options ? options.hasUnicodeFlag : false);
						if (!result) {
							return '[]';
						}

						return result.replace(regexNull, '\\0$1');
					},
					'toRegExp': function toRegExp(flags) {
						var pattern = this.toString(flags && flags.indexOf('u') != -1 ? { 'hasUnicodeFlag': true } : null);
						return RegExp(pattern, flags || '');
					},
					'valueOf': function valueOf() {
						return dataToArray(this.data);
					}
				});

				proto.toArray = proto.valueOf;

				if (true) {
					!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
						return regenerate;
					}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
				} else if (freeExports && !freeExports.nodeType) {
					if (freeModule) {
						freeModule.exports = regenerate;
					} else {
						freeExports.regenerate = regenerate;
					}
				} else {
					root.regenerate = regenerate;
				}
			})(this);
		}).call(exports, __webpack_require__(75)(module), function () {
			return this;
		}());
	}, function (module, exports) {

		'use strict';

		module.exports = function (str) {
			var isExtendedLengthPath = /^\\\\\?\\/.test(str);
			var hasNonAscii = /[^\x00-\x80]+/.test(str);

			if (isExtendedLengthPath || hasNonAscii) {
				return str;
			}

			return str.replace(/\\/g, '/');
		};
	}, function (module, exports, __webpack_require__) {

		var util = __webpack_require__(74);
		var has = Object.prototype.hasOwnProperty;

		function ArraySet() {
			this._array = [];
			this._set = Object.create(null);
		}

		ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
			var set = new ArraySet();
			for (var i = 0, len = aArray.length; i < len; i++) {
				set.add(aArray[i], aAllowDuplicates);
			}
			return set;
		};

		ArraySet.prototype.size = function ArraySet_size() {
			return Object.getOwnPropertyNames(this._set).length;
		};

		ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
			var sStr = util.toSetString(aStr);
			var isDuplicate = has.call(this._set, sStr);
			var idx = this._array.length;
			if (!isDuplicate || aAllowDuplicates) {
				this._array.push(aStr);
			}
			if (!isDuplicate) {
				this._set[sStr] = idx;
			}
		};

		ArraySet.prototype.has = function ArraySet_has(aStr) {
			var sStr = util.toSetString(aStr);
			return has.call(this._set, sStr);
		};

		ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
			var sStr = util.toSetString(aStr);
			if (has.call(this._set, sStr)) {
				return this._set[sStr];
			}
			throw new Error('"' + aStr + '" is not in the set.');
		};

		ArraySet.prototype.at = function ArraySet_at(aIdx) {
			if (aIdx >= 0 && aIdx < this._array.length) {
				return this._array[aIdx];
			}
			throw new Error('No element indexed by ' + aIdx);
		};

		ArraySet.prototype.toArray = function ArraySet_toArray() {
			return this._array.slice();
		};

		exports.ArraySet = ArraySet;
	}, function (module, exports, __webpack_require__) {

		var base64 = __webpack_require__(620);

		var VLQ_BASE_SHIFT = 5;

		var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

		var VLQ_BASE_MASK = VLQ_BASE - 1;

		var VLQ_CONTINUATION_BIT = VLQ_BASE;

		function toVLQSigned(aValue) {
			return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
		}

		function fromVLQSigned(aValue) {
			var isNegative = (aValue & 1) === 1;
			var shifted = aValue >> 1;
			return isNegative ? -shifted : shifted;
		}

		exports.encode = function base64VLQ_encode(aValue) {
			var encoded = "";
			var digit;

			var vlq = toVLQSigned(aValue);

			do {
				digit = vlq & VLQ_BASE_MASK;
				vlq >>>= VLQ_BASE_SHIFT;
				if (vlq > 0) {
					digit |= VLQ_CONTINUATION_BIT;
				}
				encoded += base64.encode(digit);
			} while (vlq > 0);

			return encoded;
		};

		exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
			var strLen = aStr.length;
			var result = 0;
			var shift = 0;
			var continuation, digit;

			do {
				if (aIndex >= strLen) {
					throw new Error("Expected more digits in base 64 VLQ value.");
				}

				digit = base64.decode(aStr.charCodeAt(aIndex++));
				if (digit === -1) {
					throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
				}

				continuation = !!(digit & VLQ_CONTINUATION_BIT);
				digit &= VLQ_BASE_MASK;
				result = result + (digit << shift);
				shift += VLQ_BASE_SHIFT;
			} while (continuation);

			aOutParam.value = fromVLQSigned(result);
			aOutParam.rest = aIndex;
		};
	}, function (module, exports, __webpack_require__) {

		var base64VLQ = __webpack_require__(282);
		var util = __webpack_require__(74);
		var ArraySet = __webpack_require__(281).ArraySet;
		var MappingList = __webpack_require__(622).MappingList;

		function SourceMapGenerator(aArgs) {
			if (!aArgs) {
				aArgs = {};
			}
			this._file = util.getArg(aArgs, 'file', null);
			this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
			this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
			this._sources = new ArraySet();
			this._names = new ArraySet();
			this._mappings = new MappingList();
			this._sourcesContents = null;
		}

		SourceMapGenerator.prototype._version = 3;

		SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
			var sourceRoot = aSourceMapConsumer.sourceRoot;
			var generator = new SourceMapGenerator({
				file: aSourceMapConsumer.file,
				sourceRoot: sourceRoot
			});
			aSourceMapConsumer.eachMapping(function (mapping) {
				var newMapping = {
					generated: {
						line: mapping.generatedLine,
						column: mapping.generatedColumn
					}
				};

				if (mapping.source != null) {
					newMapping.source = mapping.source;
					if (sourceRoot != null) {
						newMapping.source = util.relative(sourceRoot, newMapping.source);
					}

					newMapping.original = {
						line: mapping.originalLine,
						column: mapping.originalColumn
					};

					if (mapping.name != null) {
						newMapping.name = mapping.name;
					}
				}

				generator.addMapping(newMapping);
			});
			aSourceMapConsumer.sources.forEach(function (sourceFile) {
				var content = aSourceMapConsumer.sourceContentFor(sourceFile);
				if (content != null) {
					generator.setSourceContent(sourceFile, content);
				}
			});
			return generator;
		};

		SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
			var generated = util.getArg(aArgs, 'generated');
			var original = util.getArg(aArgs, 'original', null);
			var source = util.getArg(aArgs, 'source', null);
			var name = util.getArg(aArgs, 'name', null);

			if (!this._skipValidation) {
				this._validateMapping(generated, original, source, name);
			}

			if (source != null) {
				source = String(source);
				if (!this._sources.has(source)) {
					this._sources.add(source);
				}
			}

			if (name != null) {
				name = String(name);
				if (!this._names.has(name)) {
					this._names.add(name);
				}
			}

			this._mappings.add({
				generatedLine: generated.line,
				generatedColumn: generated.column,
				originalLine: original != null && original.line,
				originalColumn: original != null && original.column,
				source: source,
				name: name
			});
		};

		SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
			var source = aSourceFile;
			if (this._sourceRoot != null) {
				source = util.relative(this._sourceRoot, source);
			}

			if (aSourceContent != null) {
				if (!this._sourcesContents) {
					this._sourcesContents = Object.create(null);
				}
				this._sourcesContents[util.toSetString(source)] = aSourceContent;
			} else if (this._sourcesContents) {
				delete this._sourcesContents[util.toSetString(source)];
				if (Object.keys(this._sourcesContents).length === 0) {
					this._sourcesContents = null;
				}
			}
		};

		SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
			var sourceFile = aSourceFile;

			if (aSourceFile == null) {
				if (aSourceMapConsumer.file == null) {
					throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
				}
				sourceFile = aSourceMapConsumer.file;
			}
			var sourceRoot = this._sourceRoot;

			if (sourceRoot != null) {
				sourceFile = util.relative(sourceRoot, sourceFile);
			}

			var newSources = new ArraySet();
			var newNames = new ArraySet();

			this._mappings.unsortedForEach(function (mapping) {
				if (mapping.source === sourceFile && mapping.originalLine != null) {
					var original = aSourceMapConsumer.originalPositionFor({
						line: mapping.originalLine,
						column: mapping.originalColumn
					});
					if (original.source != null) {
						mapping.source = original.source;
						if (aSourceMapPath != null) {
							mapping.source = util.join(aSourceMapPath, mapping.source);
						}
						if (sourceRoot != null) {
							mapping.source = util.relative(sourceRoot, mapping.source);
						}
						mapping.originalLine = original.line;
						mapping.originalColumn = original.column;
						if (original.name != null) {
							mapping.name = original.name;
						}
					}
				}

				var source = mapping.source;
				if (source != null && !newSources.has(source)) {
					newSources.add(source);
				}

				var name = mapping.name;
				if (name != null && !newNames.has(name)) {
					newNames.add(name);
				}
			}, this);
			this._sources = newSources;
			this._names = newNames;

			aSourceMapConsumer.sources.forEach(function (sourceFile) {
				var content = aSourceMapConsumer.sourceContentFor(sourceFile);
				if (content != null) {
					if (aSourceMapPath != null) {
						sourceFile = util.join(aSourceMapPath, sourceFile);
					}
					if (sourceRoot != null) {
						sourceFile = util.relative(sourceRoot, sourceFile);
					}
					this.setSourceContent(sourceFile, content);
				}
			}, this);
		};

		SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
			if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
				return;
			} else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
				return;
			} else {
				throw new Error('Invalid mapping: ' + JSON.stringify({
					generated: aGenerated,
					source: aSource,
					original: aOriginal,
					name: aName
				}));
			}
		};

		SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
			var previousGeneratedColumn = 0;
			var previousGeneratedLine = 1;
			var previousOriginalColumn = 0;
			var previousOriginalLine = 0;
			var previousName = 0;
			var previousSource = 0;
			var result = '';
			var next;
			var mapping;
			var nameIdx;
			var sourceIdx;

			var mappings = this._mappings.toArray();
			for (var i = 0, len = mappings.length; i < len; i++) {
				mapping = mappings[i];
				next = '';

				if (mapping.generatedLine !== previousGeneratedLine) {
					previousGeneratedColumn = 0;
					while (mapping.generatedLine !== previousGeneratedLine) {
						next += ';';
						previousGeneratedLine++;
					}
				} else {
					if (i > 0) {
						if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
							continue;
						}
						next += ',';
					}
				}

				next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
				previousGeneratedColumn = mapping.generatedColumn;

				if (mapping.source != null) {
					sourceIdx = this._sources.indexOf(mapping.source);
					next += base64VLQ.encode(sourceIdx - previousSource);
					previousSource = sourceIdx;

					next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
					previousOriginalLine = mapping.originalLine - 1;

					next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
					previousOriginalColumn = mapping.originalColumn;

					if (mapping.name != null) {
						nameIdx = this._names.indexOf(mapping.name);
						next += base64VLQ.encode(nameIdx - previousName);
						previousName = nameIdx;
					}
				}

				result += next;
			}

			return result;
		};

		SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
			return aSources.map(function (source) {
				if (!this._sourcesContents) {
					return null;
				}
				if (aSourceRoot != null) {
					source = util.relative(aSourceRoot, source);
				}
				var key = util.toSetString(source);
				return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
			}, this);
		};

		SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
			var map = {
				version: this._version,
				sources: this._sources.toArray(),
				names: this._names.toArray(),
				mappings: this._serializeMappings()
			};
			if (this._file != null) {
				map.file = this._file;
			}
			if (this._sourceRoot != null) {
				map.sourceRoot = this._sourceRoot;
			}
			if (this._sourcesContents) {
				map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
			}

			return map;
		};

		SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
			return JSON.stringify(this.toJSON());
		};

		exports.SourceMapGenerator = SourceMapGenerator;
	}, function (module, exports, __webpack_require__) {
		exports.SourceMapGenerator = __webpack_require__(283).SourceMapGenerator;
		exports.SourceMapConsumer = __webpack_require__(624).SourceMapConsumer;
		exports.SourceNode = __webpack_require__(625).SourceNode;
	}, function (module, exports, __webpack_require__) {
		(function (module) {
			'use strict';

			function assembleStyles() {
				var styles = {
					modifiers: {
						reset: [0, 0],
						bold: [1, 22],
						dim: [2, 22],
						italic: [3, 23],
						underline: [4, 24],
						inverse: [7, 27],
						hidden: [8, 28],
						strikethrough: [9, 29]
					},
					colors: {
						black: [30, 39],
						red: [31, 39],
						green: [32, 39],
						yellow: [33, 39],
						blue: [34, 39],
						magenta: [35, 39],
						cyan: [36, 39],
						white: [37, 39],
						gray: [90, 39]
					},
					bgColors: {
						bgBlack: [40, 49],
						bgRed: [41, 49],
						bgGreen: [42, 49],
						bgYellow: [43, 49],
						bgBlue: [44, 49],
						bgMagenta: [45, 49],
						bgCyan: [46, 49],
						bgWhite: [47, 49]
					}
				};

				styles.colors.grey = styles.colors.gray;

				Object.keys(styles).forEach(function (groupName) {
					var group = styles[groupName];

					Object.keys(group).forEach(function (styleName) {
						var style = group[styleName];

						styles[styleName] = group[styleName] = {
							open: '\x1B[' + style[0] + 'm',
							close: '\x1B[' + style[1] + 'm'
						};
					});

					Object.defineProperty(styles, groupName, {
						value: group,
						enumerable: false
					});
				});

				return styles;
			}

			Object.defineProperty(module, 'exports', {
				enumerable: true,
				get: assembleStyles
			});
		}).call(exports, __webpack_require__(75)(module));
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(186);
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (dest, src) {
			if (!dest || !src) return;

			return (0, _mergeWith2.default)(dest, src, function (a, b) {
				if (b && Array.isArray(a)) {
					var newArray = b.slice(0);

					for (var _iterator = a, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var item = _ref;

						if (newArray.indexOf(item) < 0) {
							newArray.push(item);
						}
					}

					return newArray;
				}
			});
		};

		var _mergeWith = __webpack_require__(596);

		var _mergeWith2 = _interopRequireDefault(_mergeWith);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (ast, comments, tokens) {
			if (ast) {
				if (ast.type === "Program") {
					return t.file(ast, comments || [], tokens || []);
				} else if (ast.type === "File") {
					return ast;
				}
			}

			throw new Error("Not a valid ast?");
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (whitelist) {
			var outputType = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];

			var namespace = t.identifier("babelHelpers");

			var builder = function builder(body) {
				return buildHelpers(body, namespace, whitelist);
			};

			var tree = void 0;

			var build = {
				global: buildGlobal,
				umd: buildUmd,
				var: buildVar
			}[outputType];

			if (build) {
				tree = build(namespace, builder);
			} else {
				throw new Error(messages.get("unsupportedOutputType", outputType));
			}

			return (0, _babelGenerator2.default)(tree).code;
		};

		var _babelHelpers = __webpack_require__(199);

		var helpers = _interopRequireWildcard(_babelHelpers);

		var _babelGenerator = __webpack_require__(189);

		var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _each = __webpack_require__(114);

		var _each2 = _interopRequireDefault(_each);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var buildUmdWrapper = (0, _babelTemplate2.default)("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");

		function buildGlobal(namespace, builder) {
			var body = [];
			var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
			var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);

			body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));

			builder(body);

			return tree;
		}

		function buildUmd(namespace, builder) {
			var body = [];
			body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));

			builder(body);

			return t.program([buildUmdWrapper({
				FACTORY_PARAMETERS: t.identifier("global"),
				BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
				COMMON_ARGUMENTS: t.identifier("exports"),
				AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
				FACTORY_BODY: body,
				UMD_ROOT: t.identifier("this")
			})]);
		}

		function buildVar(namespace, builder) {
			var body = [];
			body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
			builder(body);
			body.push(t.expressionStatement(namespace));
			return t.program(body);
		}

		function buildHelpers(body, namespace, whitelist) {
			(0, _each2.default)(helpers.list, function (name) {
				if (whitelist && whitelist.indexOf(name) < 0) return;

				var key = t.identifier(name);
				body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
			});
		}
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _node = __webpack_require__(239);

		var _node2 = _interopRequireDefault(_node);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var verboseDebug = (0, _node2.default)("babel:verbose");
		var generalDebug = (0, _node2.default)("babel");

		var seenDeprecatedMessages = [];

		var Logger = function () {
			function Logger(file, filename) {
				(0, _classCallCheck3.default)(this, Logger);

				this.filename = filename;
				this.file = file;
			}

			Logger.prototype._buildMessage = function _buildMessage(msg) {
				var parts = "[BABEL] " + this.filename;
				if (msg) parts += ": " + msg;
				return parts;
			};

			Logger.prototype.warn = function warn(msg) {
				console.warn(this._buildMessage(msg));
			};

			Logger.prototype.error = function error(msg) {
				var Constructor = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];

				throw new Constructor(this._buildMessage(msg));
			};

			Logger.prototype.deprecate = function deprecate(msg) {
				if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;

				msg = this._buildMessage(msg);

				if (seenDeprecatedMessages.indexOf(msg) >= 0) return;

				seenDeprecatedMessages.push(msg);

				console.error(msg);
			};

			Logger.prototype.verbose = function verbose(msg) {
				if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
			};

			Logger.prototype.debug = function debug(msg) {
				if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
			};

			Logger.prototype.deopt = function deopt(node, msg) {
				this.debug(msg);
			};

			return Logger;
		}();

		exports.default = Logger;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.ImportDeclaration = exports.ModuleDeclaration = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.ExportDeclaration = ExportDeclaration;
		exports.Scope = Scope;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var ModuleDeclaration = exports.ModuleDeclaration = {
			enter: function enter(path, file) {
				var node = path.node;

				if (node.source) {
					node.source.value = file.resolveModuleSource(node.source.value);
				}
			}
		};

		var ImportDeclaration = exports.ImportDeclaration = {
			exit: function exit(path, file) {
				var node = path.node;

				var specifiers = [];
				var imported = [];
				file.metadata.modules.imports.push({
					source: node.source.value,
					imported: imported,
					specifiers: specifiers
				});

				for (var _iterator = path.get("specifiers"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var specifier = _ref;

					var local = specifier.node.local.name;

					if (specifier.isImportDefaultSpecifier()) {
						imported.push("default");
						specifiers.push({
							kind: "named",
							imported: "default",
							local: local
						});
					}

					if (specifier.isImportSpecifier()) {
						var importedName = specifier.node.imported.name;
						imported.push(importedName);
						specifiers.push({
							kind: "named",
							imported: importedName,
							local: local
						});
					}

					if (specifier.isImportNamespaceSpecifier()) {
						imported.push("*");
						specifiers.push({
							kind: "namespace",
							local: local
						});
					}
				}
			}
		};

		function ExportDeclaration(path, file) {
			var node = path.node;

			var source = node.source ? node.source.value : null;
			var exports = file.metadata.modules.exports;

			var declar = path.get("declaration");
			if (declar.isStatement()) {
				var bindings = declar.getBindingIdentifiers();

				for (var name in bindings) {
					exports.exported.push(name);
					exports.specifiers.push({
						kind: "local",
						local: name,
						exported: path.isExportDefaultDeclaration() ? "default" : name
					});
				}
			}

			if (path.isExportNamedDeclaration() && node.specifiers) {
				for (var _iterator2 = node.specifiers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var specifier = _ref2;

					var exported = specifier.exported.name;
					exports.exported.push(exported);

					if (t.isExportDefaultSpecifier(specifier)) {
						exports.specifiers.push({
							kind: "external",
							local: exported,
							exported: exported,
							source: source
						});
					}

					if (t.isExportNamespaceSpecifier(specifier)) {
						exports.specifiers.push({
							kind: "external-namespace",
							exported: exported,
							source: source
						});
					}

					var local = specifier.local;
					if (!local) continue;

					if (source) {
						exports.specifiers.push({
							kind: "external",
							local: local.name,
							exported: exported,
							source: source
						});
					}

					if (!source) {
						exports.specifiers.push({
							kind: "local",
							local: local.name,
							exported: exported
						});
					}
				}
			}

			if (path.isExportAllDeclaration()) {
				exports.specifiers.push({
					kind: "external-all",
					source: source
				});
			}
		}

		function Scope(path) {
			path.skip();
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _plugin = __webpack_require__(77);

		var _plugin2 = _interopRequireDefault(_plugin);

		var _sortBy = __webpack_require__(600);

		var _sortBy2 = _interopRequireDefault(_sortBy);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.default = new _plugin2.default({

			name: "internal.blockHoist",

			visitor: {
				Block: {
					exit: function exit(_ref) {
						var node = _ref.node;

						var hasChange = false;
						for (var i = 0; i < node.body.length; i++) {
							var bodyNode = node.body[i];
							if (bodyNode && bodyNode._blockHoist != null) {
								hasChange = true;
								break;
							}
						}
						if (!hasChange) return;

						node.body = (0, _sortBy2.default)(node.body, function (bodyNode) {
							var priority = bodyNode && bodyNode._blockHoist;
							if (priority == null) priority = 1;
							if (priority === true) priority = 2;

							return -1 * priority;
						});
					}
				}
			}
		});
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _symbol = __webpack_require__(9);

		var _symbol2 = _interopRequireDefault(_symbol);

		var _plugin = __webpack_require__(77);

		var _plugin2 = _interopRequireDefault(_plugin);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var SUPER_THIS_BOUND = (0, _symbol2.default)("super this bound");

		var superVisitor = {
			CallExpression: function CallExpression(path) {
				if (!path.get("callee").isSuper()) return;

				var node = path.node;

				if (node[SUPER_THIS_BOUND]) return;
				node[SUPER_THIS_BOUND] = true;

				path.replaceWith(t.assignmentExpression("=", this.id, node));
			}
		};

		exports.default = new _plugin2.default({
			name: "internal.shadowFunctions",

			visitor: {
				ThisExpression: function ThisExpression(path) {
					remap(path, "this");
				},
				ReferencedIdentifier: function ReferencedIdentifier(path) {
					if (path.node.name === "arguments") {
						remap(path, "arguments");
					}
				}
			}
		});

		function shouldShadow(path, shadowPath) {
			if (path.is("_forceShadow")) {
				return true;
			} else {
				return shadowPath;
			}
		}

		function remap(path, key) {
			var shadowPath = path.inShadow(key);
			if (!shouldShadow(path, shadowPath)) return;

			var shadowFunction = path.node._shadowedFunctionLiteral;

			var currentFunction = void 0;
			var passedShadowFunction = false;

			var fnPath = path.findParent(function (path) {
				if (path.isProgram() || path.isFunction()) {
					currentFunction = currentFunction || path;
				}

				if (path.isProgram()) {
					passedShadowFunction = true;

					return true;
				} else if (path.isFunction() && !path.isArrowFunctionExpression()) {
					if (shadowFunction) {
						if (path === shadowFunction || path.node === shadowFunction.node) return true;
					} else {
						if (!path.is("shadow")) return true;
					}

					passedShadowFunction = true;
					return false;
				}

				return false;
			});

			if (shadowFunction && fnPath.isProgram() && !shadowFunction.isProgram()) {
				fnPath = path.findParent(function (p) {
					return p.isProgram() || p.isFunction();
				});
			}

			if (fnPath === currentFunction) return;

			if (!passedShadowFunction) return;

			var cached = fnPath.getData(key);
			if (cached) return path.replaceWith(cached);

			var id = path.scope.generateUidIdentifier(key);

			fnPath.setData(key, id);

			var classPath = fnPath.findParent(function (p) {
				return p.isClass();
			});
			var hasSuperClass = !!(classPath && classPath.node && classPath.node.superClass);

			if (key === "this" && fnPath.isMethod({ kind: "constructor" }) && hasSuperClass) {
				fnPath.scope.push({ id: id });

				fnPath.traverse(superVisitor, { id: id });
			} else {
				var init = key === "this" ? t.thisExpression() : t.identifier(key);

				fnPath.scope.push({ id: id, init: init });
			}

			return path.replaceWith(id);
		}
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _normalizeAst = __webpack_require__(288);

		var _normalizeAst2 = _interopRequireDefault(_normalizeAst);

		var _plugin = __webpack_require__(77);

		var _plugin2 = _interopRequireDefault(_plugin);

		var _file = __webpack_require__(121);

		var _file2 = _interopRequireDefault(_file);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Pipeline = function () {
			function Pipeline() {
				(0, _classCallCheck3.default)(this, Pipeline);
			}

			Pipeline.prototype.lint = function lint(code) {
				var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

				opts.code = false;
				opts.mode = "lint";
				return this.transform(code, opts);
			};

			Pipeline.prototype.pretransform = function pretransform(code, opts) {
				var file = new _file2.default(opts, this);
				return file.wrap(code, function () {
					file.addCode(code);
					file.parseCode(code);
					return file;
				});
			};

			Pipeline.prototype.transform = function transform(code, opts) {
				var file = new _file2.default(opts, this);
				return file.wrap(code, function () {
					file.addCode(code);
					file.parseCode(code);
					return file.transform();
				});
			};

			Pipeline.prototype.analyse = function analyse(code) {
				var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
				var visitor = arguments[2];

				opts.code = false;
				if (visitor) {
					opts.plugins = opts.plugins || [];
					opts.plugins.push(new _plugin2.default({ visitor: visitor }));
				}
				return this.transform(code, opts).metadata;
			};

			Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {
				ast = (0, _normalizeAst2.default)(ast);

				var file = new _file2.default(opts, this);
				return file.wrap(code, function () {
					file.addCode(code);
					file.addAst(ast);
					return file.transform();
				});
			};

			return Pipeline;
		}();

		exports.default = Pipeline;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _possibleConstructorReturn2 = __webpack_require__(39);

		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

		var _inherits2 = __webpack_require__(38);

		var _inherits3 = _interopRequireDefault(_inherits2);

		var _store = __webpack_require__(120);

		var _store2 = _interopRequireDefault(_store);

		var _file5 = __webpack_require__(121);

		var _file6 = _interopRequireDefault(_file5);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var PluginPass = function (_Store) {
			(0, _inherits3.default)(PluginPass, _Store);

			function PluginPass(file, plugin) {
				var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
				(0, _classCallCheck3.default)(this, PluginPass);

				var _this = (0, _possibleConstructorReturn3.default)(this, _Store.call(this));

				_this.plugin = plugin;
				_this.key = plugin.key;
				_this.file = file;
				_this.opts = options;
				return _this;
			}

			PluginPass.prototype.addHelper = function addHelper() {
				var _file;

				return (_file = this.file).addHelper.apply(_file, arguments);
			};

			PluginPass.prototype.addImport = function addImport() {
				var _file2;

				return (_file2 = this.file).addImport.apply(_file2, arguments);
			};

			PluginPass.prototype.getModuleName = function getModuleName() {
				var _file3;

				return (_file3 = this.file).getModuleName.apply(_file3, arguments);
			};

			PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
				var _file4;

				return (_file4 = this.file).buildCodeFrameError.apply(_file4, arguments);
			};

			return PluginPass;
		}(_store2.default);

		exports.default = PluginPass;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _trimEnd = __webpack_require__(607);

		var _trimEnd2 = _interopRequireDefault(_trimEnd);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var SPACES_RE = /^[ \t]+$/;

		var Buffer = function () {
			function Buffer(map) {
				(0, _classCallCheck3.default)(this, Buffer);
				this._map = null;
				this._buf = [];
				this._last = "";
				this._queue = [];
				this._position = {
					line: 1,
					column: 0
				};
				this._sourcePosition = {
					identifierName: null,
					line: null,
					column: null,
					filename: null
				};

				this._map = map;
			}

			Buffer.prototype.get = function get() {
				this._flush();

				return {
					code: (0, _trimEnd2.default)(this._buf.join("")),
					map: this._map ? this._map.get() : null
				};
			};

			Buffer.prototype.append = function append(str) {
				this._flush();
				var _sourcePosition = this._sourcePosition;
				var line = _sourcePosition.line;
				var column = _sourcePosition.column;
				var filename = _sourcePosition.filename;
				var identifierName = _sourcePosition.identifierName;

				this._append(str, line, column, identifierName, filename);
			};

			Buffer.prototype.queue = function queue(str) {
				if (str === "\n") while (this._queue.length > 0 && SPACES_RE.test(this._queue[0][0])) {
					this._queue.shift();
				}var _sourcePosition2 = this._sourcePosition;
				var line = _sourcePosition2.line;
				var column = _sourcePosition2.column;
				var filename = _sourcePosition2.filename;
				var identifierName = _sourcePosition2.identifierName;

				this._queue.unshift([str, line, column, identifierName, filename]);
			};

			Buffer.prototype._flush = function _flush() {
				var item = void 0;
				while (item = this._queue.pop()) {
					this._append.apply(this, item);
				}
			};

			Buffer.prototype._append = function _append(str, line, column, identifierName, filename) {
				if (this._map && str[0] !== "\n") {
					this._map.mark(this._position.line, this._position.column, line, column, identifierName, filename);
				}

				this._buf.push(str);
				this._last = str[str.length - 1];

				for (var i = 0; i < str.length; i++) {
					if (str[i] === "\n") {
						this._position.line++;
						this._position.column = 0;
					} else {
						this._position.column++;
					}
				}
			};

			Buffer.prototype.removeTrailingNewline = function removeTrailingNewline() {
				if (this._queue.length > 0 && this._queue[0][0] === "\n") this._queue.shift();
			};

			Buffer.prototype.removeLastSemicolon = function removeLastSemicolon() {
				if (this._queue.length > 0 && this._queue[0][0] === ";") this._queue.shift();
			};

			Buffer.prototype.endsWith = function endsWith(suffix) {
				if (suffix.length === 1) {
					var last = void 0;
					if (this._queue.length > 0) {
						var str = this._queue[0][0];
						last = str[str.length - 1];
					} else {
						last = this._last;
					}

					return last === suffix;
				}

				var end = this._last + this._queue.reduce(function (acc, item) {
					return item[0] + acc;
				}, "");
				if (suffix.length <= end.length) {
					return end.slice(-suffix.length) === suffix;
				}

				return false;
			};

			Buffer.prototype.hasContent = function hasContent() {
				return this._queue.length > 0 || !!this._last;
			};

			Buffer.prototype.source = function source(prop, loc) {
				if (prop && !loc) return;

				var pos = loc ? loc[prop] : null;

				this._sourcePosition.identifierName = loc && loc.identifierName || null;
				this._sourcePosition.line = pos ? pos.line : null;
				this._sourcePosition.column = pos ? pos.column : null;
				this._sourcePosition.filename = loc && loc.filename || null;
			};

			Buffer.prototype.withSource = function withSource(prop, loc, cb) {
				if (!this._map) return cb();

				var originalLine = this._sourcePosition.line;
				var originalColumn = this._sourcePosition.column;
				var originalFilename = this._sourcePosition.filename;
				var originalIdentifierName = this._sourcePosition.identifierName;

				this.source(prop, loc);

				cb();

				this._sourcePosition.line = originalLine;
				this._sourcePosition.column = originalColumn;
				this._sourcePosition.filename = originalFilename;
				this._sourcePosition.identifierName = originalIdentifierName;
			};

			Buffer.prototype.getCurrentColumn = function getCurrentColumn() {
				var extra = this._queue.reduce(function (acc, item) {
					return item[0] + acc;
				}, "");
				var lastIndex = extra.lastIndexOf("\n");

				return lastIndex === -1 ? this._position.column + extra.length : extra.length - 1 - lastIndex;
			};

			Buffer.prototype.getCurrentLine = function getCurrentLine() {
				var extra = this._queue.reduce(function (acc, item) {
					return item[0] + acc;
				}, "");

				var count = 0;
				for (var i = 0; i < extra.length; i++) {
					if (extra[i] === "\n") count++;
				}

				return this._position.line + count;
			};

			return Buffer;
		}();

		exports.default = Buffer;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.File = File;
		exports.Program = Program;
		exports.BlockStatement = BlockStatement;
		exports.Noop = Noop;
		exports.Directive = Directive;

		var _types = __webpack_require__(127);

		Object.defineProperty(exports, "DirectiveLiteral", {
			enumerable: true,
			get: function get() {
				return _types.StringLiteral;
			}
		});
		function File(node) {
			this.print(node.program, node);
		}

		function Program(node) {
			this.printInnerComments(node, false);

			this.printSequence(node.directives, node);
			if (node.directives && node.directives.length) this.newline();

			this.printSequence(node.body, node);
		}

		function BlockStatement(node) {
			this.token("{");
			this.printInnerComments(node);
			if (node.body.length) {
				this.newline();

				this.printSequence(node.directives, node, { indent: true });
				if (node.directives && node.directives.length) this.newline();

				this.printSequence(node.body, node, { indent: true });
				this.removeTrailingNewline();

				this.source("end", node.loc);

				if (!this.endsWith("\n")) this.newline();

				this.rightBrace();
			} else {
				this.source("end", node.loc);
				this.token("}");
			}
		}

		function Noop() {}

		function Directive(node) {
			this.print(node.value, node);
			this.semicolon();
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.ClassDeclaration = ClassDeclaration;
		exports.ClassBody = ClassBody;
		exports.ClassProperty = ClassProperty;
		exports.ClassMethod = ClassMethod;
		function ClassDeclaration(node) {
			this.printJoin(node.decorators, node);
			this.word("class");

			if (node.id) {
				this.space();
				this.print(node.id, node);
			}

			this.print(node.typeParameters, node);

			if (node.superClass) {
				this.space();
				this.word("extends");
				this.space();
				this.print(node.superClass, node);
				this.print(node.superTypeParameters, node);
			}

			if (node.implements) {
				this.space();
				this.word("implements");
				this.space();
				this.printList(node.implements, node);
			}

			this.space();
			this.print(node.body, node);
		}

		exports.ClassExpression = ClassDeclaration;
		function ClassBody(node) {
			this.token("{");
			this.printInnerComments(node);
			if (node.body.length === 0) {
				this.token("}");
			} else {
				this.newline();

				this.indent();
				this.printSequence(node.body, node);
				this.dedent();

				if (!this.endsWith("\n")) this.newline();

				this.rightBrace();
			}
		}

		function ClassProperty(node) {
			this.printJoin(node.decorators, node);

			if (node.static) {
				this.word("static");
				this.space();
			}
			this.print(node.key, node);
			this.print(node.typeAnnotation, node);
			if (node.value) {
				this.space();
				this.token("=");
				this.space();
				this.print(node.value, node);
			}
			this.semicolon();
		}

		function ClassMethod(node) {
			this.printJoin(node.decorators, node);

			if (node.static) {
				this.word("static");
				this.space();
			}

			if (node.kind === "constructorCall") {
				this.word("call");
				this.space();
			}

			this._method(node);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.LogicalExpression = exports.BinaryExpression = exports.AwaitExpression = exports.YieldExpression = undefined;
		exports.UnaryExpression = UnaryExpression;
		exports.DoExpression = DoExpression;
		exports.ParenthesizedExpression = ParenthesizedExpression;
		exports.UpdateExpression = UpdateExpression;
		exports.ConditionalExpression = ConditionalExpression;
		exports.NewExpression = NewExpression;
		exports.SequenceExpression = SequenceExpression;
		exports.ThisExpression = ThisExpression;
		exports.Super = Super;
		exports.Decorator = Decorator;
		exports.CallExpression = CallExpression;
		exports.EmptyStatement = EmptyStatement;
		exports.ExpressionStatement = ExpressionStatement;
		exports.AssignmentPattern = AssignmentPattern;
		exports.AssignmentExpression = AssignmentExpression;
		exports.BindExpression = BindExpression;
		exports.MemberExpression = MemberExpression;
		exports.MetaProperty = MetaProperty;

		var _isNumber = __webpack_require__(272);

		var _isNumber2 = _interopRequireDefault(_isNumber);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _node = __webpack_require__(190);

		var n = _interopRequireWildcard(_node);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function UnaryExpression(node) {
			if (node.operator === "void" || node.operator === "delete" || node.operator === "typeof") {
				this.word(node.operator);
				this.space();
			} else {
				this.token(node.operator);
			}

			this.print(node.argument, node);
		}

		function DoExpression(node) {
			this.word("do");
			this.space();
			this.print(node.body, node);
		}

		function ParenthesizedExpression(node) {
			this.token("(");
			this.print(node.expression, node);
			this.token(")");
		}

		function UpdateExpression(node) {
			if (node.prefix) {
				this.token(node.operator);
				this.print(node.argument, node);
			} else {
				this.print(node.argument, node);
				this.token(node.operator);
			}
		}

		function ConditionalExpression(node) {
			this.print(node.test, node);
			this.space();
			this.token("?");
			this.space();
			this.print(node.consequent, node);
			this.space();
			this.token(":");
			this.space();
			this.print(node.alternate, node);
		}

		function NewExpression(node, parent) {
			this.word("new");
			this.space();
			this.print(node.callee, node);
			if (node.arguments.length === 0 && this.format.minified && !t.isCallExpression(parent, { callee: node }) && !t.isMemberExpression(parent) && !t.isNewExpression(parent)) return;

			this.token("(");
			this.printList(node.arguments, node);
			this.token(")");
		}

		function SequenceExpression(node) {
			this.printList(node.expressions, node);
		}

		function ThisExpression() {
			this.word("this");
		}

		function Super() {
			this.word("super");
		}

		function Decorator(node) {
			this.token("@");
			this.print(node.expression, node);
			this.newline();
		}

		function commaSeparatorNewline() {
			this.token(",");
			this.newline();

			if (!this.endsWith("\n")) this.space();
		}

		function CallExpression(node) {
			this.print(node.callee, node);

			this.token("(");

			var isPrettyCall = node._prettyCall;

			var separator = void 0;
			if (isPrettyCall) {
				separator = commaSeparatorNewline;
				this.newline();
				this.indent();
			}

			this.printList(node.arguments, node, { separator: separator });

			if (isPrettyCall) {
				this.newline();
				this.dedent();
			}

			this.token(")");
		}

		function buildYieldAwait(keyword) {
			return function (node) {
				this.word(keyword);

				if (node.delegate) {
					this.token("*");
				}

				if (node.argument) {
					this.space();
					var terminatorState = this.startTerminatorless();
					this.print(node.argument, node);
					this.endTerminatorless(terminatorState);
				}
			};
		}

		var YieldExpression = exports.YieldExpression = buildYieldAwait("yield");
		var AwaitExpression = exports.AwaitExpression = buildYieldAwait("await");

		function EmptyStatement() {
			this.semicolon(true);
		}

		function ExpressionStatement(node) {
			this.print(node.expression, node);
			this.semicolon();
		}

		function AssignmentPattern(node) {
			this.print(node.left, node);
			this.space();
			this.token("=");
			this.space();
			this.print(node.right, node);
		}

		function AssignmentExpression(node, parent) {
			var parens = this.inForStatementInitCounter && node.operator === "in" && !n.needsParens(node, parent);

			if (parens) {
				this.token("(");
			}

			this.print(node.left, node);

			this.space();
			if (node.operator === "in" || node.operator === "instanceof") {
				this.word(node.operator);
			} else {
				this.token(node.operator);
			}
			this.space();

			this.print(node.right, node);

			if (parens) {
				this.token(")");
			}
		}

		function BindExpression(node) {
			this.print(node.object, node);
			this.token("::");
			this.print(node.callee, node);
		}

		exports.BinaryExpression = AssignmentExpression;
		exports.LogicalExpression = AssignmentExpression;
		function MemberExpression(node) {
			this.print(node.object, node);

			if (!node.computed && t.isMemberExpression(node.property)) {
				throw new TypeError("Got a MemberExpression for MemberExpression property");
			}

			var computed = node.computed;
			if (t.isLiteral(node.property) && (0, _isNumber2.default)(node.property.value)) {
				computed = true;
			}

			if (computed) {
				this.token("[");
				this.print(node.property, node);
				this.token("]");
			} else {
				this.token(".");
				this.print(node.property, node);
			}
		}

		function MetaProperty(node) {
			this.print(node.meta, node);
			this.token(".");
			this.print(node.property, node);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.AnyTypeAnnotation = AnyTypeAnnotation;
		exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
		exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
		exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
		exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
		exports.DeclareClass = DeclareClass;
		exports.DeclareFunction = DeclareFunction;
		exports.DeclareInterface = DeclareInterface;
		exports.DeclareModule = DeclareModule;
		exports.DeclareModuleExports = DeclareModuleExports;
		exports.DeclareTypeAlias = DeclareTypeAlias;
		exports.DeclareVariable = DeclareVariable;
		exports.ExistentialTypeParam = ExistentialTypeParam;
		exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
		exports.FunctionTypeParam = FunctionTypeParam;
		exports.InterfaceExtends = InterfaceExtends;
		exports._interfaceish = _interfaceish;
		exports.InterfaceDeclaration = InterfaceDeclaration;
		exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
		exports.MixedTypeAnnotation = MixedTypeAnnotation;
		exports.NullableTypeAnnotation = NullableTypeAnnotation;

		var _types = __webpack_require__(127);

		Object.defineProperty(exports, "NumericLiteralTypeAnnotation", {
			enumerable: true,
			get: function get() {
				return _types.NumericLiteral;
			}
		});
		Object.defineProperty(exports, "StringLiteralTypeAnnotation", {
			enumerable: true,
			get: function get() {
				return _types.StringLiteral;
			}
		});
		exports.NumberTypeAnnotation = NumberTypeAnnotation;
		exports.StringTypeAnnotation = StringTypeAnnotation;
		exports.ThisTypeAnnotation = ThisTypeAnnotation;
		exports.TupleTypeAnnotation = TupleTypeAnnotation;
		exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
		exports.TypeAlias = TypeAlias;
		exports.TypeAnnotation = TypeAnnotation;
		exports.TypeParameter = TypeParameter;
		exports.TypeParameterInstantiation = TypeParameterInstantiation;
		exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
		exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
		exports.ObjectTypeIndexer = ObjectTypeIndexer;
		exports.ObjectTypeProperty = ObjectTypeProperty;
		exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
		exports.UnionTypeAnnotation = UnionTypeAnnotation;
		exports.TypeCastExpression = TypeCastExpression;
		exports.VoidTypeAnnotation = VoidTypeAnnotation;
		function AnyTypeAnnotation() {
			this.word("any");
		}

		function ArrayTypeAnnotation(node) {
			this.print(node.elementType, node);
			this.token("[");
			this.token("]");
		}

		function BooleanTypeAnnotation() {
			this.word("bool");
		}

		function BooleanLiteralTypeAnnotation(node) {
			this.word(node.value ? "true" : "false");
		}

		function NullLiteralTypeAnnotation() {
			this.word("null");
		}

		function DeclareClass(node) {
			this.word("declare");
			this.space();
			this.word("class");
			this.space();
			this._interfaceish(node);
		}

		function DeclareFunction(node) {
			this.word("declare");
			this.space();
			this.word("function");
			this.space();
			this.print(node.id, node);
			this.print(node.id.typeAnnotation.typeAnnotation, node);
			this.semicolon();
		}

		function DeclareInterface(node) {
			this.word("declare");
			this.space();
			this.InterfaceDeclaration(node);
		}

		function DeclareModule(node) {
			this.word("declare");
			this.space();
			this.word("module");
			this.space();
			this.print(node.id, node);
			this.space();
			this.print(node.body, node);
		}

		function DeclareModuleExports(node) {
			this.word("declare");
			this.space();
			this.word("module");
			this.token(".");
			this.word("exports");
			this.print(node.typeAnnotation, node);
		}

		function DeclareTypeAlias(node) {
			this.word("declare");
			this.space();
			this.TypeAlias(node);
		}

		function DeclareVariable(node) {
			this.word("declare");
			this.space();
			this.word("var");
			this.space();
			this.print(node.id, node);
			this.print(node.id.typeAnnotation, node);
			this.semicolon();
		}

		function ExistentialTypeParam() {
			this.token("*");
		}

		function FunctionTypeAnnotation(node, parent) {
			this.print(node.typeParameters, node);
			this.token("(");
			this.printList(node.params, node);

			if (node.rest) {
				if (node.params.length) {
					this.token(",");
					this.space();
				}
				this.token("...");
				this.print(node.rest, node);
			}

			this.token(")");

			if (parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
				this.token(":");
			} else {
				this.space();
				this.token("=>");
			}

			this.space();
			this.print(node.returnType, node);
		}

		function FunctionTypeParam(node) {
			this.print(node.name, node);
			if (node.optional) this.token("?");
			this.token(":");
			this.space();
			this.print(node.typeAnnotation, node);
		}

		function InterfaceExtends(node) {
			this.print(node.id, node);
			this.print(node.typeParameters, node);
		}

		exports.ClassImplements = InterfaceExtends;
		exports.GenericTypeAnnotation = InterfaceExtends;
		function _interfaceish(node) {
			this.print(node.id, node);
			this.print(node.typeParameters, node);
			if (node.extends.length) {
				this.space();
				this.word("extends");
				this.space();
				this.printList(node.extends, node);
			}
			if (node.mixins && node.mixins.length) {
				this.space();
				this.word("mixins");
				this.space();
				this.printList(node.mixins, node);
			}
			this.space();
			this.print(node.body, node);
		}

		function InterfaceDeclaration(node) {
			this.word("interface");
			this.space();
			this._interfaceish(node);
		}

		function andSeparator() {
			this.space();
			this.token("&");
			this.space();
		}

		function IntersectionTypeAnnotation(node) {
			this.printJoin(node.types, node, { separator: andSeparator });
		}

		function MixedTypeAnnotation() {
			this.word("mixed");
		}

		function NullableTypeAnnotation(node) {
			this.token("?");
			this.print(node.typeAnnotation, node);
		}

		function NumberTypeAnnotation() {
			this.word("number");
		}

		function StringTypeAnnotation() {
			this.word("string");
		}

		function ThisTypeAnnotation() {
			this.word("this");
		}

		function TupleTypeAnnotation(node) {
			this.token("[");
			this.printList(node.types, node);
			this.token("]");
		}

		function TypeofTypeAnnotation(node) {
			this.word("typeof");
			this.space();
			this.print(node.argument, node);
		}

		function TypeAlias(node) {
			this.word("type");
			this.space();
			this.print(node.id, node);
			this.print(node.typeParameters, node);
			this.space();
			this.token("=");
			this.space();
			this.print(node.right, node);
			this.semicolon();
		}

		function TypeAnnotation(node) {
			this.token(":");
			this.space();
			if (node.optional) this.token("?");
			this.print(node.typeAnnotation, node);
		}

		function TypeParameter(node) {
			if (node.variance === "plus") {
				this.token("+");
			} else if (node.variance === "minus") {
				this.token("-");
			}

			this.word(node.name);

			if (node.bound) {
				this.print(node.bound, node);
			}

			if (node.default) {
				this.space();
				this.token("=");
				this.space();
				this.print(node.default, node);
			}
		}

		function TypeParameterInstantiation(node) {
			this.token("<");
			this.printList(node.params, node, {});
			this.token(">");
		}

		exports.TypeParameterDeclaration = TypeParameterInstantiation;
		function ObjectTypeAnnotation(node) {
			var _this = this;

			this.token("{");
			var props = node.properties.concat(node.callProperties, node.indexers);

			if (props.length) {
				this.space();

				this.printJoin(props, node, {
					indent: true,
					statement: true,
					iterator: function iterator() {
						if (props.length !== 1) {
							_this.semicolon();
							_this.space();
						}
					}
				});

				this.space();
			}

			this.token("}");
		}

		function ObjectTypeCallProperty(node) {
			if (node.static) {
				this.word("static");
				this.space();
			}
			this.print(node.value, node);
		}

		function ObjectTypeIndexer(node) {
			if (node.static) {
				this.word("static");
				this.space();
			}
			this.token("[");
			this.print(node.id, node);
			this.token(":");
			this.space();
			this.print(node.key, node);
			this.token("]");
			this.token(":");
			this.space();
			this.print(node.value, node);
		}

		function ObjectTypeProperty(node) {
			if (node.static) {
				this.word("static");
				this.space();
			}
			this.print(node.key, node);
			if (node.optional) this.token("?");
			this.token(":");
			this.space();
			this.print(node.value, node);
		}

		function QualifiedTypeIdentifier(node) {
			this.print(node.qualification, node);
			this.token(".");
			this.print(node.id, node);
		}

		function orSeparator() {
			this.space();
			this.token("|");
			this.space();
		}

		function UnionTypeAnnotation(node) {
			this.printJoin(node.types, node, { separator: orSeparator });
		}

		function TypeCastExpression(node) {
			this.token("(");
			this.print(node.expression, node);
			this.print(node.typeAnnotation, node);
			this.token(")");
		}

		function VoidTypeAnnotation() {
			this.word("void");
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.JSXAttribute = JSXAttribute;
		exports.JSXIdentifier = JSXIdentifier;
		exports.JSXNamespacedName = JSXNamespacedName;
		exports.JSXMemberExpression = JSXMemberExpression;
		exports.JSXSpreadAttribute = JSXSpreadAttribute;
		exports.JSXExpressionContainer = JSXExpressionContainer;
		exports.JSXText = JSXText;
		exports.JSXElement = JSXElement;
		exports.JSXOpeningElement = JSXOpeningElement;
		exports.JSXClosingElement = JSXClosingElement;
		exports.JSXEmptyExpression = JSXEmptyExpression;

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function JSXAttribute(node) {
			this.print(node.name, node);
			if (node.value) {
				this.token("=");
				this.print(node.value, node);
			}
		}

		function JSXIdentifier(node) {
			this.word(node.name);
		}

		function JSXNamespacedName(node) {
			this.print(node.namespace, node);
			this.token(":");
			this.print(node.name, node);
		}

		function JSXMemberExpression(node) {
			this.print(node.object, node);
			this.token(".");
			this.print(node.property, node);
		}

		function JSXSpreadAttribute(node) {
			this.token("{");
			this.token("...");
			this.print(node.argument, node);
			this.token("}");
		}

		function JSXExpressionContainer(node) {
			this.token("{");
			this.print(node.expression, node);
			this.token("}");
		}

		function JSXText(node) {
			this.token(node.value);
		}

		function JSXElement(node) {
			var open = node.openingElement;
			this.print(open, node);
			if (open.selfClosing) return;

			this.indent();
			for (var _iterator = node.children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var child = _ref;

				this.print(child, node);
			}
			this.dedent();

			this.print(node.closingElement, node);
		}

		function spaceSeparator() {
			this.space();
		}

		function JSXOpeningElement(node) {
			this.token("<");
			this.print(node.name, node);
			if (node.attributes.length > 0) {
				this.space();
				this.printJoin(node.attributes, node, { separator: spaceSeparator });
			}
			if (node.selfClosing) {
				this.space();
				this.token("/>");
			} else {
				this.token(">");
			}
		}

		function JSXClosingElement(node) {
			this.token("</");
			this.print(node.name, node);
			this.token(">");
		}

		function JSXEmptyExpression() {}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.FunctionDeclaration = undefined;
		exports._params = _params;
		exports._method = _method;
		exports.FunctionExpression = FunctionExpression;
		exports.ArrowFunctionExpression = ArrowFunctionExpression;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _params(node) {
			var _this = this;

			this.print(node.typeParameters, node);
			this.token("(");
			this.printList(node.params, node, {
				iterator: function iterator(node) {
					if (node.optional) _this.token("?");
					_this.print(node.typeAnnotation, node);
				}
			});
			this.token(")");

			if (node.returnType) {
				this.print(node.returnType, node);
			}
		}

		function _method(node) {
			var kind = node.kind;
			var key = node.key;

			if (kind === "method" || kind === "init") {
				if (node.generator) {
					this.token("*");
				}
			}

			if (kind === "get" || kind === "set") {
				this.word(kind);
				this.space();
			}

			if (node.async) {
				this.word("async");
				this.space();
			}

			if (node.computed) {
				this.token("[");
				this.print(key, node);
				this.token("]");
			} else {
				this.print(key, node);
			}

			this._params(node);
			this.space();
			this.print(node.body, node);
		}

		function FunctionExpression(node) {
			if (node.async) {
				this.word("async");
				this.space();
			}
			this.word("function");
			if (node.generator) this.token("*");

			if (node.id) {
				this.space();
				this.print(node.id, node);
			} else {
				this.space();
			}

			this._params(node);
			this.space();
			this.print(node.body, node);
		}

		exports.FunctionDeclaration = FunctionExpression;
		function ArrowFunctionExpression(node) {
			if (node.async) {
				this.word("async");
				this.space();
			}

			if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
				this.print(node.params[0], node);
			} else {
				this._params(node);
			}

			this.space();
			this.token("=>");
			this.space();

			this.print(node.body, node);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.ImportSpecifier = ImportSpecifier;
		exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
		exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
		exports.ExportSpecifier = ExportSpecifier;
		exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
		exports.ExportAllDeclaration = ExportAllDeclaration;
		exports.ExportNamedDeclaration = ExportNamedDeclaration;
		exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
		exports.ImportDeclaration = ImportDeclaration;
		exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function ImportSpecifier(node) {
			this.print(node.imported, node);
			if (node.local && node.local.name !== node.imported.name) {
				this.space();
				this.word("as");
				this.space();
				this.print(node.local, node);
			}
		}

		function ImportDefaultSpecifier(node) {
			this.print(node.local, node);
		}

		function ExportDefaultSpecifier(node) {
			this.print(node.exported, node);
		}

		function ExportSpecifier(node) {
			this.print(node.local, node);
			if (node.exported && node.local.name !== node.exported.name) {
				this.space();
				this.word("as");
				this.space();
				this.print(node.exported, node);
			}
		}

		function ExportNamespaceSpecifier(node) {
			this.token("*");
			this.space();
			this.word("as");
			this.space();
			this.print(node.exported, node);
		}

		function ExportAllDeclaration(node) {
			this.word("export");
			this.space();
			this.token("*");
			if (node.exported) {
				this.space();
				this.word("as");
				this.space();
				this.print(node.exported, node);
			}
			this.space();
			this.word("from");
			this.space();
			this.print(node.source, node);
			this.semicolon();
		}

		function ExportNamedDeclaration() {
			this.word("export");
			this.space();
			ExportDeclaration.apply(this, arguments);
		}

		function ExportDefaultDeclaration() {
			this.word("export");
			this.space();
			this.word("default");
			this.space();
			ExportDeclaration.apply(this, arguments);
		}

		function ExportDeclaration(node) {
			if (node.declaration) {
				var declar = node.declaration;
				this.print(declar, node);
				if (!t.isStatement(declar)) this.semicolon();
			} else {
				if (node.exportKind === "type") {
					this.word("type");
					this.space();
				}

				var specifiers = node.specifiers.slice(0);

				var hasSpecial = false;
				while (true) {
					var first = specifiers[0];
					if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
						hasSpecial = true;
						this.print(specifiers.shift(), node);
						if (specifiers.length) {
							this.token(",");
							this.space();
						}
					} else {
						break;
					}
				}

				if (specifiers.length || !specifiers.length && !hasSpecial) {
					this.token("{");
					if (specifiers.length) {
						this.space();
						this.printList(specifiers, node);
						this.space();
					}
					this.token("}");
				}

				if (node.source) {
					this.space();
					this.word("from");
					this.space();
					this.print(node.source, node);
				}

				this.semicolon();
			}
		}

		function ImportDeclaration(node) {
			this.word("import");
			this.space();

			if (node.importKind === "type" || node.importKind === "typeof") {
				this.word(node.importKind);
				this.space();
			}

			var specifiers = node.specifiers.slice(0);
			if (specifiers && specifiers.length) {
				while (true) {
					var first = specifiers[0];
					if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
						this.print(specifiers.shift(), node);
						if (specifiers.length) {
							this.token(",");
							this.space();
						}
					} else {
						break;
					}
				}

				if (specifiers.length) {
					this.token("{");
					this.space();
					this.printList(specifiers, node);
					this.space();
					this.token("}");
				}

				this.space();
				this.word("from");
				this.space();
			}

			this.print(node.source, node);
			this.semicolon();
		}

		function ImportNamespaceSpecifier(node) {
			this.token("*");
			this.space();
			this.word("as");
			this.space();
			this.print(node.local, node);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.WithStatement = WithStatement;
		exports.IfStatement = IfStatement;
		exports.ForStatement = ForStatement;
		exports.WhileStatement = WhileStatement;
		exports.DoWhileStatement = DoWhileStatement;
		exports.LabeledStatement = LabeledStatement;
		exports.TryStatement = TryStatement;
		exports.CatchClause = CatchClause;
		exports.SwitchStatement = SwitchStatement;
		exports.SwitchCase = SwitchCase;
		exports.DebuggerStatement = DebuggerStatement;
		exports.VariableDeclaration = VariableDeclaration;
		exports.VariableDeclarator = VariableDeclarator;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function WithStatement(node) {
			this.word("with");
			this.space();
			this.token("(");
			this.print(node.object, node);
			this.token(")");
			this.printBlock(node);
		}

		function IfStatement(node) {
			this.word("if");
			this.space();
			this.token("(");
			this.print(node.test, node);
			this.token(")");
			this.space();

			var needsBlock = node.alternate && t.isIfStatement(getLastStatement(node.consequent));
			if (needsBlock) {
				this.token("{");
				this.newline();
				this.indent();
			}

			this.printAndIndentOnComments(node.consequent, node);

			if (needsBlock) {
				this.dedent();
				this.newline();
				this.token("}");
			}

			if (node.alternate) {
				if (this.endsWith("}")) this.space();
				this.word("else");
				this.space();
				this.printAndIndentOnComments(node.alternate, node);
			}
		}

		function getLastStatement(statement) {
			if (!t.isStatement(statement.body)) return statement;
			return getLastStatement(statement.body);
		}

		function ForStatement(node) {
			this.word("for");
			this.space();
			this.token("(");

			this.inForStatementInitCounter++;
			this.print(node.init, node);
			this.inForStatementInitCounter--;
			this.token(";");

			if (node.test) {
				this.space();
				this.print(node.test, node);
			}
			this.token(";");

			if (node.update) {
				this.space();
				this.print(node.update, node);
			}

			this.token(")");
			this.printBlock(node);
		}

		function WhileStatement(node) {
			this.word("while");
			this.space();
			this.token("(");
			this.print(node.test, node);
			this.token(")");
			this.printBlock(node);
		}

		var buildForXStatement = function buildForXStatement(op) {
			return function (node) {
				this.word("for");
				this.space();
				this.token("(");
				this.print(node.left, node);
				this.space();
				this.word(op);
				this.space();
				this.print(node.right, node);
				this.token(")");
				this.printBlock(node);
			};
		};

		var ForInStatement = exports.ForInStatement = buildForXStatement("in");
		var ForOfStatement = exports.ForOfStatement = buildForXStatement("of");

		function DoWhileStatement(node) {
			this.word("do");
			this.space();
			this.print(node.body, node);
			this.space();
			this.word("while");
			this.space();
			this.token("(");
			this.print(node.test, node);
			this.token(")");
			this.semicolon();
		}

		function buildLabelStatement(prefix) {
			var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];

			return function (node) {
				this.word(prefix);

				var label = node[key];
				if (label) {
					this.space();

					var terminatorState = this.startTerminatorless();
					this.print(label, node);
					this.endTerminatorless(terminatorState);
				}

				this.semicolon();
			};
		}

		var ContinueStatement = exports.ContinueStatement = buildLabelStatement("continue");
		var ReturnStatement = exports.ReturnStatement = buildLabelStatement("return", "argument");
		var BreakStatement = exports.BreakStatement = buildLabelStatement("break");
		var ThrowStatement = exports.ThrowStatement = buildLabelStatement("throw", "argument");

		function LabeledStatement(node) {
			this.print(node.label, node);
			this.token(":");
			this.space();
			this.print(node.body, node);
		}

		function TryStatement(node) {
			this.word("try");
			this.space();
			this.print(node.block, node);
			this.space();

			if (node.handlers) {
				this.print(node.handlers[0], node);
			} else {
				this.print(node.handler, node);
			}

			if (node.finalizer) {
				this.space();
				this.word("finally");
				this.space();
				this.print(node.finalizer, node);
			}
		}

		function CatchClause(node) {
			this.word("catch");
			this.space();
			this.token("(");
			this.print(node.param, node);
			this.token(")");
			this.space();
			this.print(node.body, node);
		}

		function SwitchStatement(node) {
			this.word("switch");
			this.space();
			this.token("(");
			this.print(node.discriminant, node);
			this.token(")");
			this.space();
			this.token("{");

			this.printSequence(node.cases, node, {
				indent: true,
				addNewlines: function addNewlines(leading, cas) {
					if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
				}
			});

			this.token("}");
		}

		function SwitchCase(node) {
			if (node.test) {
				this.word("case");
				this.space();
				this.print(node.test, node);
				this.token(":");
			} else {
				this.word("default");
				this.token(":");
			}

			if (node.consequent.length) {
				this.newline();
				this.printSequence(node.consequent, node, { indent: true });
			}
		}

		function DebuggerStatement() {
			this.word("debugger");
			this.semicolon();
		}

		function variableDeclarationIdent() {
			this.token(",");
			this.newline();
			if (this.endsWith("\n")) for (var i = 0; i < 4; i++) {
				this.space(true);
			}
		}

		function constDeclarationIdent() {
			this.token(",");
			this.newline();
			if (this.endsWith("\n")) for (var i = 0; i < 6; i++) {
				this.space(true);
			}
		}

		function VariableDeclaration(node, parent) {
			this.word(node.kind);
			this.space();

			var hasInits = false;

			if (!t.isFor(parent)) {
				for (var _iterator = node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var declar = _ref;

					if (declar.init) {
						hasInits = true;
					}
				}
			}

			var separator = void 0;
			if (hasInits) {
				separator = node.kind === "const" ? constDeclarationIdent : variableDeclarationIdent;
			}

			this.printList(node.declarations, node, { separator: separator });

			if (t.isFor(parent)) {
				if (parent.left === node || parent.init === node) return;
			}

			this.semicolon();
		}

		function VariableDeclarator(node) {
			this.print(node.id, node);
			this.print(node.id.typeAnnotation, node);
			if (node.init) {
				this.space();
				this.token("=");
				this.space();
				this.print(node.init, node);
			}
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.TaggedTemplateExpression = TaggedTemplateExpression;
		exports.TemplateElement = TemplateElement;
		exports.TemplateLiteral = TemplateLiteral;
		function TaggedTemplateExpression(node) {
			this.print(node.tag, node);
			this.print(node.quasi, node);
		}

		function TemplateElement(node, parent) {
			var isFirst = parent.quasis[0] === node;
			var isLast = parent.quasis[parent.quasis.length - 1] === node;

			var value = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");

			if (!isFirst) this.space();
			this.token(value);
			if (!isLast) this.space();
		}

		function TemplateLiteral(node) {
			var quasis = node.quasis;

			for (var i = 0; i < quasis.length; i++) {
				this.print(quasis[i], node);

				if (i + 1 < quasis.length) {
					this.print(node.expressions[i], node);
				}
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.AwaitExpression = exports.FunctionTypeAnnotation = undefined;
		exports.NullableTypeAnnotation = NullableTypeAnnotation;
		exports.UpdateExpression = UpdateExpression;
		exports.ObjectExpression = ObjectExpression;
		exports.Binary = Binary;
		exports.BinaryExpression = BinaryExpression;
		exports.SequenceExpression = SequenceExpression;
		exports.YieldExpression = YieldExpression;
		exports.ClassExpression = ClassExpression;
		exports.UnaryLike = UnaryLike;
		exports.FunctionExpression = FunctionExpression;
		exports.ArrowFunctionExpression = ArrowFunctionExpression;
		exports.ConditionalExpression = ConditionalExpression;
		exports.AssignmentExpression = AssignmentExpression;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var PRECEDENCE = {
			"||": 0,
			"&&": 1,
			"|": 2,
			"^": 3,
			"&": 4,
			"==": 5,
			"===": 5,
			"!=": 5,
			"!==": 5,
			"<": 6,
			">": 6,
			"<=": 6,
			">=": 6,
			in: 6,
			instanceof: 6,
			">>": 7,
			"<<": 7,
			">>>": 7,
			"+": 8,
			"-": 8,
			"*": 9,
			"/": 9,
			"%": 9,
			"**": 10
		};

		function NullableTypeAnnotation(node, parent) {
			return t.isArrayTypeAnnotation(parent);
		}

		exports.FunctionTypeAnnotation = NullableTypeAnnotation;
		function UpdateExpression(node, parent) {
			if (t.isMemberExpression(parent) && parent.object === node) {
				return true;
			}

			return false;
		}

		function ObjectExpression(node, parent, printStack) {
			return isFirstInStatement(printStack, { considerArrow: true });
		}

		function Binary(node, parent) {
			if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
				return true;
			}

			if (t.isUnaryLike(parent)) {
				return true;
			}

			if (t.isMemberExpression(parent) && parent.object === node) {
				return true;
			}

			if (t.isBinary(parent)) {
				var parentOp = parent.operator;
				var parentPos = PRECEDENCE[parentOp];

				var nodeOp = node.operator;
				var nodePos = PRECEDENCE[nodeOp];

				if (parentPos > nodePos) {
					return true;
				}

				if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
					return true;
				}
			}

			return false;
		}

		function BinaryExpression(node, parent) {
			if (node.operator === "in") {
				if (t.isVariableDeclarator(parent)) {
					return true;
				}

				if (t.isFor(parent)) {
					return true;
				}
			}

			return false;
		}

		function SequenceExpression(node, parent) {
			if (t.isForStatement(parent)) {
				return false;
			}

			if (t.isExpressionStatement(parent) && parent.expression === node) {
				return false;
			}

			if (t.isReturnStatement(parent)) {
				return false;
			}

			if (t.isThrowStatement(parent)) {
				return false;
			}

			if (t.isSwitchStatement(parent) && parent.discriminant === node) {
				return false;
			}

			if (t.isWhileStatement(parent) && parent.test === node) {
				return false;
			}

			if (t.isIfStatement(parent) && parent.test === node) {
				return false;
			}

			if (t.isForInStatement(parent) && parent.right === node) {
				return false;
			}

			return true;
		}

		function YieldExpression(node, parent) {
			return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent);
		}

		exports.AwaitExpression = YieldExpression;
		function ClassExpression(node, parent, printStack) {
			return isFirstInStatement(printStack, { considerDefaultExports: true });
		}

		function UnaryLike(node, parent) {
			if (t.isMemberExpression(parent, { object: node })) {
				return true;
			}

			if (t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node })) {
				return true;
			}

			return false;
		}

		function FunctionExpression(node, parent, printStack) {
			return isFirstInStatement(printStack, { considerDefaultExports: true });
		}

		function ArrowFunctionExpression(node, parent) {
			if (t.isExportDeclaration(parent)) {
				return true;
			}

			if (t.isBinaryExpression(parent) || t.isLogicalExpression(parent)) {
				return true;
			}

			if (t.isUnaryExpression(parent)) {
				return true;
			}

			return UnaryLike(node, parent);
		}

		function ConditionalExpression(node, parent) {
			if (t.isUnaryLike(parent)) {
				return true;
			}

			if (t.isBinary(parent)) {
				return true;
			}

			if (t.isConditionalExpression(parent, { test: node })) {
				return true;
			}

			return UnaryLike(node, parent);
		}

		function AssignmentExpression(node) {
			if (t.isObjectPattern(node.left)) {
				return true;
			} else {
				return ConditionalExpression.apply(undefined, arguments);
			}
		}

		function isFirstInStatement(printStack) {
			var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			var _ref$considerArrow = _ref.considerArrow;
			var considerArrow = _ref$considerArrow === undefined ? false : _ref$considerArrow;
			var _ref$considerDefaultE = _ref.considerDefaultExports;
			var considerDefaultExports = _ref$considerDefaultE === undefined ? false : _ref$considerDefaultE;

			var i = printStack.length - 1;
			var node = printStack[i];
			i--;
			var parent = printStack[i];
			while (i > 0) {
				if (t.isExpressionStatement(parent, { expression: node })) {
					return true;
				}

				if (considerDefaultExports && t.isExportDefaultDeclaration(parent, { declaration: node })) {
					return true;
				}

				if (considerArrow && t.isArrowFunctionExpression(parent, { body: node })) {
					return true;
				}

				if (t.isCallExpression(parent, { callee: node }) || t.isSequenceExpression(parent) && parent.expressions[0] === node || t.isMemberExpression(parent, { object: node }) || t.isConditional(parent, { test: node }) || t.isBinary(parent, { left: node }) || t.isAssignmentExpression(parent, { left: node })) {
					node = parent;
					i--;
					parent = printStack[i];
				} else {
					return false;
				}
			}

			return false;
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _isBoolean = __webpack_require__(271);

		var _isBoolean2 = _interopRequireDefault(_isBoolean);

		var _each = __webpack_require__(114);

		var _each2 = _interopRequireDefault(_each);

		var _map = __webpack_require__(594);

		var _map2 = _interopRequireDefault(_map);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function crawl(node) {
			var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			if (t.isMemberExpression(node)) {
				crawl(node.object, state);
				if (node.computed) crawl(node.property, state);
			} else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
				crawl(node.left, state);
				crawl(node.right, state);
			} else if (t.isCallExpression(node)) {
				state.hasCall = true;
				crawl(node.callee, state);
			} else if (t.isFunction(node)) {
				state.hasFunction = true;
			} else if (t.isIdentifier(node)) {
				state.hasHelper = state.hasHelper || isHelper(node.callee);
			}

			return state;
		}

		function isHelper(node) {
			if (t.isMemberExpression(node)) {
				return isHelper(node.object) || isHelper(node.property);
			} else if (t.isIdentifier(node)) {
				return node.name === "require" || node.name[0] === "_";
			} else if (t.isCallExpression(node)) {
				return isHelper(node.callee);
			} else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
				return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
			} else {
				return false;
			}
		}

		function isType(node) {
			return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
		}

		exports.nodes = {
			AssignmentExpression: function AssignmentExpression(node) {
				var state = crawl(node.right);
				if (state.hasCall && state.hasHelper || state.hasFunction) {
					return {
						before: state.hasFunction,
						after: true
					};
				}
			},
			SwitchCase: function SwitchCase(node, parent) {
				return {
					before: node.consequent.length || parent.cases[0] === node
				};
			},
			LogicalExpression: function LogicalExpression(node) {
				if (t.isFunction(node.left) || t.isFunction(node.right)) {
					return {
						after: true
					};
				}
			},
			Literal: function Literal(node) {
				if (node.value === "use strict") {
					return {
						after: true
					};
				}
			},
			CallExpression: function CallExpression(node) {
				if (t.isFunction(node.callee) || isHelper(node)) {
					return {
						before: true,
						after: true
					};
				}
			},
			VariableDeclaration: function VariableDeclaration(node) {
				for (var i = 0; i < node.declarations.length; i++) {
					var declar = node.declarations[i];

					var enabled = isHelper(declar.id) && !isType(declar.init);
					if (!enabled) {
						var state = crawl(declar.init);
						enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
					}

					if (enabled) {
						return {
							before: true,
							after: true
						};
					}
				}
			},
			IfStatement: function IfStatement(node) {
				if (t.isBlockStatement(node.consequent)) {
					return {
						before: true,
						after: true
					};
				}
			}
		};

		exports.nodes.ObjectProperty = exports.nodes.ObjectTypeProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function (node, parent) {
			if (parent.properties[0] === node) {
				return {
					before: true
				};
			}
		};

		exports.list = {
			VariableDeclaration: function VariableDeclaration(node) {
				return (0, _map2.default)(node.declarations, "init");
			},
			ArrayExpression: function ArrayExpression(node) {
				return node.elements;
			},
			ObjectExpression: function ObjectExpression(node) {
				return node.properties;
			}
		};

		(0, _each2.default)({
			Function: true,
			Class: true,
			Loop: true,
			LabeledStatement: true,
			SwitchStatement: true,
			TryStatement: true
		}, function (amounts, type) {
			if ((0, _isBoolean2.default)(amounts)) {
				amounts = { after: amounts, before: amounts };
			}

			(0, _each2.default)([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
				exports.nodes[type] = function () {
					return amounts;
				};
			});
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _assign = __webpack_require__(85);

		var _assign2 = _interopRequireDefault(_assign);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		var _weakSet = __webpack_require__(358);

		var _weakSet2 = _interopRequireDefault(_weakSet);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _find = __webpack_require__(585);

		var _find2 = _interopRequireDefault(_find);

		var _findLast = __webpack_require__(587);

		var _findLast2 = _interopRequireDefault(_findLast);

		var _isInteger = __webpack_require__(593);

		var _isInteger2 = _interopRequireDefault(_isInteger);

		var _repeat = __webpack_require__(276);

		var _repeat2 = _interopRequireDefault(_repeat);

		var _buffer = __webpack_require__(296);

		var _buffer2 = _interopRequireDefault(_buffer);

		var _node = __webpack_require__(190);

		var n = _interopRequireWildcard(_node);

		var _whitespace = __webpack_require__(310);

		var _whitespace2 = _interopRequireDefault(_whitespace);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var SCIENTIFIC_NOTATION = /e/i;
		var ZERO_DECIMAL_INTEGER = /\.0+$/;
		var NON_DECIMAL_LITERAL = /^0[box]/;

		var Printer = function () {
			function Printer(format, map, tokens) {
				(0, _classCallCheck3.default)(this, Printer);
				this.inForStatementInitCounter = 0;
				this._printStack = [];
				this._indent = 0;
				this._insideAux = false;
				this._printedCommentStarts = {};
				this._parenPushNewlineState = null;
				this._printAuxAfterOnNextUserNode = false;
				this._printedComments = new _weakSet2.default();
				this._endsWithInteger = false;
				this._endsWithWord = false;

				this.format = format || {};
				this._buf = new _buffer2.default(map);
				this._whitespace = tokens.length > 0 ? new _whitespace2.default(tokens) : null;
			}

			Printer.prototype.generate = function generate(ast) {
				this.print(ast);
				this._maybeAddAuxComment();

				return this._buf.get();
			};

			Printer.prototype.indent = function indent() {
				if (this.format.compact || this.format.concise) return;

				this._indent++;
			};

			Printer.prototype.dedent = function dedent() {
				if (this.format.compact || this.format.concise) return;

				this._indent--;
			};

			Printer.prototype.semicolon = function semicolon() {
				var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

				this._maybeAddAuxComment();
				this._append(";", !force);
			};

			Printer.prototype.rightBrace = function rightBrace() {
				if (this.format.minified) {
					this._buf.removeLastSemicolon();
				}
				this.token("}");
			};

			Printer.prototype.space = function space() {
				var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

				if (this.format.compact) return;

				if (this._buf.hasContent() && !this.endsWith(" ") && !this.endsWith("\n") || force) {
					this._space();
				}
			};

			Printer.prototype.word = function word(str) {
				if (this._endsWithWord) this._space();

				this._maybeAddAuxComment();
				this._append(str);

				this._endsWithWord = true;
			};

			Printer.prototype.number = function number(str) {
				this.word(str);

				this._endsWithInteger = (0, _isInteger2.default)(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str[str.length - 1] !== ".";
			};

			Printer.prototype.token = function token(str) {
				if (str === "--" && this.endsWith("!") || str[0] === "+" && this.endsWith("+") || str[0] === "-" && this.endsWith("-") || str[0] === "." && this._endsWithInteger) {
					this._space();
				}

				this._maybeAddAuxComment();
				this._append(str);
			};

			Printer.prototype.newline = function newline(i) {
				if (this.format.retainLines || this.format.compact) return;

				if (this.format.concise) {
					this.space();
					return;
				}

				if (this.endsWith("\n\n")) return;

				if (typeof i !== "number") i = 1;

				i = Math.min(2, i);
				if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
				if (i <= 0) return;

				for (var j = 0; j < i; j++) {
					this._newline();
				}
			};

			Printer.prototype.endsWith = function endsWith(str) {
				return this._buf.endsWith(str);
			};

			Printer.prototype.removeTrailingNewline = function removeTrailingNewline() {
				this._buf.removeTrailingNewline();
			};

			Printer.prototype.source = function source(prop, loc) {
				this._catchUp(prop, loc);

				this._buf.source(prop, loc);
			};

			Printer.prototype.withSource = function withSource(prop, loc, cb) {
				this._catchUp(prop, loc);

				this._buf.withSource(prop, loc, cb);
			};

			Printer.prototype._space = function _space() {
				this._append(" ", true);
			};

			Printer.prototype._newline = function _newline() {
				this._append("\n", true);
			};

			Printer.prototype._append = function _append(str) {
				var queue = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

				this._maybeAddParen(str);
				this._maybeIndent(str);

				if (queue) this._buf.queue(str);else this._buf.append(str);

				this._endsWithWord = false;
				this._endsWithInteger = false;
			};

			Printer.prototype._maybeIndent = function _maybeIndent(str) {
				if (this._indent && this.endsWith("\n") && str[0] !== "\n") {
					this._buf.queue(this._getIndent());
				}
			};

			Printer.prototype._maybeAddParen = function _maybeAddParen(str) {
				var parenPushNewlineState = this._parenPushNewlineState;
				if (!parenPushNewlineState) return;
				this._parenPushNewlineState = null;

				var i = void 0;
				for (i = 0; i < str.length && str[i] === " "; i++) {
					continue;
				}if (i === str.length) return;

				var cha = str[i];
				if (cha === "\n" || cha === "/") {
					this.token("(");
					this.indent();
					parenPushNewlineState.printed = true;
				}
			};

			Printer.prototype._catchUp = function _catchUp(prop, loc) {
				if (!this.format.retainLines) return;

				var pos = loc ? loc[prop] : null;
				if (pos && pos.line !== null) {
					var count = pos.line - this._buf.getCurrentLine();

					for (var i = 0; i < count; i++) {
						this._newline();
					}
				}
			};

			Printer.prototype._getIndent = function _getIndent() {
				return (0, _repeat2.default)(this.format.indent.style, this._indent);
			};

			Printer.prototype.startTerminatorless = function startTerminatorless() {
				return this._parenPushNewlineState = {
					printed: false
				};
			};

			Printer.prototype.endTerminatorless = function endTerminatorless(state) {
				if (state.printed) {
					this.dedent();
					this.newline();
					this.token(")");
				}
			};

			Printer.prototype.print = function print(node, parent) {
				var _this = this;

				if (!node) return;

				var oldConcise = this.format.concise;
				if (node._compact) {
					this.format.concise = true;
				}

				var printMethod = this[node.type];
				if (!printMethod) {
					throw new ReferenceError("unknown node of type " + (0, _stringify2.default)(node.type) + " with constructor " + (0, _stringify2.default)(node && node.constructor.name));
				}

				this._printStack.push(node);

				var oldInAux = this._insideAux;
				this._insideAux = !node.loc;
				this._maybeAddAuxComment(this._insideAux && !oldInAux);

				var needsParens = n.needsParens(node, parent, this._printStack);
				if (needsParens) this.token("(");

				this._printLeadingComments(node, parent);

				var loc = t.isProgram(node) || t.isFile(node) ? null : node.loc;
				this.withSource("start", loc, function () {
					_this[node.type](node, parent);
				});

				this._printTrailingComments(node, parent);

				if (needsParens) this.token(")");

				this._printStack.pop();

				this.format.concise = oldConcise;
				this._insideAux = oldInAux;
			};

			Printer.prototype._maybeAddAuxComment = function _maybeAddAuxComment(enteredPositionlessNode) {
				if (enteredPositionlessNode) this._printAuxBeforeComment();
				if (!this._insideAux) this._printAuxAfterComment();
			};

			Printer.prototype._printAuxBeforeComment = function _printAuxBeforeComment() {
				if (this._printAuxAfterOnNextUserNode) return;
				this._printAuxAfterOnNextUserNode = true;

				var comment = this.format.auxiliaryCommentBefore;
				if (comment) {
					this._printComment({
						type: "CommentBlock",
						value: comment
					});
				}
			};

			Printer.prototype._printAuxAfterComment = function _printAuxAfterComment() {
				if (!this._printAuxAfterOnNextUserNode) return;
				this._printAuxAfterOnNextUserNode = false;

				var comment = this.format.auxiliaryCommentAfter;
				if (comment) {
					this._printComment({
						type: "CommentBlock",
						value: comment
					});
				}
			};

			Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
				if (this.format.minified) return;

				var extra = node.extra;
				if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
					return extra.raw;
				}
			};

			Printer.prototype.printJoin = function printJoin(nodes, parent) {
				var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

				if (!nodes || !nodes.length) return;

				if (opts.indent) this.indent();

				var newlineOpts = {
					addNewlines: opts.addNewlines
				};

				for (var i = 0; i < nodes.length; i++) {
					var node = nodes[i];
					if (!node) continue;

					if (opts.statement) this._printNewline(true, node, parent, newlineOpts);

					this.print(node, parent);

					if (opts.iterator) {
						opts.iterator(node, i);
					}

					if (opts.separator && i < nodes.length - 1) {
						opts.separator.call(this);
					}

					if (opts.statement) this._printNewline(false, node, parent, newlineOpts);
				}

				if (opts.indent) this.dedent();
			};

			Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
				var indent = !!node.leadingComments;
				if (indent) this.indent();
				this.print(node, parent);
				if (indent) this.dedent();
			};

			Printer.prototype.printBlock = function printBlock(parent) {
				var node = parent.body;

				if (!t.isEmptyStatement(node)) {
					this.space();
				}

				this.print(node, parent);
			};

			Printer.prototype._printTrailingComments = function _printTrailingComments(node, parent) {
				this._printComments(this._getComments(false, node, parent));
			};

			Printer.prototype._printLeadingComments = function _printLeadingComments(node, parent) {
				this._printComments(this._getComments(true, node, parent));
			};

			Printer.prototype.printInnerComments = function printInnerComments(node) {
				var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

				if (!node.innerComments) return;
				if (indent) this.indent();
				this._printComments(node.innerComments);
				if (indent) this.dedent();
			};

			Printer.prototype.printSequence = function printSequence(nodes, parent) {
				var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

				opts.statement = true;
				return this.printJoin(nodes, parent, opts);
			};

			Printer.prototype.printList = function printList(items, parent) {
				var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

				if (opts.separator == null) {
					opts.separator = commaSeparator;
				}

				return this.printJoin(items, parent, opts);
			};

			Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
				var _this2 = this;

				if (this.format.retainLines || this.format.compact) return;

				if (this.format.concise) {
					this.space();
					return;
				}

				var lines = 0;

				if (node.start != null && !node._ignoreUserWhitespace && this._whitespace) {
					if (leading) {
						var _comments = node.leadingComments;
						var _comment = _comments && (0, _find2.default)(_comments, function (comment) {
							return !!comment.loc && _this2.format.shouldPrintComment(comment.value);
						});

						lines = this._whitespace.getNewlinesBefore(_comment || node);
					} else {
						var _comments2 = node.trailingComments;
						var _comment2 = _comments2 && (0, _findLast2.default)(_comments2, function (comment) {
							return !!comment.loc && _this2.format.shouldPrintComment(comment.value);
						});

						lines = this._whitespace.getNewlinesAfter(_comment2 || node);
					}
				} else {
					if (!leading) lines++;
					if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

					var needs = n.needsWhitespaceAfter;
					if (leading) needs = n.needsWhitespaceBefore;
					if (needs(node, parent)) lines++;

					if (!this._buf.hasContent()) lines = 0;
				}

				this.newline(lines);
			};

			Printer.prototype._getComments = function _getComments(leading, node) {
				return node && (leading ? node.leadingComments : node.trailingComments) || [];
			};

			Printer.prototype._printComment = function _printComment(comment) {
				var _this3 = this;

				if (!this.format.shouldPrintComment(comment.value)) return;

				if (comment.ignore) return;

				if (this._printedComments.has(comment)) return;
				this._printedComments.add(comment);

				if (comment.start != null) {
					if (this._printedCommentStarts[comment.start]) return;
					this._printedCommentStarts[comment.start] = true;
				}

				this.newline(this._whitespace ? this._whitespace.getNewlinesBefore(comment) : 0);

				if (!this.endsWith("[") && !this.endsWith("{")) this.space();

				var val = comment.type === "CommentLine" ? "//" + comment.value + "\n" : "/*" + comment.value + "*/";

				if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
					var offset = comment.loc && comment.loc.start.column;
					if (offset) {
						var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
						val = val.replace(newlineRegex, "\n");
					}

					var indentSize = Math.max(this._getIndent().length, this._buf.getCurrentColumn());
					val = val.replace(/\n(?!$)/g, "\n" + (0, _repeat2.default)(" ", indentSize));
				}

				this.withSource("start", comment.loc, function () {
					_this3._append(val);
				});

				this.newline((this._whitespace ? this._whitespace.getNewlinesAfter(comment) : 0) + (comment.type === "CommentLine" ? -1 : 0));
			};

			Printer.prototype._printComments = function _printComments(comments) {
				if (!comments || !comments.length) return;

				for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var _comment3 = _ref;

					this._printComment(_comment3);
				}
			};

			return Printer;
		}();

		exports.default = Printer;

		function commaSeparator() {
			this.token(",");
			this.space();
		}

		var _arr = [__webpack_require__(305), __webpack_require__(299), __webpack_require__(304), __webpack_require__(298), __webpack_require__(302), __webpack_require__(303), __webpack_require__(127), __webpack_require__(300), __webpack_require__(297), __webpack_require__(301)];
		for (var _i2 = 0; _i2 < _arr.length; _i2++) {
			var generator = _arr[_i2];
			(0, _assign2.default)(Printer.prototype, generator);
		}
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _sourceMap = __webpack_require__(284);

		var _sourceMap2 = _interopRequireDefault(_sourceMap);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var SourceMap = function () {
			function SourceMap(opts, code) {
				var _this = this;

				(0, _classCallCheck3.default)(this, SourceMap);

				this._opts = opts;
				this._map = new _sourceMap2.default.SourceMapGenerator({
					file: opts.sourceMapTarget,
					sourceRoot: opts.sourceRoot
				});

				if (typeof code === "string") {
					this._map.setSourceContent(opts.sourceFileName, code);
				} else if ((typeof code === "undefined" ? "undefined" : (0, _typeof3.default)(code)) === "object") {
					(0, _keys2.default)(code).forEach(function (sourceFileName) {
						_this._map.setSourceContent(sourceFileName, code[sourceFileName]);
					});
				}
			}

			SourceMap.prototype.get = function get() {
				return this._map.toJSON();
			};

			SourceMap.prototype.mark = function mark(generatedLine, generatedColumn, line, column, identifierName, filename) {
				if (this._lastGenLine !== generatedLine && line === null) return;

				if (this._lastGenLine === generatedLine && this._lastSourceLine === line && this._lastSourceColumn === column) {
					return;
				}

				this._lastGenLine = generatedLine;
				this._lastSourceLine = line;
				this._lastSourceColumn = column;

				this._map.addMapping({
					name: identifierName,
					generated: {
						line: generatedLine,
						column: generatedColumn
					},
					source: line == null ? null : filename || this._opts.sourceFileName,
					original: line == null ? null : {
						line: line,
						column: column
					}
				});
			};

			return SourceMap;
		}();

		exports.default = SourceMap;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var Whitespace = function () {
			function Whitespace(tokens) {
				(0, _classCallCheck3.default)(this, Whitespace);

				this.tokens = tokens;
				this.used = {};
			}

			Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
				var startToken = void 0;
				var endToken = void 0;
				var tokens = this.tokens;

				var index = this._findToken(function (token) {
					return token.start - node.start;
				}, 0, tokens.length);
				if (index >= 0) {
					while (index && node.start === tokens[index - 1].start) {
						--index;
					}startToken = tokens[index - 1];
					endToken = tokens[index];
				}

				return this._getNewlinesBetween(startToken, endToken);
			};

			Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
				var startToken = void 0;
				var endToken = void 0;
				var tokens = this.tokens;

				var index = this._findToken(function (token) {
					return token.end - node.end;
				}, 0, tokens.length);
				if (index >= 0) {
					while (index && node.end === tokens[index - 1].end) {
						--index;
					}startToken = tokens[index];
					endToken = tokens[index + 1];
					if (endToken.type.label === ",") endToken = tokens[index + 2];
				}

				if (endToken && endToken.type.label === "eof") {
					return 1;
				} else {
					return this._getNewlinesBetween(startToken, endToken);
				}
			};

			Whitespace.prototype._getNewlinesBetween = function _getNewlinesBetween(startToken, endToken) {
				if (!endToken || !endToken.loc) return 0;

				var start = startToken ? startToken.loc.end.line : 1;
				var end = endToken.loc.start.line;
				var lines = 0;

				for (var line = start; line < end; line++) {
					if (typeof this.used[line] === "undefined") {
						this.used[line] = true;
						lines++;
					}
				}

				return lines;
			};

			Whitespace.prototype._findToken = function _findToken(test, start, end) {
				if (start >= end) return -1;
				var middle = start + end >>> 1;
				var match = test(this.tokens[middle]);
				if (match < 0) {
					return this._findToken(test, middle + 1, end);
				} else if (match > 0) {
					return this._findToken(test, start, middle);
				} else if (match === 0) {
					return middle;
				}
				return -1;
			};

			return Whitespace;
		}();

		exports.default = Whitespace;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = bindifyDecorators;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function bindifyDecorators(decorators) {
			for (var _iterator = decorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var decoratorPath = _ref;

				var decorator = decoratorPath.node;
				var expression = decorator.expression;
				if (!t.isMemberExpression(expression)) continue;

				var temp = decoratorPath.scope.maybeGenerateMemoised(expression.object);
				var ref = void 0;

				var nodes = [];

				if (temp) {
					ref = temp;
					nodes.push(t.assignmentExpression("=", temp, expression.object));
				} else {
					ref = expression.object;
				}

				nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));

				if (nodes.length === 1) {
					decorator.expression = nodes[0];
				} else {
					decorator.expression = t.sequenceExpression(nodes);
				}
			}
		}
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (opts) {
			var visitor = {};

			function isAssignment(node) {
				return node && node.operator === opts.operator + "=";
			}

			function buildAssignment(left, right) {
				return t.assignmentExpression("=", left, right);
			}

			visitor.ExpressionStatement = function (path, file) {
				if (path.isCompletionRecord()) return;

				var expr = path.node.expression;
				if (!isAssignment(expr)) return;

				var nodes = [];
				var exploded = (0, _babelHelperExplodeAssignableExpression2.default)(expr.left, nodes, file, path.scope, true);

				nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));

				path.replaceWithMultiple(nodes);
			};

			visitor.AssignmentExpression = function (path, file) {
				var node = path.node;
				var scope = path.scope;

				if (!isAssignment(node)) return;

				var nodes = [];
				var exploded = (0, _babelHelperExplodeAssignableExpression2.default)(node.left, nodes, file, scope);
				nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
				path.replaceWithMultiple(nodes);
			};

			visitor.BinaryExpression = function (path) {
				var node = path.node;

				if (node.operator === opts.operator) {
					path.replaceWith(opts.build(node.left, node.right));
				}
			};

			return visitor;
		};

		var _babelHelperExplodeAssignableExpression = __webpack_require__(314);

		var _babelHelperExplodeAssignableExpression2 = _interopRequireDefault(_babelHelperExplodeAssignableExpression);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (path) {
			var scope = arguments.length <= 1 || arguments[1] === undefined ? path.scope : arguments[1];
			var node = path.node;

			var container = t.functionExpression(null, [], node.body, node.generator, node.async);

			var callee = container;
			var args = [];

			(0, _babelHelperHoistVariables2.default)(path, function (id) {
				return scope.push({ id: id });
			});

			var state = {
				foundThis: false,
				foundArguments: false
			};

			path.traverse(visitor, state);

			if (state.foundArguments) {
				callee = t.memberExpression(container, t.identifier("apply"));
				args = [];

				if (state.foundThis) {
					args.push(t.thisExpression());
				}

				if (state.foundArguments) {
					if (!state.foundThis) args.push(t.nullLiteral());
					args.push(t.identifier("arguments"));
				}
			}

			var call = t.callExpression(callee, args);
			if (node.generator) call = t.yieldExpression(call, true);

			return t.returnStatement(call);
		};

		var _babelHelperHoistVariables = __webpack_require__(194);

		var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var visitor = {
			enter: function enter(path, state) {
				if (path.isThisExpression()) {
					state.foundThis = true;
				}

				if (path.isReferencedIdentifier({ name: "arguments" })) {
					state.foundArguments = true;
				}
			},
			Function: function Function(path) {
				path.skip();
			}
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (node, nodes, file, scope, allowedSingleIdent) {
			var obj = void 0;
			if (t.isIdentifier(node) && allowedSingleIdent) {
				obj = node;
			} else {
				obj = getObjRef(node, nodes, file, scope);
			}

			var ref = void 0,
			    uid = void 0;

			if (t.isIdentifier(node)) {
				ref = node;
				uid = obj;
			} else {
				var prop = getPropRef(node, nodes, file, scope);
				var computed = node.computed || t.isLiteral(prop);
				uid = ref = t.memberExpression(obj, prop, computed);
			}

			return {
				uid: uid,
				ref: ref
			};
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function getObjRef(node, nodes, file, scope) {
			var ref = void 0;
			if (t.isIdentifier(node)) {
				if (scope.hasBinding(node.name)) {
					return node;
				} else {
					ref = node;
				}
			} else if (t.isMemberExpression(node)) {
				ref = node.object;

				if (t.isIdentifier(ref) && scope.hasBinding(ref.name)) {
					return ref;
				}
			} else {
				throw new Error("We can't explode this node type " + node.type);
			}

			var temp = scope.generateUidIdentifierBasedOnNode(ref);
			nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
			return temp;
		}

		function getPropRef(node, nodes, file, scope) {
			var prop = node.property;
			var key = t.toComputedKey(node, prop);
			if (t.isLiteral(key)) return key;

			var temp = scope.generateUidIdentifierBasedOnNode(prop);
			nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
			return temp;
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (classPath) {
			classPath.assertClass();

			var memoisedExpressions = [];

			function maybeMemoise(path) {
				if (!path.node || path.isPure()) return;

				var uid = classPath.scope.generateDeclaredUidIdentifier();
				memoisedExpressions.push(t.assignmentExpression("=", uid, path.node));
				path.replaceWith(uid);
			}

			function memoiseDecorators(paths) {
				if (!Array.isArray(paths) || !paths.length) return;

				paths = paths.reverse();

				(0, _babelHelperBindifyDecorators2.default)(paths);

				for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var path = _ref;

					maybeMemoise(path);
				}
			}

			maybeMemoise(classPath.get("superClass"));
			memoiseDecorators(classPath.get("decorators"), true);

			var methods = classPath.get("body.body");
			for (var _iterator2 = methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var methodPath = _ref2;

				if (methodPath.is("computed")) {
					maybeMemoise(methodPath.get("key"));
				}

				if (methodPath.has("decorators")) {
					memoiseDecorators(classPath.get("decorators"));
				}
			}

			if (memoisedExpressions) {
				classPath.insertBefore(memoisedExpressions.map(function (expr) {
					return t.expressionStatement(expr);
				}));
			}
		};

		var _babelHelperBindifyDecorators = __webpack_require__(311);

		var _babelHelperBindifyDecorators2 = _interopRequireDefault(_babelHelperBindifyDecorators);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var helpers = {};exports.default = helpers;

		helpers.typeof = (0, _babelTemplate2.default)("\n  (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\")\n    ? function (obj) { return typeof obj; }\n    : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n");

		helpers.jsx = (0, _babelTemplate2.default)("\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");

		helpers.asyncToGenerator = (0, _babelTemplate2.default)("\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              return step(\"next\", value);\n            }, function (err) {\n              return step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  })\n");

		helpers.classCallCheck = (0, _babelTemplate2.default)("\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");

		helpers.createClass = (0, _babelTemplate2.default)("\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");

		helpers.defineEnumerableProperties = (0, _babelTemplate2.default)("\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");

		helpers.defaults = (0, _babelTemplate2.default)("\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");

		helpers.defineProperty = (0, _babelTemplate2.default)("\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");

		helpers.extends = (0, _babelTemplate2.default)("\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");

		helpers.get = (0, _babelTemplate2.default)("\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");

		helpers.inherits = (0, _babelTemplate2.default)("\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");

		helpers.instanceof = (0, _babelTemplate2.default)("\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");

		helpers.interopRequireDefault = (0, _babelTemplate2.default)("\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");

		helpers.interopRequireWildcard = (0, _babelTemplate2.default)("\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");

		helpers.newArrowCheck = (0, _babelTemplate2.default)("\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");

		helpers.objectDestructuringEmpty = (0, _babelTemplate2.default)("\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");

		helpers.objectWithoutProperties = (0, _babelTemplate2.default)("\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");

		helpers.possibleConstructorReturn = (0, _babelTemplate2.default)("\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");

		helpers.selfGlobal = (0, _babelTemplate2.default)("\n  typeof global === \"undefined\" ? self : global\n");

		helpers.set = (0, _babelTemplate2.default)("\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");

		helpers.slicedToArray = (0, _babelTemplate2.default)("\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");

		helpers.slicedToArrayLoose = (0, _babelTemplate2.default)("\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");

		helpers.taggedTemplateLiteral = (0, _babelTemplate2.default)("\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");

		helpers.taggedTemplateLiteralLoose = (0, _babelTemplate2.default)("\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");

		helpers.temporalRef = (0, _babelTemplate2.default)("\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");

		helpers.temporalUndefined = (0, _babelTemplate2.default)("\n  ({})\n");

		helpers.toArray = (0, _babelTemplate2.default)("\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");

		helpers.toConsumableArray = (0, _babelTemplate2.default)("\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
		module.exports = exports["default"];
	}, function (module, exports) {

		'use strict';

		Object.defineProperty(exports, "__esModule", {
			value: true
		});

		var _extends = Object.assign || function (target) {
			for (var i = 1; i < arguments.length; i++) {
				var source = arguments[i];for (var key in source) {
					if (Object.prototype.hasOwnProperty.call(source, key)) {
						target[key] = source[key];
					}
				}
			}return target;
		};

		exports.runScripts = runScripts;


		var scriptTypes = ['text/jsx', 'text/babel'];

		var headEl = void 0;
		var inlineScriptCount = 0;

		function transformCode(transformFn, script) {
			var source = void 0;
			if (script.url != null) {
				source = script.url;
			} else {
				source = 'Inline Babel script';
				inlineScriptCount++;
				if (inlineScriptCount > 1) {
					source += ' (' + inlineScriptCount + ')';
				}
			}

			return transformFn(script.content, _extends({
				filename: source
			}, buildBabelOptions(script))).code;
		}

		function buildBabelOptions(script) {
			return {
				presets: script.presets || ['react', 'es2015'],
				plugins: script.plugins || ['transform-class-properties', 'transform-object-rest-spread', 'transform-flow-strip-types'],
				sourceMaps: 'inline'
			};
		}

		function run(transformFn, script) {
			var scriptEl = document.createElement('script');
			scriptEl.text = transformCode(transformFn, script);
			headEl.appendChild(scriptEl);
		}

		function load(url, successCallback, errorCallback) {
			var xhr = new XMLHttpRequest();

			xhr.open('GET', url, true);
			if ('overrideMimeType' in xhr) {
				xhr.overrideMimeType('text/plain');
			}
			xhr.onreadystatechange = function () {
				if (xhr.readyState === 4) {
					if (xhr.status === 0 || xhr.status === 200) {
						successCallback(xhr.responseText);
					} else {
						errorCallback();
						throw new Error('Could not load ' + url);
					}
				}
			};
			return xhr.send(null);
		}

		function getPluginsOrPresetsFromScript(script, attributeName) {
			var rawValue = script.getAttribute(attributeName);
			if (rawValue === '') {
				return [];
			}
			if (!rawValue) {
				return null;
			}
			return rawValue.split(',').map(function (item) {
				return item.trim();
			});
		}

		function loadScripts(transformFn, scripts) {
			var result = [];
			var count = scripts.length;

			function check() {
				var script, i;

				for (i = 0; i < count; i++) {
					script = result[i];

					if (script.loaded && !script.executed) {
						script.executed = true;
						run(transformFn, script);
					} else if (!script.loaded && !script.error && !script.async) {
						break;
					}
				}
			}

			scripts.forEach(function (script, i) {
				var scriptData = {
					async: script.hasAttribute('async'),
					error: false,
					executed: false,
					plugins: getPluginsOrPresetsFromScript(script, 'data-plugins'),
					presets: getPluginsOrPresetsFromScript(script, 'data-presets')
				};

				if (script.src) {
					result[i] = _extends({}, scriptData, {
						content: null,
						loaded: false,
						url: script.src
					});

					load(script.src, function (content) {
						result[i].loaded = true;
						result[i].content = content;
						check();
					}, function () {
						result[i].error = true;
						check();
					});
				} else {
					result[i] = _extends({}, scriptData, {
						content: script.innerHTML,
						loaded: true,
						url: null
					});
				}
			});

			check();
		}

		function runScripts(transformFn) {
			headEl = document.getElementsByTagName('head')[0];
			var scripts = document.getElementsByTagName('script');

			var jsxScripts = [];
			for (var i = 0; i < scripts.length; i++) {
				var script = scripts.item(i);

				var type = script.type.split(';')[0];
				if (scriptTypes.indexOf(type) !== -1) {
					jsxScripts.push(script);
				}
			}

			if (jsxScripts.length === 0) {
				return;
			}

			console.warn('You are using the in-browser Babel transformer. Be sure to precompile ' + 'your scripts for production - https://babeljs.io/docs/setup/');

			loadScripts(transformFn, jsxScripts);
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports["default"] = function (_ref) {
			var t = _ref.types;

			return {
				pre: function pre(file) {
					file.set("helpersNamespace", t.identifier("babelHelpers"));
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("asyncGenerators");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("functionSent");
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				inherits: __webpack_require__(49)
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				inherits: __webpack_require__(49),

				visitor: {
					Function: function Function(path, state) {
						if (!path.node.async || path.node.generator) return;

						(0, _babelHelperRemapAsyncToGenerator2.default)(path, state.addImport(state.opts.module, state.opts.method));
					}
				}
			};
		};

		var _babelHelperRemapAsyncToGenerator = __webpack_require__(197);

		var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.visitor = undefined;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function getTDZStatus(refPath, bindingPath) {
			var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);

			if (executionStatus === "before") {
				return "inside";
			} else if (executionStatus === "after") {
				return "outside";
			} else {
				return "maybe";
			}
		}

		function buildTDZAssert(node, file) {
			return t.callExpression(file.addHelper("temporalRef"), [node, t.stringLiteral(node.name), file.addHelper("temporalUndefined")]);
		}

		function isReference(node, scope, state) {
			var declared = state.letReferences[node.name];
			if (!declared) return false;

			return scope.getBindingIdentifier(node.name) === declared;
		}

		var visitor = exports.visitor = {
			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				if (!this.file.opts.tdz) return;

				var node = path.node;
				var parent = path.parent;
				var scope = path.scope;

				if (path.parentPath.isFor({ left: node })) return;
				if (!isReference(node, scope, state)) return;

				var bindingPath = scope.getBinding(node.name).path;

				var status = getTDZStatus(path, bindingPath);
				if (status === "inside") return;

				if (status === "maybe") {
					var assert = buildTDZAssert(node, state.file);

					bindingPath.parent._tdzThis = true;

					path.skip();

					if (path.parentPath.isUpdateExpression()) {
						if (parent._ignoreBlockScopingTDZ) return;
						path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
					} else {
						path.replaceWith(assert);
					}
				} else if (status === "outside") {
					path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier("ReferenceError"), [t.stringLiteral(node.name + " is not defined - temporal dead zone")]), node)));
				}
			},

			AssignmentExpression: {
				exit: function exit(path, state) {
					if (!this.file.opts.tdz) return;

					var node = path.node;

					if (node._ignoreBlockScopingTDZ) return;

					var nodes = [];
					var ids = path.getBindingIdentifiers();

					for (var name in ids) {
						var id = ids[name];

						if (isReference(id, path.scope, state)) {
							nodes.push(buildTDZAssert(id, state.file));
						}
					}

					if (nodes.length) {
						node._ignoreBlockScopingTDZ = true;
						nodes.push(node);
						path.replaceWithMultiple(nodes.map(t.expressionStatement));
					}
				}
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _possibleConstructorReturn2 = __webpack_require__(39);

		var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

		var _inherits2 = __webpack_require__(38);

		var _inherits3 = _interopRequireDefault(_inherits2);

		var _babelHelperFunctionName = __webpack_require__(37);

		var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

		var _vanilla = __webpack_require__(208);

		var _vanilla2 = _interopRequireDefault(_vanilla);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var LooseClassTransformer = function (_VanillaTransformer) {
			(0, _inherits3.default)(LooseClassTransformer, _VanillaTransformer);

			function LooseClassTransformer() {
				(0, _classCallCheck3.default)(this, LooseClassTransformer);

				var _this = (0, _possibleConstructorReturn3.default)(this, _VanillaTransformer.apply(this, arguments));

				_this.isLoose = true;
				return _this;
			}

			LooseClassTransformer.prototype._processMethod = function _processMethod(node, scope) {
				if (!node.decorators) {

					var classRef = this.classRef;
					if (!node.static) classRef = t.memberExpression(classRef, t.identifier("prototype"));
					var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));

					var func = t.functionExpression(null, node.params, node.body, node.generator, node.async);
					var key = t.toComputedKey(node, node.key);
					if (t.isStringLiteral(key)) {
						func = (0, _babelHelperFunctionName2.default)({
							node: func,
							id: key,
							scope: scope
						});
					}

					var expr = t.expressionStatement(t.assignmentExpression("=", methodName, func));
					t.inheritsComments(expr, node);
					this.body.push(expr);
					return true;
				}
			};

			return LooseClassTransformer;
		}(_vanilla2.default);

		exports.default = LooseClassTransformer;
		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					BinaryExpression: function BinaryExpression(path) {
						var node = path.node;

						if (node.operator === "instanceof") {
							path.replaceWith(t.callExpression(this.addHelper("instanceof"), [node.left, node.right]));
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.visitor = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _babelHelperGetFunctionArity = __webpack_require__(193);

		var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

		var _babelHelperCallDelegate = __webpack_require__(313);

		var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildDefaultParam = (0, _babelTemplate2.default)("\n  let VARIABLE_NAME =\n    ARGUMENTS.length <= ARGUMENT_KEY || ARGUMENTS[ARGUMENT_KEY] === undefined ?\n      DEFAULT_VALUE\n    :\n      ARGUMENTS[ARGUMENT_KEY];\n");

		var buildCutOff = (0, _babelTemplate2.default)("\n  let $0 = $1[$2];\n");

		function hasDefaults(node) {
			for (var _iterator = node.params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var param = _ref;

				if (!t.isIdentifier(param)) return true;
			}
			return false;
		}

		var iifeVisitor = {
			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				var name = path.node.name;
				if (name === "eval" || path.scope.hasOwnBinding(name) && path.scope.getOwnBinding(name).kind !== "param") {
					state.iife = true;
					path.stop();
				}
			},
			Scope: function Scope(path) {
				path.skip();
			}
		};

		var visitor = exports.visitor = {
			Function: function Function(path) {
				var node = path.node;
				var scope = path.scope;

				if (!hasDefaults(node)) return;

				path.ensureBlock();

				var state = {
					iife: false,
					scope: scope
				};

				var body = [];

				var argsIdentifier = t.identifier("arguments");
				argsIdentifier._shadowedFunctionLiteral = path;

				function pushDefNode(left, right, i) {
					var defNode = buildDefaultParam({
						VARIABLE_NAME: left,
						DEFAULT_VALUE: right,
						ARGUMENT_KEY: t.numericLiteral(i),
						ARGUMENTS: argsIdentifier
					});
					defNode._blockHoist = node.params.length - i;
					body.push(defNode);
				}

				var lastNonDefaultParam = (0, _babelHelperGetFunctionArity2.default)(node);

				var params = path.get("params");
				for (var i = 0; i < params.length; i++) {
					var param = params[i];

					if (!param.isAssignmentPattern()) {
						if (!state.iife && !param.isIdentifier()) {
							param.traverse(iifeVisitor, state);
						}

						continue;
					}

					var left = param.get("left");
					var right = param.get("right");

					if (i >= lastNonDefaultParam || left.isPattern()) {
						var placeholder = scope.generateUidIdentifier("x");
						placeholder._isDefaultPlaceholder = true;
						node.params[i] = placeholder;
					} else {
						node.params[i] = left.node;
					}

					if (!state.iife) {
						if (right.isIdentifier() && scope.hasOwnBinding(right.node.name) && scope.getOwnBinding(right.node.name).kind !== "param") {
							state.iife = true;
						} else {
							right.traverse(iifeVisitor, state);
						}
					}

					pushDefNode(left.node, right.node, i);
				}

				for (var _i2 = lastNonDefaultParam + 1; _i2 < node.params.length; _i2++) {
					var _param = node.params[_i2];
					if (_param._isDefaultPlaceholder) continue;

					var declar = buildCutOff(_param, argsIdentifier, t.numericLiteral(_i2));
					declar._blockHoist = node.params.length - _i2;
					body.push(declar);
				}

				node.params = node.params.slice(0, lastNonDefaultParam);

				if (state.iife) {
					body.push((0, _babelHelperCallDelegate2.default)(path, scope));
					path.set("body", t.blockStatement(body));
				} else {
					path.get("body").unshiftContainer("body", body);
				}
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.visitor = undefined;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var visitor = exports.visitor = {
			Function: function Function(path) {
				var params = path.get("params");

				var hoistTweak = t.isRestElement(params[params.length - 1]) ? 1 : 0;
				var outputParamsLength = params.length - hoistTweak;

				for (var i = 0; i < outputParamsLength; i++) {
					var param = params[i];
					if (param.isArrayPattern() || param.isObjectPattern()) {
						var uid = path.scope.generateUidIdentifier("ref");

						var declar = t.variableDeclaration("let", [t.variableDeclarator(param.node, uid)]);
						declar._blockHoist = outputParamsLength - i;

						path.ensureBlock();
						path.get("body").unshiftContainer("body", declar);

						param.replaceWith(uid);
					}
				}
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.visitor = undefined;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _babelTemplate = __webpack_require__(5);

		var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var buildRest = (0, _babelTemplate2.default)("\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n");

		var restIndex = (0, _babelTemplate2.default)("\n  ARGUMENTS.length <= INDEX ? undefined : ARGUMENTS[INDEX]\n");

		var restLength = (0, _babelTemplate2.default)("\n  ARGUMENTS.length <= OFFSET ? 0 : ARGUMENTS.length - OFFSET\n");

		var memberExpressionOptimisationVisitor = {
			Scope: function Scope(path, state) {
				if (!path.scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
					path.skip();
				}
			},
			Flow: function Flow(path) {
				path.skip();
			},

			"Function|ClassProperty": function FunctionClassProperty(path, state) {
				var oldNoOptimise = state.noOptimise;
				state.noOptimise = true;
				path.traverse(memberExpressionOptimisationVisitor, state);
				state.noOptimise = oldNoOptimise;

				path.skip();
			},

			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				var node = path.node;

				if (node.name === "arguments") {
					state.deopted = true;
				}

				if (node.name !== state.name) return;

				if (state.noOptimise) {
					state.deopted = true;
				} else {
					var parentPath = path.parentPath;

					if (parentPath.isMemberExpression({ object: node })) {
						var grandparentPath = parentPath.parentPath;

						var argsOptEligible = !state.deopted && !(grandparentPath.isAssignmentExpression() && parentPath.node === grandparentPath.node.left || grandparentPath.isLVal() || grandparentPath.isForXStatement() || grandparentPath.isUpdateExpression() || grandparentPath.isUnaryExpression({ operator: "delete" }) || (grandparentPath.isCallExpression() || grandparentPath.isNewExpression()) && parentPath.node === grandparentPath.node.callee);

						if (argsOptEligible) {
							if (parentPath.node.computed) {
								if (parentPath.get("property").isBaseType("number")) {
									state.candidates.push({ cause: "indexGetter", path: path });
									return;
								}
							} else if (parentPath.node.property.name === "length") {
									state.candidates.push({ cause: "lengthGetter", path: path });
									return;
								}
						}
					}

					if (state.offset === 0 && parentPath.isSpreadElement()) {
						var call = parentPath.parentPath;
						if (call.isCallExpression() && call.node.arguments.length === 1) {
							state.candidates.push({ cause: "argSpread", path: path });
							return;
						}
					}

					state.references.push(path);
				}
			},

			BindingIdentifier: function BindingIdentifier(_ref, state) {
				var node = _ref.node;

				if (node.name === state.name) {
					state.deopted = true;
				}
			}
		};
		function hasRest(node) {
			return t.isRestElement(node.params[node.params.length - 1]);
		}

		function optimiseIndexGetter(path, argsId, offset) {
			var index = void 0;

			if (t.isNumericLiteral(path.parent.property)) {
				index = t.numericLiteral(path.parent.property.value + offset);
			} else {
				index = t.binaryExpression("+", path.parent.property, t.numericLiteral(offset));
			}

			path.parentPath.replaceWith(restIndex({
				ARGUMENTS: argsId,
				INDEX: index
			}));
		}

		function optimiseLengthGetter(path, argsId, offset) {
			if (offset) {
				path.parentPath.replaceWith(restLength({
					ARGUMENTS: argsId,
					OFFSET: t.numericLiteral(offset)
				}));
			} else {
				path.replaceWith(argsId);
			}
		}

		var visitor = exports.visitor = {
			Function: function Function(path) {
				var node = path.node;
				var scope = path.scope;

				if (!hasRest(node)) return;

				var rest = node.params.pop().argument;

				var argsId = t.identifier("arguments");

				argsId._shadowedFunctionLiteral = path;

				var state = {
					references: [],
					offset: node.params.length,

					argumentsNode: argsId,
					outerBinding: scope.getBindingIdentifier(rest.name),

					candidates: [],

					name: rest.name,

					deopted: false
				};

				path.traverse(memberExpressionOptimisationVisitor, state);

				if (!state.deopted && !state.references.length) {
					for (var _iterator = state.candidates, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref2;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref2 = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref2 = _i.value;
						}

						var _ref3 = _ref2;
						var _path = _ref3.path;
						var cause = _ref3.cause;

						switch (cause) {
							case "indexGetter":
								optimiseIndexGetter(_path, argsId, state.offset);
								break;
							case "lengthGetter":
								optimiseLengthGetter(_path, argsId, state.offset);
								break;
							default:
								_path.replaceWith(argsId);
						}
					}
					return;
				}

				state.references = state.references.concat(state.candidates.map(function (_ref4) {
					var path = _ref4.path;
					return path;
				}));

				state.deopted = state.deopted || !!node.shadow;

				var start = t.numericLiteral(node.params.length);
				var key = scope.generateUidIdentifier("key");
				var len = scope.generateUidIdentifier("len");

				var arrKey = key;
				var arrLen = len;
				if (node.params.length) {
					arrKey = t.binaryExpression("-", key, start);

					arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.numericLiteral(0));
				}

				var loop = buildRest({
					ARGUMENTS: argsId,
					ARRAY_KEY: arrKey,
					ARRAY_LEN: arrLen,
					START: start,
					ARRAY: rest,
					KEY: key,
					LEN: len
				});

				if (state.deopted) {
					loop._blockHoist = node.params.length + 1;
					node.body.body.unshift(loop);
				} else {
					loop._blockHoist = 1;

					var target = path.getEarliestCommonAncestorFrom(state.references).getStatementParent();

					target.findParent(function (path) {
						if (path.isLoop()) {
							target = path;
						} else {
							return path.isFunction();
						}
					});

					target.insertBefore(loop);
				}
			}
		};
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					MemberExpression: {
						exit: function exit(_ref2) {
							var node = _ref2.node;

							var prop = node.property;
							if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {
								node.property = t.stringLiteral(prop.name);
								node.computed = true;
							}
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					ObjectProperty: {
						exit: function exit(_ref2) {
							var node = _ref2.node;

							var key = node.key;
							if (!node.computed && t.isIdentifier(key) && !t.isValidIdentifier(key.name)) {
								node.key = t.stringLiteral(key.name);
							}
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					ObjectExpression: function ObjectExpression(path, file) {
						var node = path.node;

						var hasAny = false;
						for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref2;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref2 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref2 = _i.value;
							}

							var prop = _ref2;

							if (prop.kind === "get" || prop.kind === "set") {
								hasAny = true;
								break;
							}
						}
						if (!hasAny) return;

						var mutatorMap = {};

						node.properties = node.properties.filter(function (prop) {
							if (!prop.computed && (prop.kind === "get" || prop.kind === "set")) {
								defineMap.push(mutatorMap, prop, null, file);
								return false;
							} else {
								return true;
							}
						});

						path.replaceWith(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("defineProperties")), [node, defineMap.toDefineObject(mutatorMap)]));
					}
				}
			};
		};

		var _babelHelperDefineMap = __webpack_require__(192);

		var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var parse = _ref.parse;
			var traverse = _ref.traverse;

			return {
				visitor: {
					CallExpression: function CallExpression(path) {
						if (path.get("callee").isIdentifier({ name: "eval" }) && path.node.arguments.length === 1) {
							var evaluate = path.get("arguments")[0].evaluate();
							if (!evaluate.confident) return;

							var code = evaluate.value;
							if (typeof code !== "string") return;

							var ast = parse(code);
							traverse.removeProperties(ast);
							return ast.program;
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function wrapInFlowComment(path, parent) {
				path.addComment("trailing", generateComment(path, parent));
				path.replaceWith(t.noop());
			}

			function generateComment(path, parent) {
				var comment = path.getSource().replace(/\*-\//g, "*-ESCAPED/").replace(/\*\//g, "*-/");
				if (parent && parent.optional) comment = "?" + comment;
				if (comment[0] !== ":") comment = ":: " + comment;
				return comment;
			}

			return {
				inherits: __webpack_require__(78),

				visitor: {
					TypeCastExpression: function TypeCastExpression(path) {
						var node = path.node;

						path.get("expression").addComment("trailing", generateComment(path.get("typeAnnotation")));
						path.replaceWith(t.parenthesizedExpression(node.expression));
					},

					Identifier: function Identifier(path) {
						var node = path.node;

						if (!node.optional || node.typeAnnotation) {
							return;
						}
						path.addComment("trailing", ":: ?");
					},

					Function: {
						exit: function exit(_ref2) {
							var node = _ref2.node;

							node.params.forEach(function (param) {
								return param.optional = false;
							});
						}
					},

					"ExportNamedDeclaration|Flow": function ExportNamedDeclarationFlow(path) {
						var node = path.node;
						var parent = path.parent;

						if (t.isExportNamedDeclaration(node) && !t.isFlow(node.declaration)) {
							return;
						}
						wrapInFlowComment(path, parent);
					},

					ImportDeclaration: function ImportDeclaration(path) {
						var node = path.node;
						var parent = path.parent;

						if (t.isImportDeclaration(node) && node.importKind !== "type" && node.importKind !== "typeof") {
							return;
						}
						wrapInFlowComment(path, parent);
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				visitor: {
					FunctionExpression: {
						exit: function exit(path) {
							var node = path.node;

							if (!node.id) return;
							node._ignoreUserWhitespace = true;

							path.replaceWith(t.callExpression(t.functionExpression(null, [], t.blockStatement([t.toStatement(node), t.returnStatement(node.id)])), []));
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			return {
				visitor: {
					CallExpression: function CallExpression(path, file) {
						if (path.get("callee").matchesPattern("Object.setPrototypeOf")) {
							path.node.callee = file.addHelper("defaults");
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function isProtoKey(node) {
				return t.isLiteral(t.toComputedKey(node, node.key), { value: "__proto__" });
			}

			function isProtoAssignmentExpression(node) {
				var left = node.left;
				return t.isMemberExpression(left) && t.isLiteral(t.toComputedKey(left, left.property), { value: "__proto__" });
			}

			function buildDefaultsCallExpression(expr, ref, file) {
				return t.expressionStatement(t.callExpression(file.addHelper("defaults"), [ref, expr.right]));
			}

			return {
				visitor: {
					AssignmentExpression: function AssignmentExpression(path, file) {
						if (!isProtoAssignmentExpression(path.node)) return;

						var nodes = [];
						var left = path.node.left.object;
						var temp = path.scope.maybeGenerateMemoised(left);

						if (temp) nodes.push(t.expressionStatement(t.assignmentExpression("=", temp, left)));
						nodes.push(buildDefaultsCallExpression(path.node, temp || left, file));
						if (temp) nodes.push(temp);

						path.replaceWithMultiple(nodes);
					},
					ExpressionStatement: function ExpressionStatement(path, file) {
						var expr = path.node.expression;
						if (!t.isAssignmentExpression(expr, { operator: "=" })) return;

						if (isProtoAssignmentExpression(expr)) {
							path.replaceWith(buildDefaultsCallExpression(expr, expr.left.object, file));
						}
					},
					ObjectExpression: function ObjectExpression(path, file) {
						var proto = void 0;
						var node = path.node;

						for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref2;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref2 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref2 = _i.value;
							}

							var prop = _ref2;

							if (isProtoKey(prop)) {
								proto = prop.value;
								(0, _pull2.default)(node.properties, prop);
							}
						}

						if (proto) {
							var args = [t.objectExpression([]), proto];
							if (node.properties.length) args.push(node);
							path.replaceWith(t.callExpression(file.addHelper("extends"), args));
						}
					}
				}
			};
		};

		var _pull = __webpack_require__(275);

		var _pull2 = _interopRequireDefault(_pull);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function () {
			var immutabilityVisitor = {
				enter: function enter(path, state) {
					var stop = function stop() {
						state.isImmutable = false;
						path.stop();
					};

					if (path.isJSXClosingElement()) {
						path.skip();
						return;
					}

					if (path.isJSXIdentifier({ name: "ref" }) && path.parentPath.isJSXAttribute({ name: path.node })) {
						return stop();
					}

					if (path.isJSXIdentifier() || path.isIdentifier() || path.isJSXMemberExpression()) {
						return;
					}

					if (!path.isImmutable()) stop();
				}
			};

			return {
				visitor: {
					JSXElement: function JSXElement(path) {
						if (path.node._hoisted) return;

						var state = { isImmutable: true };
						path.traverse(immutabilityVisitor, state);

						if (state.isImmutable) {
							path.hoist();
						} else {
							path.node._hoisted = true;
						}
					}
				}
			};
		};

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (_ref) {
			var t = _ref.types;

			function hasRefOrSpread(attrs) {
				for (var i = 0; i < attrs.length; i++) {
					var attr = attrs[i];
					if (t.isJSXSpreadAttribute(attr)) return true;
					if (isJSXAttributeOfName(attr, "ref")) return true;
				}
				return false;
			}

			function isJSXAttributeOfName(attr, name) {
				return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: name });
			}

			function getAttributeValue(attr) {
				var value = attr.value;
				if (!value) return t.identifier("true");
				if (t.isJSXExpressionContainer(value)) value = value.expression;
				return value;
			}

			return {
				visitor: {
					JSXElement: function JSXElement(path, file) {
						var node = path.node;

						var open = node.openingElement;
						if (hasRefOrSpread(open.attributes)) return;

						var props = t.objectExpression([]);
						var key = null;
						var type = open.name;

						if (t.isJSXIdentifier(type) && t.react.isCompatTag(type.name)) {
							type = t.stringLiteral(type.name);
						}

						function pushProp(objProps, key, value) {
							objProps.push(t.objectProperty(key, value));
						}

						for (var _iterator = open.attributes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref2;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref2 = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref2 = _i.value;
							}

							var attr = _ref2;

							if (isJSXAttributeOfName(attr, "key")) {
								key = getAttributeValue(attr);
							} else {
								var name = attr.name.name;
								var propertyKey = t.isValidIdentifier(name) ? t.identifier(name) : t.stringLiteral(name);
								pushProp(props.properties, propertyKey, getAttributeValue(attr));
							}
						}

						var args = [type, props];
						if (key || node.children.length) {
							var children = t.react.buildChildren(node);
							args.push.apply(args, [key || t.unaryExpression("void", t.numericLiteral(0), true)].concat(children));
						}

						var el = t.callExpression(file.addHelper("jsx"), args);
						path.replaceWith(el);
					}
				}
			};
		};

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			return {
				manipulateOptions: function manipulateOptions(opts, parserOpts) {
					parserOpts.plugins.push("jsx");
				},

				visitor: __webpack_require__(191)({
					pre: function pre(state) {
						state.callee = state.tagExpr;
					},
					post: function post(state) {
						if (t.react.isCompatTag(state.tagName)) {
							state.call = t.callExpression(t.memberExpression(t.memberExpression(t.identifier("React"), t.identifier("DOM")), state.tagExpr, t.isLiteral(state.tagExpr)), state.args);
						}
					}
				})
			};
		};

		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			var visitor = {
				JSXOpeningElement: function JSXOpeningElement(_ref2) {
					var node = _ref2.node;

					var id = t.jSXIdentifier(TRACE_ID);
					var trace = t.thisExpression();

					node.attributes.push(t.jSXAttribute(id, t.jSXExpressionContainer(trace)));
				}
			};

			return {
				visitor: visitor
			};
		};

		var TRACE_ID = "__self";

		module.exports = exports["default"];
	}, function (module, exports) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var t = _ref.types;

			function makeTrace(fileNameIdentifier, lineNumber) {
				var fileLineLiteral = lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();
				var fileNameProperty = t.objectProperty(t.identifier("fileName"), fileNameIdentifier);
				var lineNumberProperty = t.objectProperty(t.identifier("lineNumber"), fileLineLiteral);
				return t.objectExpression([fileNameProperty, lineNumberProperty]);
			}

			var visitor = {
				JSXOpeningElement: function JSXOpeningElement(path, state) {
					var id = t.jSXIdentifier(TRACE_ID);
					var location = path.container.openingElement.loc;
					if (!location) {
						return;
					}

					var attributes = path.container.openingElement.attributes;
					for (var i = 0; i < attributes.length; i++) {
						var name = attributes[i].name;
						if (name && name.name === TRACE_ID) {
							return;
						}
					}

					if (!state.fileNameIdentifier) {
						var fileName = state.file.log.filename !== "unknown" ? state.file.log.filename : null;

						var fileNameIdentifier = path.scope.generateUidIdentifier(FILE_NAME_VAR);
						path.hub.file.scope.push({ id: fileNameIdentifier, init: t.stringLiteral(fileName) });
						state.fileNameIdentifier = fileNameIdentifier;
					}

					var trace = makeTrace(state.fileNameIdentifier, location.start.line);
					attributes.push(t.jSXAttribute(id, t.jSXExpressionContainer(trace)));
				}
			};

			return {
				visitor: visitor
			};
		};

		var TRACE_ID = "__source";
		var FILE_NAME_VAR = "_jsxFileName";

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var hasOwn = Object.prototype.hasOwnProperty;

		exports.hoist = function (funPath) {
			t.assertFunction(funPath.node);

			var vars = {};

			function varDeclToExpr(vdec, includeIdentifiers) {
				t.assertVariableDeclaration(vdec);

				var exprs = [];

				vdec.declarations.forEach(function (dec) {
					vars[dec.id.name] = t.identifier(dec.id.name);

					if (dec.init) {
						exprs.push(t.assignmentExpression("=", dec.id, dec.init));
					} else if (includeIdentifiers) {
						exprs.push(dec.id);
					}
				});

				if (exprs.length === 0) return null;

				if (exprs.length === 1) return exprs[0];

				return t.sequenceExpression(exprs);
			}

			funPath.get("body").traverse({
				VariableDeclaration: {
					exit: function exit(path) {
						var expr = varDeclToExpr(path.node, false);
						if (expr === null) {
							path.remove();
						} else {
							path.replaceWith(t.expressionStatement(expr));
						}

						path.skip();
					}
				},

				ForStatement: function ForStatement(path) {
					var init = path.node.init;
					if (t.isVariableDeclaration(init)) {
						path.get("init").replaceWith(varDeclToExpr(init, false));
					}
				},

				ForXStatement: function ForXStatement(path) {
					var left = path.get("left");
					if (left.isVariableDeclaration()) {
						left.replaceWith(varDeclToExpr(left.node, true));
					}
				},

				FunctionDeclaration: function FunctionDeclaration(path) {
					var node = path.node;
					vars[node.id.name] = node.id;

					var assignment = t.expressionStatement(t.assignmentExpression("=", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));

					if (path.parentPath.isBlockStatement()) {
						path.parentPath.unshiftContainer("body", assignment);

						path.remove();
					} else {
						path.replaceWith(assignment);
					}

					path.skip();
				},

				FunctionExpression: function FunctionExpression(path) {
					path.skip();
				}
			});

			var paramNames = {};
			funPath.get("params").forEach(function (paramPath) {
				var param = paramPath.node;
				if (t.isIdentifier(param)) {
					paramNames[param.name] = param;
				} else {}
			});

			var declarations = [];

			(0, _keys2.default)(vars).forEach(function (name) {
				if (!hasOwn.call(paramNames, name)) {
					declarations.push(t.variableDeclarator(vars[name], null));
				}
			});

			if (declarations.length === 0) {
				return null;
			}

			return t.variableDeclaration("var", declarations);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _assert = __webpack_require__(76);

		var _assert2 = _interopRequireDefault(_assert);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _util = __webpack_require__(119);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function Entry() {
			_assert2.default.ok(this instanceof Entry);
		}

		function FunctionEntry(returnLoc) {
			Entry.call(this);
			t.assertLiteral(returnLoc);
			this.returnLoc = returnLoc;
		}

		(0, _util.inherits)(FunctionEntry, Entry);
		exports.FunctionEntry = FunctionEntry;

		function LoopEntry(breakLoc, continueLoc, label) {
			Entry.call(this);

			t.assertLiteral(breakLoc);
			t.assertLiteral(continueLoc);

			if (label) {
				t.assertIdentifier(label);
			} else {
				label = null;
			}

			this.breakLoc = breakLoc;
			this.continueLoc = continueLoc;
			this.label = label;
		}

		(0, _util.inherits)(LoopEntry, Entry);
		exports.LoopEntry = LoopEntry;

		function SwitchEntry(breakLoc) {
			Entry.call(this);
			t.assertLiteral(breakLoc);
			this.breakLoc = breakLoc;
		}

		(0, _util.inherits)(SwitchEntry, Entry);
		exports.SwitchEntry = SwitchEntry;

		function TryEntry(firstLoc, catchEntry, finallyEntry) {
			Entry.call(this);

			t.assertLiteral(firstLoc);

			if (catchEntry) {
				_assert2.default.ok(catchEntry instanceof CatchEntry);
			} else {
				catchEntry = null;
			}

			if (finallyEntry) {
				_assert2.default.ok(finallyEntry instanceof FinallyEntry);
			} else {
				finallyEntry = null;
			}

			_assert2.default.ok(catchEntry || finallyEntry);

			this.firstLoc = firstLoc;
			this.catchEntry = catchEntry;
			this.finallyEntry = finallyEntry;
		}

		(0, _util.inherits)(TryEntry, Entry);
		exports.TryEntry = TryEntry;

		function CatchEntry(firstLoc, paramId) {
			Entry.call(this);

			t.assertLiteral(firstLoc);
			t.assertIdentifier(paramId);

			this.firstLoc = firstLoc;
			this.paramId = paramId;
		}

		(0, _util.inherits)(CatchEntry, Entry);
		exports.CatchEntry = CatchEntry;

		function FinallyEntry(firstLoc, afterLoc) {
			Entry.call(this);
			t.assertLiteral(firstLoc);
			t.assertLiteral(afterLoc);
			this.firstLoc = firstLoc;
			this.afterLoc = afterLoc;
		}

		(0, _util.inherits)(FinallyEntry, Entry);
		exports.FinallyEntry = FinallyEntry;

		function LabeledEntry(breakLoc, label) {
			Entry.call(this);

			t.assertLiteral(breakLoc);
			t.assertIdentifier(label);

			this.breakLoc = breakLoc;
			this.label = label;
		}

		(0, _util.inherits)(LabeledEntry, Entry);
		exports.LabeledEntry = LabeledEntry;

		function LeapManager(emitter) {
			_assert2.default.ok(this instanceof LeapManager);

			var Emitter = __webpack_require__(212).Emitter;
			_assert2.default.ok(emitter instanceof Emitter);

			this.emitter = emitter;
			this.entryStack = [new FunctionEntry(emitter.finalLoc)];
		}

		var LMp = LeapManager.prototype;
		exports.LeapManager = LeapManager;

		LMp.withEntry = function (entry, callback) {
			_assert2.default.ok(entry instanceof Entry);
			this.entryStack.push(entry);
			try {
				callback.call(this.emitter);
			} finally {
				var popped = this.entryStack.pop();
				_assert2.default.strictEqual(popped, entry);
			}
		};

		LMp._findLeapLocation = function (property, label) {
			for (var i = this.entryStack.length - 1; i >= 0; --i) {
				var entry = this.entryStack[i];
				var loc = entry[property];
				if (loc) {
					if (label) {
						if (entry.label && entry.label.name === label.name) {
							return loc;
						}
					} else if (entry instanceof LabeledEntry) {} else {
						return loc;
					}
				}
			}

			return null;
		};

		LMp.getBreakLoc = function (label) {
			return this._findLeapLocation("breakLoc", label);
		};

		LMp.getContinueLoc = function (label) {
			return this._findLeapLocation("continueLoc", label);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _assert = __webpack_require__(76);

		var _assert2 = _interopRequireDefault(_assert);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var m = __webpack_require__(278).makeAccessor();

		var hasOwn = Object.prototype.hasOwnProperty;

		function makePredicate(propertyName, knownTypes) {
			function onlyChildren(node) {
				t.assertNode(node);

				var result = false;

				function check(child) {
					if (result) {} else if (Array.isArray(child)) {
						child.some(check);
					} else if (t.isNode(child)) {
						_assert2.default.strictEqual(result, false);
						result = predicate(child);
					}
					return result;
				}

				var keys = t.VISITOR_KEYS[node.type];
				if (keys) {
					for (var i = 0; i < keys.length; i++) {
						var key = keys[i];
						var child = node[key];
						check(child);
					}
				}

				return result;
			}

			function predicate(node) {
				t.assertNode(node);

				var meta = m(node);
				if (hasOwn.call(meta, propertyName)) return meta[propertyName];

				if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;

				if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;

				return meta[propertyName] = onlyChildren(node);
			}

			predicate.onlyChildren = onlyChildren;

			return predicate;
		}

		var opaqueTypes = {
			FunctionExpression: true
		};

		var sideEffectTypes = {
			CallExpression: true,
			ForInStatement: true,
			UnaryExpression: true,
			BinaryExpression: true,
			AssignmentExpression: true,
			UpdateExpression: true,
			NewExpression: true };

		var leapTypes = {
			YieldExpression: true,
			BreakStatement: true,
			ContinueStatement: true,
			ReturnStatement: true,
			ThrowStatement: true
		};

		for (var type in leapTypes) {
			if (hasOwn.call(leapTypes, type)) {
				sideEffectTypes[type] = leapTypes[type];
			}
		}

		exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
		exports.containsLeap = makePredicate("containsLeap", leapTypes);
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _assert = __webpack_require__(76);

		var _assert2 = _interopRequireDefault(_assert);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _hoist = __webpack_require__(342);

		var _emit = __webpack_require__(212);

		var _util = __webpack_require__(213);

		var util = _interopRequireWildcard(_util);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var getMarkInfo = __webpack_require__(278).makeAccessor();

		exports.visitor = {
			Function: {
				exit: function exit(path, state) {
					var node = path.node;

					if (node.generator) {
						if (node.async) {
							if (state.opts.asyncGenerators === false) return;
						} else {
							if (state.opts.generators === false) return;
						}
					} else if (node.async) {
						if (state.opts.async === false) return;
					} else {
						return;
					}

					var contextId = path.scope.generateUidIdentifier("context");
					var argsId = path.scope.generateUidIdentifier("args");

					path.ensureBlock();
					var bodyBlockPath = path.get("body");

					if (node.async) {
						bodyBlockPath.traverse(awaitVisitor);
					}

					bodyBlockPath.traverse(functionSentVisitor, {
						context: contextId
					});

					var outerBody = [];
					var innerBody = [];

					bodyBlockPath.get("body").forEach(function (childPath) {
						var node = childPath.node;
						if (node && node._blockHoist != null) {
							outerBody.push(node);
						} else {
							innerBody.push(node);
						}
					});

					if (outerBody.length > 0) {
						bodyBlockPath.node.body = innerBody;
					}

					var outerFnExpr = getOuterFnExpr(path);

					t.assertIdentifier(node.id);
					var innerFnId = t.identifier(node.id.name + "$");

					var vars = (0, _hoist.hoist)(path);

					var didRenameArguments = renameArguments(path, argsId);
					if (didRenameArguments) {
						vars = vars || t.variableDeclaration("var", []);
						vars.declarations.push(t.variableDeclarator(argsId, t.identifier("arguments")));
					}

					var emitter = new _emit.Emitter(contextId);
					emitter.explode(path.get("body"));

					if (vars && vars.declarations.length > 0) {
						outerBody.push(vars);
					}

					var wrapArgs = [emitter.getContextFunction(innerFnId), node.generator ? outerFnExpr : t.nullLiteral(), t.thisExpression()];

					var tryLocsList = emitter.getTryLocsList();
					if (tryLocsList) {
						wrapArgs.push(tryLocsList);
					}

					var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap"), wrapArgs);

					outerBody.push(t.returnStatement(wrapCall));
					node.body = t.blockStatement(outerBody);

					var wasGeneratorFunction = node.generator;
					if (wasGeneratorFunction) {
						node.generator = false;
					}

					if (node.async) {
						node.async = false;
					}

					if (wasGeneratorFunction && t.isExpression(node)) {
						path.replaceWith(t.callExpression(util.runtimeProperty("mark"), [node]));
					}

					path.requeue();
				}
			}
		};

		function getOuterFnExpr(funPath) {
			var node = funPath.node;
			t.assertFunction(node);

			if (!node.id) {
				node.id = funPath.scope.parent.generateUidIdentifier("callee");
			}

			if (node.generator && t.isFunctionDeclaration(node)) {
				var pp = funPath.findParent(function (path) {
					return path.isProgram() || path.isBlockStatement();
				});

				if (!pp) {
					return node.id;
				}

				var markDecl = getRuntimeMarkDecl(pp);
				var markedArray = markDecl.declarations[0].id;
				var funDeclIdArray = markDecl.declarations[0].init.callee.object;
				t.assertArrayExpression(funDeclIdArray);

				var index = funDeclIdArray.elements.length;
				funDeclIdArray.elements.push(node.id);

				return t.memberExpression(markedArray, t.numericLiteral(index), true);
			}

			return node.id;
		}

		function getRuntimeMarkDecl(blockPath) {
			var block = blockPath.node;
			_assert2.default.ok(Array.isArray(block.body));

			var info = getMarkInfo(block);
			if (info.decl) {
				return info.decl;
			}

			info.decl = t.variableDeclaration("var", [t.variableDeclarator(blockPath.scope.generateUidIdentifier("marked"), t.callExpression(t.memberExpression(t.arrayExpression([]), t.identifier("map"), false), [util.runtimeProperty("mark")]))]);

			blockPath.unshiftContainer("body", info.decl);

			return info.decl;
		}

		function renameArguments(funcPath, argsId) {
			var state = {
				didRenameArguments: false,
				argsId: argsId
			};

			funcPath.traverse(argumentsVisitor, state);

			return state.didRenameArguments;
		}

		var argumentsVisitor = {
			"FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
				path.skip();
			},

			Identifier: function Identifier(path, state) {
				if (path.node.name === "arguments" && util.isReference(path)) {
					path.replaceWith(state.argsId);
					state.didRenameArguments = true;
				}
			}
		};

		var functionSentVisitor = {
			MetaProperty: function MetaProperty(path) {
				var node = path.node;

				if (node.meta.name === "function" && node.property.name === "sent") {
					path.replaceWith(t.memberExpression(this.context, t.identifier("_sent")));
				}
			}
		};

		var awaitVisitor = {
			Function: function Function(path) {
				path.skip();
			},

			AwaitExpression: function AwaitExpression(path) {
				var argument = path.node.argument;

				path.replaceWith(t.yieldExpression(t.callExpression(util.runtimeProperty("awrap"), [argument]), false));
			}
		};
	}, function (module, exports) {

		"use strict";

		module.exports = {
			builtins: {
				Symbol: "symbol",
				Promise: "promise",
				Map: "map",
				WeakMap: "weak-map",
				Set: "set",
				WeakSet: "weak-set",
				Observable: "observable",
				setImmediate: "set-immediate",
				clearImmediate: "clear-immediate",
				asap: "asap"
			},

			methods: {
				Array: {
					concat: "array/concat",
					copyWithin: "array/copy-within",
					entries: "array/entries",
					every: "array/every",
					fill: "array/fill",
					filter: "array/filter",
					findIndex: "array/find-index",
					find: "array/find",
					forEach: "array/for-each",
					from: "array/from",
					includes: "array/includes",
					indexOf: "array/index-of",

					join: "array/join",
					keys: "array/keys",
					lastIndexOf: "array/last-index-of",
					map: "array/map",
					of: "array/of",
					pop: "array/pop",
					push: "array/push",
					reduceRight: "array/reduce-right",
					reduce: "array/reduce",
					reverse: "array/reverse",
					shift: "array/shift",
					slice: "array/slice",
					some: "array/some",
					sort: "array/sort",
					splice: "array/splice",
					unshift: "array/unshift",
					values: "array/values"
				},

				JSON: {
					stringify: "json/stringify"
				},

				Object: {
					assign: "object/assign",
					create: "object/create",
					defineProperties: "object/define-properties",
					defineProperty: "object/define-property",
					entries: "object/entries",
					freeze: "object/freeze",
					getOwnPropertyDescriptor: "object/get-own-property-descriptor",
					getOwnPropertyDescriptors: "object/get-own-property-descriptors",
					getOwnPropertyNames: "object/get-own-property-names",
					getOwnPropertySymbols: "object/get-own-property-symbols",
					getPrototypeOf: "object/get-prototype-of",
					isExtensible: "object/is-extensible",
					isFrozen: "object/is-frozen",
					isSealed: "object/is-sealed",
					is: "object/is",
					keys: "object/keys",
					preventExtensions: "object/prevent-extensions",
					seal: "object/seal",
					setPrototypeOf: "object/set-prototype-of",
					values: "object/values"
				},

				RegExp: {
					escape: "regexp/escape" },

				Math: {
					acosh: "math/acosh",
					asinh: "math/asinh",
					atanh: "math/atanh",
					cbrt: "math/cbrt",
					clz32: "math/clz32",
					cosh: "math/cosh",
					expm1: "math/expm1",
					fround: "math/fround",
					hypot: "math/hypot",
					imul: "math/imul",
					log10: "math/log10",
					log1p: "math/log1p",
					log2: "math/log2",
					sign: "math/sign",
					sinh: "math/sinh",
					tanh: "math/tanh",
					trunc: "math/trunc",
					iaddh: "math/iaddh",
					isubh: "math/isubh",
					imulh: "math/imulh",
					umulh: "math/umulh"
				},

				Symbol: {
					asyncIterator: "symbol/async-iterator",
					for: "symbol/for",
					hasInstance: "symbol/has-instance",
					isConcatSpreadable: "symbol/is-concat-spreadable",
					iterator: "symbol/iterator",
					keyFor: "symbol/key-for",
					match: "symbol/match",
					observable: "symbol/observable",
					replace: "symbol/replace",
					search: "symbol/search",
					species: "symbol/species",
					split: "symbol/split",
					toPrimitive: "symbol/to-primitive",
					toStringTag: "symbol/to-string-tag",
					unscopables: "symbol/unscopables"
				},

				String: {
					at: "string/at",
					codePointAt: "string/code-point-at",
					endsWith: "string/ends-with",
					fromCodePoint: "string/from-code-point",
					includes: "string/includes",
					matchAll: "string/match-all",
					padLeft: "string/pad-left",
					padRight: "string/pad-right",
					padStart: "string/pad-start",
					padEnd: "string/pad-end",
					raw: "string/raw",
					repeat: "string/repeat",
					startsWith: "string/starts-with",
					trim: "string/trim",
					trimLeft: "string/trim-left",
					trimRight: "string/trim-right",
					trimStart: "string/trim-start",
					trimEnd: "string/trim-end"
				},

				Number: {
					EPSILON: "number/epsilon",
					isFinite: "number/is-finite",
					isInteger: "number/is-integer",
					isNaN: "number/is-nan",
					isSafeInteger: "number/is-safe-integer",
					MAX_SAFE_INTEGER: "number/max-safe-integer",
					MIN_SAFE_INTEGER: "number/min-safe-integer",
					parseFloat: "number/parse-float",
					parseInt: "number/parse-int"
				},

				Reflect: {
					apply: "reflect/apply",
					construct: "reflect/construct",
					defineProperty: "reflect/define-property",
					deleteProperty: "reflect/delete-property",
					enumerate: "reflect/enumerate",
					getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
					getPrototypeOf: "reflect/get-prototype-of",
					get: "reflect/get",
					has: "reflect/has",
					isExtensible: "reflect/is-extensible",
					ownKeys: "reflect/own-keys",
					preventExtensions: "reflect/prevent-extensions",
					setPrototypeOf: "reflect/set-prototype-of",
					set: "reflect/set",
					defineMetadata: "reflect/define-metadata",
					deleteMetadata: "reflect/delete-metadata",
					getMetadata: "reflect/get-metadata",
					getMetadataKeys: "reflect/get-metadata-keys",
					getOwnMetadata: "reflect/get-own-metadata",
					getOwnMetadataKeys: "reflect/get-own-metadata-keys",
					hasMetadata: "reflect/has-metadata",
					hasOwnMetadata: "reflect/has-own-metadata",
					metadata: "reflect/metadata"
				},

				System: {
					global: "system/global"
				},

				Error: {
					isError: "error/is-error" },

				Date: {},

				Function: {}
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.definitions = undefined;

		exports.default = function (_ref) {
			var t = _ref.types;

			function getRuntimeModuleName(opts) {
				return opts.moduleName || "babel-runtime";
			}

			function has(obj, key) {
				return Object.prototype.hasOwnProperty.call(obj, key);
			}

			var HELPER_BLACKLIST = ["interopRequireWildcard", "interopRequireDefault"];

			return {
				pre: function pre(file) {
					var moduleName = getRuntimeModuleName(this.opts);

					if (this.opts.helpers !== false) {
						file.set("helperGenerator", function (name) {
							if (HELPER_BLACKLIST.indexOf(name) < 0) {
								return file.addImport(moduleName + "/helpers/" + name, "default", name);
							}
						});
					}

					this.setDynamic("regeneratorIdentifier", function () {
						return file.addImport(moduleName + "/regenerator", "default", "regeneratorRuntime");
					});
				},

				visitor: {
					ReferencedIdentifier: function ReferencedIdentifier(path, state) {
						var node = path.node;
						var parent = path.parent;
						var scope = path.scope;

						if (node.name === "regeneratorRuntime" && state.opts.regenerator !== false) {
							path.replaceWith(state.get("regeneratorIdentifier"));
							return;
						}

						if (state.opts.polyfill === false) return;

						if (t.isMemberExpression(parent)) return;
						if (!has(_definitions2.default.builtins, node.name)) return;
						if (scope.getBindingIdentifier(node.name)) return;

						var moduleName = getRuntimeModuleName(state.opts);
						path.replaceWith(state.addImport(moduleName + "/core-js/" + _definitions2.default.builtins[node.name], "default", node.name));
					},
					CallExpression: function CallExpression(path, state) {
						if (state.opts.polyfill === false) return;

						if (path.node.arguments.length) return;

						var callee = path.node.callee;
						if (!t.isMemberExpression(callee)) return;
						if (!callee.computed) return;
						if (!path.get("callee.property").matchesPattern("Symbol.iterator")) return;

						var moduleName = getRuntimeModuleName(state.opts);
						path.replaceWith(t.callExpression(state.addImport(moduleName + "/core-js/get-iterator", "default", "getIterator"), [callee.object]));
					},
					BinaryExpression: function BinaryExpression(path, state) {
						if (state.opts.polyfill === false) return;

						if (path.node.operator !== "in") return;
						if (!path.get("left").matchesPattern("Symbol.iterator")) return;

						var moduleName = getRuntimeModuleName(state.opts);
						path.replaceWith(t.callExpression(state.addImport(moduleName + "/core-js/is-iterable", "default", "isIterable"), [path.node.right]));
					},

					MemberExpression: {
						enter: function enter(path, state) {
							if (state.opts.polyfill === false) return;
							if (!path.isReferenced()) return;

							var node = path.node;

							var obj = node.object;
							var prop = node.property;

							if (!t.isReferenced(obj, node)) return;
							if (node.computed) return;
							if (!has(_definitions2.default.methods, obj.name)) return;

							var methods = _definitions2.default.methods[obj.name];
							if (!has(methods, prop.name)) return;

							if (path.scope.getBindingIdentifier(obj.name)) return;

							if (obj.name === "Object" && prop.name === "defineProperty" && path.parentPath.isCallExpression()) {
								var call = path.parentPath.node;
								if (call.arguments.length === 3 && t.isLiteral(call.arguments[1])) return;
							}

							var moduleName = getRuntimeModuleName(state.opts);
							path.replaceWith(state.addImport(moduleName + "/core-js/" + methods[prop.name], "default", obj.name + "$" + prop.name));
						},
						exit: function exit(path, state) {
							if (state.opts.polyfill === false) return;
							if (!path.isReferenced()) return;

							var node = path.node;

							var obj = node.object;

							if (!has(_definitions2.default.builtins, obj.name)) return;
							if (path.scope.getBindingIdentifier(obj.name)) return;

							var moduleName = getRuntimeModuleName(state.opts);
							path.replaceWith(t.memberExpression(state.addImport(moduleName + "/core-js/" + _definitions2.default.builtins[obj.name], "default", obj.name), node.property, node.computed));
						}
					}
				}
			};
		};

		var _definitions = __webpack_require__(346);

		var _definitions2 = _interopRequireDefault(_definitions);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		exports.definitions = _definitions2.default;
	}, function (module, exports, __webpack_require__) {
		"use strict";

		exports.__esModule = true;

		exports.default = function (_ref) {
			var messages = _ref.messages;

			return {
				visitor: {
					ReferencedIdentifier: function ReferencedIdentifier(path) {
						var node = path.node;
						var scope = path.scope;

						var binding = scope.getBinding(node.name);
						if (binding && binding.kind === "type" && !path.parentPath.isFlow()) {
							throw path.buildCodeFrameError(messages.get("undeclaredVariableType", node.name), ReferenceError);
						}

						if (scope.hasBinding(node.name)) return;

						var bindings = scope.getAllBindings();

						var closest = void 0;
						var shortest = -1;

						for (var name in bindings) {
							var distance = (0, _leven2.default)(node.name, name);
							if (distance <= 0 || distance > 3) continue;
							if (distance <= shortest) continue;

							closest = name;
							shortest = distance;
						}

						var msg = void 0;
						if (closest) {
							msg = messages.get("undeclaredVariableSuggestion", node.name, closest);
						} else {
							msg = messages.get("undeclaredVariable", node.name);
						}

						throw path.buildCodeFrameError(msg, ReferenceError);
					}
				}
			};
		};

		var _leven = __webpack_require__(471);

		var _leven2 = _interopRequireDefault(_leven);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _require = __webpack_require__(215);

		var buildPreset = _require.buildPreset;

		module.exports = function preset(context) {
			var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

			return {
				presets: [opts.es2015 !== false && [buildPreset, opts.es2015], opts.es2016 !== false && __webpack_require__(216), opts.es2017 !== false && __webpack_require__(217)].filter(Boolean)
			};
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			plugins: [__webpack_require__(142), __webpack_require__(138), __webpack_require__(78), __webpack_require__(130), __webpack_require__(141)],
			env: {
				development: {
					plugins: []
				}
			}
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = {
			presets: [__webpack_require__(218)],
			plugins: [__webpack_require__(134), __webpack_require__(139)]
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(410), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(413), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(415), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(416), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(418), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(419), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		module.exports = { "default": __webpack_require__(420), __esModule: true };
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _path2 = __webpack_require__(33);

		var _path3 = _interopRequireDefault(_path2);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var testing = "production" === "test";

		var TraversalContext = function () {
			function TraversalContext(scope, opts, state, parentPath) {
				(0, _classCallCheck3.default)(this, TraversalContext);
				this.queue = null;

				this.parentPath = parentPath;
				this.scope = scope;
				this.state = state;
				this.opts = opts;
			}

			TraversalContext.prototype.shouldVisit = function shouldVisit(node) {
				var opts = this.opts;
				if (opts.enter || opts.exit) return true;

				if (opts[node.type]) return true;

				var keys = t.VISITOR_KEYS[node.type];
				if (!keys || !keys.length) return false;

				for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var key = _ref;

					if (node[key]) return true;
				}

				return false;
			};

			TraversalContext.prototype.create = function create(node, obj, key, listKey) {
				return _path3.default.get({
					parentPath: this.parentPath,
					parent: node,
					container: obj,
					key: key,
					listKey: listKey
				});
			};

			TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority) {
				if (this.trap) {
					throw new Error("Infinite cycle detected");
				}

				if (this.queue) {
					if (notPriority) {
						this.queue.push(path);
					} else {
						this.priorityQueue.push(path);
					}
				}
			};

			TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
				if (container.length === 0) return false;

				var queue = [];

				for (var key = 0; key < container.length; key++) {
					var node = container[key];
					if (node && this.shouldVisit(node)) {
						queue.push(this.create(parent, container, key, listKey));
					}
				}

				return this.visitQueue(queue);
			};

			TraversalContext.prototype.visitSingle = function visitSingle(node, key) {
				if (this.shouldVisit(node[key])) {
					return this.visitQueue([this.create(node, node, key)]);
				} else {
					return false;
				}
			};

			TraversalContext.prototype.visitQueue = function visitQueue(queue) {
				this.queue = queue;
				this.priorityQueue = [];

				var visited = [];
				var stop = false;

				for (var _iterator2 = queue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var path = _ref2;

					path.resync();

					if (path.contexts.length === 0 || path.contexts[path.contexts.length - 1] !== this) {
						path.pushContext(this);
					}

					if (path.key === null) continue;

					if (testing && queue.length >= 1000) {
						this.trap = true;
					}

					if (visited.indexOf(path.node) >= 0) continue;
					visited.push(path.node);

					if (path.visit()) {
						stop = true;
						break;
					}

					if (this.priorityQueue.length) {
						stop = this.visitQueue(this.priorityQueue);
						this.priorityQueue = [];
						this.queue = queue;
						if (stop) break;
					}
				}

				for (var _iterator3 = queue, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var _path = _ref3;

					_path.popContext();
				}

				this.queue = null;

				return stop;
			};

			TraversalContext.prototype.visit = function visit(node, key) {
				var nodes = node[key];
				if (!nodes) return false;

				if (Array.isArray(nodes)) {
					return this.visitMultiple(nodes, node, key);
				} else {
					return this.visitSingle(node, key);
				}
			};

			return TraversalContext;
		}();

		exports.default = TraversalContext;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.findParent = findParent;
		exports.find = find;
		exports.getFunctionParent = getFunctionParent;
		exports.getStatementParent = getStatementParent;
		exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
		exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
		exports.getAncestry = getAncestry;
		exports.inType = inType;
		exports.inShadow = inShadow;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _index = __webpack_require__(33);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function findParent(callback) {
			var path = this;
			while (path = path.parentPath) {
				if (callback(path)) return path;
			}
			return null;
		}

		function find(callback) {
			var path = this;
			do {
				if (callback(path)) return path;
			} while (path = path.parentPath);
			return null;
		}

		function getFunctionParent() {
			return this.findParent(function (path) {
				return path.isFunction() || path.isProgram();
			});
		}

		function getStatementParent() {
			var path = this;
			do {
				if (Array.isArray(path.container)) {
					return path;
				}
			} while (path = path.parentPath);
		}

		function getEarliestCommonAncestorFrom(paths) {
			return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
				var earliest = void 0;
				var keys = t.VISITOR_KEYS[deepest.type];

				for (var _iterator = ancestries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var ancestry = _ref;

					var path = ancestry[i + 1];

					if (!earliest) {
						earliest = path;
						continue;
					}

					if (path.listKey && earliest.listKey === path.listKey) {
						if (path.key < earliest.key) {
							earliest = path;
							continue;
						}
					}

					var earliestKeyIndex = keys.indexOf(earliest.parentKey);
					var currentKeyIndex = keys.indexOf(path.parentKey);
					if (earliestKeyIndex > currentKeyIndex) {
						earliest = path;
					}
				}

				return earliest;
			});
		}

		function getDeepestCommonAncestorFrom(paths, filter) {
			var _this = this;

			if (!paths.length) {
				return this;
			}

			if (paths.length === 1) {
				return paths[0];
			}

			var minDepth = Infinity;

			var lastCommonIndex = void 0,
			    lastCommon = void 0;

			var ancestries = paths.map(function (path) {
				var ancestry = [];

				do {
					ancestry.unshift(path);
				} while ((path = path.parentPath) && path !== _this);

				if (ancestry.length < minDepth) {
					minDepth = ancestry.length;
				}

				return ancestry;
			});

			var first = ancestries[0];

			depthLoop: for (var i = 0; i < minDepth; i++) {
				var shouldMatch = first[i];

				for (var _iterator2 = ancestries, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var ancestry = _ref2;

					if (ancestry[i] !== shouldMatch) {
						break depthLoop;
					}
				}

				lastCommonIndex = i;
				lastCommon = shouldMatch;
			}

			if (lastCommon) {
				if (filter) {
					return filter(lastCommon, lastCommonIndex, ancestries);
				} else {
					return lastCommon;
				}
			} else {
				throw new Error("Couldn't find intersection");
			}
		}

		function getAncestry() {
			var path = this;
			var paths = [];
			do {
				paths.push(path);
			} while (path = path.parentPath);
			return paths;
		}

		function inType() {
			var path = this;
			while (path) {
				for (var _iterator3 = arguments, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var type = _ref3;

					if (path.node.type === type) return true;
				}
				path = path.parentPath;
			}

			return false;
		}

		function inShadow(key) {
			var parentFn = this.isFunction() ? this : this.findParent(function (p) {
				return p.isFunction();
			});
			if (!parentFn) return;

			if (parentFn.isFunctionExpression() || parentFn.isFunctionDeclaration()) {
				var shadow = parentFn.node.shadow;

				if (shadow && (!key || shadow[key] !== false)) {
					return parentFn;
				}
			} else if (parentFn.isArrowFunctionExpression()) {
				return parentFn;
			}

			return null;
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
		exports.addComment = addComment;
		exports.addComments = addComments;
		function shareCommentsWithSiblings() {
			var node = this.node;
			if (!node) return;

			var trailing = node.trailingComments;
			var leading = node.leadingComments;
			if (!trailing && !leading) return;

			var prev = this.getSibling(this.key - 1);
			var next = this.getSibling(this.key + 1);

			if (!prev.node) prev = next;
			if (!next.node) next = prev;

			prev.addComments("trailing", leading);
			next.addComments("leading", trailing);
		}

		function addComment(type, content, line) {
			this.addComments(type, [{
				type: line ? "CommentLine" : "CommentBlock",
				value: content
			}]);
		}

		function addComments(type, comments) {
			if (!comments) return;

			var node = this.node;
			if (!node) return;

			var key = type + "Comments";

			if (node[key]) {
				node[key] = node[key].concat(comments);
			} else {
				node[key] = comments;
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.call = call;
		exports._call = _call;
		exports.isBlacklisted = isBlacklisted;
		exports.visit = visit;
		exports.skip = skip;
		exports.skipKey = skipKey;
		exports.stop = stop;
		exports.setScope = setScope;
		exports.setContext = setContext;
		exports.resync = resync;
		exports._resyncParent = _resyncParent;
		exports._resyncKey = _resyncKey;
		exports._resyncList = _resyncList;
		exports._resyncRemoved = _resyncRemoved;
		exports.popContext = popContext;
		exports.pushContext = pushContext;
		exports.setup = setup;
		exports.setKey = setKey;
		exports.requeue = requeue;
		exports._getQueueContexts = _getQueueContexts;

		var _index = __webpack_require__(10);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function call(key) {
			var opts = this.opts;

			this.debug(function () {
				return key;
			});

			if (this.node) {
				if (this._call(opts[key])) return true;
			}

			if (this.node) {
				return this._call(opts[this.node.type] && opts[this.node.type][key]);
			}

			return false;
		}

		function _call(fns) {
			if (!fns) return false;

			for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var fn = _ref;

				if (!fn) continue;

				var node = this.node;
				if (!node) return true;

				var ret = fn.call(this.state, this, this.state);
				if (ret) throw new Error("Unexpected return value from visitor method " + fn);

				if (this.node !== node) return true;

				if (this.shouldStop || this.shouldSkip || this.removed) return true;
			}

			return false;
		}

		function isBlacklisted() {
			var blacklist = this.opts.blacklist;
			return blacklist && blacklist.indexOf(this.node.type) > -1;
		}

		function visit() {
			if (!this.node) {
				return false;
			}

			if (this.isBlacklisted()) {
				return false;
			}

			if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
				return false;
			}

			if (this.call("enter") || this.shouldSkip) {
				this.debug(function () {
					return "Skip...";
				});
				return this.shouldStop;
			}

			this.debug(function () {
				return "Recursing into...";
			});
			_index2.default.node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);

			this.call("exit");

			return this.shouldStop;
		}

		function skip() {
			this.shouldSkip = true;
		}

		function skipKey(key) {
			this.skipKeys[key] = true;
		}

		function stop() {
			this.shouldStop = true;
			this.shouldSkip = true;
		}

		function setScope() {
			if (this.opts && this.opts.noScope) return;

			var target = this.context && this.context.scope;

			if (!target) {
				var path = this.parentPath;
				while (path && !target) {
					if (path.opts && path.opts.noScope) return;

					target = path.scope;
					path = path.parentPath;
				}
			}

			this.scope = this.getScope(target);
			if (this.scope) this.scope.init();
		}

		function setContext(context) {
			this.shouldSkip = false;
			this.shouldStop = false;
			this.removed = false;
			this.skipKeys = {};

			if (context) {
				this.context = context;
				this.state = context.state;
				this.opts = context.opts;
			}

			this.setScope();

			return this;
		}

		function resync() {
			if (this.removed) return;

			this._resyncParent();
			this._resyncList();
			this._resyncKey();
		}

		function _resyncParent() {
			if (this.parentPath) {
				this.parent = this.parentPath.node;
			}
		}

		function _resyncKey() {
			if (!this.container) return;

			if (this.node === this.container[this.key]) return;

			if (Array.isArray(this.container)) {
				for (var i = 0; i < this.container.length; i++) {
					if (this.container[i] === this.node) {
						return this.setKey(i);
					}
				}
			} else {
				for (var key in this.container) {
					if (this.container[key] === this.node) {
						return this.setKey(key);
					}
				}
			}

			this.key = null;
		}

		function _resyncList() {
			if (!this.parent || !this.inList) return;

			var newContainer = this.parent[this.listKey];
			if (this.container === newContainer) return;

			this.container = newContainer || null;
		}

		function _resyncRemoved() {
			if (this.key == null || !this.container || this.container[this.key] !== this.node) {
				this._markRemoved();
			}
		}

		function popContext() {
			this.contexts.pop();
			this.setContext(this.contexts[this.contexts.length - 1]);
		}

		function pushContext(context) {
			this.contexts.push(context);
			this.setContext(context);
		}

		function setup(parentPath, container, listKey, key) {
			this.inList = !!listKey;
			this.listKey = listKey;
			this.parentKey = listKey || key;
			this.container = container;

			this.parentPath = parentPath || this.parentPath;
			this.setKey(key);
		}

		function setKey(key) {
			this.key = key;
			this.node = this.container[this.key];
			this.type = this.node && this.node.type;
		}

		function requeue() {
			var pathToQueue = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];

			if (pathToQueue.removed) return;

			var contexts = this.contexts;

			for (var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var context = _ref2;

				context.maybeQueue(pathToQueue);
			}
		}

		function _getQueueContexts() {
			var path = this;
			var contexts = this.contexts;
			while (!contexts.length) {
				path = path.parentPath;
				contexts = path.contexts;
			}
			return contexts;
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.toComputedKey = toComputedKey;
		exports.ensureBlock = ensureBlock;
		exports.arrowFunctionToShadowed = arrowFunctionToShadowed;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function toComputedKey() {
			var node = this.node;

			var key = void 0;
			if (this.isMemberExpression()) {
				key = node.property;
			} else if (this.isProperty() || this.isMethod()) {
				key = node.key;
			} else {
				throw new ReferenceError("todo");
			}

			if (!node.computed) {
				if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
			}

			return key;
		}

		function ensureBlock() {
			return t.ensureBlock(this.node);
		}

		function arrowFunctionToShadowed() {
			if (!this.isArrowFunctionExpression()) return;

			this.ensureBlock();

			var node = this.node;

			node.expression = false;
			node.type = "FunctionExpression";
			node.shadow = node.shadow || true;
		}
	}, function (module, exports, __webpack_require__) {
		(function (global) {
			"use strict";

			exports.__esModule = true;

			var _typeof2 = __webpack_require__(7);

			var _typeof3 = _interopRequireDefault(_typeof2);

			var _getIterator2 = __webpack_require__(2);

			var _getIterator3 = _interopRequireDefault(_getIterator2);

			var _map = __webpack_require__(221);

			var _map2 = _interopRequireDefault(_map);

			exports.evaluateTruthy = evaluateTruthy;
			exports.evaluate = evaluate;

			function _interopRequireDefault(obj) {
				return obj && obj.__esModule ? obj : { default: obj };
			}

			var VALID_CALLEES = ["String", "Number", "Math"];
			var INVALID_METHODS = ["random"];

			function evaluateTruthy() {
				var res = this.evaluate();
				if (res.confident) return !!res.value;
			}

			function evaluate() {
				var confident = true;
				var deoptPath = void 0;
				var seen = new _map2.default();

				function deopt(path) {
					if (!confident) return;
					deoptPath = path;
					confident = false;
				}

				var value = evaluate(this);
				if (!confident) value = undefined;
				return {
					confident: confident,
					deopt: deoptPath,
					value: value
				};

				function evaluate(path) {
					var node = path.node;

					if (seen.has(node)) {
						var existing = seen.get(node);
						if (existing.resolved) {
							return existing.value;
						} else {
							deopt(path);
							return;
						}
					} else {
						var item = { resolved: false };
						seen.set(node, item);

						var val = _evaluate(path);
						if (confident) {
							item.resolved = true;
							item.value = val;
						}
						return val;
					}
				}

				function _evaluate(path) {
					if (!confident) return;

					var node = path.node;

					if (path.isSequenceExpression()) {
						var exprs = path.get("expressions");
						return evaluate(exprs[exprs.length - 1]);
					}

					if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
						return node.value;
					}

					if (path.isNullLiteral()) {
						return null;
					}

					if (path.isTemplateLiteral()) {
						var str = "";

						var i = 0;
						var _exprs = path.get("expressions");

						for (var _iterator = node.quasis, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var elem = _ref;

							if (!confident) break;

							str += elem.value.cooked;

							var expr = _exprs[i++];
							if (expr) str += String(evaluate(expr));
						}

						if (!confident) return;
						return str;
					}

					if (path.isConditionalExpression()) {
						var testResult = evaluate(path.get("test"));
						if (!confident) return;
						if (testResult) {
							return evaluate(path.get("consequent"));
						} else {
							return evaluate(path.get("alternate"));
						}
					}

					if (path.isExpressionWrapper()) {
						return evaluate(path.get("expression"));
					}

					if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
						var property = path.get("property");
						var object = path.get("object");

						if (object.isLiteral() && property.isIdentifier()) {
							var _value = object.node.value;
							var type = typeof _value === "undefined" ? "undefined" : (0, _typeof3.default)(_value);
							if (type === "number" || type === "string") {
								return _value[property.node.name];
							}
						}
					}

					if (path.isReferencedIdentifier()) {
						var binding = path.scope.getBinding(node.name);

						if (binding && binding.constantViolations.length > 0) {
							return deopt(binding.path);
						}

						if (binding && binding.hasValue) {
							return binding.value;
						} else {
							if (node.name === "undefined") {
								return undefined;
							} else if (node.name === "Infinity") {
								return Infinity;
							} else if (node.name === "NaN") {
								return NaN;
							}

							var resolved = path.resolve();
							if (resolved === path) {
								return deopt(path);
							} else {
								return evaluate(resolved);
							}
						}
					}

					if (path.isUnaryExpression({ prefix: true })) {
						if (node.operator === "void") {
							return undefined;
						}

						var argument = path.get("argument");
						if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
							return "function";
						}

						var arg = evaluate(argument);
						if (!confident) return;
						switch (node.operator) {
							case "!":
								return !arg;
							case "+":
								return +arg;
							case "-":
								return -arg;
							case "~":
								return ~arg;
							case "typeof":
								return typeof arg === "undefined" ? "undefined" : (0, _typeof3.default)(arg);
						}
					}

					if (path.isArrayExpression()) {
						var arr = [];
						var elems = path.get("elements");
						for (var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var _elem = _ref2;

							_elem = _elem.evaluate();

							if (_elem.confident) {
								arr.push(_elem.value);
							} else {
								return deopt(_elem);
							}
						}
						return arr;
					}

					if (path.isObjectExpression()) {}

					if (path.isLogicalExpression()) {
						var wasConfident = confident;
						var left = evaluate(path.get("left"));
						var leftConfident = confident;
						confident = wasConfident;
						var right = evaluate(path.get("right"));
						var rightConfident = confident;
						confident = leftConfident && rightConfident;

						switch (node.operator) {
							case "||":
								if (left && leftConfident) {
									confident = true;
									return left;
								}

								if (!confident) return;

								return left || right;
							case "&&":
								if (!left && leftConfident || !right && rightConfident) {
									confident = true;
								}

								if (!confident) return;

								return left && right;
						}
					}

					if (path.isBinaryExpression()) {
						var _left = evaluate(path.get("left"));
						if (!confident) return;
						var _right = evaluate(path.get("right"));
						if (!confident) return;

						switch (node.operator) {
							case "-":
								return _left - _right;
							case "+":
								return _left + _right;
							case "/":
								return _left / _right;
							case "*":
								return _left * _right;
							case "%":
								return _left % _right;
							case "**":
								return Math.pow(_left, _right);
							case "<":
								return _left < _right;
							case ">":
								return _left > _right;
							case "<=":
								return _left <= _right;
							case ">=":
								return _left >= _right;
							case "==":
								return _left == _right;
							case "!=":
								return _left != _right;
							case "===":
								return _left === _right;
							case "!==":
								return _left !== _right;
							case "|":
								return _left | _right;
							case "&":
								return _left & _right;
							case "^":
								return _left ^ _right;
							case "<<":
								return _left << _right;
							case ">>":
								return _left >> _right;
							case ">>>":
								return _left >>> _right;
						}
					}

					if (path.isCallExpression()) {
						var callee = path.get("callee");
						var context = void 0;
						var func = void 0;

						if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
							func = global[node.callee.name];
						}

						if (callee.isMemberExpression()) {
							var _object = callee.get("object");
							var _property = callee.get("property");

							if (_object.isIdentifier() && _property.isIdentifier() && VALID_CALLEES.indexOf(_object.node.name) >= 0 && INVALID_METHODS.indexOf(_property.node.name) < 0) {
								context = global[_object.node.name];
								func = context[_property.node.name];
							}

							if (_object.isLiteral() && _property.isIdentifier()) {
								var _type = (0, _typeof3.default)(_object.node.value);
								if (_type === "string" || _type === "number") {
									context = _object.node.value;
									func = context[_property.node.name];
								}
							}
						}

						if (func) {
							var args = path.get("arguments").map(evaluate);
							if (!confident) return;

							return func.apply(context, args);
						}
					}

					deopt(path);
				}
			}
		}).call(exports, function () {
			return this;
		}());
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.getStatementParent = getStatementParent;
		exports.getOpposite = getOpposite;
		exports.getCompletionRecords = getCompletionRecords;
		exports.getSibling = getSibling;
		exports.get = get;
		exports._getKey = _getKey;
		exports._getPattern = _getPattern;
		exports.getBindingIdentifiers = getBindingIdentifiers;
		exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

		var _index = __webpack_require__(33);

		var _index2 = _interopRequireDefault(_index);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function getStatementParent() {
			var path = this;

			do {
				if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
					break;
				} else {
					path = path.parentPath;
				}
			} while (path);

			if (path && (path.isProgram() || path.isFile())) {
				throw new Error("File/Program node, we can't possibly find a statement parent to this");
			}

			return path;
		}

		function getOpposite() {
			if (this.key === "left") {
				return this.getSibling("right");
			} else if (this.key === "right") {
				return this.getSibling("left");
			}
		}

		function getCompletionRecords() {
			var paths = [];

			var add = function add(path) {
				if (path) paths = paths.concat(path.getCompletionRecords());
			};

			if (this.isIfStatement()) {
				add(this.get("consequent"));
				add(this.get("alternate"));
			} else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
				add(this.get("body"));
			} else if (this.isProgram() || this.isBlockStatement()) {
				add(this.get("body").pop());
			} else if (this.isFunction()) {
				return this.get("body").getCompletionRecords();
			} else if (this.isTryStatement()) {
				add(this.get("block"));
				add(this.get("handler"));
				add(this.get("finalizer"));
			} else {
				paths.push(this);
			}

			return paths;
		}

		function getSibling(key) {
			return _index2.default.get({
				parentPath: this.parentPath,
				parent: this.parent,
				container: this.container,
				listKey: this.listKey,
				key: key
			});
		}

		function get(key, context) {
			if (context === true) context = this.context;
			var parts = key.split(".");
			if (parts.length === 1) {
				return this._getKey(key, context);
			} else {
				return this._getPattern(parts, context);
			}
		}

		function _getKey(key, context) {
			var _this = this;

			var node = this.node;
			var container = node[key];

			if (Array.isArray(container)) {
				return container.map(function (_, i) {
					return _index2.default.get({
						listKey: key,
						parentPath: _this,
						parent: node,
						container: container,
						key: i
					}).setContext(context);
				});
			} else {
				return _index2.default.get({
					parentPath: this,
					parent: node,
					container: node,
					key: key
				}).setContext(context);
			}
		}

		function _getPattern(parts, context) {
			var path = this;
			for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var part = _ref;

				if (part === ".") {
					path = path.parentPath;
				} else {
					if (Array.isArray(path)) {
						path = path[part];
					} else {
						path = path.get(part, context);
					}
				}
			}
			return path;
		}

		function getBindingIdentifiers(duplicates) {
			return t.getBindingIdentifiers(this.node, duplicates);
		}

		function getOuterBindingIdentifiers(duplicates) {
			return t.getOuterBindingIdentifiers(this.node, duplicates);
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.getTypeAnnotation = getTypeAnnotation;
		exports._getTypeAnnotation = _getTypeAnnotation;
		exports.isBaseType = isBaseType;
		exports.couldBeBaseType = couldBeBaseType;
		exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
		exports.isGenericType = isGenericType;

		var _inferers = __webpack_require__(368);

		var inferers = _interopRequireWildcard(_inferers);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function getTypeAnnotation() {
			if (this.typeAnnotation) return this.typeAnnotation;

			var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
			if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
			return this.typeAnnotation = type;
		}

		function _getTypeAnnotation() {
			var node = this.node;

			if (!node) {
				if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
					var declar = this.parentPath.parentPath;
					var declarParent = declar.parentPath;

					if (declar.key === "left" && declarParent.isForInStatement()) {
						return t.stringTypeAnnotation();
					}

					if (declar.key === "left" && declarParent.isForOfStatement()) {
						return t.anyTypeAnnotation();
					}

					return t.voidTypeAnnotation();
				} else {
					return;
				}
			}

			if (node.typeAnnotation) {
				return node.typeAnnotation;
			}

			var inferer = inferers[node.type];
			if (inferer) {
				return inferer.call(this, node);
			}

			inferer = inferers[this.parentPath.type];
			if (inferer && inferer.validParent) {
				return this.parentPath.getTypeAnnotation();
			}
		}

		function isBaseType(baseName, soft) {
			return _isBaseType(baseName, this.getTypeAnnotation(), soft);
		}

		function _isBaseType(baseName, type, soft) {
			if (baseName === "string") {
				return t.isStringTypeAnnotation(type);
			} else if (baseName === "number") {
				return t.isNumberTypeAnnotation(type);
			} else if (baseName === "boolean") {
				return t.isBooleanTypeAnnotation(type);
			} else if (baseName === "any") {
				return t.isAnyTypeAnnotation(type);
			} else if (baseName === "mixed") {
				return t.isMixedTypeAnnotation(type);
			} else if (baseName === "void") {
				return t.isVoidTypeAnnotation(type);
			} else {
				if (soft) {
					return false;
				} else {
					throw new Error("Unknown base type " + baseName);
				}
			}
		}

		function couldBeBaseType(name) {
			var type = this.getTypeAnnotation();
			if (t.isAnyTypeAnnotation(type)) return true;

			if (t.isUnionTypeAnnotation(type)) {
				for (var _iterator = type.types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var type2 = _ref;

					if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
						return true;
					}
				}
				return false;
			} else {
				return _isBaseType(name, type, true);
			}
		}

		function baseTypeStrictlyMatches(right) {
			var left = this.getTypeAnnotation();
			right = right.getTypeAnnotation();

			if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
				return right.type === left.type;
			}
		}

		function isGenericType(genericName) {
			var type = this.getTypeAnnotation();
			return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.default = function (node) {
			if (!this.isReferenced()) return;

			var binding = this.scope.getBinding(node.name);
			if (binding) {
				if (binding.identifier.typeAnnotation) {
					return binding.identifier.typeAnnotation;
				} else {
					return getTypeAnnotationBindingConstantViolations(this, node.name);
				}
			}

			if (node.name === "undefined") {
				return t.voidTypeAnnotation();
			} else if (node.name === "NaN" || node.name === "Infinity") {
				return t.numberTypeAnnotation();
			} else if (node.name === "arguments") {}
		};

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function getTypeAnnotationBindingConstantViolations(path, name) {
			var binding = path.scope.getBinding(name);

			var types = [];
			path.typeAnnotation = t.unionTypeAnnotation(types);

			var functionConstantViolations = [];
			var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);

			var testType = getConditionalAnnotation(path, name);
			if (testType) {
				(function () {
					var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);

					constantViolations = constantViolations.filter(function (path) {
						return testConstantViolations.indexOf(path) < 0;
					});

					types.push(testType.typeAnnotation);
				})();
			}

			if (constantViolations.length) {
				constantViolations = constantViolations.concat(functionConstantViolations);

				for (var _iterator = constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var violation = _ref;

					types.push(violation.getTypeAnnotation());
				}
			}

			if (types.length) {
				return t.createUnionTypeAnnotation(types);
			}
		}

		function getConstantViolationsBefore(binding, path, functions) {
			var violations = binding.constantViolations.slice();
			violations.unshift(binding.path);
			return violations.filter(function (violation) {
				violation = violation.resolve();
				var status = violation._guessExecutionStatusRelativeTo(path);
				if (functions && status === "function") functions.push(violation);
				return status === "before";
			});
		}

		function inferAnnotationFromBinaryExpression(name, path) {
			var operator = path.node.operator;

			var right = path.get("right").resolve();
			var left = path.get("left").resolve();

			var target = void 0;
			if (left.isIdentifier({ name: name })) {
				target = right;
			} else if (right.isIdentifier({ name: name })) {
				target = left;
			}
			if (target) {
				if (operator === "===") {
					return target.getTypeAnnotation();
				} else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
					return t.numberTypeAnnotation();
				} else {
					return;
				}
			} else {
				if (operator !== "===") return;
			}

			var typeofPath = void 0;
			var typePath = void 0;
			if (left.isUnaryExpression({ operator: "typeof" })) {
				typeofPath = left;
				typePath = right;
			} else if (right.isUnaryExpression({ operator: "typeof" })) {
				typeofPath = right;
				typePath = left;
			}
			if (!typePath && !typeofPath) return;

			typePath = typePath.resolve();
			if (!typePath.isLiteral()) return;

			var typeValue = typePath.node.value;
			if (typeof typeValue !== "string") return;

			if (!typeofPath.get("argument").isIdentifier({ name: name })) return;

			return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
		}

		function getParentConditionalPath(path) {
			var parentPath = void 0;
			while (parentPath = path.parentPath) {
				if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
					if (path.key === "test") {
						return;
					} else {
						return parentPath;
					}
				} else {
					path = parentPath;
				}
			}
		}

		function getConditionalAnnotation(path, name) {
			var ifStatement = getParentConditionalPath(path);
			if (!ifStatement) return;

			var test = ifStatement.get("test");
			var paths = [test];
			var types = [];

			do {
				var _path = paths.shift().resolve();

				if (_path.isLogicalExpression()) {
					paths.push(_path.get("left"));
					paths.push(_path.get("right"));
				}

				if (_path.isBinaryExpression()) {
					var type = inferAnnotationFromBinaryExpression(name, _path);
					if (type) types.push(type);
				}
			} while (paths.length);

			if (types.length) {
				return {
					typeAnnotation: t.createUnionTypeAnnotation(types),
					ifStatement: ifStatement
				};
			} else {
				return getConditionalAnnotation(ifStatement, name);
			}
		}
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.Class = exports.Function = exports.Identifier = undefined;

		var _infererReference = __webpack_require__(367);

		Object.defineProperty(exports, "Identifier", {
			enumerable: true,
			get: function get() {
				return _interopRequireDefault(_infererReference).default;
			}
		});
		exports.VariableDeclarator = VariableDeclarator;
		exports.TypeCastExpression = TypeCastExpression;
		exports.NewExpression = NewExpression;
		exports.TemplateLiteral = TemplateLiteral;
		exports.UnaryExpression = UnaryExpression;
		exports.BinaryExpression = BinaryExpression;
		exports.LogicalExpression = LogicalExpression;
		exports.ConditionalExpression = ConditionalExpression;
		exports.SequenceExpression = SequenceExpression;
		exports.AssignmentExpression = AssignmentExpression;
		exports.UpdateExpression = UpdateExpression;
		exports.StringLiteral = StringLiteral;
		exports.NumericLiteral = NumericLiteral;
		exports.BooleanLiteral = BooleanLiteral;
		exports.NullLiteral = NullLiteral;
		exports.RegExpLiteral = RegExpLiteral;
		exports.ObjectExpression = ObjectExpression;
		exports.ArrayExpression = ArrayExpression;
		exports.RestElement = RestElement;
		exports.CallExpression = CallExpression;
		exports.TaggedTemplateExpression = TaggedTemplateExpression;

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function VariableDeclarator() {
			var id = this.get("id");

			if (id.isIdentifier()) {
				return this.get("init").getTypeAnnotation();
			} else {
				return;
			}
		}

		function TypeCastExpression(node) {
			return node.typeAnnotation;
		}

		TypeCastExpression.validParent = true;

		function NewExpression(node) {
			if (this.get("callee").isIdentifier()) {
				return t.genericTypeAnnotation(node.callee);
			}
		}

		function TemplateLiteral() {
			return t.stringTypeAnnotation();
		}

		function UnaryExpression(node) {
			var operator = node.operator;

			if (operator === "void") {
				return t.voidTypeAnnotation();
			} else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
				return t.numberTypeAnnotation();
			} else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
				return t.stringTypeAnnotation();
			} else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
				return t.booleanTypeAnnotation();
			}
		}

		function BinaryExpression(node) {
			var operator = node.operator;

			if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
				return t.numberTypeAnnotation();
			} else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
				return t.booleanTypeAnnotation();
			} else if (operator === "+") {
				var right = this.get("right");
				var left = this.get("left");

				if (left.isBaseType("number") && right.isBaseType("number")) {
					return t.numberTypeAnnotation();
				} else if (left.isBaseType("string") || right.isBaseType("string")) {
					return t.stringTypeAnnotation();
				}

				return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
			}
		}

		function LogicalExpression() {
			return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
		}

		function ConditionalExpression() {
			return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
		}

		function SequenceExpression() {
			return this.get("expressions").pop().getTypeAnnotation();
		}

		function AssignmentExpression() {
			return this.get("right").getTypeAnnotation();
		}

		function UpdateExpression(node) {
			var operator = node.operator;
			if (operator === "++" || operator === "--") {
				return t.numberTypeAnnotation();
			}
		}

		function StringLiteral() {
			return t.stringTypeAnnotation();
		}

		function NumericLiteral() {
			return t.numberTypeAnnotation();
		}

		function BooleanLiteral() {
			return t.booleanTypeAnnotation();
		}

		function NullLiteral() {
			return t.nullLiteralTypeAnnotation();
		}

		function RegExpLiteral() {
			return t.genericTypeAnnotation(t.identifier("RegExp"));
		}

		function ObjectExpression() {
			return t.genericTypeAnnotation(t.identifier("Object"));
		}

		function ArrayExpression() {
			return t.genericTypeAnnotation(t.identifier("Array"));
		}

		function RestElement() {
			return ArrayExpression();
		}

		RestElement.validParent = true;

		function Func() {
			return t.genericTypeAnnotation(t.identifier("Function"));
		}

		exports.Function = Func;
		exports.Class = Func;
		function CallExpression() {
			return resolveCall(this.get("callee"));
		}

		function TaggedTemplateExpression() {
			return resolveCall(this.get("tag"));
		}

		function resolveCall(callee) {
			callee = callee.resolve();

			if (callee.isFunction()) {
				if (callee.is("async")) {
					if (callee.is("generator")) {
						return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
					} else {
						return t.genericTypeAnnotation(t.identifier("Promise"));
					}
				} else {
					if (callee.node.returnType) {
						return callee.node.returnType;
					} else {}
				}
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.is = undefined;

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.matchesPattern = matchesPattern;
		exports.has = has;
		exports.isStatic = isStatic;
		exports.isnt = isnt;
		exports.equals = equals;
		exports.isNodeType = isNodeType;
		exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
		exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
		exports.isCompletionRecord = isCompletionRecord;
		exports.isStatementOrBlock = isStatementOrBlock;
		exports.referencesImport = referencesImport;
		exports.getSource = getSource;
		exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
		exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
		exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
		exports.resolve = resolve;
		exports._resolve = _resolve;

		var _includes = __webpack_require__(116);

		var _includes2 = _interopRequireDefault(_includes);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function matchesPattern(pattern, allowPartial) {
			if (!this.isMemberExpression()) return false;

			var parts = pattern.split(".");
			var search = [this.node];
			var i = 0;

			function matches(name) {
				var part = parts[i];
				return part === "*" || name === part;
			}

			while (search.length) {
				var node = search.shift();

				if (allowPartial && i === parts.length) {
					return true;
				}

				if (t.isIdentifier(node)) {
					if (!matches(node.name)) return false;
				} else if (t.isLiteral(node)) {
					if (!matches(node.value)) return false;
				} else if (t.isMemberExpression(node)) {
					if (node.computed && !t.isLiteral(node.property)) {
						return false;
					} else {
						search.unshift(node.property);
						search.unshift(node.object);
						continue;
					}
				} else if (t.isThisExpression(node)) {
					if (!matches("this")) return false;
				} else {
					return false;
				}

				if (++i > parts.length) {
					return false;
				}
			}

			return i === parts.length;
		}

		function has(key) {
			var val = this.node && this.node[key];
			if (val && Array.isArray(val)) {
				return !!val.length;
			} else {
				return !!val;
			}
		}

		function isStatic() {
			return this.scope.isStatic(this.node);
		}

		var is = exports.is = has;

		function isnt(key) {
			return !this.has(key);
		}

		function equals(key, value) {
			return this.node[key] === value;
		}

		function isNodeType(type) {
			return t.isType(this.type, type);
		}

		function canHaveVariableDeclarationOrExpression() {
			return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
		}

		function canSwapBetweenExpressionAndStatement(replacement) {
			if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
				return false;
			}

			if (this.isExpression()) {
				return t.isBlockStatement(replacement);
			} else if (this.isBlockStatement()) {
				return t.isExpression(replacement);
			}

			return false;
		}

		function isCompletionRecord(allowInsideFunction) {
			var path = this;
			var first = true;

			do {
				var container = path.container;

				if (path.isFunction() && !first) {
					return !!allowInsideFunction;
				}

				first = false;

				if (Array.isArray(container) && path.key !== container.length - 1) {
					return false;
				}
			} while ((path = path.parentPath) && !path.isProgram());

			return true;
		}

		function isStatementOrBlock() {
			if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
				return false;
			} else {
				return (0, _includes2.default)(t.STATEMENT_OR_BLOCK_KEYS, this.key);
			}
		}

		function referencesImport(moduleSource, importName) {
			if (!this.isReferencedIdentifier()) return false;

			var binding = this.scope.getBinding(this.node.name);
			if (!binding || binding.kind !== "module") return false;

			var path = binding.path;
			var parent = path.parentPath;
			if (!parent.isImportDeclaration()) return false;

			if (parent.node.source.value === moduleSource) {
				if (!importName) return true;
			} else {
				return false;
			}

			if (path.isImportDefaultSpecifier() && importName === "default") {
				return true;
			}

			if (path.isImportNamespaceSpecifier() && importName === "*") {
				return true;
			}

			if (path.isImportSpecifier() && path.node.imported.name === importName) {
				return true;
			}

			return false;
		}

		function getSource() {
			var node = this.node;
			if (node.end) {
				return this.hub.file.code.slice(node.start, node.end);
			} else {
				return "";
			}
		}

		function willIMaybeExecuteBefore(target) {
			return this._guessExecutionStatusRelativeTo(target) !== "after";
		}

		function _guessExecutionStatusRelativeTo(target) {
			var targetFuncParent = target.scope.getFunctionParent();
			var selfFuncParent = this.scope.getFunctionParent();

			if (targetFuncParent.node !== selfFuncParent.node) {
				var status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
				if (status) {
					return status;
				} else {
					target = targetFuncParent.path;
				}
			}

			var targetPaths = target.getAncestry();
			if (targetPaths.indexOf(this) >= 0) return "after";

			var selfPaths = this.getAncestry();

			var commonPath = void 0;
			var targetIndex = void 0;
			var selfIndex = void 0;
			for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
				var selfPath = selfPaths[selfIndex];
				targetIndex = targetPaths.indexOf(selfPath);
				if (targetIndex >= 0) {
					commonPath = selfPath;
					break;
				}
			}
			if (!commonPath) {
				return "before";
			}

			var targetRelationship = targetPaths[targetIndex - 1];
			var selfRelationship = selfPaths[selfIndex - 1];
			if (!targetRelationship || !selfRelationship) {
				return "before";
			}

			if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
				return targetRelationship.key > selfRelationship.key ? "before" : "after";
			}

			var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
			var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
			return targetKeyPosition > selfKeyPosition ? "before" : "after";
		}

		function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
			var targetFuncPath = targetFuncParent.path;
			if (!targetFuncPath.isFunctionDeclaration()) return;

			var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);

			if (!binding.references) return "before";

			var referencePaths = binding.referencePaths;

			for (var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var path = _ref;

				if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
					return;
				}
			}

			var allStatus = void 0;

			for (var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var _path = _ref2;

				var childOfFunction = !!_path.find(function (path) {
					return path.node === targetFuncPath.node;
				});
				if (childOfFunction) continue;

				var status = this._guessExecutionStatusRelativeTo(_path);

				if (allStatus) {
					if (allStatus !== status) return;
				} else {
					allStatus = status;
				}
			}

			return allStatus;
		}

		function resolve(dangerous, resolved) {
			return this._resolve(dangerous, resolved) || this;
		}

		function _resolve(dangerous, resolved) {
			var _this = this;

			if (resolved && resolved.indexOf(this) >= 0) return;

			resolved = resolved || [];
			resolved.push(this);

			if (this.isVariableDeclarator()) {
				if (this.get("id").isIdentifier()) {
					return this.get("init").resolve(dangerous, resolved);
				} else {}
			} else if (this.isReferencedIdentifier()) {
				var binding = this.scope.getBinding(this.node.name);
				if (!binding) return;

				if (!binding.constant) return;

				if (binding.kind === "module") return;

				if (binding.path !== this) {
					var _ret = function () {
						var ret = binding.path.resolve(dangerous, resolved);

						if (_this.find(function (parent) {
							return parent.node === ret.node;
						})) return {
							v: void 0
						};
						return {
							v: ret
						};
					}();

					if ((typeof _ret === "undefined" ? "undefined" : (0, _typeof3.default)(_ret)) === "object") return _ret.v;
				}
			} else if (this.isTypeCastExpression()) {
				return this.get("expression").resolve(dangerous, resolved);
			} else if (dangerous && this.isMemberExpression()) {

				var targetKey = this.toComputedKey();
				if (!t.isLiteral(targetKey)) return;

				var targetName = targetKey.value;

				var target = this.get("object").resolve(dangerous, resolved);

				if (target.isObjectExpression()) {
					var props = target.get("properties");
					for (var _iterator3 = props, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var prop = _ref3;

						if (!prop.isProperty()) continue;

						var key = prop.get("key");

						var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });

						match = match || key.isLiteral({ value: targetName });

						if (match) return prop.get("value").resolve(dangerous, resolved);
					}
				} else if (target.isArrayExpression() && !isNaN(+targetName)) {
					var elems = target.get("elements");
					var elem = elems[targetName];
					if (elem) return elem.resolve(dangerous, resolved);
				}
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var referenceVisitor = {
			ReferencedIdentifier: function ReferencedIdentifier(path, state) {
				if (path.isJSXIdentifier() && _babelTypes.react.isCompatTag(path.node.name)) {
					return;
				}

				var binding = path.scope.getBinding(path.node.name);
				if (!binding) return;

				if (binding !== state.scope.getBinding(path.node.name)) return;

				if (binding.constant) {
					state.bindings[path.node.name] = binding;
				} else {
					for (var _iterator = binding.constantViolations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var violationPath = _ref;

						state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
					}
				}
			}
		};

		var PathHoister = function () {
			function PathHoister(path, scope) {
				(0, _classCallCheck3.default)(this, PathHoister);

				this.breakOnScopePaths = [];
				this.bindings = {};
				this.scopes = [];
				this.scope = scope;
				this.path = path;
			}

			PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
				for (var key in this.bindings) {
					var binding = this.bindings[key];
					if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
						return false;
					}
				}

				return true;
			};

			PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
				var scope = this.path.scope;
				do {
					if (this.isCompatibleScope(scope)) {
						this.scopes.push(scope);
					} else {
						break;
					}

					if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
						break;
					}
				} while (scope = scope.parent);
			};

			PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
				var path = this._getAttachmentPath();
				if (!path) return;

				var targetScope = path.scope;

				if (targetScope.path === path) {
					targetScope = path.scope.parent;
				}

				if (targetScope.path.isProgram() || targetScope.path.isFunction()) {
					for (var name in this.bindings) {
						if (!targetScope.hasOwnBinding(name)) continue;

						var binding = this.bindings[name];

						if (binding.kind === "param") continue;

						if (binding.path.getStatementParent().key > path.key) return;
					}
				}

				return path;
			};

			PathHoister.prototype._getAttachmentPath = function _getAttachmentPath() {
				var scopes = this.scopes;

				var scope = scopes.pop();
				if (!scope) return;

				if (scope.path.isFunction()) {
					if (this.hasOwnParamBindings(scope)) {
						if (this.scope === scope) return;

						return scope.path.get("body").get("body")[0];
					} else {
						return this.getNextScopeStatementParent();
					}
				} else if (scope.path.isProgram()) {
					return this.getNextScopeStatementParent();
				}
			};

			PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
				var scope = this.scopes.pop();
				if (scope) return scope.path.getStatementParent();
			};

			PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
				for (var name in this.bindings) {
					if (!scope.hasOwnBinding(name)) continue;

					var binding = this.bindings[name];
					if (binding.kind === "param") return true;
				}
				return false;
			};

			PathHoister.prototype.run = function run() {
				var node = this.path.node;
				if (node._hoisted) return;
				node._hoisted = true;

				this.path.traverse(referenceVisitor, this);

				this.getCompatibleScopes();

				var attachTo = this.getAttachmentPath();
				if (!attachTo) return;

				if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;

				var uid = attachTo.scope.generateUidIdentifier("ref");
				attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);

				var parent = this.path.parentPath;
				if (parent.isJSXElement() && this.path.container === parent.node.children) {
					uid = t.JSXExpressionContainer(uid);
				}

				this.path.replaceWith(uid);
			};

			return PathHoister;
		}();

		exports.default = PathHoister;
		module.exports = exports["default"];
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		var hooks = exports.hooks = [function (self, parent) {
			if (self.key === "body" && parent.isArrowFunctionExpression()) {
				self.replaceWith(self.scope.buildUndefinedNode());
				return true;
			}
		}, function (self, parent) {
			var removeParent = false;

			removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());

			removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();

			removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();

			removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;

			removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();

			if (removeParent) {
				parent.remove();
				return true;
			}
		}, function (self, parent) {
			if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
				parent.replaceWith(parent.node.expressions[0]);
				return true;
			}
		}, function (self, parent) {
			if (parent.isBinary()) {
				if (self.key === "left") {
					parent.replaceWith(parent.node.right);
				} else {
					parent.replaceWith(parent.node.left);
				}
				return true;
			}
		}, function (self, parent) {
			if (parent.isIfStatement() && (self.key === 'consequent' || self.key === 'alternate') || parent.isLoop() && self.key === 'body') {
				self.replaceWith({
					type: 'BlockStatement',
					body: []
				});
				return true;
			}
		}];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.insertBefore = insertBefore;
		exports._containerInsert = _containerInsert;
		exports._containerInsertBefore = _containerInsertBefore;
		exports._containerInsertAfter = _containerInsertAfter;
		exports._maybePopFromStatements = _maybePopFromStatements;
		exports.insertAfter = insertAfter;
		exports.updateSiblingKeys = updateSiblingKeys;
		exports._verifyNodeList = _verifyNodeList;
		exports.unshiftContainer = unshiftContainer;
		exports.pushContainer = pushContainer;
		exports.hoist = hoist;

		var _cache = __webpack_require__(86);

		var _hoister = __webpack_require__(370);

		var _hoister2 = _interopRequireDefault(_hoister);

		var _index = __webpack_require__(33);

		var _index2 = _interopRequireDefault(_index);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function insertBefore(nodes) {
			this._assertUnremoved();

			nodes = this._verifyNodeList(nodes);

			if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
				return this.parentPath.insertBefore(nodes);
			} else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
				if (this.node) nodes.push(this.node);
				this.replaceExpressionWithStatements(nodes);
			} else {
				this._maybePopFromStatements(nodes);
				if (Array.isArray(this.container)) {
					return this._containerInsertBefore(nodes);
				} else if (this.isStatementOrBlock()) {
					if (this.node) nodes.push(this.node);
					this._replaceWith(t.blockStatement(nodes));
				} else {
					throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
				}
			}

			return [this];
		}

		function _containerInsert(from, nodes) {
			this.updateSiblingKeys(from, nodes.length);

			var paths = [];

			for (var i = 0; i < nodes.length; i++) {
				var to = from + i;
				var node = nodes[i];
				this.container.splice(to, 0, node);

				if (this.context) {
					var path = this.context.create(this.parent, this.container, to, this.listKey);

					if (this.context.queue) path.pushContext(this.context);
					paths.push(path);
				} else {
					paths.push(_index2.default.get({
						parentPath: this.parentPath,
						parent: this.parent,
						container: this.container,
						listKey: this.listKey,
						key: to
					}));
				}
			}

			var contexts = this._getQueueContexts();

			for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var _path = _ref;

				_path.setScope();
				_path.debug(function () {
					return "Inserted.";
				});

				for (var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var context = _ref2;

					context.maybeQueue(_path, true);
				}
			}

			return paths;
		}

		function _containerInsertBefore(nodes) {
			return this._containerInsert(this.key, nodes);
		}

		function _containerInsertAfter(nodes) {
			return this._containerInsert(this.key + 1, nodes);
		}

		function _maybePopFromStatements(nodes) {
			var last = nodes[nodes.length - 1];
			var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);

			if (isIdentifier && !this.isCompletionRecord()) {
				nodes.pop();
			}
		}

		function insertAfter(nodes) {
			this._assertUnremoved();

			nodes = this._verifyNodeList(nodes);

			if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
				return this.parentPath.insertAfter(nodes);
			} else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
				if (this.node) {
					var temp = this.scope.generateDeclaredUidIdentifier();
					nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
					nodes.push(t.expressionStatement(temp));
				}
				this.replaceExpressionWithStatements(nodes);
			} else {
				this._maybePopFromStatements(nodes);
				if (Array.isArray(this.container)) {
					return this._containerInsertAfter(nodes);
				} else if (this.isStatementOrBlock()) {
					if (this.node) nodes.unshift(this.node);
					this._replaceWith(t.blockStatement(nodes));
				} else {
					throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
				}
			}

			return [this];
		}

		function updateSiblingKeys(fromIndex, incrementBy) {
			if (!this.parent) return;

			var paths = _cache.path.get(this.parent);
			for (var i = 0; i < paths.length; i++) {
				var path = paths[i];
				if (path.key >= fromIndex) {
					path.key += incrementBy;
				}
			}
		}

		function _verifyNodeList(nodes) {
			if (!nodes) {
				return [];
			}

			if (nodes.constructor !== Array) {
				nodes = [nodes];
			}

			for (var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				var msg = void 0;

				if (!node) {
					msg = "has falsy node";
				} else if ((typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node)) !== "object") {
					msg = "contains a non-object node";
				} else if (!node.type) {
					msg = "without a type";
				} else if (node instanceof _index2.default) {
					msg = "has a NodePath when it expected a raw object";
				}

				if (msg) {
					var type = Array.isArray(node) ? "array" : typeof node === "undefined" ? "undefined" : (0, _typeof3.default)(node);
					throw new Error("Node list " + msg + " with the index of " + i + " and type of " + type);
				}
			}

			return nodes;
		}

		function unshiftContainer(listKey, nodes) {
			this._assertUnremoved();

			nodes = this._verifyNodeList(nodes);

			var path = _index2.default.get({
				parentPath: this,
				parent: this.node,
				container: this.node[listKey],
				listKey: listKey,
				key: 0
			});

			return path.insertBefore(nodes);
		}

		function pushContainer(listKey, nodes) {
			this._assertUnremoved();

			nodes = this._verifyNodeList(nodes);

			var container = this.node[listKey];
			var path = _index2.default.get({
				parentPath: this,
				parent: this.node,
				container: container,
				listKey: listKey,
				key: container.length
			});

			return path.replaceWithMultiple(nodes);
		}

		function hoist() {
			var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];

			var hoister = new _hoister2.default(this, scope);
			return hoister.run();
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.remove = remove;
		exports._callRemovalHooks = _callRemovalHooks;
		exports._remove = _remove;
		exports._markRemoved = _markRemoved;
		exports._assertUnremoved = _assertUnremoved;

		var _removalHooks = __webpack_require__(371);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function remove() {
			this._assertUnremoved();

			this.resync();

			if (this._callRemovalHooks()) {
				this._markRemoved();
				return;
			}

			this.shareCommentsWithSiblings();
			this._remove();
			this._markRemoved();
		}

		function _callRemovalHooks() {
			for (var _iterator = _removalHooks.hooks, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var fn = _ref;

				if (fn(this, this.parentPath)) return true;
			}
		}

		function _remove() {
			if (Array.isArray(this.container)) {
				this.container.splice(this.key, 1);
				this.updateSiblingKeys(this.key, -1);
			} else {
				this._replaceWith(null);
			}
		}

		function _markRemoved() {
			this.shouldSkip = true;
			this.removed = true;
			this.node = null;
		}

		function _assertUnremoved() {
			if (this.removed) {
				throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.replaceWithMultiple = replaceWithMultiple;
		exports.replaceWithSourceString = replaceWithSourceString;
		exports.replaceWith = replaceWith;
		exports._replaceWith = _replaceWith;
		exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
		exports.replaceInline = replaceInline;

		var _babelCodeFrame = __webpack_require__(185);

		var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

		var _index = __webpack_require__(10);

		var _index2 = _interopRequireDefault(_index);

		var _index3 = __webpack_require__(33);

		var _index4 = _interopRequireDefault(_index3);

		var _babylon = __webpack_require__(145);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var hoistVariablesVisitor = {
			Function: function Function(path) {
				path.skip();
			},
			VariableDeclaration: function VariableDeclaration(path) {
				if (path.node.kind !== "var") return;

				var bindings = path.getBindingIdentifiers();
				for (var key in bindings) {
					path.scope.push({ id: bindings[key] });
				}

				var exprs = [];

				for (var _iterator = path.node.declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var declar = _ref;

					if (declar.init) {
						exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
					}
				}

				path.replaceWithMultiple(exprs);
			}
		};

		function replaceWithMultiple(nodes) {
			this.resync();

			nodes = this._verifyNodeList(nodes);
			t.inheritLeadingComments(nodes[0], this.node);
			t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
			this.node = this.container[this.key] = null;
			this.insertAfter(nodes);

			if (this.node) {
				this.requeue();
			} else {
				this.remove();
			}
		}

		function replaceWithSourceString(replacement) {
			this.resync();

			try {
				replacement = "(" + replacement + ")";
				replacement = (0, _babylon.parse)(replacement);
			} catch (err) {
				var loc = err.loc;
				if (loc) {
					err.message += " - make sure this is an expression.";
					err.message += "\n" + (0, _babelCodeFrame2.default)(replacement, loc.line, loc.column + 1);
				}
				throw err;
			}

			replacement = replacement.program.body[0].expression;
			_index2.default.removeProperties(replacement);
			return this.replaceWith(replacement);
		}

		function replaceWith(replacement) {
			this.resync();

			if (this.removed) {
				throw new Error("You can't replace this node, we've already removed it");
			}

			if (replacement instanceof _index4.default) {
				replacement = replacement.node;
			}

			if (!replacement) {
				throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
			}

			if (this.node === replacement) {
				return;
			}

			if (this.isProgram() && !t.isProgram(replacement)) {
				throw new Error("You can only replace a Program root node with another Program node");
			}

			if (Array.isArray(replacement)) {
				throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
			}

			if (typeof replacement === "string") {
				throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
			}

			if (this.isNodeType("Statement") && t.isExpression(replacement)) {
				if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
					replacement = t.expressionStatement(replacement);
				}
			}

			if (this.isNodeType("Expression") && t.isStatement(replacement)) {
				if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
					return this.replaceExpressionWithStatements([replacement]);
				}
			}

			var oldNode = this.node;
			if (oldNode) {
				t.inheritsComments(replacement, oldNode);
				t.removeComments(oldNode);
			}

			this._replaceWith(replacement);
			this.type = replacement.type;

			this.setScope();

			this.requeue();
		}

		function _replaceWith(node) {
			if (!this.container) {
				throw new ReferenceError("Container is falsy");
			}

			if (this.inList) {
				t.validate(this.parent, this.key, [node]);
			} else {
				t.validate(this.parent, this.key, node);
			}

			this.debug(function () {
				return "Replace with " + (node && node.type);
			});

			this.node = this.container[this.key] = node;
		}

		function replaceExpressionWithStatements(nodes) {
			this.resync();

			var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);

			if (t.isSequenceExpression(toSequenceExpression)) {
				var exprs = toSequenceExpression.expressions;

				if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
					this._maybePopFromStatements(exprs);
				}

				if (exprs.length === 1) {
					this.replaceWith(exprs[0]);
				} else {
					this.replaceWith(toSequenceExpression);
				}
			} else if (toSequenceExpression) {
				this.replaceWith(toSequenceExpression);
			} else {
				var container = t.functionExpression(null, [], t.blockStatement(nodes));
				container.shadow = true;

				this.replaceWith(t.callExpression(container, []));
				this.traverse(hoistVariablesVisitor);

				var completionRecords = this.get("callee").getCompletionRecords();
				for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var path = _ref2;

					if (!path.isExpressionStatement()) continue;

					var loop = path.findParent(function (path) {
						return path.isLoop();
					});
					if (loop) {
						var callee = this.get("callee");

						var uid = callee.scope.generateDeclaredUidIdentifier("ret");
						callee.get("body").pushContainer("body", t.returnStatement(uid));

						path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
					} else {
						path.replaceWith(t.returnStatement(path.node.expression));
					}
				}

				return this.node;
			}
		}

		function replaceInline(nodes) {
			this.resync();

			if (Array.isArray(nodes)) {
				if (Array.isArray(this.container)) {
					nodes = this._verifyNodeList(nodes);
					this._containerInsertAfter(nodes);
					return this.remove();
				} else {
					return this.replaceWithMultiple(nodes);
				}
			} else {
				return this.replaceWith(nodes);
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _classCallCheck2 = __webpack_require__(3);

		var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

		var _binding = __webpack_require__(224);

		var _binding2 = _interopRequireDefault(_binding);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var renameVisitor = {
			ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
				var node = _ref.node;

				if (node.name === state.oldName) {
					node.name = state.newName;
				}
			},
			Scope: function Scope(path, state) {
				if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
					path.skip();
				}
			},
			"AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
				var ids = path.getOuterBindingIdentifiers();

				for (var name in ids) {
					if (name === state.oldName) ids[name].name = state.newName;
				}
			}
		};

		var Renamer = function () {
			function Renamer(binding, oldName, newName) {
				(0, _classCallCheck3.default)(this, Renamer);

				this.newName = newName;
				this.oldName = oldName;
				this.binding = binding;
			}

			Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
				var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
				if (!exportDeclar) return;

				var isDefault = exportDeclar.isExportDefaultDeclaration();

				if (isDefault && (parentDeclar.isFunctionDeclaration() || parentDeclar.isClassDeclaration()) && !parentDeclar.node.id) {
					parentDeclar.node.id = parentDeclar.scope.generateUidIdentifier("default");
				}

				var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
				var specifiers = [];

				for (var name in bindingIdentifiers) {
					var localName = name === this.oldName ? this.newName : name;
					var exportedName = isDefault ? "default" : name;
					specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
				}

				var aliasDeclar = t.exportNamedDeclaration(null, specifiers);

				if (parentDeclar.isFunctionDeclaration()) {
					aliasDeclar._blockHoist = 3;
				}

				exportDeclar.insertAfter(aliasDeclar);
				exportDeclar.replaceWith(parentDeclar.node);
			};

			Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
				return;

				if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;
				if (this.binding.kind !== "hoisted") return;

				path.node.id = t.identifier(this.oldName);
				path.node._blockHoist = 3;

				path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
			};

			Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
				return;

				if (!path.isFunctionExpression() && !path.isClassExpression()) return;
				if (this.binding.kind !== "local") return;

				path.node.id = t.identifier(this.oldName);

				this.binding.scope.parent.push({
					id: t.identifier(this.newName)
				});

				path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
			};

			Renamer.prototype.rename = function rename(block) {
				var binding = this.binding;
				var oldName = this.oldName;
				var newName = this.newName;
				var scope = binding.scope;
				var path = binding.path;

				var parentDeclar = path.find(function (path) {
					return path.isDeclaration() || path.isFunctionExpression();
				});
				if (parentDeclar) {
					this.maybeConvertFromExportDeclaration(parentDeclar);
				}

				scope.traverse(block || scope.block, renameVisitor, this);

				if (!block) {
					scope.removeOwnBinding(oldName);
					scope.bindings[newName] = binding;
					this.binding.identifier.name = newName;
				}

				if (binding.type === "hoisted") {}

				if (parentDeclar) {
					this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
					this.maybeConvertFromClassFunctionExpression(parentDeclar);
				}
			};

			return Renamer;
		}();

		exports.default = Renamer;
		module.exports = exports["default"];
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _typeof2 = __webpack_require__(7);

		var _typeof3 = _interopRequireDefault(_typeof2);

		var _keys = __webpack_require__(28);

		var _keys2 = _interopRequireDefault(_keys);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.explode = explode;
		exports.verify = verify;
		exports.merge = merge;

		var _virtualTypes = __webpack_require__(223);

		var virtualTypes = _interopRequireWildcard(_virtualTypes);

		var _babelMessages = __webpack_require__(17);

		var messages = _interopRequireWildcard(_babelMessages);

		var _babelTypes = __webpack_require__(1);

		var t = _interopRequireWildcard(_babelTypes);

		var _clone = __webpack_require__(113);

		var _clone2 = _interopRequireDefault(_clone);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function explode(visitor) {
			if (visitor._exploded) return visitor;
			visitor._exploded = true;

			for (var nodeType in visitor) {
				if (shouldIgnoreKey(nodeType)) continue;

				var parts = nodeType.split("|");
				if (parts.length === 1) continue;

				var fns = visitor[nodeType];
				delete visitor[nodeType];

				for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var part = _ref;

					visitor[part] = fns;
				}
			}

			verify(visitor);

			delete visitor.__esModule;

			ensureEntranceObjects(visitor);

			ensureCallbackArrays(visitor);

			for (var _iterator2 = (0, _keys2.default)(visitor), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
				var _ref2;

				if (_isArray2) {
					if (_i2 >= _iterator2.length) break;
					_ref2 = _iterator2[_i2++];
				} else {
					_i2 = _iterator2.next();
					if (_i2.done) break;
					_ref2 = _i2.value;
				}

				var _nodeType3 = _ref2;

				if (shouldIgnoreKey(_nodeType3)) continue;

				var wrapper = virtualTypes[_nodeType3];
				if (!wrapper) continue;

				var _fns2 = visitor[_nodeType3];
				for (var type in _fns2) {
					_fns2[type] = wrapCheck(wrapper, _fns2[type]);
				}

				delete visitor[_nodeType3];

				if (wrapper.types) {
					for (var _iterator4 = wrapper.types, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : (0, _getIterator3.default)(_iterator4);;) {
						var _ref4;

						if (_isArray4) {
							if (_i4 >= _iterator4.length) break;
							_ref4 = _iterator4[_i4++];
						} else {
							_i4 = _iterator4.next();
							if (_i4.done) break;
							_ref4 = _i4.value;
						}

						var _type = _ref4;

						if (visitor[_type]) {
							mergePair(visitor[_type], _fns2);
						} else {
							visitor[_type] = _fns2;
						}
					}
				} else {
					mergePair(visitor, _fns2);
				}
			}

			for (var _nodeType in visitor) {
				if (shouldIgnoreKey(_nodeType)) continue;

				var _fns = visitor[_nodeType];

				var aliases = t.FLIPPED_ALIAS_KEYS[_nodeType];

				var deprecratedKey = t.DEPRECATED_KEYS[_nodeType];
				if (deprecratedKey) {
					console.trace("Visitor defined for " + _nodeType + " but it has been renamed to " + deprecratedKey);
					aliases = [deprecratedKey];
				}

				if (!aliases) continue;

				delete visitor[_nodeType];

				for (var _iterator3 = aliases, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : (0, _getIterator3.default)(_iterator3);;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var alias = _ref3;

					var existing = visitor[alias];
					if (existing) {
						mergePair(existing, _fns);
					} else {
						visitor[alias] = (0, _clone2.default)(_fns);
					}
				}
			}

			for (var _nodeType2 in visitor) {
				if (shouldIgnoreKey(_nodeType2)) continue;

				ensureCallbackArrays(visitor[_nodeType2]);
			}

			return visitor;
		}

		function verify(visitor) {
			if (visitor._verified) return;

			if (typeof visitor === "function") {
				throw new Error(messages.get("traverseVerifyRootFunction"));
			}

			for (var nodeType in visitor) {
				if (nodeType === "enter" || nodeType === "exit") {
					validateVisitorMethods(nodeType, visitor[nodeType]);
				}

				if (shouldIgnoreKey(nodeType)) continue;

				if (t.TYPES.indexOf(nodeType) < 0) {
					throw new Error(messages.get("traverseVerifyNodeType", nodeType));
				}

				var visitors = visitor[nodeType];
				if ((typeof visitors === "undefined" ? "undefined" : (0, _typeof3.default)(visitors)) === "object") {
					for (var visitorKey in visitors) {
						if (visitorKey === "enter" || visitorKey === "exit") {
							validateVisitorMethods(nodeType + "." + visitorKey, visitors[visitorKey]);
						} else {
							throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
						}
					}
				}
			}

			visitor._verified = true;
		}

		function validateVisitorMethods(path, val) {
			var fns = [].concat(val);
			for (var _iterator5 = fns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : (0, _getIterator3.default)(_iterator5);;) {
				var _ref5;

				if (_isArray5) {
					if (_i5 >= _iterator5.length) break;
					_ref5 = _iterator5[_i5++];
				} else {
					_i5 = _iterator5.next();
					if (_i5.done) break;
					_ref5 = _i5.value;
				}

				var fn = _ref5;

				if (typeof fn !== "function") {
					throw new TypeError("Non-function found defined in " + path + " with type " + (typeof fn === "undefined" ? "undefined" : (0, _typeof3.default)(fn)));
				}
			}
		}

		function merge(visitors) {
			var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
			var wrapper = arguments[2];

			var rootVisitor = {};

			for (var i = 0; i < visitors.length; i++) {
				var visitor = visitors[i];
				var state = states[i];

				explode(visitor);

				for (var type in visitor) {
					var visitorType = visitor[type];

					if (state || wrapper) {
						visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);
					}

					var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
					mergePair(nodeVisitor, visitorType);
				}
			}

			return rootVisitor;
		}

		function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
			var newVisitor = {};

			var _loop = function _loop(key) {
				var fns = oldVisitor[key];

				if (!Array.isArray(fns)) return "continue";

				fns = fns.map(function (fn) {
					var newFn = fn;

					if (state) {
						newFn = function newFn(path) {
							return fn.call(state, path, state);
						};
					}

					if (wrapper) {
						newFn = wrapper(state.key, key, newFn);
					}

					return newFn;
				});

				newVisitor[key] = fns;
			};

			for (var key in oldVisitor) {
				var _ret = _loop(key);

				if (_ret === "continue") continue;
			}

			return newVisitor;
		}

		function ensureEntranceObjects(obj) {
			for (var key in obj) {
				if (shouldIgnoreKey(key)) continue;

				var fns = obj[key];
				if (typeof fns === "function") {
					obj[key] = { enter: fns };
				}
			}
		}

		function ensureCallbackArrays(obj) {
			if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
			if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
		}

		function wrapCheck(wrapper, fn) {
			var newFn = function newFn(path) {
				if (wrapper.checkPath(path)) {
					return fn.apply(this, arguments);
				}
			};
			newFn.toString = function () {
				return fn.toString();
			};
			return newFn;
		}

		function shouldIgnoreKey(key) {
			if (key[0] === "_") return true;

			if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

			if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;

			return false;
		}

		function mergePair(dest, src) {
			for (var key in src) {
				dest[key] = [].concat(dest[key] || [], src[key]);
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _maxSafeInteger = __webpack_require__(352);

		var _maxSafeInteger2 = _interopRequireDefault(_maxSafeInteger);

		var _stringify = __webpack_require__(27);

		var _stringify2 = _interopRequireDefault(_stringify);

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.toComputedKey = toComputedKey;
		exports.toSequenceExpression = toSequenceExpression;
		exports.toKeyAlias = toKeyAlias;
		exports.toIdentifier = toIdentifier;
		exports.toBindingIdentifierName = toBindingIdentifierName;
		exports.toStatement = toStatement;
		exports.toExpression = toExpression;
		exports.toBlock = toBlock;
		exports.valueToNode = valueToNode;

		var _isPlainObject = __webpack_require__(273);

		var _isPlainObject2 = _interopRequireDefault(_isPlainObject);

		var _isNumber = __webpack_require__(272);

		var _isNumber2 = _interopRequireDefault(_isNumber);

		var _isRegExp = __webpack_require__(274);

		var _isRegExp2 = _interopRequireDefault(_isRegExp);

		var _isString = __webpack_require__(181);

		var _isString2 = _interopRequireDefault(_isString);

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function toComputedKey(node) {
			var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];

			if (!node.computed) {
				if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
			}
			return key;
		}

		function toSequenceExpression(nodes, scope) {
			if (!nodes || !nodes.length) return;

			var declars = [];
			var bailed = false;

			var result = convert(nodes);
			if (bailed) return;

			for (var i = 0; i < declars.length; i++) {
				scope.push(declars[i]);
			}

			return result;

			function convert(nodes) {
				var ensureLastUndefined = false;
				var exprs = [];

				for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var node = _ref;

					if (t.isExpression(node)) {
						exprs.push(node);
					} else if (t.isExpressionStatement(node)) {
						exprs.push(node.expression);
					} else if (t.isVariableDeclaration(node)) {
						if (node.kind !== "var") return bailed = true;

						for (var _iterator2 = node.declarations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : (0, _getIterator3.default)(_iterator2);;) {
							var _ref2;

							if (_isArray2) {
								if (_i2 >= _iterator2.length) break;
								_ref2 = _iterator2[_i2++];
							} else {
								_i2 = _iterator2.next();
								if (_i2.done) break;
								_ref2 = _i2.value;
							}

							var declar = _ref2;

							var bindings = t.getBindingIdentifiers(declar);
							for (var key in bindings) {
								declars.push({
									kind: node.kind,
									id: bindings[key]
								});
							}

							if (declar.init) {
								exprs.push(t.assignmentExpression("=", declar.id, declar.init));
							}
						}

						ensureLastUndefined = true;
						continue;
					} else if (t.isIfStatement(node)) {
						var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
						var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
						if (!consequent || !alternate) return bailed = true;

						exprs.push(t.conditionalExpression(node.test, consequent, alternate));
					} else if (t.isBlockStatement(node)) {
						exprs.push(convert(node.body));
					} else if (t.isEmptyStatement(node)) {
						ensureLastUndefined = true;
						continue;
					} else {
						return bailed = true;
					}

					ensureLastUndefined = false;
				}

				if (ensureLastUndefined || exprs.length === 0) {
					exprs.push(scope.buildUndefinedNode());
				}

				if (exprs.length === 1) {
					return exprs[0];
				} else {
					return t.sequenceExpression(exprs);
				}
			}
		}

		function toKeyAlias(node) {
			var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];

			var alias = void 0;

			if (node.kind === "method") {
				return toKeyAlias.increment() + "";
			} else if (t.isIdentifier(key)) {
				alias = key.name;
			} else if (t.isStringLiteral(key)) {
				alias = (0, _stringify2.default)(key.value);
			} else {
				alias = (0, _stringify2.default)(t.removePropertiesDeep(t.cloneDeep(key)));
			}

			if (node.computed) {
				alias = "[" + alias + "]";
			}

			if (node.static) {
				alias = "static:" + alias;
			}

			return alias;
		}

		toKeyAlias.uid = 0;

		toKeyAlias.increment = function () {
			if (toKeyAlias.uid >= _maxSafeInteger2.default) {
				return toKeyAlias.uid = 0;
			} else {
				return toKeyAlias.uid++;
			}
		};

		function toIdentifier(name) {
			name = name + "";

			name = name.replace(/[^a-zA-Z0-9$_]/g, "-");

			name = name.replace(/^[-0-9]+/, "");

			name = name.replace(/[-\s]+(.)?/g, function (match, c) {
				return c ? c.toUpperCase() : "";
			});

			if (!t.isValidIdentifier(name)) {
				name = "_" + name;
			}

			return name || "_";
		}

		function toBindingIdentifierName(name) {
			name = toIdentifier(name);
			if (name === "eval" || name === "arguments") name = "_" + name;
			return name;
		}

		function toStatement(node, ignore) {
			if (t.isStatement(node)) {
				return node;
			}

			var mustHaveId = false;
			var newType = void 0;

			if (t.isClass(node)) {
				mustHaveId = true;
				newType = "ClassDeclaration";
			} else if (t.isFunction(node)) {
				mustHaveId = true;
				newType = "FunctionDeclaration";
			} else if (t.isAssignmentExpression(node)) {
				return t.expressionStatement(node);
			}

			if (mustHaveId && !node.id) {
				newType = false;
			}

			if (!newType) {
				if (ignore) {
					return false;
				} else {
					throw new Error("cannot turn " + node.type + " to a statement");
				}
			}

			node.type = newType;

			return node;
		}

		function toExpression(node) {
			if (t.isExpressionStatement(node)) {
				node = node.expression;
			}

			if (t.isExpression(node)) {
				return node;
			}

			if (t.isClass(node)) {
				node.type = "ClassExpression";
			} else if (t.isFunction(node)) {
				node.type = "FunctionExpression";
			}

			if (!t.isExpression(node)) {
				throw new Error("cannot turn " + node.type + " to an expression");
			}

			return node;
		}

		function toBlock(node, parent) {
			if (t.isBlockStatement(node)) {
				return node;
			}

			if (t.isEmptyStatement(node)) {
				node = [];
			}

			if (!Array.isArray(node)) {
				if (!t.isStatement(node)) {
					if (t.isFunction(parent)) {
						node = t.returnStatement(node);
					} else {
						node = t.expressionStatement(node);
					}
				}

				node = [node];
			}

			return t.blockStatement(node);
		}

		function valueToNode(value) {
			if (value === undefined) {
				return t.identifier("undefined");
			}

			if (value === true || value === false) {
				return t.booleanLiteral(value);
			}

			if (value === null) {
				return t.nullLiteral();
			}

			if ((0, _isString2.default)(value)) {
				return t.stringLiteral(value);
			}

			if ((0, _isNumber2.default)(value)) {
				return t.numericLiteral(value);
			}

			if ((0, _isRegExp2.default)(value)) {
				var pattern = value.source;
				var flags = value.toString().match(/\/([a-z]+|)$/)[1];
				return t.regExpLiteral(pattern, flags);
			}

			if (Array.isArray(value)) {
				return t.arrayExpression(value.map(t.valueToNode));
			}

			if ((0, _isPlainObject2.default)(value)) {
				var props = [];
				for (var key in value) {
					var nodeKey = void 0;
					if (t.isValidIdentifier(key)) {
						nodeKey = t.identifier(key);
					} else {
						nodeKey = t.stringLiteral(key);
					}
					props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
				}
				return t.objectExpression(props);
			}

			throw new Error("don't know how to turn this value into a node");
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		var _constants = __webpack_require__(144);

		var _index2 = __webpack_require__(29);

		var _index3 = _interopRequireDefault(_index2);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		(0, _index3.default)("ArrayExpression", {
			fields: {
				elements: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeOrValueType)("null", "Expression", "SpreadElement"))),
					default: []
				}
			},
			visitor: ["elements"],
			aliases: ["Expression"]
		});

		(0, _index3.default)("AssignmentExpression", {
			fields: {
				operator: {
					validate: (0, _index2.assertValueType)("string")
				},
				left: {
					validate: (0, _index2.assertNodeType)("LVal")
				},
				right: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			},
			builder: ["operator", "left", "right"],
			visitor: ["left", "right"],
			aliases: ["Expression"]
		});

		(0, _index3.default)("BinaryExpression", {
			builder: ["operator", "left", "right"],
			fields: {
				operator: {
					validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
				},
				left: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				right: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			},
			visitor: ["left", "right"],
			aliases: ["Binary", "Expression"]
		});

		(0, _index3.default)("Directive", {
			visitor: ["value"],
			fields: {
				value: {
					validate: (0, _index2.assertNodeType)("DirectiveLiteral")
				}
			}
		});

		(0, _index3.default)("DirectiveLiteral", {
			builder: ["value"],
			fields: {
				value: {
					validate: (0, _index2.assertValueType)("string")
				}
			}
		});

		(0, _index3.default)("BlockStatement", {
			builder: ["body", "directives"],
			visitor: ["directives", "body"],
			fields: {
				directives: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
					default: []
				},
				body: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
				}
			},
			aliases: ["Scopable", "BlockParent", "Block", "Statement"]
		});

		(0, _index3.default)("BreakStatement", {
			visitor: ["label"],
			fields: {
				label: {
					validate: (0, _index2.assertNodeType)("Identifier"),
					optional: true
				}
			},
			aliases: ["Statement", "Terminatorless", "CompletionStatement"]
		});

		(0, _index3.default)("CallExpression", {
			visitor: ["callee", "arguments"],
			fields: {
				callee: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				arguments: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))
				}
			},
			aliases: ["Expression"]
		});

		(0, _index3.default)("CatchClause", {
			visitor: ["param", "body"],
			fields: {
				param: {
					validate: (0, _index2.assertNodeType)("Identifier")
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement")
				}
			},
			aliases: ["Scopable"]
		});

		(0, _index3.default)("ConditionalExpression", {
			visitor: ["test", "consequent", "alternate"],
			fields: {
				test: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				consequent: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				alternate: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			},
			aliases: ["Expression", "Conditional"]
		});

		(0, _index3.default)("ContinueStatement", {
			visitor: ["label"],
			fields: {
				label: {
					validate: (0, _index2.assertNodeType)("Identifier"),
					optional: true
				}
			},
			aliases: ["Statement", "Terminatorless", "CompletionStatement"]
		});

		(0, _index3.default)("DebuggerStatement", {
			aliases: ["Statement"]
		});

		(0, _index3.default)("DoWhileStatement", {
			visitor: ["test", "body"],
			fields: {
				test: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				body: {
					validate: (0, _index2.assertNodeType)("Statement")
				}
			},
			aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
		});

		(0, _index3.default)("EmptyStatement", {
			aliases: ["Statement"]
		});

		(0, _index3.default)("ExpressionStatement", {
			visitor: ["expression"],
			fields: {
				expression: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			},
			aliases: ["Statement", "ExpressionWrapper"]
		});

		(0, _index3.default)("File", {
			builder: ["program", "comments", "tokens"],
			visitor: ["program"],
			fields: {
				program: {
					validate: (0, _index2.assertNodeType)("Program")
				}
			}
		});

		(0, _index3.default)("ForInStatement", {
			visitor: ["left", "right", "body"],
			aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
			fields: {
				left: {
					validate: (0, _index2.assertNodeType)("VariableDeclaration", "LVal")
				},
				right: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				body: {
					validate: (0, _index2.assertNodeType)("Statement")
				}
			}
		});

		(0, _index3.default)("ForStatement", {
			visitor: ["init", "test", "update", "body"],
			aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
			fields: {
				init: {
					validate: (0, _index2.assertNodeType)("VariableDeclaration", "Expression"),
					optional: true
				},
				test: {
					validate: (0, _index2.assertNodeType)("Expression"),
					optional: true
				},
				update: {
					validate: (0, _index2.assertNodeType)("Expression"),
					optional: true
				},
				body: {
					validate: (0, _index2.assertNodeType)("Statement")
				}
			}
		});

		(0, _index3.default)("FunctionDeclaration", {
			builder: ["id", "params", "body", "generator", "async"],
			visitor: ["id", "params", "body", "returnType", "typeParameters"],
			fields: {
				id: {
					validate: (0, _index2.assertNodeType)("Identifier")
				},
				params: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement")
				},
				generator: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				},
				async: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				}
			},
			aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
		});

		(0, _index3.default)("FunctionExpression", {
			inherits: "FunctionDeclaration",
			aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
			fields: {
				id: {
					validate: (0, _index2.assertNodeType)("Identifier"),
					optional: true
				},
				params: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("LVal")))
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement")
				},
				generator: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				},
				async: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				}
			}
		});

		(0, _index3.default)("Identifier", {
			builder: ["name"],
			visitor: ["typeAnnotation"],
			aliases: ["Expression", "LVal"],
			fields: {
				name: {
					validate: function validate(node, key, val) {
						if (!t.isValidIdentifier(val)) {}
					}
				},
				decorators: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index3.default)("IfStatement", {
			visitor: ["test", "consequent", "alternate"],
			aliases: ["Statement", "Conditional"],
			fields: {
				test: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				consequent: {
					validate: (0, _index2.assertNodeType)("Statement")
				},
				alternate: {
					optional: true,
					validate: (0, _index2.assertNodeType)("Statement")
				}
			}
		});

		(0, _index3.default)("LabeledStatement", {
			visitor: ["label", "body"],
			aliases: ["Statement"],
			fields: {
				label: {
					validate: (0, _index2.assertNodeType)("Identifier")
				},
				body: {
					validate: (0, _index2.assertNodeType)("Statement")
				}
			}
		});

		(0, _index3.default)("StringLiteral", {
			builder: ["value"],
			fields: {
				value: {
					validate: (0, _index2.assertValueType)("string")
				}
			},
			aliases: ["Expression", "Pureish", "Literal", "Immutable"]
		});

		(0, _index3.default)("NumericLiteral", {
			builder: ["value"],
			deprecatedAlias: "NumberLiteral",
			fields: {
				value: {
					validate: (0, _index2.assertValueType)("number")
				}
			},
			aliases: ["Expression", "Pureish", "Literal", "Immutable"]
		});

		(0, _index3.default)("NullLiteral", {
			aliases: ["Expression", "Pureish", "Literal", "Immutable"]
		});

		(0, _index3.default)("BooleanLiteral", {
			builder: ["value"],
			fields: {
				value: {
					validate: (0, _index2.assertValueType)("boolean")
				}
			},
			aliases: ["Expression", "Pureish", "Literal", "Immutable"]
		});

		(0, _index3.default)("RegExpLiteral", {
			builder: ["pattern", "flags"],
			deprecatedAlias: "RegexLiteral",
			aliases: ["Expression", "Literal"],
			fields: {
				pattern: {
					validate: (0, _index2.assertValueType)("string")
				},
				flags: {
					validate: (0, _index2.assertValueType)("string"),
					default: ""
				}
			}
		});

		(0, _index3.default)("LogicalExpression", {
			builder: ["operator", "left", "right"],
			visitor: ["left", "right"],
			aliases: ["Binary", "Expression"],
			fields: {
				operator: {
					validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
				},
				left: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				right: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			}
		});

		(0, _index3.default)("MemberExpression", {
			builder: ["object", "property", "computed"],
			visitor: ["object", "property"],
			aliases: ["Expression", "LVal"],
			fields: {
				object: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				property: {
					validate: function validate(node, key, val) {
						var expectedType = node.computed ? "Expression" : "Identifier";
						(0, _index2.assertNodeType)(expectedType)(node, key, val);
					}
				},
				computed: {
					default: false
				}
			}
		});

		(0, _index3.default)("NewExpression", {
			visitor: ["callee", "arguments"],
			aliases: ["Expression"],
			fields: {
				callee: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				arguments: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression", "SpreadElement")))
				}
			}
		});

		(0, _index3.default)("Program", {
			visitor: ["directives", "body"],
			builder: ["body", "directives"],
			fields: {
				directives: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Directive"))),
					default: []
				},
				body: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
				}
			},
			aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
		});

		(0, _index3.default)("ObjectExpression", {
			visitor: ["properties"],
			aliases: ["Expression"],
			fields: {
				properties: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadProperty")))
				}
			}
		});

		(0, _index3.default)("ObjectMethod", {
			builder: ["kind", "key", "params", "body", "computed"],
			fields: {
				kind: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("method", "get", "set")),
					default: "method"
				},
				computed: {
					validate: (0, _index2.assertValueType)("boolean"),
					default: false
				},
				key: {
					validate: function validate(node, key, val) {
						var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
						_index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
					}
				},
				decorators: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement")
				},
				generator: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				},
				async: {
					default: false,
					validate: (0, _index2.assertValueType)("boolean")
				}
			},
			visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
			aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
		});

		(0, _index3.default)("ObjectProperty", {
			builder: ["key", "value", "computed", "shorthand", "decorators"],
			fields: {
				computed: {
					validate: (0, _index2.assertValueType)("boolean"),
					default: false
				},
				key: {
					validate: function validate(node, key, val) {
						var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
						_index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
					}
				},
				value: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				shorthand: {
					validate: (0, _index2.assertValueType)("boolean"),
					default: false
				},
				decorators: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator"))),
					optional: true
				}
			},
			visitor: ["key", "value", "decorators"],
			aliases: ["UserWhitespacable", "Property", "ObjectMember"]
		});

		(0, _index3.default)("RestElement", {
			visitor: ["argument", "typeAnnotation"],
			aliases: ["LVal"],
			fields: {
				argument: {
					validate: (0, _index2.assertNodeType)("LVal")
				},
				decorators: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index3.default)("ReturnStatement", {
			visitor: ["argument"],
			aliases: ["Statement", "Terminatorless", "CompletionStatement"],
			fields: {
				argument: {
					validate: (0, _index2.assertNodeType)("Expression"),
					optional: true
				}
			}
		});

		(0, _index3.default)("SequenceExpression", {
			visitor: ["expressions"],
			fields: {
				expressions: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Expression")))
				}
			},
			aliases: ["Expression"]
		});

		(0, _index3.default)("SwitchCase", {
			visitor: ["test", "consequent"],
			fields: {
				test: {
					validate: (0, _index2.assertNodeType)("Expression"),
					optional: true
				},
				consequent: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("Statement")))
				}
			}
		});

		(0, _index3.default)("SwitchStatement", {
			visitor: ["discriminant", "cases"],
			aliases: ["Statement", "BlockParent", "Scopable"],
			fields: {
				discriminant: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				cases: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("SwitchCase")))
				}
			}
		});

		(0, _index3.default)("ThisExpression", {
			aliases: ["Expression"]
		});

		(0, _index3.default)("ThrowStatement", {
			visitor: ["argument"],
			aliases: ["Statement", "Terminatorless", "CompletionStatement"],
			fields: {
				argument: {
					validate: (0, _index2.assertNodeType)("Expression")
				}
			}
		});

		(0, _index3.default)("TryStatement", {
			visitor: ["block", "handler", "finalizer"],
			aliases: ["Statement"],
			fields: {
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement")
				},
				handler: {
					optional: true,
					handler: (0, _index2.assertNodeType)("BlockStatement")
				},
				finalizer: {
					optional: true,
					validate: (0, _index2.assertNodeType)("BlockStatement")
				}
			}
		});

		(0, _index3.default)("UnaryExpression", {
			builder: ["operator", "argument", "prefix"],
			fields: {
				prefix: {
					default: true
				},
				argument: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				operator: {
					validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
				}
			},
			visitor: ["argument"],
			aliases: ["UnaryLike", "Expression"]
		});

		(0, _index3.default)("UpdateExpression", {
			builder: ["operator", "argument", "prefix"],
			fields: {
				prefix: {
					default: false
				},
				argument: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				operator: {
					validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
				}
			},
			visitor: ["argument"],
			aliases: ["Expression"]
		});

		(0, _index3.default)("VariableDeclaration", {
			builder: ["kind", "declarations"],
			visitor: ["declarations"],
			aliases: ["Statement", "Declaration"],
			fields: {
				kind: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("string"), (0, _index2.assertOneOf)("var", "let", "const"))
				},
				declarations: {
					validate: (0, _index2.chain)((0, _index2.assertValueType)("array"), (0, _index2.assertEach)((0, _index2.assertNodeType)("VariableDeclarator")))
				}
			}
		});

		(0, _index3.default)("VariableDeclarator", {
			visitor: ["id", "init"],
			fields: {
				id: {
					validate: (0, _index2.assertNodeType)("LVal")
				},
				init: {
					optional: true,
					validate: (0, _index2.assertNodeType)("Expression")
				}
			}
		});

		(0, _index3.default)("WhileStatement", {
			visitor: ["test", "body"],
			aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
			fields: {
				test: {
					validate: (0, _index2.assertNodeType)("Expression")
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")
				}
			}
		});

		(0, _index3.default)("WithStatement", {
			visitor: ["object", "body"],
			aliases: ["Statement"],
			fields: {
				object: {
					object: (0, _index2.assertNodeType)("Expression")
				},
				body: {
					validate: (0, _index2.assertNodeType)("BlockStatement", "Statement")
				}
			}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(29);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		(0, _index2.default)("AssignmentPattern", {
			visitor: ["left", "right"],
			aliases: ["Pattern", "LVal"],
			fields: {
				left: {
					validate: (0, _index.assertNodeType)("Identifier")
				},
				right: {
					validate: (0, _index.assertNodeType)("Expression")
				},
				decorators: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index2.default)("ArrayPattern", {
			visitor: ["elements", "typeAnnotation"],
			aliases: ["Pattern", "LVal"],
			fields: {
				elements: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))
				},
				decorators: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index2.default)("ArrowFunctionExpression", {
			builder: ["params", "body", "async"],
			visitor: ["params", "body", "returnType"],
			aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
			fields: {
				params: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))
				},
				body: {
					validate: (0, _index.assertNodeType)("BlockStatement", "Expression")
				},
				async: {
					validate: (0, _index.assertValueType)("boolean"),
					default: false
				}
			}
		});

		(0, _index2.default)("ClassBody", {
			visitor: ["body"],
			fields: {
				body: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ClassMethod", "ClassProperty")))
				}
			}
		});

		(0, _index2.default)("ClassDeclaration", {
			builder: ["id", "superClass", "body", "decorators"],
			visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
			aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
			fields: {
				id: {
					validate: (0, _index.assertNodeType)("Identifier")
				},
				body: {
					validate: (0, _index.assertNodeType)("ClassBody")
				},
				superClass: {
					optional: true,
					validate: (0, _index.assertNodeType)("Expression")
				},
				decorators: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index2.default)("ClassExpression", {
			inherits: "ClassDeclaration",
			aliases: ["Scopable", "Class", "Expression", "Pureish"],
			fields: {
				id: {
					optional: true,
					validate: (0, _index.assertNodeType)("Identifier")
				},
				body: {
					validate: (0, _index.assertNodeType)("ClassBody")
				},
				superClass: {
					optional: true,
					validate: (0, _index.assertNodeType)("Expression")
				},
				decorators: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index2.default)("ExportAllDeclaration", {
			visitor: ["source"],
			aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
			fields: {
				source: {
					validate: (0, _index.assertNodeType)("StringLiteral")
				}
			}
		});

		(0, _index2.default)("ExportDefaultDeclaration", {
			visitor: ["declaration"],
			aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
			fields: {
				declaration: {
					validate: (0, _index.assertNodeType)("FunctionDeclaration", "ClassDeclaration", "Expression")
				}
			}
		});

		(0, _index2.default)("ExportNamedDeclaration", {
			visitor: ["declaration", "specifiers", "source"],
			aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
			fields: {
				declaration: {
					validate: (0, _index.assertNodeType)("Declaration"),
					optional: true
				},
				specifiers: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ExportSpecifier")))
				},
				source: {
					validate: (0, _index.assertNodeType)("StringLiteral"),
					optional: true
				}
			}
		});

		(0, _index2.default)("ExportSpecifier", {
			visitor: ["local", "exported"],
			aliases: ["ModuleSpecifier"],
			fields: {
				local: {
					validate: (0, _index.assertNodeType)("Identifier")
				},
				exported: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("ForOfStatement", {
			visitor: ["left", "right", "body"],
			aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
			fields: {
				left: {
					validate: (0, _index.assertNodeType)("VariableDeclaration", "LVal")
				},
				right: {
					validate: (0, _index.assertNodeType)("Expression")
				},
				body: {
					validate: (0, _index.assertNodeType)("Statement")
				}
			}
		});

		(0, _index2.default)("ImportDeclaration", {
			visitor: ["specifiers", "source"],
			aliases: ["Statement", "Declaration", "ModuleDeclaration"],
			fields: {
				specifiers: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
				},
				source: {
					validate: (0, _index.assertNodeType)("StringLiteral")
				}
			}
		});

		(0, _index2.default)("ImportDefaultSpecifier", {
			visitor: ["local"],
			aliases: ["ModuleSpecifier"],
			fields: {
				local: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("ImportNamespaceSpecifier", {
			visitor: ["local"],
			aliases: ["ModuleSpecifier"],
			fields: {
				local: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("ImportSpecifier", {
			visitor: ["local", "imported"],
			aliases: ["ModuleSpecifier"],
			fields: {
				local: {
					validate: (0, _index.assertNodeType)("Identifier")
				},
				imported: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("MetaProperty", {
			visitor: ["meta", "property"],
			aliases: ["Expression"],
			fields: {
				meta: {
					validate: (0, _index.assertValueType)("string")
				},
				property: {
					validate: (0, _index.assertValueType)("string")
				}
			}
		});

		(0, _index2.default)("ClassMethod", {
			aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
			builder: ["kind", "key", "params", "body", "computed", "static"],
			visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
			fields: {
				kind: {
					validate: (0, _index.chain)((0, _index.assertValueType)("string"), (0, _index.assertOneOf)("get", "set", "method", "constructor")),
					default: "method"
				},
				computed: {
					default: false,
					validate: (0, _index.assertValueType)("boolean")
				},
				static: {
					default: false,
					validate: (0, _index.assertValueType)("boolean")
				},
				key: {
					validate: function validate(node, key, val) {
						var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
						_index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
					}
				},
				params: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("LVal")))
				},
				body: {
					validate: (0, _index.assertNodeType)("BlockStatement")
				},
				generator: {
					default: false,
					validate: (0, _index.assertValueType)("boolean")
				},
				async: {
					default: false,
					validate: (0, _index.assertValueType)("boolean")
				}
			}
		});

		(0, _index2.default)("ObjectPattern", {
			visitor: ["properties", "typeAnnotation"],
			aliases: ["Pattern", "LVal"],
			fields: {
				properties: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("RestProperty", "Property")))
				},
				decorators: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Decorator")))
				}
			}
		});

		(0, _index2.default)("SpreadElement", {
			visitor: ["argument"],
			aliases: ["UnaryLike"],
			fields: {
				argument: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});

		(0, _index2.default)("Super", {
			aliases: ["Expression"]
		});

		(0, _index2.default)("TaggedTemplateExpression", {
			visitor: ["tag", "quasi"],
			aliases: ["Expression"],
			fields: {
				tag: {
					validate: (0, _index.assertNodeType)("Expression")
				},
				quasi: {
					validate: (0, _index.assertNodeType)("TemplateLiteral")
				}
			}
		});

		(0, _index2.default)("TemplateElement", {
			builder: ["value", "tail"],
			fields: {
				value: {},
				tail: {
					validate: (0, _index.assertValueType)("boolean"),
					default: false
				}
			}
		});

		(0, _index2.default)("TemplateLiteral", {
			visitor: ["quasis", "expressions"],
			aliases: ["Expression", "Literal"],
			fields: {
				quasis: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("TemplateElement")))
				},
				expressions: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("Expression")))
				}
			}
		});

		(0, _index2.default)("YieldExpression", {
			builder: ["argument", "delegate"],
			visitor: ["argument"],
			aliases: ["Expression", "Terminatorless"],
			fields: {
				delegate: {
					validate: (0, _index.assertValueType)("boolean"),
					default: false
				},
				argument: {
					optional: true,
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(29);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		(0, _index2.default)("AwaitExpression", {
			builder: ["argument"],
			visitor: ["argument"],
			aliases: ["Expression", "Terminatorless"],
			fields: {
				argument: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});

		(0, _index2.default)("BindExpression", {
			visitor: ["object", "callee"],
			aliases: ["Expression"],
			fields: {}
		});

		(0, _index2.default)("Decorator", {
			visitor: ["expression"],
			fields: {
				expression: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});

		(0, _index2.default)("DoExpression", {
			visitor: ["body"],
			aliases: ["Expression"],
			fields: {
				body: {
					validate: (0, _index.assertNodeType)("BlockStatement")
				}
			}
		});

		(0, _index2.default)("ExportDefaultSpecifier", {
			visitor: ["exported"],
			aliases: ["ModuleSpecifier"],
			fields: {
				exported: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("ExportNamespaceSpecifier", {
			visitor: ["exported"],
			aliases: ["ModuleSpecifier"],
			fields: {
				exported: {
					validate: (0, _index.assertNodeType)("Identifier")
				}
			}
		});

		(0, _index2.default)("RestProperty", {
			visitor: ["argument"],
			aliases: ["UnaryLike"],
			fields: {
				argument: {
					validate: (0, _index.assertNodeType)("LVal")
				}
			}
		});

		(0, _index2.default)("SpreadProperty", {
			visitor: ["argument"],
			aliases: ["UnaryLike"],
			fields: {
				argument: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(29);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		(0, _index2.default)("AnyTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("ArrayTypeAnnotation", {
			visitor: ["elementType"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("BooleanTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("BooleanLiteralTypeAnnotation", {
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("NullLiteralTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("ClassImplements", {
			visitor: ["id", "typeParameters"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("ClassProperty", {
			visitor: ["key", "value", "typeAnnotation", "decorators"],
			aliases: ["Flow", "Property"],
			fields: {}
		});

		(0, _index2.default)("DeclareClass", {
			visitor: ["id", "typeParameters", "extends", "body"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareFunction", {
			visitor: ["id"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareInterface", {
			visitor: ["id", "typeParameters", "extends", "body"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareModule", {
			visitor: ["id", "body"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareModuleExports", {
			visitor: ["typeAnnotation"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareTypeAlias", {
			visitor: ["id", "typeParameters", "right"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("DeclareVariable", {
			visitor: ["id"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("ExistentialTypeParam", {
			aliases: ["Flow"]
		});

		(0, _index2.default)("FunctionTypeAnnotation", {
			visitor: ["typeParameters", "params", "rest", "returnType"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("FunctionTypeParam", {
			visitor: ["name", "typeAnnotation"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("GenericTypeAnnotation", {
			visitor: ["id", "typeParameters"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("InterfaceExtends", {
			visitor: ["id", "typeParameters"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("InterfaceDeclaration", {
			visitor: ["id", "typeParameters", "extends", "body"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("IntersectionTypeAnnotation", {
			visitor: ["types"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("MixedTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"]
		});

		(0, _index2.default)("NullableTypeAnnotation", {
			visitor: ["typeAnnotation"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("NumericLiteralTypeAnnotation", {
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("NumberTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("StringLiteralTypeAnnotation", {
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("StringTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("ThisTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});

		(0, _index2.default)("TupleTypeAnnotation", {
			visitor: ["types"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("TypeofTypeAnnotation", {
			visitor: ["argument"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("TypeAlias", {
			visitor: ["id", "typeParameters", "right"],
			aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
			fields: {}
		});

		(0, _index2.default)("TypeAnnotation", {
			visitor: ["typeAnnotation"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("TypeCastExpression", {
			visitor: ["expression", "typeAnnotation"],
			aliases: ["Flow", "ExpressionWrapper", "Expression"],
			fields: {}
		});

		(0, _index2.default)("TypeParameter", {
			visitor: ["bound"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("TypeParameterDeclaration", {
			visitor: ["params"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("TypeParameterInstantiation", {
			visitor: ["params"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("ObjectTypeAnnotation", {
			visitor: ["properties", "indexers", "callProperties"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("ObjectTypeCallProperty", {
			visitor: ["value"],
			aliases: ["Flow", "UserWhitespacable"],
			fields: {}
		});

		(0, _index2.default)("ObjectTypeIndexer", {
			visitor: ["id", "key", "value"],
			aliases: ["Flow", "UserWhitespacable"],
			fields: {}
		});

		(0, _index2.default)("ObjectTypeProperty", {
			visitor: ["key", "value"],
			aliases: ["Flow", "UserWhitespacable"],
			fields: {}
		});

		(0, _index2.default)("QualifiedTypeIdentifier", {
			visitor: ["id", "qualification"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("UnionTypeAnnotation", {
			visitor: ["types"],
			aliases: ["Flow"],
			fields: {}
		});

		(0, _index2.default)("VoidTypeAnnotation", {
			aliases: ["Flow", "FlowBaseAnnotation"],
			fields: {}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		__webpack_require__(29);

		__webpack_require__(378);

		__webpack_require__(379);

		__webpack_require__(381);

		__webpack_require__(383);

		__webpack_require__(384);

		__webpack_require__(380);
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(29);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		(0, _index2.default)("JSXAttribute", {
			visitor: ["name", "value"],
			aliases: ["JSX", "Immutable"],
			fields: {
				name: {
					validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXNamespacedName")
				},
				value: {
					optional: true,
					validate: (0, _index.assertNodeType)("JSXElement", "StringLiteral", "JSXExpressionContainer")
				}
			}
		});

		(0, _index2.default)("JSXClosingElement", {
			visitor: ["name"],
			aliases: ["JSX", "Immutable"],
			fields: {
				name: {
					validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")
				}
			}
		});

		(0, _index2.default)("JSXElement", {
			builder: ["openingElement", "closingElement", "children", "selfClosing"],
			visitor: ["openingElement", "children", "closingElement"],
			aliases: ["JSX", "Immutable", "Expression"],
			fields: {
				openingElement: {
					validate: (0, _index.assertNodeType)("JSXOpeningElement")
				},
				closingElement: {
					optional: true,
					validate: (0, _index.assertNodeType)("JSXClosingElement")
				},
				children: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXElement")))
				}
			}
		});

		(0, _index2.default)("JSXEmptyExpression", {
			aliases: ["JSX", "Expression"]
		});

		(0, _index2.default)("JSXExpressionContainer", {
			visitor: ["expression"],
			aliases: ["JSX", "Immutable"],
			fields: {
				expression: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});

		(0, _index2.default)("JSXIdentifier", {
			builder: ["name"],
			aliases: ["JSX", "Expression"],
			fields: {
				name: {
					validate: (0, _index.assertValueType)("string")
				}
			}
		});

		(0, _index2.default)("JSXMemberExpression", {
			visitor: ["object", "property"],
			aliases: ["JSX", "Expression"],
			fields: {
				object: {
					validate: (0, _index.assertNodeType)("JSXMemberExpression", "JSXIdentifier")
				},
				property: {
					validate: (0, _index.assertNodeType)("JSXIdentifier")
				}
			}
		});

		(0, _index2.default)("JSXNamespacedName", {
			visitor: ["namespace", "name"],
			aliases: ["JSX"],
			fields: {
				namespace: {
					validate: (0, _index.assertNodeType)("JSXIdentifier")
				},
				name: {
					validate: (0, _index.assertNodeType)("JSXIdentifier")
				}
			}
		});

		(0, _index2.default)("JSXOpeningElement", {
			builder: ["name", "attributes", "selfClosing"],
			visitor: ["name", "attributes"],
			aliases: ["JSX", "Immutable"],
			fields: {
				name: {
					validate: (0, _index.assertNodeType)("JSXIdentifier", "JSXMemberExpression")
				},
				selfClosing: {
					default: false,
					validate: (0, _index.assertValueType)("boolean")
				},
				attributes: {
					validate: (0, _index.chain)((0, _index.assertValueType)("array"), (0, _index.assertEach)((0, _index.assertNodeType)("JSXAttribute", "JSXSpreadAttribute")))
				}
			}
		});

		(0, _index2.default)("JSXSpreadAttribute", {
			visitor: ["argument"],
			aliases: ["JSX"],
			fields: {
				argument: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});

		(0, _index2.default)("JSXText", {
			aliases: ["JSX", "Immutable"],
			builder: ["value"],
			fields: {
				value: {
					validate: (0, _index.assertValueType)("string")
				}
			}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(29);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		(0, _index2.default)("Noop", {
			visitor: []
		});

		(0, _index2.default)("ParenthesizedExpression", {
			visitor: ["expression"],
			aliases: ["Expression", "ExpressionWrapper"],
			fields: {
				expression: {
					validate: (0, _index.assertNodeType)("Expression")
				}
			}
		});
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
		exports.removeTypeDuplicates = removeTypeDuplicates;
		exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function createUnionTypeAnnotation(types) {
			var flattened = removeTypeDuplicates(types);

			if (flattened.length === 1) {
				return flattened[0];
			} else {
				return t.unionTypeAnnotation(flattened);
			}
		}

		function removeTypeDuplicates(nodes) {
			var generics = {};
			var bases = {};

			var typeGroups = [];

			var types = [];

			for (var i = 0; i < nodes.length; i++) {
				var node = nodes[i];
				if (!node) continue;

				if (types.indexOf(node) >= 0) {
					continue;
				}

				if (t.isAnyTypeAnnotation(node)) {
					return [node];
				}

				if (t.isFlowBaseAnnotation(node)) {
					bases[node.type] = node;
					continue;
				}

				if (t.isUnionTypeAnnotation(node)) {
					if (typeGroups.indexOf(node.types) < 0) {
						nodes = nodes.concat(node.types);
						typeGroups.push(node.types);
					}
					continue;
				}

				if (t.isGenericTypeAnnotation(node)) {
					var name = node.id.name;

					if (generics[name]) {
						var existing = generics[name];
						if (existing.typeParameters) {
							if (node.typeParameters) {
								existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
							}
						} else {
							existing = node.typeParameters;
						}
					} else {
						generics[name] = node;
					}

					continue;
				}

				types.push(node);
			}

			for (var type in bases) {
				types.push(bases[type]);
			}

			for (var _name in generics) {
				types.push(generics[_name]);
			}

			return types;
		}

		function createTypeAnnotationBasedOnTypeof(type) {
			if (type === "string") {
				return t.stringTypeAnnotation();
			} else if (type === "number") {
				return t.numberTypeAnnotation();
			} else if (type === "undefined") {
				return t.voidTypeAnnotation();
			} else if (type === "boolean") {
				return t.booleanTypeAnnotation();
			} else if (type === "function") {
				return t.genericTypeAnnotation(t.identifier("Function"));
			} else if (type === "object") {
				return t.genericTypeAnnotation(t.identifier("Object"));
			} else if (type === "symbol") {
				return t.genericTypeAnnotation(t.identifier("Symbol"));
			} else {
				throw new Error("Invalid typeof value");
			}
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;
		exports.isReactComponent = undefined;
		exports.isCompatTag = isCompatTag;
		exports.buildChildren = buildChildren;

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		var isReactComponent = exports.isReactComponent = t.buildMatchMemberExpression("React.Component");

		function isCompatTag(tagName) {
			return !!tagName && /^[a-z]|\-/.test(tagName);
		}

		function cleanJSXElementLiteralChild(child, args) {
			var lines = child.value.split(/\r\n|\n|\r/);

			var lastNonEmptyLine = 0;

			for (var i = 0; i < lines.length; i++) {
				if (lines[i].match(/[^ \t]/)) {
					lastNonEmptyLine = i;
				}
			}

			var str = "";

			for (var _i = 0; _i < lines.length; _i++) {
				var line = lines[_i];

				var isFirstLine = _i === 0;
				var isLastLine = _i === lines.length - 1;
				var isLastNonEmptyLine = _i === lastNonEmptyLine;

				var trimmedLine = line.replace(/\t/g, " ");

				if (!isFirstLine) {
					trimmedLine = trimmedLine.replace(/^[ ]+/, "");
				}

				if (!isLastLine) {
					trimmedLine = trimmedLine.replace(/[ ]+$/, "");
				}

				if (trimmedLine) {
					if (!isLastNonEmptyLine) {
						trimmedLine += " ";
					}

					str += trimmedLine;
				}
			}

			if (str) args.push(t.stringLiteral(str));
		}

		function buildChildren(node) {
			var elems = [];

			for (var i = 0; i < node.children.length; i++) {
				var child = node.children[i];

				if (t.isJSXText(child)) {
					cleanJSXElementLiteralChild(child, elems);
					continue;
				}

				if (t.isJSXExpressionContainer(child)) child = child.expression;
				if (t.isJSXEmptyExpression(child)) continue;

				elems.push(child);
			}

			return elems;
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _getIterator2 = __webpack_require__(2);

		var _getIterator3 = _interopRequireDefault(_getIterator2);

		exports.isBinding = isBinding;
		exports.isReferenced = isReferenced;
		exports.isValidIdentifier = isValidIdentifier;
		exports.isLet = isLet;
		exports.isBlockScoped = isBlockScoped;
		exports.isVar = isVar;
		exports.isSpecifierDefault = isSpecifierDefault;
		exports.isScope = isScope;
		exports.isImmutable = isImmutable;

		var _retrievers = __webpack_require__(225);

		var _esutils = __webpack_require__(166);

		var _esutils2 = _interopRequireDefault(_esutils);

		var _index = __webpack_require__(1);

		var t = _interopRequireWildcard(_index);

		var _constants = __webpack_require__(144);

		function _interopRequireWildcard(obj) {
			if (obj && obj.__esModule) {
				return obj;
			} else {
				var newObj = {};if (obj != null) {
					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
					}
				}newObj.default = obj;return newObj;
			}
		}

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function isBinding(node, parent) {
			var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
			if (keys) {
				for (var i = 0; i < keys.length; i++) {
					var key = keys[i];
					var val = parent[key];
					if (Array.isArray(val)) {
						if (val.indexOf(node) >= 0) return true;
					} else {
						if (val === node) return true;
					}
				}
			}

			return false;
		}

		function isReferenced(node, parent) {
			switch (parent.type) {
				case "BindExpression":
					return parent.object === node || parent.callee === node;

				case "MemberExpression":
				case "JSXMemberExpression":
					if (parent.property === node && parent.computed) {
						return true;
					} else if (parent.object === node) {
						return true;
					} else {
						return false;
					}

				case "MetaProperty":
					return false;

				case "ObjectProperty":
					if (parent.key === node) {
						return parent.computed;
					}

				case "VariableDeclarator":
					return parent.id !== node;

				case "ArrowFunctionExpression":
				case "FunctionDeclaration":
				case "FunctionExpression":
					for (var _iterator = parent.params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : (0, _getIterator3.default)(_iterator);;) {
						var _ref;

						if (_isArray) {
							if (_i >= _iterator.length) break;
							_ref = _iterator[_i++];
						} else {
							_i = _iterator.next();
							if (_i.done) break;
							_ref = _i.value;
						}

						var param = _ref;

						if (param === node) return false;
					}

					return parent.id !== node;

				case "ExportSpecifier":
					if (parent.source) {
						return false;
					} else {
						return parent.local === node;
					}

				case "ExportNamespaceSpecifier":
				case "ExportDefaultSpecifier":
					return false;

				case "JSXAttribute":
					return parent.name !== node;

				case "ClassProperty":
					return parent.value === node;

				case "ImportDefaultSpecifier":
				case "ImportNamespaceSpecifier":
				case "ImportSpecifier":
					return false;

				case "ClassDeclaration":
				case "ClassExpression":
					return parent.id !== node;

				case "ClassMethod":
				case "ObjectMethod":
					return parent.key === node && parent.computed;

				case "LabeledStatement":
					return false;

				case "CatchClause":
					return parent.param !== node;

				case "RestElement":
					return false;

				case "AssignmentExpression":
					return parent.right === node;

				case "AssignmentPattern":
					return parent.right === node;

				case "ObjectPattern":
				case "ArrayPattern":
					return false;
			}

			return true;
		}

		function isValidIdentifier(name) {
			if (typeof name !== "string" || _esutils2.default.keyword.isReservedWordES6(name, true)) {
				return false;
			} else {
				return _esutils2.default.keyword.isIdentifierNameES6(name);
			}
		}

		function isLet(node) {
			return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
		}

		function isBlockScoped(node) {
			return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
		}

		function isVar(node) {
			return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
		}

		function isSpecifierDefault(specifier) {
			return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
		}

		function isScope(node, parent) {
			if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
				return false;
			}

			return t.isScopable(node);
		}

		function isImmutable(node) {
			if (t.isType(node.type, "Immutable")) return true;

			if (t.isIdentifier(node)) {
				if (node.name === "undefined") {
					return true;
				} else {
					return false;
				}
			}

			return false;
		}
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.getOptions = getOptions;

		var defaultOptions = exports.defaultOptions = {
			sourceType: "script",

			sourceFilename: undefined,

			allowReturnOutsideFunction: false,

			allowImportExportEverywhere: false,

			allowSuperOutsideMethod: false,

			plugins: [],

			strictMode: null
		};

		function getOptions(opts) {
			var options = {};
			for (var key in defaultOptions) {
				options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
			}
			return options;
		}
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function last(stack) {
			return stack[stack.length - 1];
		}

		var pp = _index2.default.prototype;

		pp.addComment = function (comment) {
			if (this.filename) comment.loc.filename = this.filename;
			this.state.trailingComments.push(comment);
			this.state.leadingComments.push(comment);
		};

		pp.processComment = function (node) {
			if (node.type === "Program" && node.body.length > 0) return;

			var stack = this.state.commentStack;

			var lastChild = void 0,
			    trailingComments = void 0,
			    i = void 0,
			    j = void 0;

			if (this.state.trailingComments.length > 0) {
				if (this.state.trailingComments[0].start >= node.end) {
					trailingComments = this.state.trailingComments;
					this.state.trailingComments = [];
				} else {
					this.state.trailingComments.length = 0;
				}
			} else {
				var lastInStack = last(stack);
				if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
					trailingComments = lastInStack.trailingComments;
					lastInStack.trailingComments = null;
				}
			}

			while (stack.length > 0 && last(stack).start >= node.start) {
				lastChild = stack.pop();
			}

			if (lastChild) {
				if (lastChild.leadingComments) {
					if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
						node.leadingComments = lastChild.leadingComments;
						lastChild.leadingComments = null;
					} else {
						for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
							if (lastChild.leadingComments[i].end <= node.start) {
								node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
								break;
							}
						}
					}
				}
			} else if (this.state.leadingComments.length > 0) {
				if (last(this.state.leadingComments).end <= node.start) {
					if (this.state.commentPreviousNode) {
						for (j = 0; j < this.state.leadingComments.length; j++) {
							if (this.state.leadingComments[j].end < this.state.commentPreviousNode.end) {
								this.state.leadingComments.splice(j, 1);
								j--;
							}
						}
					}
					if (this.state.leadingComments.length > 0) {
						node.leadingComments = this.state.leadingComments;
						this.state.leadingComments = [];
					}
				} else {
					for (i = 0; i < this.state.leadingComments.length; i++) {
						if (this.state.leadingComments[i].end > node.start) {
							break;
						}
					}

					node.leadingComments = this.state.leadingComments.slice(0, i);
					if (node.leadingComments.length === 0) {
						node.leadingComments = null;
					}

					trailingComments = this.state.leadingComments.slice(i);
					if (trailingComments.length === 0) {
						trailingComments = null;
					}
				}
			}

			this.state.commentPreviousNode = node;

			if (trailingComments) {
				if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
					node.innerComments = trailingComments;
				} else {
					node.trailingComments = trailingComments;
				}
			}

			stack.push(node);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _types = __webpack_require__(14);

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		var _identifier = __webpack_require__(66);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _index2.default.prototype;

		pp.checkPropClash = function (prop, propHash) {
			if (prop.computed) return;

			var key = prop.key;
			var name = void 0;
			switch (key.type) {
				case "Identifier":
					name = key.name;
					break;

				case "StringLiteral":
				case "NumericLiteral":
					name = String(key.value);
					break;

				default:
					return;
			}

			if (name === "__proto__" && prop.kind === "init") {
				if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
				propHash.proto = true;
			}
		};

		pp.parseExpression = function (noIn, refShorthandDefaultPos) {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
			if (this.match(_types.types.comma)) {
				var node = this.startNodeAt(startPos, startLoc);
				node.expressions = [expr];
				while (this.eat(_types.types.comma)) {
					node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
				}
				this.toReferencedList(node.expressions);
				return this.finishNode(node, "SequenceExpression");
			}
			return expr;
		};

		pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse, refNeedsArrowPos) {
			if (this.match(_types.types._yield) && this.state.inGenerator) {
				return this.parseYield();
			}

			var failOnShorthandAssign = void 0;
			if (refShorthandDefaultPos) {
				failOnShorthandAssign = false;
			} else {
				refShorthandDefaultPos = { start: 0 };
				failOnShorthandAssign = true;
			}

			var startPos = this.state.start;
			var startLoc = this.state.startLoc;

			if (this.match(_types.types.parenL) || this.match(_types.types.name)) {
				this.state.potentialArrowAt = this.state.start;
			}

			var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos, refNeedsArrowPos);
			if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
			if (this.state.type.isAssign) {
				var node = this.startNodeAt(startPos, startLoc);
				node.operator = this.state.value;
				node.left = this.match(_types.types.eq) ? this.toAssignable(left) : left;
				refShorthandDefaultPos.start = 0;

				this.checkLVal(left);

				if (left.extra && left.extra.parenthesized) {
					var errorMsg = void 0;
					if (left.type === "ObjectPattern") {
						errorMsg = "`({a}) = 0` use `({a} = 0)`";
					} else if (left.type === "ArrayPattern") {
						errorMsg = "`([a]) = 0` use `([a] = 0)`";
					}
					if (errorMsg) {
						this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
					}
				}

				this.next();
				node.right = this.parseMaybeAssign(noIn);
				return this.finishNode(node, "AssignmentExpression");
			} else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
				this.unexpected(refShorthandDefaultPos.start);
			}

			return left;
		};

		pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos, refNeedsArrowPos) {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
			if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;

			return this.parseConditional(expr, noIn, startPos, startLoc, refNeedsArrowPos);
		};

		pp.parseConditional = function (expr, noIn, startPos, startLoc) {
			if (this.eat(_types.types.question)) {
				var node = this.startNodeAt(startPos, startLoc);
				node.test = expr;
				node.consequent = this.parseMaybeAssign();
				this.expect(_types.types.colon);
				node.alternate = this.parseMaybeAssign(noIn);
				return this.finishNode(node, "ConditionalExpression");
			}
			return expr;
		};

		pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var expr = this.parseMaybeUnary(refShorthandDefaultPos);
			if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
				return expr;
			} else {
				return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
			}
		};

		pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
			var prec = this.state.type.binop;
			if (prec != null && (!noIn || !this.match(_types.types._in))) {
				if (prec > minPrec) {
					var node = this.startNodeAt(leftStartPos, leftStartLoc);
					node.left = left;
					node.operator = this.state.value;

					if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument && !left.extra.parenthesized) {
						this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
					}

					var op = this.state.type;
					this.next();

					var startPos = this.state.start;
					var startLoc = this.state.startLoc;
					node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);

					this.finishNode(node, op === _types.types.logicalOR || op === _types.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
					return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
				}
			}
			return left;
		};

		pp.parseMaybeUnary = function (refShorthandDefaultPos) {
			if (this.state.type.prefix) {
				var node = this.startNode();
				var update = this.match(_types.types.incDec);
				node.operator = this.state.value;
				node.prefix = true;
				this.next();

				var argType = this.state.type;
				node.argument = this.parseMaybeUnary();

				this.addExtra(node, "parenthesizedArgument", argType === _types.types.parenL && (!node.argument.extra || !node.argument.extra.parenthesized));

				if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
					this.unexpected(refShorthandDefaultPos.start);
				}

				if (update) {
					this.checkLVal(node.argument);
				} else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
					this.raise(node.start, "Deleting local variable in strict mode");
				}

				return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
			}

			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var expr = this.parseExprSubscripts(refShorthandDefaultPos);
			if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
			while (this.state.type.postfix && !this.canInsertSemicolon()) {
				var _node = this.startNodeAt(startPos, startLoc);
				_node.operator = this.state.value;
				_node.prefix = false;
				_node.argument = expr;
				this.checkLVal(expr);
				this.next();
				expr = this.finishNode(_node, "UpdateExpression");
			}
			return expr;
		};

		pp.parseExprSubscripts = function (refShorthandDefaultPos) {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var potentialArrowAt = this.state.potentialArrowAt;
			var expr = this.parseExprAtom(refShorthandDefaultPos);

			if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
				return expr;
			}

			if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
				return expr;
			}

			return this.parseSubscripts(expr, startPos, startLoc);
		};

		pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
			for (;;) {
				if (!noCalls && this.eat(_types.types.doubleColon)) {
					var node = this.startNodeAt(startPos, startLoc);
					node.object = base;
					node.callee = this.parseNoCallExpr();
					return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
				} else if (this.eat(_types.types.dot)) {
					var _node2 = this.startNodeAt(startPos, startLoc);
					_node2.object = base;
					_node2.property = this.parseIdentifier(true);
					_node2.computed = false;
					base = this.finishNode(_node2, "MemberExpression");
				} else if (this.eat(_types.types.bracketL)) {
					var _node3 = this.startNodeAt(startPos, startLoc);
					_node3.object = base;
					_node3.property = this.parseExpression();
					_node3.computed = true;
					this.expect(_types.types.bracketR);
					base = this.finishNode(_node3, "MemberExpression");
				} else if (!noCalls && this.match(_types.types.parenL)) {
					var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
					this.next();

					var _node4 = this.startNodeAt(startPos, startLoc);
					_node4.callee = base;
					_node4.arguments = this.parseCallExpressionArguments(_types.types.parenR, possibleAsync);
					base = this.finishNode(_node4, "CallExpression");

					if (possibleAsync && this.shouldParseAsyncArrow()) {
						return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), _node4);
					} else {
						this.toReferencedList(_node4.arguments);
					}
				} else if (this.match(_types.types.backQuote)) {
					var _node5 = this.startNodeAt(startPos, startLoc);
					_node5.tag = base;
					_node5.quasi = this.parseTemplate();
					base = this.finishNode(_node5, "TaggedTemplateExpression");
				} else {
					return base;
				}
			}
		};

		pp.parseCallExpressionArguments = function (close, possibleAsyncArrow) {
			var innerParenStart = void 0;

			var elts = [],
			    first = true;
			while (!this.eat(close)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
					if (this.eat(close)) break;
				}

				if (this.match(_types.types.parenL) && !innerParenStart) {
					innerParenStart = this.state.start;
				}

				elts.push(this.parseExprListItem(undefined, possibleAsyncArrow ? { start: 0 } : undefined));
			}

			if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
				this.unexpected();
			}

			return elts;
		};

		pp.shouldParseAsyncArrow = function () {
			return this.match(_types.types.arrow);
		};

		pp.parseAsyncArrowFromCallExpression = function (node, call) {
			this.expect(_types.types.arrow);
			return this.parseArrowExpression(node, call.arguments, true);
		};

		pp.parseNoCallExpr = function () {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
		};

		pp.parseExprAtom = function (refShorthandDefaultPos) {
			var node = void 0,
			    canBeArrow = this.state.potentialArrowAt === this.state.start;
			switch (this.state.type) {
				case _types.types._super:
					if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
						this.raise(this.state.start, "'super' outside of function or class");
					}

					node = this.startNode();
					this.next();
					if (!this.match(_types.types.parenL) && !this.match(_types.types.bracketL) && !this.match(_types.types.dot)) {
						this.unexpected();
					}
					if (this.match(_types.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
						this.raise(node.start, "super() outside of class constructor");
					}
					return this.finishNode(node, "Super");

				case _types.types._this:
					node = this.startNode();
					this.next();
					return this.finishNode(node, "ThisExpression");

				case _types.types._yield:
					if (this.state.inGenerator) this.unexpected();

				case _types.types.name:
					node = this.startNode();
					var allowAwait = this.state.value === "await" && this.state.inAsync;
					var allowYield = this.shouldAllowYieldIdentifier();
					var id = this.parseIdentifier(allowAwait || allowYield);

					if (id.name === "await") {
						if (this.state.inAsync || this.inModule) {
							return this.parseAwait(node);
						}
					} else if (id.name === "async" && this.match(_types.types._function) && !this.canInsertSemicolon()) {
						this.next();
						return this.parseFunction(node, false, false, true);
					} else if (canBeArrow && id.name === "async" && this.match(_types.types.name)) {
						var params = [this.parseIdentifier()];
						this.expect(_types.types.arrow);

						return this.parseArrowExpression(node, params, true);
					}

					if (canBeArrow && !this.canInsertSemicolon() && this.eat(_types.types.arrow)) {
						return this.parseArrowExpression(node, [id]);
					}

					return id;

				case _types.types._do:
					if (this.hasPlugin("doExpressions")) {
						var _node6 = this.startNode();
						this.next();
						var oldInFunction = this.state.inFunction;
						var oldLabels = this.state.labels;
						this.state.labels = [];
						this.state.inFunction = false;
						_node6.body = this.parseBlock(false, true);
						this.state.inFunction = oldInFunction;
						this.state.labels = oldLabels;
						return this.finishNode(_node6, "DoExpression");
					}

				case _types.types.regexp:
					var value = this.state.value;
					node = this.parseLiteral(value.value, "RegExpLiteral");
					node.pattern = value.pattern;
					node.flags = value.flags;
					return node;

				case _types.types.num:
					return this.parseLiteral(this.state.value, "NumericLiteral");

				case _types.types.string:
					return this.parseLiteral(this.state.value, "StringLiteral");

				case _types.types._null:
					node = this.startNode();
					this.next();
					return this.finishNode(node, "NullLiteral");

				case _types.types._true:case _types.types._false:
					node = this.startNode();
					node.value = this.match(_types.types._true);
					this.next();
					return this.finishNode(node, "BooleanLiteral");

				case _types.types.parenL:
					return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

				case _types.types.bracketL:
					node = this.startNode();
					this.next();
					node.elements = this.parseExprList(_types.types.bracketR, true, refShorthandDefaultPos);
					this.toReferencedList(node.elements);
					return this.finishNode(node, "ArrayExpression");

				case _types.types.braceL:
					return this.parseObj(false, refShorthandDefaultPos);

				case _types.types._function:
					return this.parseFunctionExpression();

				case _types.types.at:
					this.parseDecorators();

				case _types.types._class:
					node = this.startNode();
					this.takeDecorators(node);
					return this.parseClass(node, false);

				case _types.types._new:
					return this.parseNew();

				case _types.types.backQuote:
					return this.parseTemplate();

				case _types.types.doubleColon:
					node = this.startNode();
					this.next();
					node.object = null;
					var callee = node.callee = this.parseNoCallExpr();
					if (callee.type === "MemberExpression") {
						return this.finishNode(node, "BindExpression");
					} else {
						this.raise(callee.start, "Binding should be performed on object property.");
					}

				default:
					this.unexpected();
			}
		};

		pp.parseFunctionExpression = function () {
			var node = this.startNode();
			var meta = this.parseIdentifier(true);
			if (this.state.inGenerator && this.eat(_types.types.dot) && this.hasPlugin("functionSent")) {
				return this.parseMetaProperty(node, meta, "sent");
			} else {
				return this.parseFunction(node, false);
			}
		};

		pp.parseMetaProperty = function (node, meta, propertyName) {
			node.meta = meta;
			node.property = this.parseIdentifier(true);

			if (node.property.name !== propertyName) {
				this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
			}

			return this.finishNode(node, "MetaProperty");
		};

		pp.parseLiteral = function (value, type) {
			var node = this.startNode();
			this.addExtra(node, "rawValue", value);
			this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
			node.value = value;
			this.next();
			return this.finishNode(node, type);
		};

		pp.parseParenExpression = function () {
			this.expect(_types.types.parenL);
			var val = this.parseExpression();
			this.expect(_types.types.parenR);
			return val;
		};

		pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
			startPos = startPos || this.state.start;
			startLoc = startLoc || this.state.startLoc;

			var val = void 0;
			this.expect(_types.types.parenL);

			var innerStartPos = this.state.start,
			    innerStartLoc = this.state.startLoc;
			var exprList = [],
			    first = true;
			var refShorthandDefaultPos = { start: 0 },
			    spreadStart = void 0,
			    optionalCommaStart = void 0;
			var refNeedsArrowPos = { start: 0 };
			while (!this.match(_types.types.parenR)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma, refNeedsArrowPos.start || null);
					if (this.match(_types.types.parenR)) {
						optionalCommaStart = this.state.start;
						break;
					}
				}

				if (this.match(_types.types.ellipsis)) {
					var spreadNodeStartPos = this.state.start,
					    spreadNodeStartLoc = this.state.startLoc;
					spreadStart = this.state.start;
					exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
					break;
				} else {
					exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem, refNeedsArrowPos));
				}
			}

			var innerEndPos = this.state.start;
			var innerEndLoc = this.state.startLoc;
			this.expect(_types.types.parenR);

			var arrowNode = this.startNodeAt(startPos, startLoc);
			if (canBeArrow && this.shouldParseArrow() && (arrowNode = this.parseArrow(arrowNode))) {
				for (var _iterator = exprList, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
					var _ref;

					if (_isArray) {
						if (_i >= _iterator.length) break;
						_ref = _iterator[_i++];
					} else {
						_i = _iterator.next();
						if (_i.done) break;
						_ref = _i.value;
					}

					var param = _ref;

					if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
				}

				return this.parseArrowExpression(arrowNode, exprList, isAsync);
			}

			if (!exprList.length) {
				if (isAsync) {
					return;
				} else {
					this.unexpected(this.state.lastTokStart);
				}
			}
			if (optionalCommaStart) this.unexpected(optionalCommaStart);
			if (spreadStart) this.unexpected(spreadStart);
			if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);
			if (refNeedsArrowPos.start) this.unexpected(refNeedsArrowPos.start);

			if (exprList.length > 1) {
				val = this.startNodeAt(innerStartPos, innerStartLoc);
				val.expressions = exprList;
				this.toReferencedList(val.expressions);
				this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
			} else {
				val = exprList[0];
			}

			this.addExtra(val, "parenthesized", true);
			this.addExtra(val, "parenStart", startPos);

			return val;
		};

		pp.shouldParseArrow = function () {
			return !this.canInsertSemicolon();
		};

		pp.parseArrow = function (node) {
			if (this.eat(_types.types.arrow)) {
				return node;
			}
		};

		pp.parseParenItem = function (node) {
			return node;
		};

		pp.parseNew = function () {
			var node = this.startNode();
			var meta = this.parseIdentifier(true);

			if (this.eat(_types.types.dot)) {
				return this.parseMetaProperty(node, meta, "target");
			}

			node.callee = this.parseNoCallExpr();

			if (this.eat(_types.types.parenL)) {
				node.arguments = this.parseExprList(_types.types.parenR);
				this.toReferencedList(node.arguments);
			} else {
				node.arguments = [];
			}

			return this.finishNode(node, "NewExpression");
		};

		pp.parseTemplateElement = function () {
			var elem = this.startNode();
			elem.value = {
				raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
				cooked: this.state.value
			};
			this.next();
			elem.tail = this.match(_types.types.backQuote);
			return this.finishNode(elem, "TemplateElement");
		};

		pp.parseTemplate = function () {
			var node = this.startNode();
			this.next();
			node.expressions = [];
			var curElt = this.parseTemplateElement();
			node.quasis = [curElt];
			while (!curElt.tail) {
				this.expect(_types.types.dollarBraceL);
				node.expressions.push(this.parseExpression());
				this.expect(_types.types.braceR);
				node.quasis.push(curElt = this.parseTemplateElement());
			}
			this.next();
			return this.finishNode(node, "TemplateLiteral");
		};

		pp.parseObj = function (isPattern, refShorthandDefaultPos) {
			var decorators = [];
			var propHash = Object.create(null);
			var first = true;
			var node = this.startNode();

			node.properties = [];
			this.next();

			while (!this.eat(_types.types.braceR)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
					if (this.eat(_types.types.braceR)) break;
				}

				while (this.match(_types.types.at)) {
					decorators.push(this.parseDecorator());
				}

				var prop = this.startNode(),
				    isGenerator = false,
				    isAsync = false,
				    startPos = void 0,
				    startLoc = void 0;
				if (decorators.length) {
					prop.decorators = decorators;
					decorators = [];
				}

				if (this.hasPlugin("objectRestSpread") && this.match(_types.types.ellipsis)) {
					prop = this.parseSpread();
					prop.type = isPattern ? "RestProperty" : "SpreadProperty";
					node.properties.push(prop);
					continue;
				}

				prop.method = false;
				prop.shorthand = false;

				if (isPattern || refShorthandDefaultPos) {
					startPos = this.state.start;
					startLoc = this.state.startLoc;
				}

				if (!isPattern) {
					isGenerator = this.eat(_types.types.star);
				}

				if (!isPattern && this.isContextual("async")) {
					if (isGenerator) this.unexpected();

					var asyncId = this.parseIdentifier();
					if (this.match(_types.types.colon) || this.match(_types.types.parenL) || this.match(_types.types.braceR)) {
						prop.key = asyncId;
					} else {
						isAsync = true;
						if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_types.types.star);
						this.parsePropertyName(prop);
					}
				} else {
					this.parsePropertyName(prop);
				}

				this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
				this.checkPropClash(prop, propHash);

				if (prop.shorthand) {
					this.addExtra(prop, "shorthand", true);
				}

				node.properties.push(prop);
			}

			if (decorators.length) {
				this.raise(this.state.start, "You have trailing decorators with no property");
			}

			return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
		};

		pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
			if (isAsync || isGenerator || this.match(_types.types.parenL)) {
				if (isPattern) this.unexpected();
				prop.kind = "method";
				prop.method = true;
				this.parseMethod(prop, isGenerator, isAsync);
				return this.finishNode(prop, "ObjectMethod");
			}

			if (this.eat(_types.types.colon)) {
				prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
				return this.finishNode(prop, "ObjectProperty");
			}

			if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_types.types.comma) && !this.match(_types.types.braceR)) {
				if (isGenerator || isAsync || isPattern) this.unexpected();
				prop.kind = prop.key.name;
				this.parsePropertyName(prop);
				this.parseMethod(prop, false);
				var paramCount = prop.kind === "get" ? 0 : 1;
				if (prop.params.length !== paramCount) {
					var start = prop.start;
					if (prop.kind === "get") {
						this.raise(start, "getter should have no params");
					} else {
						this.raise(start, "setter should have exactly one param");
					}
				}
				return this.finishNode(prop, "ObjectMethod");
			}

			if (!prop.computed && prop.key.type === "Identifier") {
				if (isPattern) {
					var illegalBinding = this.isKeyword(prop.key.name);
					if (!illegalBinding && this.state.strict) {
						illegalBinding = _identifier.reservedWords.strictBind(prop.key.name) || _identifier.reservedWords.strict(prop.key.name);
					}
					if (illegalBinding) {
						this.raise(prop.key.start, "Binding " + prop.key.name);
					}
					prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
				} else if (this.match(_types.types.eq) && refShorthandDefaultPos) {
					if (!refShorthandDefaultPos.start) {
						refShorthandDefaultPos.start = this.state.start;
					}
					prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
				} else {
					prop.value = prop.key.__clone();
				}
				prop.shorthand = true;
				return this.finishNode(prop, "ObjectProperty");
			}

			this.unexpected();
		};

		pp.parsePropertyName = function (prop) {
			if (this.eat(_types.types.bracketL)) {
				prop.computed = true;
				prop.key = this.parseMaybeAssign();
				this.expect(_types.types.bracketR);
				return prop.key;
			} else {
				prop.computed = false;
				return prop.key = this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
			}
		};

		pp.initFunction = function (node, isAsync) {
			node.id = null;
			node.generator = false;
			node.expression = false;
			node.async = !!isAsync;
		};

		pp.parseMethod = function (node, isGenerator, isAsync) {
			var oldInMethod = this.state.inMethod;
			this.state.inMethod = node.kind || true;
			this.initFunction(node, isAsync);
			this.expect(_types.types.parenL);
			node.params = this.parseBindingList(_types.types.parenR);
			node.generator = isGenerator;
			this.parseFunctionBody(node);
			this.state.inMethod = oldInMethod;
			return node;
		};

		pp.parseArrowExpression = function (node, params, isAsync) {
			this.initFunction(node, isAsync);
			node.params = this.toAssignableList(params, true);
			this.parseFunctionBody(node, true);
			return this.finishNode(node, "ArrowFunctionExpression");
		};

		pp.parseFunctionBody = function (node, allowExpression) {
			var isExpression = allowExpression && !this.match(_types.types.braceL);

			var oldInAsync = this.state.inAsync;
			this.state.inAsync = node.async;
			if (isExpression) {
				node.body = this.parseMaybeAssign();
				node.expression = true;
			} else {
				var oldInFunc = this.state.inFunction,
				    oldInGen = this.state.inGenerator,
				    oldLabels = this.state.labels;
				this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
				node.body = this.parseBlock(true);
				node.expression = false;
				this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
			}
			this.state.inAsync = oldInAsync;

			var checkLVal = this.state.strict;
			var isStrict = false;

			if (allowExpression) checkLVal = true;

			if (!isExpression && node.body.directives.length) {
				for (var _iterator2 = node.body.directives, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
					var _ref2;

					if (_isArray2) {
						if (_i2 >= _iterator2.length) break;
						_ref2 = _iterator2[_i2++];
					} else {
						_i2 = _iterator2.next();
						if (_i2.done) break;
						_ref2 = _i2.value;
					}

					var directive = _ref2;

					if (directive.value.value === "use strict") {
						isStrict = true;
						checkLVal = true;
						break;
					}
				}
			}

			if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
				this.raise(node.id.start, "Binding yield in strict mode");
			}

			if (checkLVal) {
				var nameHash = Object.create(null);
				var oldStrict = this.state.strict;
				if (isStrict) this.state.strict = true;
				if (node.id) {
					this.checkLVal(node.id, true);
				}
				for (var _iterator3 = node.params, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
					var _ref3;

					if (_isArray3) {
						if (_i3 >= _iterator3.length) break;
						_ref3 = _iterator3[_i3++];
					} else {
						_i3 = _iterator3.next();
						if (_i3.done) break;
						_ref3 = _i3.value;
					}

					var param = _ref3;

					if (isStrict && param.type !== "Identifier") {
						this.raise(param.start, "Non-simple parameter in strict mode");
					}
					this.checkLVal(param, true, nameHash);
				}
				this.state.strict = oldStrict;
			}
		};

		pp.parseExprList = function (close, allowEmpty, refShorthandDefaultPos) {
			var elts = [],
			    first = true;
			while (!this.eat(close)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
					if (this.eat(close)) break;
				}

				elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
			}
			return elts;
		};

		pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
			var elt = void 0;
			if (allowEmpty && this.match(_types.types.comma)) {
				elt = null;
			} else if (this.match(_types.types.ellipsis)) {
				elt = this.parseSpread(refShorthandDefaultPos);
			} else {
				elt = this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem);
			}
			return elt;
		};

		pp.parseIdentifier = function (liberal) {
			var node = this.startNode();

			if (this.match(_types.types.name)) {
				if (!liberal && this.state.strict && _identifier.reservedWords.strict(this.state.value)) {
					this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
				}

				node.name = this.state.value;
			} else if (liberal && this.state.type.keyword) {
				node.name = this.state.type.keyword;
			} else {
				this.unexpected();
			}

			if (!liberal && node.name === "await" && this.state.inAsync) {
				this.raise(node.start, "invalid use of await inside of an async function");
			}

			node.loc.identifierName = node.name;

			this.next();
			return this.finishNode(node, "Identifier");
		};

		pp.parseAwait = function (node) {
			if (!this.state.inAsync) {
				this.unexpected();
			}
			if (this.match(_types.types.star)) {
				this.raise(node.start, "await* has been removed from the async functions proposal. Use Promise.all() instead.");
			}
			node.argument = this.parseMaybeUnary();
			return this.finishNode(node, "AwaitExpression");
		};

		pp.parseYield = function () {
			var node = this.startNode();
			this.next();
			if (this.match(_types.types.semi) || this.canInsertSemicolon() || !this.match(_types.types.star) && !this.state.type.startsExpr) {
				node.delegate = false;
				node.argument = null;
			} else {
				node.delegate = this.eat(_types.types.star);
				node.argument = this.parseMaybeAssign();
			}
			return this.finishNode(node, "YieldExpression");
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _location = __webpack_require__(87);

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _index2.default.prototype;

		pp.raise = function (pos, message) {
			var loc = (0, _location.getLineInfo)(this.input, pos);
			message += " (" + loc.line + ":" + loc.column + ")";
			var err = new SyntaxError(message);
			err.pos = pos;
			err.loc = loc;
			throw err;
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _types = __webpack_require__(14);

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		var _identifier = __webpack_require__(66);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _index2.default.prototype;

		pp.toAssignable = function (node, isBinding) {
			if (node) {
				switch (node.type) {
					case "Identifier":
					case "ObjectPattern":
					case "ArrayPattern":
					case "AssignmentPattern":
						break;

					case "ObjectExpression":
						node.type = "ObjectPattern";
						for (var _iterator = node.properties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
							var _ref;

							if (_isArray) {
								if (_i >= _iterator.length) break;
								_ref = _iterator[_i++];
							} else {
								_i = _iterator.next();
								if (_i.done) break;
								_ref = _i.value;
							}

							var prop = _ref;

							if (prop.type === "ObjectMethod") {
								if (prop.kind === "get" || prop.kind === "set") {
									this.raise(prop.key.start, "Object pattern can't contain getter or setter");
								} else {
									this.raise(prop.key.start, "Object pattern can't contain methods");
								}
							} else {
								this.toAssignable(prop, isBinding);
							}
						}
						break;

					case "ObjectProperty":
						this.toAssignable(node.value, isBinding);
						break;

					case "SpreadProperty":
						node.type = "RestProperty";
						break;

					case "ArrayExpression":
						node.type = "ArrayPattern";
						this.toAssignableList(node.elements, isBinding);
						break;

					case "AssignmentExpression":
						if (node.operator === "=") {
							node.type = "AssignmentPattern";
							delete node.operator;
						} else {
							this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
						}
						break;

					case "MemberExpression":
						if (!isBinding) break;

					default:
						this.raise(node.start, "Assigning to rvalue");
				}
			}
			return node;
		};

		pp.toAssignableList = function (exprList, isBinding) {
			var end = exprList.length;
			if (end) {
				var last = exprList[end - 1];
				if (last && last.type === "RestElement") {
					--end;
				} else if (last && last.type === "SpreadElement") {
					last.type = "RestElement";
					var arg = last.argument;
					this.toAssignable(arg, isBinding);
					if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
						this.unexpected(arg.start);
					}
					--end;
				}
			}
			for (var i = 0; i < end; i++) {
				var elt = exprList[i];
				if (elt) this.toAssignable(elt, isBinding);
			}
			return exprList;
		};

		pp.toReferencedList = function (exprList) {
			return exprList;
		};

		pp.parseSpread = function (refShorthandDefaultPos) {
			var node = this.startNode();
			this.next();
			node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
			return this.finishNode(node, "SpreadElement");
		};

		pp.parseRest = function () {
			var node = this.startNode();
			this.next();
			node.argument = this.parseBindingIdentifier();
			return this.finishNode(node, "RestElement");
		};

		pp.shouldAllowYieldIdentifier = function () {
			return this.match(_types.types._yield) && !this.state.strict && !this.state.inGenerator;
		};

		pp.parseBindingIdentifier = function () {
			return this.parseIdentifier(this.shouldAllowYieldIdentifier());
		};

		pp.parseBindingAtom = function () {
			switch (this.state.type) {
				case _types.types._yield:
					if (this.state.strict || this.state.inGenerator) this.unexpected();

				case _types.types.name:
					return this.parseIdentifier(true);

				case _types.types.bracketL:
					var node = this.startNode();
					this.next();
					node.elements = this.parseBindingList(_types.types.bracketR, true);
					return this.finishNode(node, "ArrayPattern");

				case _types.types.braceL:
					return this.parseObj(true);

				default:
					this.unexpected();
			}
		};

		pp.parseBindingList = function (close, allowEmpty) {
			var elts = [];
			var first = true;
			while (!this.eat(close)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
				}
				if (allowEmpty && this.match(_types.types.comma)) {
					elts.push(null);
				} else if (this.eat(close)) {
					break;
				} else if (this.match(_types.types.ellipsis)) {
					elts.push(this.parseAssignableListItemTypes(this.parseRest()));
					this.expect(close);
					break;
				} else {
					var decorators = [];
					while (this.match(_types.types.at)) {
						decorators.push(this.parseDecorator());
					}
					var left = this.parseMaybeDefault();
					if (decorators.length) {
						left.decorators = decorators;
					}
					this.parseAssignableListItemTypes(left);
					elts.push(this.parseMaybeDefault(left.start, left.loc.start, left));
				}
			}
			return elts;
		};

		pp.parseAssignableListItemTypes = function (param) {
			return param;
		};

		pp.parseMaybeDefault = function (startPos, startLoc, left) {
			startLoc = startLoc || this.state.startLoc;
			startPos = startPos || this.state.start;
			left = left || this.parseBindingAtom();
			if (!this.eat(_types.types.eq)) return left;

			var node = this.startNodeAt(startPos, startLoc);
			node.left = left;
			node.right = this.parseMaybeAssign();
			return this.finishNode(node, "AssignmentPattern");
		};

		pp.checkLVal = function (expr, isBinding, checkClashes) {
			switch (expr.type) {
				case "Identifier":
					if (this.state.strict && (_identifier.reservedWords.strictBind(expr.name) || _identifier.reservedWords.strict(expr.name))) {
						this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
					}

					if (checkClashes) {
						var key = "_" + expr.name;

						if (checkClashes[key]) {
							this.raise(expr.start, "Argument name clash in strict mode");
						} else {
							checkClashes[key] = true;
						}
					}
					break;

				case "MemberExpression":
					if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
					break;

				case "ObjectPattern":
					for (var _iterator2 = expr.properties, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
						var _ref2;

						if (_isArray2) {
							if (_i2 >= _iterator2.length) break;
							_ref2 = _iterator2[_i2++];
						} else {
							_i2 = _iterator2.next();
							if (_i2.done) break;
							_ref2 = _i2.value;
						}

						var prop = _ref2;

						if (prop.type === "ObjectProperty") prop = prop.value;
						this.checkLVal(prop, isBinding, checkClashes);
					}
					break;

				case "ArrayPattern":
					for (var _iterator3 = expr.elements, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
						var _ref3;

						if (_isArray3) {
							if (_i3 >= _iterator3.length) break;
							_ref3 = _iterator3[_i3++];
						} else {
							_i3 = _iterator3.next();
							if (_i3.done) break;
							_ref3 = _i3.value;
						}

						var elem = _ref3;

						if (elem) this.checkLVal(elem, isBinding, checkClashes);
					}
					break;

				case "AssignmentPattern":
					this.checkLVal(expr.left, isBinding, checkClashes);
					break;

				case "RestProperty":
				case "RestElement":
					this.checkLVal(expr.argument, isBinding, checkClashes);
					break;

				default:
					this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
			}
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		var _location = __webpack_require__(87);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var pp = _index2.default.prototype;
		var commentKeys = ["leadingComments", "trailingComments", "innerComments"];

		var Node = function () {
			function Node(pos, loc, filename) {
				_classCallCheck(this, Node);

				this.type = "";
				this.start = pos;
				this.end = 0;
				this.loc = new _location.SourceLocation(loc);
				if (filename) this.loc.filename = filename;
			}

			Node.prototype.__clone = function __clone() {
				var node2 = new Node();
				for (var key in this) {
					if (commentKeys.indexOf(key) < 0) {
						node2[key] = this[key];
					}
				}

				return node2;
			};

			return Node;
		}();

		pp.startNode = function () {
			return new Node(this.state.start, this.state.startLoc, this.filename);
		};

		pp.startNodeAt = function (pos, loc) {
			return new Node(pos, loc, this.filename);
		};

		function finishNodeAt(node, type, pos, loc) {
			node.type = type;
			node.end = pos;
			node.loc.end = loc;
			this.processComment(node);
			return node;
		}

		pp.finishNode = function (node, type) {
			return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
		};

		pp.finishNodeAt = function (node, type, pos, loc) {
			return finishNodeAt.call(this, node, type, pos, loc);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _types = __webpack_require__(14);

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		var _whitespace = __webpack_require__(40);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _index2.default.prototype;

		pp.parseTopLevel = function (file, program) {
			program.sourceType = this.options.sourceType;

			this.parseBlockBody(program, true, true, _types.types.eof);

			file.program = this.finishNode(program, "Program");
			file.comments = this.state.comments;
			file.tokens = this.state.tokens;

			return this.finishNode(file, "File");
		};

		var loopLabel = { kind: "loop" },
		    switchLabel = { kind: "switch" };

		pp.stmtToDirective = function (stmt) {
			var expr = stmt.expression;

			var directiveLiteral = this.startNodeAt(expr.start, expr.loc.start);
			var directive = this.startNodeAt(stmt.start, stmt.loc.start);

			var raw = this.input.slice(expr.start, expr.end);
			var val = directiveLiteral.value = raw.slice(1, -1);

			this.addExtra(directiveLiteral, "raw", raw);
			this.addExtra(directiveLiteral, "rawValue", val);

			directive.value = this.finishNodeAt(directiveLiteral, "DirectiveLiteral", expr.end, expr.loc.end);

			return this.finishNodeAt(directive, "Directive", stmt.end, stmt.loc.end);
		};

		pp.parseStatement = function (declaration, topLevel) {
			if (this.match(_types.types.at)) {
				this.parseDecorators(true);
			}

			var starttype = this.state.type,
			    node = this.startNode();

			switch (starttype) {
				case _types.types._break:case _types.types._continue:
					return this.parseBreakContinueStatement(node, starttype.keyword);
				case _types.types._debugger:
					return this.parseDebuggerStatement(node);
				case _types.types._do:
					return this.parseDoStatement(node);
				case _types.types._for:
					return this.parseForStatement(node);
				case _types.types._function:
					if (!declaration) this.unexpected();
					return this.parseFunctionStatement(node);

				case _types.types._class:
					if (!declaration) this.unexpected();
					this.takeDecorators(node);
					return this.parseClass(node, true);

				case _types.types._if:
					return this.parseIfStatement(node);
				case _types.types._return:
					return this.parseReturnStatement(node);
				case _types.types._switch:
					return this.parseSwitchStatement(node);
				case _types.types._throw:
					return this.parseThrowStatement(node);
				case _types.types._try:
					return this.parseTryStatement(node);

				case _types.types._let:
				case _types.types._const:
					if (!declaration) this.unexpected();

				case _types.types._var:
					return this.parseVarStatement(node, starttype);

				case _types.types._while:
					return this.parseWhileStatement(node);
				case _types.types._with:
					return this.parseWithStatement(node);
				case _types.types.braceL:
					return this.parseBlock();
				case _types.types.semi:
					return this.parseEmptyStatement(node);
				case _types.types._export:
				case _types.types._import:
					if (!this.options.allowImportExportEverywhere) {
						if (!topLevel) {
							this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
						}

						if (!this.inModule) {
							this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
						}
					}
					return starttype === _types.types._import ? this.parseImport(node) : this.parseExport(node);

				case _types.types.name:
					if (this.state.value === "async") {
						var state = this.state.clone();
						this.next();
						if (this.match(_types.types._function) && !this.canInsertSemicolon()) {
							this.expect(_types.types._function);
							return this.parseFunction(node, true, false, true);
						} else {
							this.state = state;
						}
					}
			}

			var maybeName = this.state.value;
			var expr = this.parseExpression();

			if (starttype === _types.types.name && expr.type === "Identifier" && this.eat(_types.types.colon)) {
				return this.parseLabeledStatement(node, maybeName, expr);
			} else {
				return this.parseExpressionStatement(node, expr);
			}
		};

		pp.takeDecorators = function (node) {
			if (this.state.decorators.length) {
				node.decorators = this.state.decorators;
				this.state.decorators = [];
			}
		};

		pp.parseDecorators = function (allowExport) {
			while (this.match(_types.types.at)) {
				this.state.decorators.push(this.parseDecorator());
			}

			if (allowExport && this.match(_types.types._export)) {
				return;
			}

			if (!this.match(_types.types._class)) {
				this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
			}
		};

		pp.parseDecorator = function () {
			if (!this.hasPlugin("decorators")) {
				this.unexpected();
			}
			var node = this.startNode();
			this.next();
			node.expression = this.parseMaybeAssign();
			return this.finishNode(node, "Decorator");
		};

		pp.parseBreakContinueStatement = function (node, keyword) {
			var isBreak = keyword === "break";
			this.next();

			if (this.isLineTerminator()) {
				node.label = null;
			} else if (!this.match(_types.types.name)) {
				this.unexpected();
			} else {
				node.label = this.parseIdentifier();
				this.semicolon();
			}

			var i = void 0;
			for (i = 0; i < this.state.labels.length; ++i) {
				var lab = this.state.labels[i];
				if (node.label == null || lab.name === node.label.name) {
					if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
					if (node.label && isBreak) break;
				}
			}
			if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
			return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
		};

		pp.parseDebuggerStatement = function (node) {
			this.next();
			this.semicolon();
			return this.finishNode(node, "DebuggerStatement");
		};

		pp.parseDoStatement = function (node) {
			this.next();
			this.state.labels.push(loopLabel);
			node.body = this.parseStatement(false);
			this.state.labels.pop();
			this.expect(_types.types._while);
			node.test = this.parseParenExpression();
			this.eat(_types.types.semi);
			return this.finishNode(node, "DoWhileStatement");
		};

		pp.parseForStatement = function (node) {
			this.next();
			this.state.labels.push(loopLabel);

			var forAwait = false;
			if (this.hasPlugin("asyncGenerators") && this.state.inAsync && this.isContextual("await")) {
				forAwait = true;
				this.next();
			}
			this.expect(_types.types.parenL);

			if (this.match(_types.types.semi)) {
				if (forAwait) {
					this.unexpected();
				}
				return this.parseFor(node, null);
			}

			if (this.match(_types.types._var) || this.match(_types.types._let) || this.match(_types.types._const)) {
				var _init = this.startNode(),
				    varKind = this.state.type;
				this.next();
				this.parseVar(_init, true, varKind);
				this.finishNode(_init, "VariableDeclaration");

				if (this.match(_types.types._in) || this.isContextual("of")) {
					if (_init.declarations.length === 1 && !_init.declarations[0].init) {
						return this.parseForIn(node, _init, forAwait);
					}
				}
				if (forAwait) {
					this.unexpected();
				}
				return this.parseFor(node, _init);
			}

			var refShorthandDefaultPos = { start: 0 };
			var init = this.parseExpression(true, refShorthandDefaultPos);
			if (this.match(_types.types._in) || this.isContextual("of")) {
				this.toAssignable(init);
				this.checkLVal(init);
				return this.parseForIn(node, init, forAwait);
			} else if (refShorthandDefaultPos.start) {
				this.unexpected(refShorthandDefaultPos.start);
			}
			if (forAwait) {
				this.unexpected();
			}
			return this.parseFor(node, init);
		};

		pp.parseFunctionStatement = function (node) {
			this.next();
			return this.parseFunction(node, true);
		};

		pp.parseIfStatement = function (node) {
			this.next();
			node.test = this.parseParenExpression();
			node.consequent = this.parseStatement(false);
			node.alternate = this.eat(_types.types._else) ? this.parseStatement(false) : null;
			return this.finishNode(node, "IfStatement");
		};

		pp.parseReturnStatement = function (node) {
			if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
				this.raise(this.state.start, "'return' outside of function");
			}

			this.next();

			if (this.isLineTerminator()) {
				node.argument = null;
			} else {
				node.argument = this.parseExpression();
				this.semicolon();
			}

			return this.finishNode(node, "ReturnStatement");
		};

		pp.parseSwitchStatement = function (node) {
			this.next();
			node.discriminant = this.parseParenExpression();
			node.cases = [];
			this.expect(_types.types.braceL);
			this.state.labels.push(switchLabel);

			var cur = void 0;
			for (var sawDefault; !this.match(_types.types.braceR);) {
				if (this.match(_types.types._case) || this.match(_types.types._default)) {
					var isCase = this.match(_types.types._case);
					if (cur) this.finishNode(cur, "SwitchCase");
					node.cases.push(cur = this.startNode());
					cur.consequent = [];
					this.next();
					if (isCase) {
						cur.test = this.parseExpression();
					} else {
						if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
						sawDefault = true;
						cur.test = null;
					}
					this.expect(_types.types.colon);
				} else {
					if (cur) {
						cur.consequent.push(this.parseStatement(true));
					} else {
						this.unexpected();
					}
				}
			}
			if (cur) this.finishNode(cur, "SwitchCase");
			this.next();
			this.state.labels.pop();
			return this.finishNode(node, "SwitchStatement");
		};

		pp.parseThrowStatement = function (node) {
			this.next();
			if (_whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
			node.argument = this.parseExpression();
			this.semicolon();
			return this.finishNode(node, "ThrowStatement");
		};

		var empty = [];

		pp.parseTryStatement = function (node) {
			this.next();

			node.block = this.parseBlock();
			node.handler = null;

			if (this.match(_types.types._catch)) {
				var clause = this.startNode();
				this.next();

				this.expect(_types.types.parenL);
				clause.param = this.parseBindingAtom();
				this.checkLVal(clause.param, true, Object.create(null));
				this.expect(_types.types.parenR);

				clause.body = this.parseBlock();
				node.handler = this.finishNode(clause, "CatchClause");
			}

			node.guardedHandlers = empty;
			node.finalizer = this.eat(_types.types._finally) ? this.parseBlock() : null;

			if (!node.handler && !node.finalizer) {
				this.raise(node.start, "Missing catch or finally clause");
			}

			return this.finishNode(node, "TryStatement");
		};

		pp.parseVarStatement = function (node, kind) {
			this.next();
			this.parseVar(node, false, kind);
			this.semicolon();
			return this.finishNode(node, "VariableDeclaration");
		};

		pp.parseWhileStatement = function (node) {
			this.next();
			node.test = this.parseParenExpression();
			this.state.labels.push(loopLabel);
			node.body = this.parseStatement(false);
			this.state.labels.pop();
			return this.finishNode(node, "WhileStatement");
		};

		pp.parseWithStatement = function (node) {
			if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
			this.next();
			node.object = this.parseParenExpression();
			node.body = this.parseStatement(false);
			return this.finishNode(node, "WithStatement");
		};

		pp.parseEmptyStatement = function (node) {
			this.next();
			return this.finishNode(node, "EmptyStatement");
		};

		pp.parseLabeledStatement = function (node, maybeName, expr) {
			for (var _iterator = this.state.labels, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
				var _ref;

				if (_isArray) {
					if (_i >= _iterator.length) break;
					_ref = _iterator[_i++];
				} else {
					_i = _iterator.next();
					if (_i.done) break;
					_ref = _i.value;
				}

				var _label = _ref;

				if (_label.name === maybeName) {
					this.raise(expr.start, "Label '" + maybeName + "' is already declared");
				}
			}

			var kind = this.state.type.isLoop ? "loop" : this.match(_types.types._switch) ? "switch" : null;
			for (var i = this.state.labels.length - 1; i >= 0; i--) {
				var label = this.state.labels[i];
				if (label.statementStart === node.start) {
					label.statementStart = this.state.start;
					label.kind = kind;
				} else {
					break;
				}
			}

			this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
			node.body = this.parseStatement(true);
			this.state.labels.pop();
			node.label = expr;
			return this.finishNode(node, "LabeledStatement");
		};

		pp.parseExpressionStatement = function (node, expr) {
			node.expression = expr;
			this.semicolon();
			return this.finishNode(node, "ExpressionStatement");
		};

		pp.parseBlock = function (allowDirectives) {
			var node = this.startNode();
			this.expect(_types.types.braceL);
			this.parseBlockBody(node, allowDirectives, false, _types.types.braceR);
			return this.finishNode(node, "BlockStatement");
		};

		pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
			node.body = [];
			node.directives = [];

			var parsedNonDirective = false;
			var oldStrict = void 0;
			var octalPosition = void 0;

			while (!this.eat(end)) {
				if (!parsedNonDirective && this.state.containsOctal && !octalPosition) {
					octalPosition = this.state.octalPosition;
				}

				var stmt = this.parseStatement(true, topLevel);

				if (allowDirectives && !parsedNonDirective && stmt.type === "ExpressionStatement" && stmt.expression.type === "StringLiteral" && !stmt.expression.extra.parenthesized) {
					var directive = this.stmtToDirective(stmt);
					node.directives.push(directive);

					if (oldStrict === undefined && directive.value.value === "use strict") {
						oldStrict = this.state.strict;
						this.setStrict(true);

						if (octalPosition) {
							this.raise(octalPosition, "Octal literal in strict mode");
						}
					}

					continue;
				}

				parsedNonDirective = true;
				node.body.push(stmt);
			}

			if (oldStrict === false) {
				this.setStrict(false);
			}
		};

		pp.parseFor = function (node, init) {
			node.init = init;
			this.expect(_types.types.semi);
			node.test = this.match(_types.types.semi) ? null : this.parseExpression();
			this.expect(_types.types.semi);
			node.update = this.match(_types.types.parenR) ? null : this.parseExpression();
			this.expect(_types.types.parenR);
			node.body = this.parseStatement(false);
			this.state.labels.pop();
			return this.finishNode(node, "ForStatement");
		};

		pp.parseForIn = function (node, init, forAwait) {
			var type = void 0;
			if (forAwait) {
				this.eatContextual("of");
				type = "ForAwaitStatement";
			} else {
				type = this.match(_types.types._in) ? "ForInStatement" : "ForOfStatement";
				this.next();
			}
			node.left = init;
			node.right = this.parseExpression();
			this.expect(_types.types.parenR);
			node.body = this.parseStatement(false);
			this.state.labels.pop();
			return this.finishNode(node, type);
		};

		pp.parseVar = function (node, isFor, kind) {
			node.declarations = [];
			node.kind = kind.keyword;
			for (;;) {
				var decl = this.startNode();
				this.parseVarHead(decl);
				if (this.eat(_types.types.eq)) {
					decl.init = this.parseMaybeAssign(isFor);
				} else if (kind === _types.types._const && !(this.match(_types.types._in) || this.isContextual("of"))) {
					this.unexpected();
				} else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_types.types._in) || this.isContextual("of")))) {
					this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
				} else {
					decl.init = null;
				}
				node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
				if (!this.eat(_types.types.comma)) break;
			}
			return node;
		};

		pp.parseVarHead = function (decl) {
			decl.id = this.parseBindingAtom();
			this.checkLVal(decl.id, true);
		};

		pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
			var oldInMethod = this.state.inMethod;
			this.state.inMethod = false;

			this.initFunction(node, isAsync);

			if (this.match(_types.types.star)) {
				if (node.async && !this.hasPlugin("asyncGenerators")) {
					this.unexpected();
				} else {
					node.generator = true;
					this.next();
				}
			}

			if (isStatement && !optionalId && !this.match(_types.types.name) && !this.match(_types.types._yield)) {
				this.unexpected();
			}

			if (this.match(_types.types.name) || this.match(_types.types._yield)) {
				node.id = this.parseBindingIdentifier();
			}

			this.parseFunctionParams(node);
			this.parseFunctionBody(node, allowExpressionBody);

			this.state.inMethod = oldInMethod;

			return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
		};

		pp.parseFunctionParams = function (node) {
			this.expect(_types.types.parenL);
			node.params = this.parseBindingList(_types.types.parenR);
		};

		pp.parseClass = function (node, isStatement, optionalId) {
			this.next();
			this.parseClassId(node, isStatement, optionalId);
			this.parseClassSuper(node);
			this.parseClassBody(node);
			return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
		};

		pp.isClassProperty = function () {
			return this.match(_types.types.eq) || this.isLineTerminator();
		};

		pp.isClassMutatorStarter = function () {
			return false;
		};

		pp.parseClassBody = function (node) {
			var oldStrict = this.state.strict;
			this.state.strict = true;

			var hadConstructorCall = false;
			var hadConstructor = false;
			var decorators = [];
			var classBody = this.startNode();

			classBody.body = [];

			this.expect(_types.types.braceL);

			while (!this.eat(_types.types.braceR)) {
				if (this.eat(_types.types.semi)) {
					continue;
				}

				if (this.match(_types.types.at)) {
					decorators.push(this.parseDecorator());
					continue;
				}

				var method = this.startNode();

				if (decorators.length) {
					method.decorators = decorators;
					decorators = [];
				}

				var isConstructorCall = false;
				var isMaybeStatic = this.match(_types.types.name) && this.state.value === "static";
				var isGenerator = this.eat(_types.types.star);
				var isGetSet = false;
				var isAsync = false;

				this.parsePropertyName(method);

				method.static = isMaybeStatic && !this.match(_types.types.parenL);
				if (method.static) {
					if (isGenerator) this.unexpected();
					isGenerator = this.eat(_types.types.star);
					this.parsePropertyName(method);
				}

				if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
					if (this.isClassProperty()) {
						classBody.body.push(this.parseClassProperty(method));
						continue;
					}

					if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_types.types.name) && this.state.value === "constructor") {
						isConstructorCall = true;
						this.parsePropertyName(method);
					}
				}

				var isAsyncMethod = !this.match(_types.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
				if (isAsyncMethod) {
					if (this.hasPlugin("asyncGenerators") && this.eat(_types.types.star)) isGenerator = true;
					isAsync = true;
					this.parsePropertyName(method);
				}

				method.kind = "method";

				if (!method.computed) {
					var key = method.key;

					if (!isAsync && !isGenerator && !this.isClassMutatorStarter() && key.type === "Identifier" && !this.match(_types.types.parenL) && (key.name === "get" || key.name === "set")) {
						isGetSet = true;
						method.kind = key.name;
						key = this.parsePropertyName(method);
					}

					var isConstructor = !isConstructorCall && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
					if (isConstructor) {
						if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
						if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
						if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
						if (isAsync) this.raise(key.start, "Constructor can't be an async function");
						method.kind = "constructor";
						hadConstructor = true;
					}

					var isStaticPrototype = method.static && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
					if (isStaticPrototype) {
						this.raise(key.start, "Classes may not have static property named prototype");
					}
				}

				if (isConstructorCall) {
					if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
					method.kind = "constructorCall";
					hadConstructorCall = true;
				}

				if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
					this.raise(method.start, "You can't attach decorators to a class constructor");
				}

				this.parseClassMethod(classBody, method, isGenerator, isAsync);

				if (isGetSet) {
					var paramCount = method.kind === "get" ? 0 : 1;
					if (method.params.length !== paramCount) {
						var start = method.start;
						if (method.kind === "get") {
							this.raise(start, "getter should have no params");
						} else {
							this.raise(start, "setter should have exactly one param");
						}
					}
				}
			}

			if (decorators.length) {
				this.raise(this.state.start, "You have trailing decorators with no method");
			}

			node.body = this.finishNode(classBody, "ClassBody");

			this.state.strict = oldStrict;
		};

		pp.parseClassProperty = function (node) {
			if (this.match(_types.types.eq)) {
				if (!this.hasPlugin("classProperties")) this.unexpected();
				this.next();
				node.value = this.parseMaybeAssign();
			} else {
				node.value = null;
			}
			this.semicolon();
			return this.finishNode(node, "ClassProperty");
		};

		pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
			this.parseMethod(method, isGenerator, isAsync);
			classBody.body.push(this.finishNode(method, "ClassMethod"));
		};

		pp.parseClassId = function (node, isStatement, optionalId) {
			if (this.match(_types.types.name)) {
				node.id = this.parseIdentifier();
			} else {
				if (optionalId || !isStatement) {
					node.id = null;
				} else {
					this.unexpected();
				}
			}
		};

		pp.parseClassSuper = function (node) {
			node.superClass = this.eat(_types.types._extends) ? this.parseExprSubscripts() : null;
		};

		pp.parseExport = function (node) {
			this.next();

			if (this.match(_types.types.star)) {
				var specifier = this.startNode();
				this.next();
				if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
					specifier.exported = this.parseIdentifier();
					node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
					this.parseExportSpecifiersMaybe(node);
					this.parseExportFrom(node, true);
				} else {
					this.parseExportFrom(node, true);
					return this.finishNode(node, "ExportAllDeclaration");
				}
			} else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
				var _specifier = this.startNode();
				_specifier.exported = this.parseIdentifier(true);
				node.specifiers = [this.finishNode(_specifier, "ExportDefaultSpecifier")];
				if (this.match(_types.types.comma) && this.lookahead().type === _types.types.star) {
					this.expect(_types.types.comma);
					var _specifier2 = this.startNode();
					this.expect(_types.types.star);
					this.expectContextual("as");
					_specifier2.exported = this.parseIdentifier();
					node.specifiers.push(this.finishNode(_specifier2, "ExportNamespaceSpecifier"));
				} else {
					this.parseExportSpecifiersMaybe(node);
				}
				this.parseExportFrom(node, true);
			} else if (this.eat(_types.types._default)) {
				var expr = this.startNode();
				var needsSemi = false;
				if (this.eat(_types.types._function)) {
					expr = this.parseFunction(expr, true, false, false, true);
				} else if (this.match(_types.types._class)) {
					expr = this.parseClass(expr, true, true);
				} else {
					needsSemi = true;
					expr = this.parseMaybeAssign();
				}
				node.declaration = expr;
				if (needsSemi) this.semicolon();
				this.checkExport(node);
				return this.finishNode(node, "ExportDefaultDeclaration");
			} else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
				node.specifiers = [];
				node.source = null;
				node.declaration = this.parseExportDeclaration(node);
			} else {
				node.declaration = null;
				node.specifiers = this.parseExportSpecifiers();
				this.parseExportFrom(node);
			}
			this.checkExport(node);
			return this.finishNode(node, "ExportNamedDeclaration");
		};

		pp.parseExportDeclaration = function () {
			return this.parseStatement(true);
		};

		pp.isExportDefaultSpecifier = function () {
			if (this.match(_types.types.name)) {
				return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
			}

			if (!this.match(_types.types._default)) {
				return false;
			}

			var lookahead = this.lookahead();
			return lookahead.type === _types.types.comma || lookahead.type === _types.types.name && lookahead.value === "from";
		};

		pp.parseExportSpecifiersMaybe = function (node) {
			if (this.eat(_types.types.comma)) {
				node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
			}
		};

		pp.parseExportFrom = function (node, expect) {
			if (this.eatContextual("from")) {
				node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
				this.checkExport(node);
			} else {
				if (expect) {
					this.unexpected();
				} else {
					node.source = null;
				}
			}

			this.semicolon();
		};

		pp.shouldParseExportDeclaration = function () {
			return this.isContextual("async");
		};

		pp.checkExport = function (node) {
			if (this.state.decorators.length) {
				var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
				if (!node.declaration || !isClass) {
					this.raise(node.start, "You can only use decorators on an export when exporting a class");
				}
				this.takeDecorators(node.declaration);
			}
		};

		pp.parseExportSpecifiers = function () {
			var nodes = [];
			var first = true;
			var needsFrom = void 0;

			this.expect(_types.types.braceL);

			while (!this.eat(_types.types.braceR)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
					if (this.eat(_types.types.braceR)) break;
				}

				var isDefault = this.match(_types.types._default);
				if (isDefault && !needsFrom) needsFrom = true;

				var node = this.startNode();
				node.local = this.parseIdentifier(isDefault);
				node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
				nodes.push(this.finishNode(node, "ExportSpecifier"));
			}

			if (needsFrom && !this.isContextual("from")) {
				this.unexpected();
			}

			return nodes;
		};

		pp.parseImport = function (node) {
			this.next();

			if (this.match(_types.types.string)) {
				node.specifiers = [];
				node.source = this.parseExprAtom();
			} else {
				node.specifiers = [];
				this.parseImportSpecifiers(node);
				this.expectContextual("from");
				node.source = this.match(_types.types.string) ? this.parseExprAtom() : this.unexpected();
			}
			this.semicolon();
			return this.finishNode(node, "ImportDeclaration");
		};

		pp.parseImportSpecifiers = function (node) {
			var first = true;
			if (this.match(_types.types.name)) {
				var startPos = this.state.start,
				    startLoc = this.state.startLoc;
				node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
				if (!this.eat(_types.types.comma)) return;
			}

			if (this.match(_types.types.star)) {
				var specifier = this.startNode();
				this.next();
				this.expectContextual("as");
				specifier.local = this.parseIdentifier();
				this.checkLVal(specifier.local, true);
				node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
				return;
			}

			this.expect(_types.types.braceL);
			while (!this.eat(_types.types.braceR)) {
				if (first) {
					first = false;
				} else {
					this.expect(_types.types.comma);
					if (this.eat(_types.types.braceR)) break;
				}

				var _specifier3 = this.startNode();
				_specifier3.imported = this.parseIdentifier(true);
				_specifier3.local = this.eatContextual("as") ? this.parseIdentifier() : _specifier3.imported.__clone();
				this.checkLVal(_specifier3.local, true);
				node.specifiers.push(this.finishNode(_specifier3, "ImportSpecifier"));
			}
		};

		pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
			var node = this.startNodeAt(startPos, startLoc);
			node.local = id;
			this.checkLVal(node.local, true);
			return this.finishNode(node, "ImportDefaultSpecifier");
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		var _types = __webpack_require__(14);

		var _index = __webpack_require__(13);

		var _index2 = _interopRequireDefault(_index);

		var _whitespace = __webpack_require__(40);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _index2.default.prototype;

		pp.addExtra = function (node, key, val) {
			if (!node) return;

			var extra = node.extra = node.extra || {};
			extra[key] = val;
		};

		pp.isRelational = function (op) {
			return this.match(_types.types.relational) && this.state.value === op;
		};

		pp.expectRelational = function (op) {
			if (this.isRelational(op)) {
				this.next();
			} else {
				this.unexpected();
			}
		};

		pp.isContextual = function (name) {
			return this.match(_types.types.name) && this.state.value === name;
		};

		pp.eatContextual = function (name) {
			return this.state.value === name && this.eat(_types.types.name);
		};

		pp.expectContextual = function (name, message) {
			if (!this.eatContextual(name)) this.unexpected(null, message);
		};

		pp.canInsertSemicolon = function () {
			return this.match(_types.types.eof) || this.match(_types.types.braceR) || _whitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
		};

		pp.isLineTerminator = function () {
			return this.eat(_types.types.semi) || this.canInsertSemicolon();
		};

		pp.semicolon = function () {
			if (!this.isLineTerminator()) this.unexpected();
		};

		pp.expect = function (type, pos) {
			return this.eat(type) || this.unexpected(pos);
		};

		pp.unexpected = function (pos) {
			var message = arguments.length <= 1 || arguments[1] === undefined ? "Unexpected token" : arguments[1];

			this.raise(pos != null ? pos : this.state.start, message);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (instance) {
			instance.extend("parseFunctionBody", function (inner) {
				return function (node, allowExpression) {
					if (this.match(_types.types.colon) && !allowExpression) {
						node.returnType = this.flowParseTypeAnnotation();
					}

					return inner.call(this, node, allowExpression);
				};
			});

			instance.extend("parseStatement", function (inner) {
				return function (declaration, topLevel) {
					if (this.state.strict && this.match(_types.types.name) && this.state.value === "interface") {
						var node = this.startNode();
						this.next();
						return this.flowParseInterface(node);
					} else {
						return inner.call(this, declaration, topLevel);
					}
				};
			});

			instance.extend("parseExpressionStatement", function (inner) {
				return function (node, expr) {
					if (expr.type === "Identifier") {
						if (expr.name === "declare") {
							if (this.match(_types.types._class) || this.match(_types.types.name) || this.match(_types.types._function) || this.match(_types.types._var)) {
								return this.flowParseDeclare(node);
							}
						} else if (this.match(_types.types.name)) {
							if (expr.name === "interface") {
								return this.flowParseInterface(node);
							} else if (expr.name === "type") {
								return this.flowParseTypeAlias(node);
							}
						}
					}

					return inner.call(this, node, expr);
				};
			});

			instance.extend("shouldParseExportDeclaration", function (inner) {
				return function () {
					return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
				};
			});

			instance.extend("parseConditional", function (inner) {
				return function (expr, noIn, startPos, startLoc, refNeedsArrowPos) {
					if (refNeedsArrowPos && this.match(_types.types.question)) {
						var state = this.state.clone();
						try {
							return inner.call(this, expr, noIn, startPos, startLoc);
						} catch (err) {
							if (err instanceof SyntaxError) {
								this.state = state;
								refNeedsArrowPos.start = err.pos || this.state.start;
								return expr;
							} else {
								throw err;
							}
						}
					}

					return inner.call(this, expr, noIn, startPos, startLoc);
				};
			});

			instance.extend("parseParenItem", function (inner) {
				return function (node, startLoc, startPos) {
					node = inner.call(this, node, startLoc, startPos);
					if (this.eat(_types.types.question)) {
						node.optional = true;
					}

					if (this.match(_types.types.colon)) {
						var typeCastNode = this.startNodeAt(startLoc, startPos);
						typeCastNode.expression = node;
						typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

						return this.finishNode(typeCastNode, "TypeCastExpression");
					}

					return node;
				};
			});

			instance.extend("parseExport", function (inner) {
				return function (node) {
					node = inner.call(this, node);
					if (node.type === "ExportNamedDeclaration") {
						node.exportKind = node.exportKind || "value";
					}
					return node;
				};
			});

			instance.extend("parseExportDeclaration", function (inner) {
				return function (node) {
					if (this.isContextual("type")) {
						node.exportKind = "type";

						var declarationNode = this.startNode();
						this.next();

						if (this.match(_types.types.braceL)) {
							node.specifiers = this.parseExportSpecifiers();
							this.parseExportFrom(node);
							return null;
						} else {
							return this.flowParseTypeAlias(declarationNode);
						}
					} else if (this.isContextual("interface")) {
						node.exportKind = "type";
						var _declarationNode = this.startNode();
						this.next();
						return this.flowParseInterface(_declarationNode);
					} else {
						return inner.call(this, node);
					}
				};
			});

			instance.extend("parseClassId", function (inner) {
				return function (node) {
					inner.apply(this, arguments);
					if (this.isRelational("<")) {
						node.typeParameters = this.flowParseTypeParameterDeclaration();
					}
				};
			});

			instance.extend("isKeyword", function (inner) {
				return function (name) {
					if (this.state.inType && name === "void") {
						return false;
					} else {
						return inner.call(this, name);
					}
				};
			});

			instance.extend("readToken", function (inner) {
				return function (code) {
					if (this.state.inType && (code === 62 || code === 60)) {
						return this.finishOp(_types.types.relational, 1);
					} else {
						return inner.call(this, code);
					}
				};
			});

			instance.extend("jsx_readToken", function (inner) {
				return function () {
					if (!this.state.inType) return inner.call(this);
				};
			});

			instance.extend("toAssignable", function (inner) {
				return function (node, isBinding) {
					if (node.type === "TypeCastExpression") {
						return inner.call(this, this.typeCastToParameter(node), isBinding);
					} else {
						return inner.call(this, node, isBinding);
					}
				};
			});

			instance.extend("toAssignableList", function (inner) {
				return function (exprList, isBinding) {
					for (var i = 0; i < exprList.length; i++) {
						var expr = exprList[i];
						if (expr && expr.type === "TypeCastExpression") {
							exprList[i] = this.typeCastToParameter(expr);
						}
					}
					return inner.call(this, exprList, isBinding);
				};
			});

			instance.extend("toReferencedList", function () {
				return function (exprList) {
					for (var i = 0; i < exprList.length; i++) {
						var expr = exprList[i];
						if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
							this.raise(expr.start, "Unexpected type cast");
						}
					}

					return exprList;
				};
			});

			instance.extend("parseExprListItem", function (inner) {
				return function (allowEmpty, refShorthandDefaultPos) {
					var container = this.startNode();
					var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
					if (this.match(_types.types.colon)) {
						container._exprListItem = true;
						container.expression = node;
						container.typeAnnotation = this.flowParseTypeAnnotation();
						return this.finishNode(container, "TypeCastExpression");
					} else {
						return node;
					}
				};
			});

			instance.extend("checkLVal", function (inner) {
				return function (node) {
					if (node.type !== "TypeCastExpression") {
						return inner.apply(this, arguments);
					}
				};
			});

			instance.extend("parseClassProperty", function (inner) {
				return function (node) {
					if (this.match(_types.types.colon)) {
						node.typeAnnotation = this.flowParseTypeAnnotation();
					}
					return inner.call(this, node);
				};
			});

			instance.extend("isClassProperty", function (inner) {
				return function () {
					return this.match(_types.types.colon) || inner.call(this);
				};
			});

			instance.extend("parseClassMethod", function () {
				return function (classBody, method, isGenerator, isAsync) {
					if (this.isRelational("<")) {
						method.typeParameters = this.flowParseTypeParameterDeclaration();
					}
					this.parseMethod(method, isGenerator, isAsync);
					classBody.body.push(this.finishNode(method, "ClassMethod"));
				};
			});

			instance.extend("parseClassSuper", function (inner) {
				return function (node, isStatement) {
					inner.call(this, node, isStatement);
					if (node.superClass && this.isRelational("<")) {
						node.superTypeParameters = this.flowParseTypeParameterInstantiation();
					}
					if (this.isContextual("implements")) {
						this.next();
						var implemented = node.implements = [];
						do {
							var _node = this.startNode();
							_node.id = this.parseIdentifier();
							if (this.isRelational("<")) {
								_node.typeParameters = this.flowParseTypeParameterInstantiation();
							} else {
								_node.typeParameters = null;
							}
							implemented.push(this.finishNode(_node, "ClassImplements"));
						} while (this.eat(_types.types.comma));
					}
				};
			});

			instance.extend("parseObjPropValue", function (inner) {
				return function (prop) {
					var typeParameters = void 0;

					if (this.isRelational("<")) {
						typeParameters = this.flowParseTypeParameterDeclaration();
						if (!this.match(_types.types.parenL)) this.unexpected();
					}

					inner.apply(this, arguments);

					if (typeParameters) {
						(prop.value || prop).typeParameters = typeParameters;
					}
				};
			});

			instance.extend("parseAssignableListItemTypes", function () {
				return function (param) {
					if (this.eat(_types.types.question)) {
						param.optional = true;
					}
					if (this.match(_types.types.colon)) {
						param.typeAnnotation = this.flowParseTypeAnnotation();
					}
					this.finishNode(param, param.type);
					return param;
				};
			});

			instance.extend("parseMaybeDefault", function (inner) {
				return function () {
					for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						args[_key] = arguments[_key];
					}

					var node = inner.apply(this, args);

					if (node.type === "AssignmentPattern" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {
						this.raise(node.typeAnnotation.start, "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`");
					}

					return node;
				};
			});

			instance.extend("parseImportSpecifiers", function (inner) {
				return function (node) {
					node.importKind = "value";

					var kind = null;
					if (this.match(_types.types._typeof)) {
						kind = "typeof";
					} else if (this.isContextual("type")) {
						kind = "type";
					}
					if (kind) {
						var lh = this.lookahead();
						if (lh.type === _types.types.name && lh.value !== "from" || lh.type === _types.types.braceL || lh.type === _types.types.star) {
							this.next();
							node.importKind = kind;
						}
					}

					inner.call(this, node);
				};
			});

			instance.extend("parseFunctionParams", function (inner) {
				return function (node) {
					if (this.isRelational("<")) {
						node.typeParameters = this.flowParseTypeParameterDeclaration();
					}
					inner.call(this, node);
				};
			});

			instance.extend("parseVarHead", function (inner) {
				return function (decl) {
					inner.call(this, decl);
					if (this.match(_types.types.colon)) {
						decl.id.typeAnnotation = this.flowParseTypeAnnotation();
						this.finishNode(decl.id, decl.id.type);
					}
				};
			});

			instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
				return function (node, call) {
					if (this.match(_types.types.colon)) {
						node.returnType = this.flowParseTypeAnnotation();
					}

					return inner.call(this, node, call);
				};
			});

			instance.extend("shouldParseAsyncArrow", function (inner) {
				return function () {
					return this.match(_types.types.colon) || inner.call(this);
				};
			});

			instance.extend("parseMaybeAssign", function (inner) {
				return function () {
					var jsxError = null;

					for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
						args[_key2] = arguments[_key2];
					}

					if (_types.types.jsxTagStart && this.match(_types.types.jsxTagStart)) {
						var state = this.state.clone();
						try {
							return inner.apply(this, args);
						} catch (err) {
							if (err instanceof SyntaxError) {
								this.state = state;
								jsxError = err;
							} else {
								throw err;
							}
						}
					}

					this.state.context.push(_context.types.parenExpression);
					if (jsxError != null || this.isRelational("<")) {
						var arrowExpression = void 0;
						var typeParameters = void 0;
						try {
							typeParameters = this.flowParseTypeParameterDeclaration();

							arrowExpression = inner.apply(this, args);
							arrowExpression.typeParameters = typeParameters;
							arrowExpression.start = typeParameters.start;
							arrowExpression.loc.start = typeParameters.loc.start;
						} catch (err) {
							throw jsxError || err;
						}

						if (arrowExpression.type === "ArrowFunctionExpression") {
							return arrowExpression;
						} else if (jsxError != null) {
							throw jsxError;
						} else {
							this.raise(typeParameters.start, "Expected an arrow function after this type parameter declaration");
						}
					}
					this.state.context.pop();

					return inner.apply(this, args);
				};
			});

			instance.extend("parseArrow", function (inner) {
				return function (node) {
					if (this.match(_types.types.colon)) {
						var state = this.state.clone();
						try {
							var returnType = this.flowParseTypeAnnotation();
							if (this.canInsertSemicolon()) this.unexpected();
							if (!this.match(_types.types.arrow)) this.unexpected();

							node.returnType = returnType;
						} catch (err) {
							if (err instanceof SyntaxError) {
								this.state = state;
							} else {
								throw err;
							}
						}
					}

					return inner.call(this, node);
				};
			});

			instance.extend("shouldParseArrow", function (inner) {
				return function () {
					return this.match(_types.types.colon) || inner.call(this);
				};
			});

			instance.extend("isClassMutatorStarter", function (inner) {
				return function () {
					if (this.isRelational("<")) {
						return true;
					} else {
						return inner.call(this);
					}
				};
			});
		};

		var _types = __webpack_require__(14);

		var _context = __webpack_require__(65);

		var _parser = __webpack_require__(13);

		var _parser2 = _interopRequireDefault(_parser);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var pp = _parser2.default.prototype;

		pp.flowParseTypeInitialiser = function (tok, allowLeadingPipeOrAnd) {
			var oldInType = this.state.inType;
			this.state.inType = true;
			this.expect(tok || _types.types.colon);
			if (allowLeadingPipeOrAnd) {
				if (this.match(_types.types.bitwiseAND) || this.match(_types.types.bitwiseOR)) {
					this.next();
				}
			}
			var type = this.flowParseType();
			this.state.inType = oldInType;
			return type;
		};

		pp.flowParseDeclareClass = function (node) {
			this.next();
			this.flowParseInterfaceish(node, true);
			return this.finishNode(node, "DeclareClass");
		};

		pp.flowParseDeclareFunction = function (node) {
			this.next();

			var id = node.id = this.parseIdentifier();

			var typeNode = this.startNode();
			var typeContainer = this.startNode();

			if (this.isRelational("<")) {
				typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
			} else {
				typeNode.typeParameters = null;
			}

			this.expect(_types.types.parenL);
			var tmp = this.flowParseFunctionTypeParams();
			typeNode.params = tmp.params;
			typeNode.rest = tmp.rest;
			this.expect(_types.types.parenR);
			typeNode.returnType = this.flowParseTypeInitialiser();

			typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
			id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

			this.finishNode(id, id.type);

			this.semicolon();

			return this.finishNode(node, "DeclareFunction");
		};

		pp.flowParseDeclare = function (node) {
			if (this.match(_types.types._class)) {
				return this.flowParseDeclareClass(node);
			} else if (this.match(_types.types._function)) {
				return this.flowParseDeclareFunction(node);
			} else if (this.match(_types.types._var)) {
				return this.flowParseDeclareVariable(node);
			} else if (this.isContextual("module")) {
				if (this.lookahead().type === _types.types.dot) {
					return this.flowParseDeclareModuleExports(node);
				} else {
					return this.flowParseDeclareModule(node);
				}
			} else if (this.isContextual("type")) {
				return this.flowParseDeclareTypeAlias(node);
			} else if (this.isContextual("interface")) {
				return this.flowParseDeclareInterface(node);
			} else {
				this.unexpected();
			}
		};

		pp.flowParseDeclareVariable = function (node) {
			this.next();
			node.id = this.flowParseTypeAnnotatableIdentifier();
			this.semicolon();
			return this.finishNode(node, "DeclareVariable");
		};

		pp.flowParseDeclareModule = function (node) {
			this.next();

			if (this.match(_types.types.string)) {
				node.id = this.parseExprAtom();
			} else {
				node.id = this.parseIdentifier();
			}

			var bodyNode = node.body = this.startNode();
			var body = bodyNode.body = [];
			this.expect(_types.types.braceL);
			while (!this.match(_types.types.braceR)) {
				var node2 = this.startNode();

				this.expectContextual("declare", "Unexpected token. Only declares are allowed inside declare module");

				body.push(this.flowParseDeclare(node2));
			}
			this.expect(_types.types.braceR);

			this.finishNode(bodyNode, "BlockStatement");
			return this.finishNode(node, "DeclareModule");
		};

		pp.flowParseDeclareModuleExports = function (node) {
			this.expectContextual("module");
			this.expect(_types.types.dot);
			this.expectContextual("exports");
			node.typeAnnotation = this.flowParseTypeAnnotation();
			return this.finishNode(node, "DeclareModuleExports");
		};

		pp.flowParseDeclareTypeAlias = function (node) {
			this.next();
			this.flowParseTypeAlias(node);
			return this.finishNode(node, "DeclareTypeAlias");
		};

		pp.flowParseDeclareInterface = function (node) {
			this.next();
			this.flowParseInterfaceish(node);
			return this.finishNode(node, "DeclareInterface");
		};

		pp.flowParseInterfaceish = function (node, allowStatic) {
			node.id = this.parseIdentifier();

			if (this.isRelational("<")) {
				node.typeParameters = this.flowParseTypeParameterDeclaration();
			} else {
				node.typeParameters = null;
			}

			node.extends = [];
			node.mixins = [];

			if (this.eat(_types.types._extends)) {
				do {
					node.extends.push(this.flowParseInterfaceExtends());
				} while (this.eat(_types.types.comma));
			}

			if (this.isContextual("mixins")) {
				this.next();
				do {
					node.mixins.push(this.flowParseInterfaceExtends());
				} while (this.eat(_types.types.comma));
			}

			node.body = this.flowParseObjectType(allowStatic);
		};

		pp.flowParseInterfaceExtends = function () {
			var node = this.startNode();

			node.id = this.flowParseQualifiedTypeIdentifier();
			if (this.isRelational("<")) {
				node.typeParameters = this.flowParseTypeParameterInstantiation();
			} else {
				node.typeParameters = null;
			}

			return this.finishNode(node, "InterfaceExtends");
		};

		pp.flowParseInterface = function (node) {
			this.flowParseInterfaceish(node, false);
			return this.finishNode(node, "InterfaceDeclaration");
		};

		pp.flowParseTypeAlias = function (node) {
			node.id = this.parseIdentifier();

			if (this.isRelational("<")) {
				node.typeParameters = this.flowParseTypeParameterDeclaration();
			} else {
				node.typeParameters = null;
			}

			node.right = this.flowParseTypeInitialiser(_types.types.eq, true);
			this.semicolon();

			return this.finishNode(node, "TypeAlias");
		};

		pp.flowParseTypeParameter = function () {
			var node = this.startNode();

			var variance = void 0;
			if (this.match(_types.types.plusMin)) {
				if (this.state.value === "+") {
					variance = "plus";
				} else if (this.state.value === "-") {
					variance = "minus";
				}
				this.eat(_types.types.plusMin);
			}

			var ident = this.flowParseTypeAnnotatableIdentifier(false, false);
			node.name = ident.name;
			node.variance = variance;
			node.bound = ident.typeAnnotation;

			if (this.match(_types.types.eq)) {
				this.eat(_types.types.eq);
				node.default = this.flowParseType();
			}

			return this.finishNode(node, "TypeParameter");
		};

		pp.flowParseTypeParameterDeclaration = function () {
			var oldInType = this.state.inType;
			var node = this.startNode();
			node.params = [];

			this.state.inType = true;

			if (this.isRelational("<") || this.match(_types.types.jsxTagStart)) {
				this.next();
			} else {
				this.unexpected();
			}

			do {
				node.params.push(this.flowParseTypeParameter());
				if (!this.isRelational(">")) {
					this.expect(_types.types.comma);
				}
			} while (!this.isRelational(">"));
			this.expectRelational(">");

			this.state.inType = oldInType;

			return this.finishNode(node, "TypeParameterDeclaration");
		};

		pp.flowParseTypeParameterInstantiation = function () {
			var node = this.startNode(),
			    oldInType = this.state.inType;
			node.params = [];

			this.state.inType = true;

			this.expectRelational("<");
			while (!this.isRelational(">")) {
				node.params.push(this.flowParseType());
				if (!this.isRelational(">")) {
					this.expect(_types.types.comma);
				}
			}
			this.expectRelational(">");

			this.state.inType = oldInType;

			return this.finishNode(node, "TypeParameterInstantiation");
		};

		pp.flowParseObjectPropertyKey = function () {
			return this.match(_types.types.num) || this.match(_types.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
		};

		pp.flowParseObjectTypeIndexer = function (node, isStatic) {
			node.static = isStatic;

			this.expect(_types.types.bracketL);
			node.id = this.flowParseObjectPropertyKey();
			node.key = this.flowParseTypeInitialiser();
			this.expect(_types.types.bracketR);
			node.value = this.flowParseTypeInitialiser();

			this.flowObjectTypeSemicolon();
			return this.finishNode(node, "ObjectTypeIndexer");
		};

		pp.flowParseObjectTypeMethodish = function (node) {
			node.params = [];
			node.rest = null;
			node.typeParameters = null;

			if (this.isRelational("<")) {
				node.typeParameters = this.flowParseTypeParameterDeclaration();
			}

			this.expect(_types.types.parenL);
			while (this.match(_types.types.name)) {
				node.params.push(this.flowParseFunctionTypeParam());
				if (!this.match(_types.types.parenR)) {
					this.expect(_types.types.comma);
				}
			}

			if (this.eat(_types.types.ellipsis)) {
				node.rest = this.flowParseFunctionTypeParam();
			}
			this.expect(_types.types.parenR);
			node.returnType = this.flowParseTypeInitialiser();

			return this.finishNode(node, "FunctionTypeAnnotation");
		};

		pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
			var node = this.startNodeAt(startPos, startLoc);
			node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
			node.static = isStatic;
			node.key = key;
			node.optional = false;
			this.flowObjectTypeSemicolon();
			return this.finishNode(node, "ObjectTypeProperty");
		};

		pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
			var valueNode = this.startNode();
			node.static = isStatic;
			node.value = this.flowParseObjectTypeMethodish(valueNode);
			this.flowObjectTypeSemicolon();
			return this.finishNode(node, "ObjectTypeCallProperty");
		};

		pp.flowParseObjectType = function (allowStatic, allowExact) {
			var nodeStart = this.startNode();
			var node = void 0;
			var propertyKey = void 0;
			var isStatic = void 0;

			nodeStart.callProperties = [];
			nodeStart.properties = [];
			nodeStart.indexers = [];

			var endDelim = void 0;
			var exact = void 0;
			if (allowExact && this.match(_types.types.braceBarL)) {
				this.expect(_types.types.braceBarL);
				endDelim = _types.types.braceBarR;
				exact = true;
			} else {
				this.expect(_types.types.braceL);
				endDelim = _types.types.braceR;
				exact = false;
			}

			nodeStart.exact = exact;

			while (!this.match(endDelim)) {
				var optional = false;
				var startPos = this.state.start,
				    startLoc = this.state.startLoc;
				node = this.startNode();
				if (allowStatic && this.isContextual("static")) {
					this.next();
					isStatic = true;
				}

				if (this.match(_types.types.bracketL)) {
					nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
				} else if (this.match(_types.types.parenL) || this.isRelational("<")) {
					nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
				} else {
					if (isStatic && this.match(_types.types.colon)) {
						propertyKey = this.parseIdentifier();
					} else {
						propertyKey = this.flowParseObjectPropertyKey();
					}
					if (this.isRelational("<") || this.match(_types.types.parenL)) {
						nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
					} else {
						if (this.eat(_types.types.question)) {
							optional = true;
						}
						node.key = propertyKey;
						node.value = this.flowParseTypeInitialiser();
						node.optional = optional;
						node.static = isStatic;
						this.flowObjectTypeSemicolon();
						nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
					}
				}
			}

			this.expect(endDelim);

			return this.finishNode(nodeStart, "ObjectTypeAnnotation");
		};

		pp.flowObjectTypeSemicolon = function () {
			if (!this.eat(_types.types.semi) && !this.eat(_types.types.comma) && !this.match(_types.types.braceR) && !this.match(_types.types.braceBarR)) {
				this.unexpected();
			}
		};

		pp.flowParseQualifiedTypeIdentifier = function (startPos, startLoc, id) {
			startPos = startPos || this.state.start;
			startLoc = startLoc || this.state.startLoc;
			var node = id || this.parseIdentifier();

			while (this.eat(_types.types.dot)) {
				var node2 = this.startNodeAt(startPos, startLoc);
				node2.qualification = node;
				node2.id = this.parseIdentifier();
				node = this.finishNode(node2, "QualifiedTypeIdentifier");
			}

			return node;
		};

		pp.flowParseGenericType = function (startPos, startLoc, id) {
			var node = this.startNodeAt(startPos, startLoc);

			node.typeParameters = null;
			node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);

			if (this.isRelational("<")) {
				node.typeParameters = this.flowParseTypeParameterInstantiation();
			}

			return this.finishNode(node, "GenericTypeAnnotation");
		};

		pp.flowParseTypeofType = function () {
			var node = this.startNode();
			this.expect(_types.types._typeof);
			node.argument = this.flowParsePrimaryType();
			return this.finishNode(node, "TypeofTypeAnnotation");
		};

		pp.flowParseTupleType = function () {
			var node = this.startNode();
			node.types = [];
			this.expect(_types.types.bracketL);

			while (this.state.pos < this.input.length && !this.match(_types.types.bracketR)) {
				node.types.push(this.flowParseType());
				if (this.match(_types.types.bracketR)) break;
				this.expect(_types.types.comma);
			}
			this.expect(_types.types.bracketR);
			return this.finishNode(node, "TupleTypeAnnotation");
		};

		pp.flowParseFunctionTypeParam = function () {
			var optional = false;
			var node = this.startNode();
			node.name = this.parseIdentifier();
			if (this.eat(_types.types.question)) {
				optional = true;
			}
			node.optional = optional;
			node.typeAnnotation = this.flowParseTypeInitialiser();
			return this.finishNode(node, "FunctionTypeParam");
		};

		pp.flowParseFunctionTypeParams = function () {
			var ret = { params: [], rest: null };
			while (this.match(_types.types.name)) {
				ret.params.push(this.flowParseFunctionTypeParam());
				if (!this.match(_types.types.parenR)) {
					this.expect(_types.types.comma);
				}
			}
			if (this.eat(_types.types.ellipsis)) {
				ret.rest = this.flowParseFunctionTypeParam();
			}
			return ret;
		};

		pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
			switch (id.name) {
				case "any":
					return this.finishNode(node, "AnyTypeAnnotation");

				case "void":
					return this.finishNode(node, "VoidTypeAnnotation");

				case "bool":
				case "boolean":
					return this.finishNode(node, "BooleanTypeAnnotation");

				case "mixed":
					return this.finishNode(node, "MixedTypeAnnotation");

				case "number":
					return this.finishNode(node, "NumberTypeAnnotation");

				case "string":
					return this.finishNode(node, "StringTypeAnnotation");

				default:
					return this.flowParseGenericType(startPos, startLoc, id);
			}
		};

		pp.flowParsePrimaryType = function () {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var node = this.startNode();
			var tmp = void 0;
			var type = void 0;
			var isGroupedType = false;

			switch (this.state.type) {
				case _types.types.name:
					return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

				case _types.types.braceL:
					return this.flowParseObjectType(false, false);

				case _types.types.braceBarL:
					return this.flowParseObjectType(false, true);

				case _types.types.bracketL:
					return this.flowParseTupleType();

				case _types.types.relational:
					if (this.state.value === "<") {
						node.typeParameters = this.flowParseTypeParameterDeclaration();
						this.expect(_types.types.parenL);
						tmp = this.flowParseFunctionTypeParams();
						node.params = tmp.params;
						node.rest = tmp.rest;
						this.expect(_types.types.parenR);

						this.expect(_types.types.arrow);

						node.returnType = this.flowParseType();

						return this.finishNode(node, "FunctionTypeAnnotation");
					}
					break;

				case _types.types.parenL:
					this.next();

					if (!this.match(_types.types.parenR) && !this.match(_types.types.ellipsis)) {
						if (this.match(_types.types.name)) {
							var token = this.lookahead().type;
							isGroupedType = token !== _types.types.question && token !== _types.types.colon;
						} else {
							isGroupedType = true;
						}
					}

					if (isGroupedType) {
						type = this.flowParseType();
						this.expect(_types.types.parenR);
						return type;
					}

					tmp = this.flowParseFunctionTypeParams();
					node.params = tmp.params;
					node.rest = tmp.rest;

					this.expect(_types.types.parenR);

					this.expect(_types.types.arrow);

					node.returnType = this.flowParseType();
					node.typeParameters = null;

					return this.finishNode(node, "FunctionTypeAnnotation");

				case _types.types.string:
					node.value = this.state.value;
					this.addExtra(node, "rawValue", node.value);
					this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
					this.next();
					return this.finishNode(node, "StringLiteralTypeAnnotation");

				case _types.types._true:case _types.types._false:
					node.value = this.match(_types.types._true);
					this.next();
					return this.finishNode(node, "BooleanLiteralTypeAnnotation");

				case _types.types.plusMin:
					if (this.state.value === "-") {
						this.next();
						if (!this.match(_types.types.num)) this.unexpected();

						node.value = -this.state.value;
						this.addExtra(node, "rawValue", node.value);
						this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
						this.next();
						return this.finishNode(node, "NumericLiteralTypeAnnotation");
					}

				case _types.types.num:
					node.value = this.state.value;
					this.addExtra(node, "rawValue", node.value);
					this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
					this.next();
					return this.finishNode(node, "NumericLiteralTypeAnnotation");

				case _types.types._null:
					node.value = this.match(_types.types._null);
					this.next();
					return this.finishNode(node, "NullLiteralTypeAnnotation");

				case _types.types._this:
					node.value = this.match(_types.types._this);
					this.next();
					return this.finishNode(node, "ThisTypeAnnotation");

				case _types.types.star:
					this.next();
					return this.finishNode(node, "ExistentialTypeParam");

				default:
					if (this.state.type.keyword === "typeof") {
						return this.flowParseTypeofType();
					}
			}

			this.unexpected();
		};

		pp.flowParsePostfixType = function () {
			var node = this.startNode();
			var type = node.elementType = this.flowParsePrimaryType();
			if (this.match(_types.types.bracketL)) {
				this.expect(_types.types.bracketL);
				this.expect(_types.types.bracketR);
				return this.finishNode(node, "ArrayTypeAnnotation");
			} else {
				return type;
			}
		};

		pp.flowParsePrefixType = function () {
			var node = this.startNode();
			if (this.eat(_types.types.question)) {
				node.typeAnnotation = this.flowParsePrefixType();
				return this.finishNode(node, "NullableTypeAnnotation");
			} else {
				return this.flowParsePostfixType();
			}
		};

		pp.flowParseIntersectionType = function () {
			var node = this.startNode();
			var type = this.flowParsePrefixType();
			node.types = [type];
			while (this.eat(_types.types.bitwiseAND)) {
				node.types.push(this.flowParsePrefixType());
			}
			return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
		};

		pp.flowParseUnionType = function () {
			var node = this.startNode();
			var type = this.flowParseIntersectionType();
			node.types = [type];
			while (this.eat(_types.types.bitwiseOR)) {
				node.types.push(this.flowParseIntersectionType());
			}
			return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
		};

		pp.flowParseType = function () {
			var oldInType = this.state.inType;
			this.state.inType = true;
			var type = this.flowParseUnionType();
			this.state.inType = oldInType;
			return type;
		};

		pp.flowParseTypeAnnotation = function () {
			var node = this.startNode();
			node.typeAnnotation = this.flowParseTypeInitialiser();
			return this.finishNode(node, "TypeAnnotation");
		};

		pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {

			var ident = this.parseIdentifier();
			var isOptionalParam = false;

			if (canBeOptionalParam && this.eat(_types.types.question)) {
				this.expect(_types.types.question);
				isOptionalParam = true;
			}

			if (requireTypeAnnotation || this.match(_types.types.colon)) {
				ident.typeAnnotation = this.flowParseTypeAnnotation();
				this.finishNode(ident, ident.type);
			}

			if (isOptionalParam) {
				ident.optional = true;
				this.finishNode(ident, ident.type);
			}

			return ident;
		};

		pp.typeCastToParameter = function (node) {
			node.expression.typeAnnotation = node.typeAnnotation;

			return this.finishNodeAt(node.expression, node.expression.type, node.typeAnnotation.end, node.typeAnnotation.loc.end);
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		exports.default = function (instance) {
			instance.extend("parseExprAtom", function (inner) {
				return function (refShortHandDefaultPos) {
					if (this.match(_types.types.jsxText)) {
						var node = this.parseLiteral(this.state.value, "JSXText");

						node.extra = null;
						return node;
					} else if (this.match(_types.types.jsxTagStart)) {
						return this.jsxParseElement();
					} else {
						return inner.call(this, refShortHandDefaultPos);
					}
				};
			});

			instance.extend("readToken", function (inner) {
				return function (code) {
					var context = this.curContext();

					if (context === _context.types.j_expr) {
						return this.jsxReadToken();
					}

					if (context === _context.types.j_oTag || context === _context.types.j_cTag) {
						if ((0, _identifier.isIdentifierStart)(code)) {
							return this.jsxReadWord();
						}

						if (code === 62) {
							++this.state.pos;
							return this.finishToken(_types.types.jsxTagEnd);
						}

						if ((code === 34 || code === 39) && context === _context.types.j_oTag) {
							return this.jsxReadString(code);
						}
					}

					if (code === 60 && this.state.exprAllowed) {
						++this.state.pos;
						return this.finishToken(_types.types.jsxTagStart);
					}

					return inner.call(this, code);
				};
			});

			instance.extend("updateContext", function (inner) {
				return function (prevType) {
					if (this.match(_types.types.braceL)) {
						var curContext = this.curContext();
						if (curContext === _context.types.j_oTag) {
							this.state.context.push(_context.types.braceExpression);
						} else if (curContext === _context.types.j_expr) {
							this.state.context.push(_context.types.templateQuasi);
						} else {
							inner.call(this, prevType);
						}
						this.state.exprAllowed = true;
					} else if (this.match(_types.types.slash) && prevType === _types.types.jsxTagStart) {
						this.state.context.length -= 2;
						this.state.context.push(_context.types.j_cTag);
						this.state.exprAllowed = false;
					} else {
						return inner.call(this, prevType);
					}
				};
			});
		};

		var _xhtml = __webpack_require__(398);

		var _xhtml2 = _interopRequireDefault(_xhtml);

		var _types = __webpack_require__(14);

		var _context = __webpack_require__(65);

		var _parser = __webpack_require__(13);

		var _parser2 = _interopRequireDefault(_parser);

		var _identifier = __webpack_require__(66);

		var _whitespace = __webpack_require__(40);

		function _interopRequireDefault(obj) {
			return obj && obj.__esModule ? obj : { default: obj };
		}

		var HEX_NUMBER = /^[\da-fA-F]+$/;
		var DECIMAL_NUMBER = /^\d+$/;

		_context.types.j_oTag = new _context.TokContext("<tag", false);
		_context.types.j_cTag = new _context.TokContext("</tag", false);
		_context.types.j_expr = new _context.TokContext("<tag>...</tag>", true, true);

		_types.types.jsxName = new _types.TokenType("jsxName");
		_types.types.jsxText = new _types.TokenType("jsxText", { beforeExpr: true });
		_types.types.jsxTagStart = new _types.TokenType("jsxTagStart", { startsExpr: true });
		_types.types.jsxTagEnd = new _types.TokenType("jsxTagEnd");

		_types.types.jsxTagStart.updateContext = function () {
			this.state.context.push(_context.types.j_expr);
			this.state.context.push(_context.types.j_oTag);
			this.state.exprAllowed = false;
		};

		_types.types.jsxTagEnd.updateContext = function (prevType) {
			var out = this.state.context.pop();
			if (out === _context.types.j_oTag && prevType === _types.types.slash || out === _context.types.j_cTag) {
				this.state.context.pop();
				this.state.exprAllowed = this.curContext() === _context.types.j_expr;
			} else {
				this.state.exprAllowed = true;
			}
		};

		var pp = _parser2.default.prototype;

		pp.jsxReadToken = function () {
			var out = "";
			var chunkStart = this.state.pos;
			for (;;) {
				if (this.state.pos >= this.input.length) {
					this.raise(this.state.start, "Unterminated JSX contents");
				}

				var ch = this.input.charCodeAt(this.state.pos);

				switch (ch) {
					case 60:
					case 123:
						if (this.state.pos === this.state.start) {
							if (ch === 60 && this.state.exprAllowed) {
								++this.state.pos;
								return this.finishToken(_types.types.jsxTagStart);
							}
							return this.getTokenFromCode(ch);
						}
						out += this.input.slice(chunkStart, this.state.pos);
						return this.finishToken(_types.types.jsxText, out);

					case 38:
						out += this.input.slice(chunkStart, this.state.pos);
						out += this.jsxReadEntity();
						chunkStart = this.state.pos;
						break;

					default:
						if ((0, _whitespace.isNewLine)(ch)) {
							out += this.input.slice(chunkStart, this.state.pos);
							out += this.jsxReadNewLine(true);
							chunkStart = this.state.pos;
						} else {
							++this.state.pos;
						}
				}
			}
		};

		pp.jsxReadNewLine = function (normalizeCRLF) {
			var ch = this.input.charCodeAt(this.state.pos);
			var out = void 0;
			++this.state.pos;
			if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
				++this.state.pos;
				out = normalizeCRLF ? "\n" : "\r\n";
			} else {
				out = String.fromCharCode(ch);
			}
			++this.state.curLine;
			this.state.lineStart = this.state.pos;

			return out;
		};

		pp.jsxReadString = function (quote) {
			var out = "";
			var chunkStart = ++this.state.pos;
			for (;;) {
				if (this.state.pos >= this.input.length) {
					this.raise(this.state.start, "Unterminated string constant");
				}

				var ch = this.input.charCodeAt(this.state.pos);
				if (ch === quote) break;
				if (ch === 38) {
					out += this.input.slice(chunkStart, this.state.pos);
					out += this.jsxReadEntity();
					chunkStart = this.state.pos;
				} else if ((0, _whitespace.isNewLine)(ch)) {
					out += this.input.slice(chunkStart, this.state.pos);
					out += this.jsxReadNewLine(false);
					chunkStart = this.state.pos;
				} else {
					++this.state.pos;
				}
			}
			out += this.input.slice(chunkStart, this.state.pos++);
			return this.finishToken(_types.types.string, out);
		};

		pp.jsxReadEntity = function () {
			var str = "";
			var count = 0;
			var entity = void 0;
			var ch = this.input[this.state.pos];

			var startPos = ++this.state.pos;
			while (this.state.pos < this.input.length && count++ < 10) {
				ch = this.input[this.state.pos++];
				if (ch === ";") {
					if (str[0] === "#") {
						if (str[1] === "x") {
							str = str.substr(2);
							if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
						} else {
							str = str.substr(1);
							if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
						}
					} else {
						entity = _xhtml2.default[str];
					}
					break;
				}
				str += ch;
			}
			if (!entity) {
				this.state.pos = startPos;
				return "&";
			}
			return entity;
		};

		pp.jsxReadWord = function () {
			var ch = void 0;
			var start = this.state.pos;
			do {
				ch = this.input.charCodeAt(++this.state.pos);
			} while ((0, _identifier.isIdentifierChar)(ch) || ch === 45);
			return this.finishToken(_types.types.jsxName, this.input.slice(start, this.state.pos));
		};

		function getQualifiedJSXName(object) {
			if (object.type === "JSXIdentifier") {
				return object.name;
			}

			if (object.type === "JSXNamespacedName") {
				return object.namespace.name + ":" + object.name.name;
			}

			if (object.type === "JSXMemberExpression") {
				return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
			}
		}

		pp.jsxParseIdentifier = function () {
			var node = this.startNode();
			if (this.match(_types.types.jsxName)) {
				node.name = this.state.value;
			} else if (this.state.type.keyword) {
				node.name = this.state.type.keyword;
			} else {
				this.unexpected();
			}
			this.next();
			return this.finishNode(node, "JSXIdentifier");
		};

		pp.jsxParseNamespacedName = function () {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var name = this.jsxParseIdentifier();
			if (!this.eat(_types.types.colon)) return name;

			var node = this.startNodeAt(startPos, startLoc);
			node.namespace = name;
			node.name = this.jsxParseIdentifier();
			return this.finishNode(node, "JSXNamespacedName");
		};

		pp.jsxParseElementName = function () {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			var node = this.jsxParseNamespacedName();
			while (this.eat(_types.types.dot)) {
				var newNode = this.startNodeAt(startPos, startLoc);
				newNode.object = node;
				newNode.property = this.jsxParseIdentifier();
				node = this.finishNode(newNode, "JSXMemberExpression");
			}
			return node;
		};

		pp.jsxParseAttributeValue = function () {
			var node = void 0;
			switch (this.state.type) {
				case _types.types.braceL:
					node = this.jsxParseExpressionContainer();
					if (node.expression.type === "JSXEmptyExpression") {
						this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
					} else {
						return node;
					}

				case _types.types.jsxTagStart:
				case _types.types.string:
					node = this.parseExprAtom();
					node.extra = null;
					return node;

				default:
					this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
			}
		};

		pp.jsxParseEmptyExpression = function () {
			var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
			return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
		};

		pp.jsxParseSpreadChild = function () {
			var node = this.startNode();
			this.expect(_types.types.braceL);
			this.expect(_types.types.ellipsis);
			node.expression = this.parseExpression();
			this.expect(_types.types.braceR);

			return this.finishNode(node, "JSXSpreadChild");
		};

		pp.jsxParseExpressionContainer = function () {
			var node = this.startNode();
			this.next();
			if (this.match(_types.types.braceR)) {
				node.expression = this.jsxParseEmptyExpression();
			} else {
				node.expression = this.parseExpression();
			}
			this.expect(_types.types.braceR);
			return this.finishNode(node, "JSXExpressionContainer");
		};

		pp.jsxParseAttribute = function () {
			var node = this.startNode();
			if (this.eat(_types.types.braceL)) {
				this.expect(_types.types.ellipsis);
				node.argument = this.parseMaybeAssign();
				this.expect(_types.types.braceR);
				return this.finishNode(node, "JSXSpreadAttribute");
			}
			node.name = this.jsxParseNamespacedName();
			node.value = this.eat(_types.types.eq) ? this.jsxParseAttributeValue() : null;
			return this.finishNode(node, "JSXAttribute");
		};

		pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
			var node = this.startNodeAt(startPos, startLoc);
			node.attributes = [];
			node.name = this.jsxParseElementName();
			while (!this.match(_types.types.slash) && !this.match(_types.types.jsxTagEnd)) {
				node.attributes.push(this.jsxParseAttribute());
			}
			node.selfClosing = this.eat(_types.types.slash);
			this.expect(_types.types.jsxTagEnd);
			return this.finishNode(node, "JSXOpeningElement");
		};

		pp.jsxParseClosingElementAt = function (startPos, startLoc) {
			var node = this.startNodeAt(startPos, startLoc);
			node.name = this.jsxParseElementName();
			this.expect(_types.types.jsxTagEnd);
			return this.finishNode(node, "JSXClosingElement");
		};

		pp.jsxParseElementAt = function (startPos, startLoc) {
			var node = this.startNodeAt(startPos, startLoc);
			var children = [];
			var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
			var closingElement = null;

			if (!openingElement.selfClosing) {
				contents: for (;;) {
					switch (this.state.type) {
						case _types.types.jsxTagStart:
							startPos = this.state.start;startLoc = this.state.startLoc;
							this.next();
							if (this.eat(_types.types.slash)) {
								closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
								break contents;
							}
							children.push(this.jsxParseElementAt(startPos, startLoc));
							break;

						case _types.types.jsxText:
							children.push(this.parseExprAtom());
							break;

						case _types.types.braceL:
							if (this.lookahead().type === _types.types.ellipsis) {
								children.push(this.jsxParseSpreadChild());
							} else {
								children.push(this.jsxParseExpressionContainer());
							}

							break;

						default:
							this.unexpected();
					}
				}

				if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
					this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
				}
			}

			node.openingElement = openingElement;
			node.closingElement = closingElement;
			node.children = children;
			if (this.match(_types.types.relational) && this.state.value === "<") {
				this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
			}
			return this.finishNode(node, "JSXElement");
		};

		pp.jsxParseElement = function () {
			var startPos = this.state.start,
			    startLoc = this.state.startLoc;
			this.next();
			return this.jsxParseElementAt(startPos, startLoc);
		};
	}, function (module, exports) {

		"use strict";

		exports.__esModule = true;
		exports.default = {
			quot: "\"",
			amp: "&",
			apos: "'",
			lt: "<",
			gt: ">",
			nbsp: " ",
			iexcl: "¡",
			cent: "¢",
			pound: "£",
			curren: "¤",
			yen: "¥",
			brvbar: "¦",
			sect: "§",
			uml: "¨",
			copy: "©",
			ordf: "ª",
			laquo: "«",
			not: "¬",
			shy: "­",
			reg: "®",
			macr: "¯",
			deg: "°",
			plusmn: "±",
			sup2: "²",
			sup3: "³",
			acute: "´",
			micro: "µ",
			para: "¶",
			middot: "·",
			cedil: "¸",
			sup1: "¹",
			ordm: "º",
			raquo: "»",
			frac14: "¼",
			frac12: "½",
			frac34: "¾",
			iquest: "¿",
			Agrave: "À",
			Aacute: "Á",
			Acirc: "Â",
			Atilde: "Ã",
			Auml: "Ä",
			Aring: "Å",
			AElig: "Æ",
			Ccedil: "Ç",
			Egrave: "È",
			Eacute: "É",
			Ecirc: "Ê",
			Euml: "Ë",
			Igrave: "Ì",
			Iacute: "Í",
			Icirc: "Î",
			Iuml: "Ï",
			ETH: "Ð",
			Ntilde: "Ñ",
			Ograve: "Ò",
			Oacute: "Ó",
			Ocirc: "Ô",
			Otilde: "Õ",
			Ouml: "Ö",
			times: "×",
			Oslash: "Ø",
			Ugrave: "Ù",
			Uacute: "Ú",
			Ucirc: "Û",
			Uuml: "Ü",
			Yacute: "Ý",
			THORN: "Þ",
			szlig: "ß",
			agrave: "à",
			aacute: "á",
			acirc: "â",
			atilde: "ã",
			auml: "ä",
			aring: "å",
			aelig: "æ",
			ccedil: "ç",
			egrave: "è",
			eacute: "é",
			ecirc: "ê",
			euml: "ë",
			igrave: "ì",
			iacute: "í",
			icirc: "î",
			iuml: "ï",
			eth: "ð",
			ntilde: "ñ",
			ograve: "ò",
			oacute: "ó",
			ocirc: "ô",
			otilde: "õ",
			ouml: "ö",
			divide: "÷",
			oslash: "ø",
			ugrave: "ù",
			uacute: "ú",
			ucirc: "û",
			uuml: "ü",
			yacute: "ý",
			thorn: "þ",
			yuml: "ÿ",
			OElig: "Œ",
			oelig: "œ",
			Scaron: "Š",
			scaron: "š",
			Yuml: "Ÿ",
			fnof: "ƒ",
			circ: "ˆ",
			tilde: "˜",
			Alpha: "Α",
			Beta: "Β",
			Gamma: "Γ",
			Delta: "Δ",
			Epsilon: "Ε",
			Zeta: "Ζ",
			Eta: "Η",
			Theta: "Θ",
			Iota: "Ι",
			Kappa: "Κ",
			Lambda: "Λ",
			Mu: "Μ",
			Nu: "Ν",
			Xi: "Ξ",
			Omicron: "Ο",
			Pi: "Π",
			Rho: "Ρ",
			Sigma: "Σ",
			Tau: "Τ",
			Upsilon: "Υ",
			Phi: "Φ",
			Chi: "Χ",
			Psi: "Ψ",
			Omega: "Ω",
			alpha: "α",
			beta: "β",
			gamma: "γ",
			delta: "δ",
			epsilon: "ε",
			zeta: "ζ",
			eta: "η",
			theta: "θ",
			iota: "ι",
			kappa: "κ",
			lambda: "λ",
			mu: "μ",
			nu: "ν",
			xi: "ξ",
			omicron: "ο",
			pi: "π",
			rho: "ρ",
			sigmaf: "ς",
			sigma: "σ",
			tau: "τ",
			upsilon: "υ",
			phi: "φ",
			chi: "χ",
			psi: "ψ",
			omega: "ω",
			thetasym: "ϑ",
			upsih: "ϒ",
			piv: "ϖ",
			ensp: " ",
			emsp: " ",
			thinsp: " ",
			zwnj: "‌",
			zwj: "‍",
			lrm: "‎",
			rlm: "‏",
			ndash: "–",
			mdash: "—",
			lsquo: "‘",
			rsquo: "’",
			sbquo: "‚",
			ldquo: "“",
			rdquo: "”",
			bdquo: "„",
			dagger: "†",
			Dagger: "‡",
			bull: "•",
			hellip: "…",
			permil: "‰",
			prime: "′",
			Prime: "″",
			lsaquo: "‹",
			rsaquo: "›",
			oline: "‾",
			frasl: "⁄",
			euro: "€",
			image: "ℑ",
			weierp: "℘",
			real: "ℜ",
			trade: "™",
			alefsym: "ℵ",
			larr: "←",
			uarr: "↑",
			rarr: "→",
			darr: "↓",
			harr: "↔",
			crarr: "↵",
			lArr: "⇐",
			uArr: "⇑",
			rArr: "⇒",
			dArr: "⇓",
			hArr: "⇔",
			forall: "∀",
			part: "∂",
			exist: "∃",
			empty: "∅",
			nabla: "∇",
			isin: "∈",
			notin: "∉",
			ni: "∋",
			prod: "∏",
			sum: "∑",
			minus: "−",
			lowast: "∗",
			radic: "√",
			prop: "∝",
			infin: "∞",
			ang: "∠",
			and: "∧",
			or: "∨",
			cap: "∩",
			cup: "∪",
			"int": "∫",
			there4: "∴",
			sim: "∼",
			cong: "≅",
			asymp: "≈",
			ne: "≠",
			equiv: "≡",
			le: "≤",
			ge: "≥",
			sub: "⊂",
			sup: "⊃",
			nsub: "⊄",
			sube: "⊆",
			supe: "⊇",
			oplus: "⊕",
			otimes: "⊗",
			perp: "⊥",
			sdot: "⋅",
			lceil: "⌈",
			rceil: "⌉",
			lfloor: "⌊",
			rfloor: "⌋",
			lang: "〈",
			rang: "〉",
			loz: "◊",
			spades: "♠",
			clubs: "♣",
			hearts: "♥",
			diams: "♦"
		};
	}, function (module, exports, __webpack_require__) {

		"use strict";

		exports.__esModule = true;

		var _location = __webpack_require__(87);

		var _context = __webpack_require__(65);

		var _types = __webpack_require__(14);

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var State = function () {
			function State() {
				_classCallCheck(this, State);
			}

			State.prototype.init = function init(options, input) {
				this.strict = options.strictMode === false ? false : options.sourceType === "module";

				this.input = input;

				this.potentialArrowAt = -1;

				this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;

				this.labels = [];

				this.decorators = [];

				this.tokens = [];

				this.comments = [];

				this.trailingComments = [];
				this.leadingComments = [];
				this.commentStack = [];

				this.pos = this.lineStart = 0;
				this.curLine = 1;

				this.type = _types.types.eof;
				this.value = null;
				this.start = this.end = this.pos;
				this.startLoc = this.endLoc = this.curPosition();

				this.lastTokEndLoc = this.lastTokStartLoc = null;
				this.lastTokStart = this.lastTokEnd = this.pos;

				this.context = [_context.types.braceStatement];
				this.exprAllowed = true;

				this.containsEsc = this.containsOctal = false;
				this.octalPosition = null;

				return this;
			};

			State.prototype.curPosition = function curPosition() {
				return new _location.Position(this.curLine, this.pos - this.lineStart);
			};

			State.prototype.clone = function clone(skipArrays) {
				var state = new State();
				for (var key in this) {
					var val = this[key];

					if ((!skipArrays || key === "context") && Array.isArray(val)) {
						val = val.slice();
					}

					state[key] = val;
				}
				return state;
			};

			return State;
		}();

		exports.default = State;
	}, function (module, exports) {

		module.exports = balanced;
		function balanced(a, b, str) {
			if (a instanceof RegExp) a = maybeMatch(a, str);
			if (b instanceof RegExp) b = maybeMatch(b, str);

			var r = range(a, b, str);

			return r && {
				start: r[0],
				end: r[1],
				pre: str.slice(0, r[0]),
				body: str.slice(r[0] + a.length, r[1]),
				post: str.slice(r[1] + b.length)
			};
		}

		function maybeMatch(reg, str) {
			var m = str.match(reg);
			return m ? m[0] : null;
		}

		balanced.range = range;
		function range(a, b, str) {
			var begs, beg, left, right, result;
			var ai = str.indexOf(a);
			var bi = str.indexOf(b, ai + 1);
			var i = ai;

			if (ai >= 0 && bi > 0) {
				begs = [];
				left = str.length;

				while (i >= 0 && !result) {
					if (i == ai) {
						begs.push(i);
						ai = str.indexOf(a, i + 1);
					} else if (begs.length == 1) {
						result = [begs.pop(), bi];
					} else {
						beg = begs.pop();
						if (beg < left) {
							left = beg;
							right = bi;
						}

						bi = str.indexOf(b, i + 1);
					}

					i = ai < bi && ai >= 0 ? ai : bi;
				}

				if (begs.length) {
					result = [left, right];
				}
			}

			return result;
		}
	}, function (module, exports) {

		'use strict';

		exports.toByteArray = toByteArray;
		exports.fromByteArray = fromByteArray;

		var lookup = [];
		var revLookup = [];
		var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

		function init() {
			var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
			for (var i = 0, len = code.length; i < len; ++i) {
				lookup[i] = code[i];
				revLookup[code.charCodeAt(i)] = i;
			}

			revLookup['-'.charCodeAt(0)] = 62;
			revLookup['_'.charCodeAt(0)] = 63;
		}

		init();

		function toByteArray(b64) {
			var i, j, l, tmp, placeHolders, arr;
			var len = b64.length;

			if (len % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4');
			}

			placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

			arr = new Arr(len * 3 / 4 - placeHolders);

			l = placeHolders > 0 ? len - 4 : len;

			var L = 0;

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
				arr[L++] = tmp >> 16 & 0xFF;
				arr[L++] = tmp >> 8 & 0xFF;
				arr[L++] = tmp & 0xFF;
			}

			if (placeHolders === 2) {
				tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
				arr[L++] = tmp & 0xFF;
			} else if (placeHolders === 1) {
				tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
				arr[L++] = tmp >> 8 & 0xFF;
				arr[L++] = tmp & 0xFF;
			}

			return arr;
		}

		function tripletToBase64(num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		}

		function encodeChunk(uint8, start, end) {
			var tmp;
			var output = [];
			for (var i = start; i < end; i += 3) {
				tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
				output.push(tripletToBase64(tmp));
			}
			return output.join('');
		}

		function fromByteArray(uint8) {
			var tmp;
			var len = uint8.length;
			var extraBytes = len % 3;
			var output = '';
			var parts = [];
			var maxChunkLength = 16383;
			for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
				parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
			}

			if (extraBytes === 1) {
				tmp = uint8[len - 1];
				output += lookup[tmp >> 2];
				output += lookup[tmp << 4 & 0x3F];
				output += '==';
			} else if (extraBytes === 2) {
				tmp = (uint8[len - 2] << 8) + uint8[len - 1];
				output += lookup[tmp >> 10];
				output += lookup[tmp >> 4 & 0x3F];
				output += lookup[tmp << 2 & 0x3F];
				output += '=';
			}

			parts.push(output);

			return parts.join('');
		}
	}, function (module, exports, __webpack_require__) {

		var concatMap = __webpack_require__(405);
		var balanced = __webpack_require__(400);

		module.exports = expandTop;

		var escSlash = '\0SLASH' + Math.random() + '\0';
		var escOpen = '\0OPEN' + Math.random() + '\0';
		var escClose = '\0CLOSE' + Math.random() + '\0';
		var escComma = '\0COMMA' + Math.random() + '\0';
		var escPeriod = '\0PERIOD' + Math.random() + '\0';

		function numeric(str) {
			return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
		}

		function escapeBraces(str) {
			return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
		}

		function unescapeBraces(str) {
			return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
		}

		function parseCommaParts(str) {
			if (!str) return [''];

			var parts = [];
			var m = balanced('{', '}', str);

			if (!m) return str.split(',');

			var pre = m.pre;
			var body = m.body;
			var post = m.post;
			var p = pre.split(',');

			p[p.length - 1] += '{' + body + '}';
			var postParts = parseCommaParts(post);
			if (post.length) {
				p[p.length - 1] += postParts.shift();
				p.push.apply(p, postParts);
			}

			parts.push.apply(parts, p);

			return parts;
		}

		function expandTop(str) {
			if (!str) return [];

			if (str.substr(0, 2) === '{}') {
				str = '\\{\\}' + str.substr(2);
			}

			return expand(escapeBraces(str), true).map(unescapeBraces);
		}

		function identity(e) {
			return e;
		}

		function embrace(str) {
			return '{' + str + '}';
		}
		function isPadded(el) {
			return (/^-?0\d/.test(el)
			);
		}

		function lte(i, y) {
			return i <= y;
		}
		function gte(i, y) {
			return i >= y;
		}

		function expand(str, isTop) {
			var expansions = [];

			var m = balanced('{', '}', str);
			if (!m || /\$$/.test(m.pre)) return [str];

			var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
			var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
			var isSequence = isNumericSequence || isAlphaSequence;
			var isOptions = /^(.*,)+(.+)?$/.test(m.body);
			if (!isSequence && !isOptions) {
				if (m.post.match(/,.*\}/)) {
					str = m.pre + '{' + m.body + escClose + m.post;
					return expand(str);
				}
				return [str];
			}

			var n;
			if (isSequence) {
				n = m.body.split(/\.\./);
			} else {
				n = parseCommaParts(m.body);
				if (n.length === 1) {
					n = expand(n[0], false).map(embrace);
					if (n.length === 1) {
						var post = m.post.length ? expand(m.post, false) : [''];
						return post.map(function (p) {
							return m.pre + n[0] + p;
						});
					}
				}
			}

			var pre = m.pre;
			var post = m.post.length ? expand(m.post, false) : [''];

			var N;

			if (isSequence) {
				var x = numeric(n[0]);
				var y = numeric(n[1]);
				var width = Math.max(n[0].length, n[1].length);
				var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
				var test = lte;
				var reverse = y < x;
				if (reverse) {
					incr *= -1;
					test = gte;
				}
				var pad = n.some(isPadded);

				N = [];

				for (var i = x; test(i, y); i += incr) {
					var c;
					if (isAlphaSequence) {
						c = String.fromCharCode(i);
						if (c === '\\') c = '';
					} else {
						c = String(i);
						if (pad) {
							var need = width - c.length;
							if (need > 0) {
								var z = new Array(need + 1).join('0');
								if (i < 0) c = '-' + z + c.slice(1);else c = z + c;
							}
						}
					}
					N.push(c);
				}
			} else {
				N = concatMap(n, function (el) {
					return expand(el, false);
				});
			}

			for (var j = 0; j < N.length; j++) {
				for (var k = 0; k < post.length; k++) {
					var expansion = pre + N[j] + post[k];
					if (!isTop || isSequence || expansion) expansions.push(expansion);
				}
			}

			return expansions;
		}
	}, function (module, exports) {

		var toString = {}.toString;

		module.exports = Array.isArray || function (arr) {
			return toString.call(arr) == '[object Array]';
		};
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			'use strict';

			var escapeStringRegexp = __webpack_require__(458);
			var ansiStyles = __webpack_require__(285);
			var stripAnsi = __webpack_require__(626);
			var hasAnsi = __webpack_require__(462);
			var supportsColor = __webpack_require__(627);
			var defineProps = Object.defineProperties;
			var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

			function Chalk(options) {
				this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
			}

			if (isSimpleWindowsTerm) {
				ansiStyles.blue.open = '\x1B[94m';
			}

			var styles = function () {
				var ret = {};

				Object.keys(ansiStyles).forEach(function (key) {
					ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

					ret[key] = {
						get: function get() {
							return build.call(this, this._styles.concat(key));
						}
					};
				});

				return ret;
			}();

			var proto = defineProps(function chalk() {}, styles);

			function build(_styles) {
				var builder = function builder() {
					return applyStyle.apply(builder, arguments);
				};

				builder._styles = _styles;
				builder.enabled = this.enabled;

				builder.__proto__ = proto;

				return builder;
			}

			function applyStyle() {
				var args = arguments;
				var argsLen = args.length;
				var str = argsLen !== 0 && String(arguments[0]);

				if (argsLen > 1) {
					for (var a = 1; a < argsLen; a++) {
						str += ' ' + args[a];
					}
				}

				if (!this.enabled || !str) {
					return str;
				}

				var nestedStyles = this._styles;
				var i = nestedStyles.length;

				var originalDim = ansiStyles.dim.open;
				if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
					ansiStyles.dim.open = '';
				}

				while (i--) {
					var code = ansiStyles[nestedStyles[i]];

					str = code.open + str.replace(code.closeRe, code.open) + code.close;
				}

				ansiStyles.dim.open = originalDim;

				return str;
			}

			function init() {
				var ret = {};

				Object.keys(styles).forEach(function (name) {
					ret[name] = {
						get: function get() {
							return build.call(this, [name]);
						}
					};
				});

				return ret;
			}

			defineProps(Chalk.prototype, init());

			module.exports = new Chalk();
			module.exports.styles = ansiStyles;
			module.exports.hasColor = hasAnsi;
			module.exports.stripColor = stripAnsi;
			module.exports.supportsColor = supportsColor;
		}).call(exports, __webpack_require__(26));
	}, function (module, exports) {

		module.exports = function (xs, fn) {
			var res = [];
			for (var i = 0; i < xs.length; i++) {
				var x = fn(xs[i], i);
				if (isArray(x)) res.push.apply(res, x);else res.push(x);
			}
			return res;
		};

		var isArray = Array.isArray || function (xs) {
			return Object.prototype.toString.call(xs) === '[object Array]';
		};
	}, function (module, exports, __webpack_require__) {
		(function (Buffer) {
			'use strict';

			var fs = __webpack_require__(73);
			var path = __webpack_require__(16);

			var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
			var mapFileCommentRx = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;

			function decodeBase64(base64) {
				return new Buffer(base64, 'base64').toString();
			}

			function stripComment(sm) {
				return sm.split(',').pop();
			}

			function readFromFileMap(sm, dir) {

				var r = mapFileCommentRx.exec(sm);
				mapFileCommentRx.lastIndex = 0;

				var filename = r[1] || r[2];
				var filepath = path.resolve(dir, filename);

				try {
					return fs.readFileSync(filepath, 'utf8');
				} catch (e) {
					throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
				}
			}

			function Converter(sm, opts) {
				opts = opts || {};

				if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
				if (opts.hasComment) sm = stripComment(sm);
				if (opts.isEncoded) sm = decodeBase64(sm);
				if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

				this.sourcemap = sm;
			}

			function convertFromLargeSource(content) {
				var lines = content.split('\n');
				var line;

				for (var i = lines.length - 1; i > 0; i--) {
					line = lines[i];
					if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
				}
			}

			Converter.prototype.toJSON = function (space) {
				return JSON.stringify(this.sourcemap, null, space);
			};

			Converter.prototype.toBase64 = function () {
				var json = this.toJSON();
				return new Buffer(json).toString('base64');
			};

			Converter.prototype.toComment = function (options) {
				var base64 = this.toBase64();
				var data = 'sourceMappingURL=data:application/json;base64,' + base64;
				return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
			};

			Converter.prototype.toObject = function () {
				return JSON.parse(this.toJSON());
			};

			Converter.prototype.addProperty = function (key, value) {
				if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
				return this.setProperty(key, value);
			};

			Converter.prototype.setProperty = function (key, value) {
				this.sourcemap[key] = value;
				return this;
			};

			Converter.prototype.getProperty = function (key) {
				return this.sourcemap[key];
			};

			exports.fromObject = function (obj) {
				return new Converter(obj);
			};

			exports.fromJSON = function (json) {
				return new Converter(json, { isJSON: true });
			};

			exports.fromBase64 = function (base64) {
				return new Converter(base64, { isEncoded: true });
			};

			exports.fromComment = function (comment) {
				comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');

				return new Converter(comment, { isEncoded: true, hasComment: true });
			};

			exports.fromMapFileComment = function (comment, dir) {
				return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
			};

			exports.fromSource = function (content, largeSource) {
				if (largeSource) {
					var res = convertFromLargeSource(content);
					return res ? res : null;
				}

				var m = content.match(commentRx);
				commentRx.lastIndex = 0;
				return m ? exports.fromComment(m.pop()) : null;
			};

			exports.fromMapFileSource = function (content, dir) {
				var m = content.match(mapFileCommentRx);
				mapFileCommentRx.lastIndex = 0;
				return m ? exports.fromMapFileComment(m.pop(), dir) : null;
			};

			exports.removeComments = function (src) {
				commentRx.lastIndex = 0;
				return src.replace(commentRx, '');
			};

			exports.removeMapFileComments = function (src) {
				mapFileCommentRx.lastIndex = 0;
				return src.replace(mapFileCommentRx, '');
			};

			exports.generateMapFileComment = function (file, options) {
				var data = 'sourceMappingURL=' + file;
				return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
			};

			Object.defineProperty(exports, 'commentRegex', {
				get: function getCommentRegex() {
					commentRx.lastIndex = 0;
					return commentRx;
				}
			});

			Object.defineProperty(exports, 'mapFileCommentRegex', {
				get: function getMapFileCommentRegex() {
					mapFileCommentRx.lastIndex = 0;
					return mapFileCommentRx;
				}
			});
		}).call(exports, __webpack_require__(227).Buffer);
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(70);
		__webpack_require__(164);
		module.exports = __webpack_require__(443);
	}, function (module, exports, __webpack_require__) {

		var core = __webpack_require__(4),
		    $JSON = core.JSON || (core.JSON = { stringify: JSON.stringify });
		module.exports = function stringify(it) {
			return $JSON.stringify.apply($JSON, arguments);
		};
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(96);
		__webpack_require__(164);
		__webpack_require__(70);
		__webpack_require__(445);
		__webpack_require__(453);
		module.exports = __webpack_require__(4).Map;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(446);
		module.exports = 0x1fffffffffffff;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(447);
		module.exports = __webpack_require__(4).Object.assign;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(448);
		var $Object = __webpack_require__(4).Object;
		module.exports = function create(P, D) {
			return $Object.create(P, D);
		};
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(165);
		module.exports = __webpack_require__(4).Object.getOwnPropertySymbols;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(449);
		module.exports = __webpack_require__(4).Object.keys;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(450);
		module.exports = __webpack_require__(4).Object.setPrototypeOf;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(165);
		module.exports = __webpack_require__(4).Symbol['for'];
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(165);
		__webpack_require__(96);
		__webpack_require__(454);
		__webpack_require__(455);
		module.exports = __webpack_require__(4).Symbol;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(164);
		__webpack_require__(70);
		module.exports = __webpack_require__(163).f('iterator');
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(96);
		__webpack_require__(70);
		__webpack_require__(451);
		module.exports = __webpack_require__(4).WeakMap;
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(96);
		__webpack_require__(70);
		__webpack_require__(452);
		module.exports = __webpack_require__(4).WeakSet;
	}, function (module, exports) {

		module.exports = function (it) {
			if (typeof it != 'function') throw TypeError(it + ' is not a function!');
			return it;
		};
	}, function (module, exports) {

		module.exports = function () {};
	}, function (module, exports, __webpack_require__) {

		var forOf = __webpack_require__(89);

		module.exports = function (iter, ITERATOR) {
			var result = [];
			forOf(iter, false, result.push, result, ITERATOR);
			return result;
		};
	}, function (module, exports, __webpack_require__) {
		var toIObject = __webpack_require__(35),
		    toLength = __webpack_require__(160),
		    toIndex = __webpack_require__(442);
		module.exports = function (IS_INCLUDES) {
			return function ($this, el, fromIndex) {
				var O = toIObject($this),
				    length = toLength(O.length),
				    index = toIndex(fromIndex, length),
				    value;

				if (IS_INCLUDES && el != el) while (length > index) {
					value = O[index++];
					if (value != value) return true;
				} else for (; length > index; index++) {
					if (IS_INCLUDES || index in O) {
						if (O[index] === el) return IS_INCLUDES || index || 0;
					}
				}return !IS_INCLUDES && -1;
			};
		};
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(21),
		    isArray = __webpack_require__(232),
		    SPECIES = __webpack_require__(11)('species');

		module.exports = function (original) {
			var C;
			if (isArray(original)) {
				C = original.constructor;

				if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
				if (isObject(C)) {
					C = C[SPECIES];
					if (C === null) C = undefined;
				}
			}return C === undefined ? Array : C;
		};
	}, function (module, exports, __webpack_require__) {
		var speciesConstructor = __webpack_require__(425);

		module.exports = function (original, length) {
			return new (speciesConstructor(original))(length);
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var dP = __webpack_require__(22).f,
		    create = __webpack_require__(90),
		    redefineAll = __webpack_require__(155),
		    ctx = __webpack_require__(67),
		    anInstance = __webpack_require__(146),
		    defined = __webpack_require__(88),
		    forOf = __webpack_require__(89),
		    $iterDefine = __webpack_require__(152),
		    step = __webpack_require__(233),
		    setSpecies = __webpack_require__(440),
		    DESCRIPTORS = __webpack_require__(19),
		    fastKey = __webpack_require__(69).fastKey,
		    SIZE = DESCRIPTORS ? '_s' : 'size';

		var getEntry = function getEntry(that, key) {
			var index = fastKey(key),
			    entry;
			if (index !== 'F') return that._i[index];

			for (entry = that._f; entry; entry = entry.n) {
				if (entry.k == key) return entry;
			}
		};

		module.exports = {
			getConstructor: function getConstructor(wrapper, NAME, IS_MAP, ADDER) {
				var C = wrapper(function (that, iterable) {
					anInstance(that, C, NAME, '_i');
					that._i = create(null);
					that._f = undefined;
					that._l = undefined;
					that[SIZE] = 0;
					if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
				});
				redefineAll(C.prototype, {
					clear: function clear() {
						for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
							entry.r = true;
							if (entry.p) entry.p = entry.p.n = undefined;
							delete data[entry.i];
						}
						that._f = that._l = undefined;
						that[SIZE] = 0;
					},

					'delete': function _delete(key) {
						var that = this,
						    entry = getEntry(that, key);
						if (entry) {
							var next = entry.n,
							    prev = entry.p;
							delete that._i[entry.i];
							entry.r = true;
							if (prev) prev.n = next;
							if (next) next.p = prev;
							if (that._f == entry) that._f = next;
							if (that._l == entry) that._l = prev;
							that[SIZE]--;
						}return !!entry;
					},

					forEach: function forEach(callbackfn) {
						anInstance(this, C, 'forEach');
						var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
						    entry;
						while (entry = entry ? entry.n : this._f) {
							f(entry.v, entry.k, this);

							while (entry && entry.r) {
								entry = entry.p;
							}
						}
					},

					has: function has(key) {
						return !!getEntry(this, key);
					}
				});
				if (DESCRIPTORS) dP(C.prototype, 'size', {
					get: function get() {
						return defined(this[SIZE]);
					}
				});
				return C;
			},
			def: function def(that, key, value) {
				var entry = getEntry(that, key),
				    prev,
				    index;

				if (entry) {
					entry.v = value;
				} else {
					that._l = entry = {
						i: index = fastKey(key, true),
						k: key,
						v: value,
						p: prev = that._l,
						n: undefined,
						r: false };
					if (!that._f) that._f = entry;
					if (prev) prev.n = entry;
					that[SIZE]++;

					if (index !== 'F') that._i[index] = entry;
				}return that;
			},
			getEntry: getEntry,
			setStrong: function setStrong(C, NAME, IS_MAP) {
				$iterDefine(C, NAME, function (iterated, kind) {
					this._t = iterated;
					this._k = kind;
					this._l = undefined;
				}, function () {
					var that = this,
					    kind = that._k,
					    entry = that._l;

					while (entry && entry.r) {
						entry = entry.p;
					}
					if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
						that._t = undefined;
						return step(1);
					}

					if (kind == 'keys') return step(0, entry.k);
					if (kind == 'values') return step(0, entry.v);
					return step(0, [entry.k, entry.v]);
				}, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

				setSpecies(NAME);
			}
		};
	}, function (module, exports, __webpack_require__) {
		var classof = __webpack_require__(228),
		    from = __webpack_require__(423);
		module.exports = function (NAME) {
			return function toJSON() {
				if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
				return from(this);
			};
		};
	}, function (module, exports, __webpack_require__) {
		var getKeys = __webpack_require__(41),
		    gOPS = __webpack_require__(154),
		    pIE = __webpack_require__(91);
		module.exports = function (it) {
			var result = getKeys(it),
			    getSymbols = gOPS.f;
			if (getSymbols) {
				var symbols = getSymbols(it),
				    isEnum = pIE.f,
				    i = 0,
				    key;
				while (symbols.length > i) {
					if (isEnum.call(it, key = symbols[i++])) result.push(key);
				}
			}return result;
		};
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(15).document && document.documentElement;
	}, function (module, exports, __webpack_require__) {
		var Iterators = __webpack_require__(68),
		    ITERATOR = __webpack_require__(11)('iterator'),
		    ArrayProto = Array.prototype;

		module.exports = function (it) {
			return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
		};
	}, function (module, exports, __webpack_require__) {
		var anObject = __webpack_require__(18);
		module.exports = function (iterator, fn, value, entries) {
			try {
				return entries ? fn(anObject(value)[0], value[1]) : fn(value);
			} catch (e) {
				var ret = iterator['return'];
				if (ret !== undefined) anObject(ret.call(iterator));
				throw e;
			}
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var create = __webpack_require__(90),
		    descriptor = __webpack_require__(92),
		    setToStringTag = __webpack_require__(93),
		    IteratorPrototype = {};

		__webpack_require__(31)(IteratorPrototype, __webpack_require__(11)('iterator'), function () {
			return this;
		});

		module.exports = function (Constructor, NAME, next) {
			Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
			setToStringTag(Constructor, NAME + ' Iterator');
		};
	}, function (module, exports, __webpack_require__) {

		var getKeys = __webpack_require__(41),
		    toIObject = __webpack_require__(35);
		module.exports = function (object, el) {
			var O = toIObject(object),
			    keys = getKeys(O),
			    length = keys.length,
			    index = 0,
			    key;
			while (length > index) {
				if (O[key = keys[index++]] === el) return key;
			}
		};
	}, function (module, exports, __webpack_require__) {

		var dP = __webpack_require__(22),
		    anObject = __webpack_require__(18),
		    getKeys = __webpack_require__(41);

		module.exports = __webpack_require__(19) ? Object.defineProperties : function defineProperties(O, Properties) {
			anObject(O);
			var keys = getKeys(Properties),
			    length = keys.length,
			    i = 0,
			    P;
			while (length > i) {
				dP.f(O, P = keys[i++], Properties[P]);
			}return O;
		};
	}, function (module, exports, __webpack_require__) {
		var toIObject = __webpack_require__(35),
		    gOPN = __webpack_require__(236).f,
		    toString = {}.toString;

		var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

		var getWindowNames = function getWindowNames(it) {
			try {
				return gOPN(it);
			} catch (e) {
				return windowNames.slice();
			}
		};

		module.exports.f = function getOwnPropertyNames(it) {
			return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
		};
	}, function (module, exports, __webpack_require__) {
		var has = __webpack_require__(30),
		    toObject = __webpack_require__(94),
		    IE_PROTO = __webpack_require__(157)('IE_PROTO'),
		    ObjectProto = Object.prototype;

		module.exports = Object.getPrototypeOf || function (O) {
			O = toObject(O);
			if (has(O, IE_PROTO)) return O[IE_PROTO];
			if (typeof O.constructor == 'function' && O instanceof O.constructor) {
				return O.constructor.prototype;
			}return O instanceof Object ? ObjectProto : null;
		};
	}, function (module, exports, __webpack_require__) {
		var $export = __webpack_require__(20),
		    core = __webpack_require__(4),
		    fails = __webpack_require__(34);
		module.exports = function (KEY, exec) {
			var fn = (core.Object || {})[KEY] || Object[KEY],
			    exp = {};
			exp[KEY] = exec(fn);
			$export($export.S + $export.F * fails(function () {
				fn(1);
			}), 'Object', exp);
		};
	}, function (module, exports, __webpack_require__) {
		var isObject = __webpack_require__(21),
		    anObject = __webpack_require__(18);
		var check = function check(O, proto) {
			anObject(O);
			if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
		};
		module.exports = {
			set: Object.setPrototypeOf || ('__proto__' in {} ? function (test, buggy, set) {
				try {
					set = __webpack_require__(67)(Function.call, __webpack_require__(235).f(Object.prototype, '__proto__').set, 2);
					set(test, []);
					buggy = !(test instanceof Array);
				} catch (e) {
					buggy = true;
				}
				return function setPrototypeOf(O, proto) {
					check(O, proto);
					if (buggy) O.__proto__ = proto;else set(O, proto);
					return O;
				};
			}({}, false) : undefined),
			check: check
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var global = __webpack_require__(15),
		    core = __webpack_require__(4),
		    dP = __webpack_require__(22),
		    DESCRIPTORS = __webpack_require__(19),
		    SPECIES = __webpack_require__(11)('species');

		module.exports = function (KEY) {
			var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
			if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
				configurable: true,
				get: function get() {
					return this;
				}
			});
		};
	}, function (module, exports, __webpack_require__) {

		var toInteger = __webpack_require__(159),
		    defined = __webpack_require__(88);

		module.exports = function (TO_STRING) {
			return function (that, pos) {
				var s = String(defined(that)),
				    i = toInteger(pos),
				    l = s.length,
				    a,
				    b;
				if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
				a = s.charCodeAt(i);
				return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
			};
		};
	}, function (module, exports, __webpack_require__) {

		var toInteger = __webpack_require__(159),
		    max = Math.max,
		    min = Math.min;
		module.exports = function (index, length) {
			index = toInteger(index);
			return index < 0 ? max(index + length, 0) : min(index, length);
		};
	}, function (module, exports, __webpack_require__) {

		var anObject = __webpack_require__(18),
		    get = __webpack_require__(238);
		module.exports = __webpack_require__(4).getIterator = function (it) {
			var iterFn = get(it);
			if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
			return anObject(iterFn.call(it));
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var addToUnscopables = __webpack_require__(422),
		    step = __webpack_require__(233),
		    Iterators = __webpack_require__(68),
		    toIObject = __webpack_require__(35);

		module.exports = __webpack_require__(152)(Array, 'Array', function (iterated, kind) {
			this._t = toIObject(iterated);
			this._i = 0;
			this._k = kind;
		}, function () {
			var O = this._t,
			    kind = this._k,
			    index = this._i++;
			if (!O || index >= O.length) {
				this._t = undefined;
				return step(1);
			}
			if (kind == 'keys') return step(0, index);
			if (kind == 'values') return step(0, O[index]);
			return step(0, [index, O[index]]);
		}, 'values');

		Iterators.Arguments = Iterators.Array;

		addToUnscopables('keys');
		addToUnscopables('values');
		addToUnscopables('entries');
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var strong = __webpack_require__(427);

		module.exports = __webpack_require__(149)('Map', function (get) {
			return function Map() {
				return get(this, arguments.length > 0 ? arguments[0] : undefined);
			};
		}, {
			get: function get(key) {
				var entry = strong.getEntry(this, key);
				return entry && entry.v;
			},

			set: function set(key, value) {
				return strong.def(this, key === 0 ? 0 : key, value);
			}
		}, strong, true);
	}, function (module, exports, __webpack_require__) {
		var $export = __webpack_require__(20);

		$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
	}, function (module, exports, __webpack_require__) {
		var $export = __webpack_require__(20);

		$export($export.S + $export.F, 'Object', { assign: __webpack_require__(234) });
	}, function (module, exports, __webpack_require__) {

		var $export = __webpack_require__(20);

		$export($export.S, 'Object', { create: __webpack_require__(90) });
	}, function (module, exports, __webpack_require__) {
		var toObject = __webpack_require__(94),
		    $keys = __webpack_require__(41);

		__webpack_require__(438)('keys', function () {
			return function keys(it) {
				return $keys(toObject(it));
			};
		});
	}, function (module, exports, __webpack_require__) {
		var $export = __webpack_require__(20);
		$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(439).set });
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var each = __webpack_require__(147)(0),
		    redefine = __webpack_require__(156),
		    meta = __webpack_require__(69),
		    assign = __webpack_require__(234),
		    weak = __webpack_require__(229),
		    isObject = __webpack_require__(21),
		    getWeak = meta.getWeak,
		    isExtensible = Object.isExtensible,
		    uncaughtFrozenStore = weak.ufstore,
		    tmp = {},
		    InternalMap;

		var wrapper = function wrapper(get) {
			return function WeakMap() {
				return get(this, arguments.length > 0 ? arguments[0] : undefined);
			};
		};

		var methods = {
			get: function get(key) {
				if (isObject(key)) {
					var data = getWeak(key);
					if (data === true) return uncaughtFrozenStore(this).get(key);
					return data ? data[this._i] : undefined;
				}
			},

			set: function set(key, value) {
				return weak.def(this, key, value);
			}
		};

		var $WeakMap = module.exports = __webpack_require__(149)('WeakMap', wrapper, methods, weak, true, true);

		if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
			InternalMap = weak.getConstructor(wrapper);
			assign(InternalMap.prototype, methods);
			meta.NEED = true;
			each(['delete', 'has', 'get', 'set'], function (key) {
				var proto = $WeakMap.prototype,
				    method = proto[key];
				redefine(proto, key, function (a, b) {
					if (isObject(a) && !isExtensible(a)) {
						if (!this._f) this._f = new InternalMap();
						var result = this._f[key](a, b);
						return key == 'set' ? this : result;
					}return method.call(this, a, b);
				});
			});
		}
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var weak = __webpack_require__(229);

		__webpack_require__(149)('WeakSet', function (get) {
			return function WeakSet() {
				return get(this, arguments.length > 0 ? arguments[0] : undefined);
			};
		}, {
			add: function add(value) {
				return weak.def(this, value, true);
			}
		}, weak, false, true);
	}, function (module, exports, __webpack_require__) {
		var $export = __webpack_require__(20);

		$export($export.P + $export.R, 'Map', { toJSON: __webpack_require__(428)('Map') });
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(162)('asyncIterator');
	}, function (module, exports, __webpack_require__) {

		__webpack_require__(162)('observable');
	}, function (module, exports, __webpack_require__) {

		exports = module.exports = debug;
		exports.coerce = coerce;
		exports.disable = disable;
		exports.enable = enable;
		exports.enabled = enabled;
		exports.humanize = __webpack_require__(610);

		exports.names = [];
		exports.skips = [];

		exports.formatters = {};

		var prevColor = 0;

		var prevTime;

		function selectColor() {
			return exports.colors[prevColor++ % exports.colors.length];
		}

		function debug(namespace) {
			function disabled() {}
			disabled.enabled = false;

			function enabled() {

				var self = enabled;

				var curr = +new Date();
				var ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				if (null == self.useColors) self.useColors = exports.useColors();
				if (null == self.color && self.useColors) self.color = selectColor();

				var args = Array.prototype.slice.call(arguments);

				args[0] = exports.coerce(args[0]);

				if ('string' !== typeof args[0]) {
					args = ['%o'].concat(args);
				}

				var index = 0;
				args[0] = args[0].replace(/%([a-z%])/g, function (match, format) {
					if (match === '%%') return match;
					index++;
					var formatter = exports.formatters[format];
					if ('function' === typeof formatter) {
						var val = args[index];
						match = formatter.call(self, val);

						args.splice(index, 1);
						index--;
					}
					return match;
				});

				if ('function' === typeof exports.formatArgs) {
					args = exports.formatArgs.apply(self, args);
				}
				var logFn = enabled.log || exports.log || console.log.bind(console);
				logFn.apply(self, args);
			}
			enabled.enabled = true;

			var fn = exports.enabled(namespace) ? enabled : disabled;

			fn.namespace = namespace;

			return fn;
		}

		function enable(namespaces) {
			exports.save(namespaces);

			var split = (namespaces || '').split(/[\s,]+/);
			var len = split.length;

			for (var i = 0; i < len; i++) {
				if (!split[i]) continue;
				namespaces = split[i].replace(/\*/g, '.*?');
				if (namespaces[0] === '-') {
					exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					exports.names.push(new RegExp('^' + namespaces + '$'));
				}
			}
		}

		function disable() {
			exports.enable('');
		}

		function enabled(name) {
			var i, len;
			for (i = 0, len = exports.skips.length; i < len; i++) {
				if (exports.skips[i].test(name)) {
					return false;
				}
			}
			for (i = 0, len = exports.names.length; i < len; i++) {
				if (exports.names[i].test(name)) {
					return true;
				}
			}
			return false;
		}

		function coerce(val) {
			if (val instanceof Error) return val.stack || val.message;
			return val;
		}
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var repeating = __webpack_require__(618);

		var INDENT_RE = /^(?:( )+|\t+)/;

		function getMostUsed(indents) {
			var result = 0;
			var maxUsed = 0;
			var maxWeight = 0;

			for (var n in indents) {
				var indent = indents[n];
				var u = indent[0];
				var w = indent[1];

				if (u > maxUsed || u === maxUsed && w > maxWeight) {
					maxUsed = u;
					maxWeight = w;
					result = +n;
				}
			}

			return result;
		}

		module.exports = function (str) {
			if (typeof str !== 'string') {
				throw new TypeError('Expected a string');
			}

			var tabs = 0;
			var spaces = 0;

			var prev = 0;

			var indents = {};

			var current;

			var isIndent;

			str.split(/\n/g).forEach(function (line) {
				if (!line) {
					return;
				}

				var indent;
				var matches = line.match(INDENT_RE);

				if (!matches) {
					indent = 0;
				} else {
					indent = matches[0].length;

					if (matches[1]) {
						spaces++;
					} else {
						tabs++;
					}
				}

				var diff = indent - prev;
				prev = indent;

				if (diff) {

					isIndent = diff > 0;

					current = indents[isIndent ? diff : -diff];

					if (current) {
						current[0]++;
					} else {
						current = indents[diff] = [1, 0];
					}
				} else if (current) {
					current[1] += +isIndent;
				}
			});

			var amount = getMostUsed(indents);

			var type;
			var actual;
			if (!amount) {
				type = null;
				actual = '';
			} else if (spaces >= tabs) {
				type = 'space';
				actual = repeating(' ', amount);
			} else {
				type = 'tab';
				actual = repeating('\t', amount);
			}

			return {
				amount: amount,
				type: type,
				indent: actual
			};
		};
	}, function (module, exports) {

		'use strict';

		var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

		module.exports = function (str) {
			if (typeof str !== 'string') {
				throw new TypeError('Expected a string');
			}

			return str.replace(matchOperatorsRe, '\\$&');
		};
	}, function (module, exports) {

		(function () {
			'use strict';

			function isExpression(node) {
				if (node == null) {
					return false;
				}
				switch (node.type) {
					case 'ArrayExpression':
					case 'AssignmentExpression':
					case 'BinaryExpression':
					case 'CallExpression':
					case 'ConditionalExpression':
					case 'FunctionExpression':
					case 'Identifier':
					case 'Literal':
					case 'LogicalExpression':
					case 'MemberExpression':
					case 'NewExpression':
					case 'ObjectExpression':
					case 'SequenceExpression':
					case 'ThisExpression':
					case 'UnaryExpression':
					case 'UpdateExpression':
						return true;
				}
				return false;
			}

			function isIterationStatement(node) {
				if (node == null) {
					return false;
				}
				switch (node.type) {
					case 'DoWhileStatement':
					case 'ForInStatement':
					case 'ForStatement':
					case 'WhileStatement':
						return true;
				}
				return false;
			}

			function isStatement(node) {
				if (node == null) {
					return false;
				}
				switch (node.type) {
					case 'BlockStatement':
					case 'BreakStatement':
					case 'ContinueStatement':
					case 'DebuggerStatement':
					case 'DoWhileStatement':
					case 'EmptyStatement':
					case 'ExpressionStatement':
					case 'ForInStatement':
					case 'ForStatement':
					case 'IfStatement':
					case 'LabeledStatement':
					case 'ReturnStatement':
					case 'SwitchStatement':
					case 'ThrowStatement':
					case 'TryStatement':
					case 'VariableDeclaration':
					case 'WhileStatement':
					case 'WithStatement':
						return true;
				}
				return false;
			}

			function isSourceElement(node) {
				return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
			}

			function trailingStatement(node) {
				switch (node.type) {
					case 'IfStatement':
						if (node.alternate != null) {
							return node.alternate;
						}
						return node.consequent;

					case 'LabeledStatement':
					case 'ForStatement':
					case 'ForInStatement':
					case 'WhileStatement':
					case 'WithStatement':
						return node.body;
				}
				return null;
			}

			function isProblematicIfStatement(node) {
				var current;

				if (node.type !== 'IfStatement') {
					return false;
				}
				if (node.alternate == null) {
					return false;
				}
				current = node.consequent;
				do {
					if (current.type === 'IfStatement') {
						if (current.alternate == null) {
							return true;
						}
					}
					current = trailingStatement(current);
				} while (current);

				return false;
			}

			module.exports = {
				isExpression: isExpression,
				isStatement: isStatement,
				isIterationStatement: isIterationStatement,
				isSourceElement: isSourceElement,
				isProblematicIfStatement: isProblematicIfStatement,

				trailingStatement: trailingStatement
			};
		})();
	}, function (module, exports, __webpack_require__) {

		(function () {
			'use strict';

			var code = __webpack_require__(240);

			function isStrictModeReservedWordES6(id) {
				switch (id) {
					case 'implements':
					case 'interface':
					case 'package':
					case 'private':
					case 'protected':
					case 'public':
					case 'static':
					case 'let':
						return true;
					default:
						return false;
				}
			}

			function isKeywordES5(id, strict) {
				if (!strict && id === 'yield') {
					return false;
				}
				return isKeywordES6(id, strict);
			}

			function isKeywordES6(id, strict) {
				if (strict && isStrictModeReservedWordES6(id)) {
					return true;
				}

				switch (id.length) {
					case 2:
						return id === 'if' || id === 'in' || id === 'do';
					case 3:
						return id === 'var' || id === 'for' || id === 'new' || id === 'try';
					case 4:
						return id === 'this' || id === 'else' || id === 'case' || id === 'void' || id === 'with' || id === 'enum';
					case 5:
						return id === 'while' || id === 'break' || id === 'catch' || id === 'throw' || id === 'const' || id === 'yield' || id === 'class' || id === 'super';
					case 6:
						return id === 'return' || id === 'typeof' || id === 'delete' || id === 'switch' || id === 'export' || id === 'import';
					case 7:
						return id === 'default' || id === 'finally' || id === 'extends';
					case 8:
						return id === 'function' || id === 'continue' || id === 'debugger';
					case 10:
						return id === 'instanceof';
					default:
						return false;
				}
			}

			function isReservedWordES5(id, strict) {
				return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
			}

			function isReservedWordES6(id, strict) {
				return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
			}

			function isRestrictedWord(id) {
				return id === 'eval' || id === 'arguments';
			}

			function isIdentifierNameES5(id) {
				var i, iz, ch;

				if (id.length === 0) {
					return false;
				}

				ch = id.charCodeAt(0);
				if (!code.isIdentifierStartES5(ch)) {
					return false;
				}

				for (i = 1, iz = id.length; i < iz; ++i) {
					ch = id.charCodeAt(i);
					if (!code.isIdentifierPartES5(ch)) {
						return false;
					}
				}
				return true;
			}

			function decodeUtf16(lead, trail) {
				return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
			}

			function isIdentifierNameES6(id) {
				var i, iz, ch, lowCh, check;

				if (id.length === 0) {
					return false;
				}

				check = code.isIdentifierStartES6;
				for (i = 0, iz = id.length; i < iz; ++i) {
					ch = id.charCodeAt(i);
					if (0xD800 <= ch && ch <= 0xDBFF) {
						++i;
						if (i >= iz) {
							return false;
						}
						lowCh = id.charCodeAt(i);
						if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
							return false;
						}
						ch = decodeUtf16(ch, lowCh);
					}
					if (!check(ch)) {
						return false;
					}
					check = code.isIdentifierPartES6;
				}
				return true;
			}

			function isIdentifierES5(id, strict) {
				return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
			}

			function isIdentifierES6(id, strict) {
				return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
			}

			module.exports = {
				isKeywordES5: isKeywordES5,
				isKeywordES6: isKeywordES6,
				isReservedWordES5: isReservedWordES5,
				isReservedWordES6: isReservedWordES6,
				isRestrictedWord: isRestrictedWord,
				isIdentifierNameES5: isIdentifierNameES5,
				isIdentifierNameES6: isIdentifierNameES6,
				isIdentifierES5: isIdentifierES5,
				isIdentifierES6: isIdentifierES6
			};
		})();
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(468);
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var ansiRegex = __webpack_require__(184);
		var re = new RegExp(ansiRegex().source);
		module.exports = re.test.bind(re);
	}, function (module, exports) {

		exports.read = function (buffer, offset, isLE, mLen, nBytes) {
			var e, m;
			var eLen = nBytes * 8 - mLen - 1;
			var eMax = (1 << eLen) - 1;
			var eBias = eMax >> 1;
			var nBits = -7;
			var i = isLE ? nBytes - 1 : 0;
			var d = isLE ? -1 : 1;
			var s = buffer[offset + i];

			i += d;

			e = s & (1 << -nBits) - 1;
			s >>= -nBits;
			nBits += eLen;
			for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

			m = e & (1 << -nBits) - 1;
			e >>= -nBits;
			nBits += mLen;
			for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

			if (e === 0) {
				e = 1 - eBias;
			} else if (e === eMax) {
				return m ? NaN : (s ? -1 : 1) * Infinity;
			} else {
				m = m + Math.pow(2, mLen);
				e = e - eBias;
			}
			return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
		};

		exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
			var e, m, c;
			var eLen = nBytes * 8 - mLen - 1;
			var eMax = (1 << eLen) - 1;
			var eBias = eMax >> 1;
			var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
			var i = isLE ? 0 : nBytes - 1;
			var d = isLE ? 1 : -1;
			var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;

			value = Math.abs(value);

			if (isNaN(value) || value === Infinity) {
				m = isNaN(value) ? 1 : 0;
				e = eMax;
			} else {
				e = Math.floor(Math.log(value) / Math.LN2);
				if (value * (c = Math.pow(2, -e)) < 1) {
					e--;
					c *= 2;
				}
				if (e + eBias >= 1) {
					value += rt / c;
				} else {
					value += rt * Math.pow(2, 1 - eBias);
				}
				if (value * c >= 2) {
					e++;
					c /= 2;
				}

				if (e + eBias >= eMax) {
					m = 0;
					e = eMax;
				} else if (e + eBias >= 1) {
					m = (value * c - 1) * Math.pow(2, mLen);
					e = e + eBias;
				} else {
					m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
					e = 0;
				}
			}

			for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

			e = e << mLen | m;
			eLen += mLen;
			for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

			buffer[offset + i - d] |= s * 128;
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var invariant = function invariant(condition, format, a, b, c, d, e, f) {
			if (false) {
				if (format === undefined) {
					throw new Error('invariant requires an error message argument');
				}
			}

			if (!condition) {
				var error;
				if (format === undefined) {
					error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
				} else {
					var args = [a, b, c, d, e, f];
					var argIndex = 0;
					error = new Error(format.replace(/%s/g, function () {
						return args[argIndex++];
					}));
					error.name = 'Invariant Violation';
				}

				error.framesToPop = 1;
				throw error;
			}
		};

		module.exports = invariant;
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var numberIsNan = __webpack_require__(611);

		module.exports = Number.isFinite || function (val) {
			return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
		};
	}, function (module, exports) {
		module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|(0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?)|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-\/%&|^]|\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\](){}])|(\s+)|(^$|[\s\S])/g;

		module.exports.matchToToken = function (match) {
			var token = { type: "invalid", value: match[0] };
			if (match[1]) token.type = "string", token.closed = !!(match[3] || match[4]);else if (match[5]) token.type = "comment";else if (match[6]) token.type = "comment", token.closed = !!match[7];else if (match[8]) token.type = "regex";else if (match[9]) token.type = "number";else if (match[10]) token.type = "name";else if (match[11]) token.type = "punctuator";else if (match[12]) token.type = "whitespace";
			return token;
		};
	}, function (module, exports) {

		module.exports = {
			"_args": [[{
				"raw": "babel-core@6.14.0",
				"scope": null,
				"escapedName": "babel-core",
				"name": "babel-core",
				"rawSpec": "6.14.0",
				"spec": "6.14.0",
				"type": "version"
			}, "/Users/ccheever/projects/babel-standalone"]],
			"_from": "babel-core@6.14.0",
			"_id": "babel-core@6.14.0",
			"_inCache": true,
			"_installable": true,
			"_location": "/babel-core",
			"_nodeVersion": "5.11.1",
			"_npmOperationalInternal": {
				"host": "packages-12-west.internal.npmjs.com",
				"tmp": "tmp/babel-core-6.14.0.tgz_1472082048405_0.022966341115534306"
			},
			"_npmUser": {
				"name": "hzoo",
				"email": "hi@henryzoo.com"
			},
			"_npmVersion": "3.10.6",
			"_phantomChildren": {},
			"_requested": {
				"raw": "babel-core@6.14.0",
				"scope": null,
				"escapedName": "babel-core",
				"name": "babel-core",
				"rawSpec": "6.14.0",
				"spec": "6.14.0",
				"type": "version"
			},
			"_requiredBy": ["#DEV:/", "/babel-plugin-transform-regenerator", "/babel-register"],
			"_resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.14.0.tgz",
			"_shasum": "c9e13ed4e2f97329215496fd9fb48f2b3bcb9b42",
			"_shrinkwrap": null,
			"_spec": "babel-core@6.14.0",
			"_where": "/Users/ccheever/projects/babel-standalone",
			"author": {
				"name": "Sebastian McKenzie",
				"email": "sebmck@gmail.com"
			},
			"dependencies": {
				"babel-code-frame": "^6.8.0",
				"babel-generator": "^6.14.0",
				"babel-helpers": "^6.8.0",
				"babel-messages": "^6.8.0",
				"babel-register": "^6.14.0",
				"babel-runtime": "^6.9.1",
				"babel-template": "^6.14.0",
				"babel-traverse": "^6.14.0",
				"babel-types": "^6.14.0",
				"babylon": "^6.9.0",
				"convert-source-map": "^1.1.0",
				"debug": "^2.1.1",
				"json5": "^0.4.0",
				"lodash": "^4.2.0",
				"minimatch": "^3.0.2",
				"path-exists": "^1.0.0",
				"path-is-absolute": "^1.0.0",
				"private": "^0.1.6",
				"shebang-regex": "^1.0.0",
				"slash": "^1.0.0",
				"source-map": "^0.5.0"
			},
			"description": "Babel compiler core.",
			"devDependencies": {
				"babel-helper-fixtures": "^6.9.0",
				"babel-helper-transform-fixture-test-runner": "^6.13.2",
				"babel-polyfill": "^6.13.0"
			},
			"directories": {},
			"dist": {
				"shasum": "c9e13ed4e2f97329215496fd9fb48f2b3bcb9b42",
				"tarball": "https://registry.npmjs.org/babel-core/-/babel-core-6.14.0.tgz"
			},
			"homepage": "https://babeljs.io/",
			"keywords": ["6to5", "babel", "classes", "const", "es6", "harmony", "let", "modules", "transpile", "transpiler", "var"],
			"license": "MIT",
			"maintainers": [{
				"name": "amasad",
				"email": "amjad.masad@gmail.com"
			}, {
				"name": "hzoo",
				"email": "hi@henryzoo.com"
			}, {
				"name": "jmm",
				"email": "npm-public@jessemccarthy.net"
			}, {
				"name": "loganfsmyth",
				"email": "loganfsmyth@gmail.com"
			}, {
				"name": "sebmck",
				"email": "sebmck@gmail.com"
			}, {
				"name": "thejameskyle",
				"email": "me@thejameskyle.com"
			}],
			"name": "babel-core",
			"optionalDependencies": {},
			"readme": "ERROR: No README data found!",
			"repository": {
				"type": "git",
				"url": "https://github.com/babel/babel/tree/master/packages/babel-core"
			},
			"scripts": {
				"bench": "make bench",
				"test": "make test"
			},
			"version": "6.14.0"
		};
	}, function (module, exports) {

		module.exports = {
			"builtin": {
				"Array": false,
				"ArrayBuffer": false,
				"Boolean": false,
				"constructor": false,
				"DataView": false,
				"Date": false,
				"decodeURI": false,
				"decodeURIComponent": false,
				"encodeURI": false,
				"encodeURIComponent": false,
				"Error": false,
				"escape": false,
				"eval": false,
				"EvalError": false,
				"Float32Array": false,
				"Float64Array": false,
				"Function": false,
				"hasOwnProperty": false,
				"Infinity": false,
				"Int16Array": false,
				"Int32Array": false,
				"Int8Array": false,
				"isFinite": false,
				"isNaN": false,
				"isPrototypeOf": false,
				"JSON": false,
				"Map": false,
				"Math": false,
				"NaN": false,
				"Number": false,
				"Object": false,
				"parseFloat": false,
				"parseInt": false,
				"Promise": false,
				"propertyIsEnumerable": false,
				"Proxy": false,
				"RangeError": false,
				"ReferenceError": false,
				"Reflect": false,
				"RegExp": false,
				"Set": false,
				"String": false,
				"Symbol": false,
				"SyntaxError": false,
				"System": false,
				"toLocaleString": false,
				"toString": false,
				"TypeError": false,
				"Uint16Array": false,
				"Uint32Array": false,
				"Uint8Array": false,
				"Uint8ClampedArray": false,
				"undefined": false,
				"unescape": false,
				"URIError": false,
				"valueOf": false,
				"WeakMap": false,
				"WeakSet": false
			},
			"es5": {
				"Array": false,
				"Boolean": false,
				"constructor": false,
				"Date": false,
				"decodeURI": false,
				"decodeURIComponent": false,
				"encodeURI": false,
				"encodeURIComponent": false,
				"Error": false,
				"escape": false,
				"eval": false,
				"EvalError": false,
				"Float32Array": false,
				"Float64Array": false,
				"Function": false,
				"hasOwnProperty": false,
				"Infinity": false,
				"isFinite": false,
				"isNaN": false,
				"isPrototypeOf": false,
				"JSON": false,
				"Math": false,
				"NaN": false,
				"Number": false,
				"Object": false,
				"parseFloat": false,
				"parseInt": false,
				"propertyIsEnumerable": false,
				"RangeError": false,
				"ReferenceError": false,
				"RegExp": false,
				"String": false,
				"SyntaxError": false,
				"toLocaleString": false,
				"toString": false,
				"TypeError": false,
				"undefined": false,
				"unescape": false,
				"URIError": false,
				"valueOf": false
			},
			"es6": {
				"Array": false,
				"ArrayBuffer": false,
				"Boolean": false,
				"constructor": false,
				"DataView": false,
				"Date": false,
				"decodeURI": false,
				"decodeURIComponent": false,
				"encodeURI": false,
				"encodeURIComponent": false,
				"Error": false,
				"escape": false,
				"eval": false,
				"EvalError": false,
				"Float32Array": false,
				"Float64Array": false,
				"Function": false,
				"hasOwnProperty": false,
				"Infinity": false,
				"Int16Array": false,
				"Int32Array": false,
				"Int8Array": false,
				"isFinite": false,
				"isNaN": false,
				"isPrototypeOf": false,
				"JSON": false,
				"Map": false,
				"Math": false,
				"NaN": false,
				"Number": false,
				"Object": false,
				"parseFloat": false,
				"parseInt": false,
				"Promise": false,
				"propertyIsEnumerable": false,
				"Proxy": false,
				"RangeError": false,
				"ReferenceError": false,
				"Reflect": false,
				"RegExp": false,
				"Set": false,
				"String": false,
				"Symbol": false,
				"SyntaxError": false,
				"System": false,
				"toLocaleString": false,
				"toString": false,
				"TypeError": false,
				"Uint16Array": false,
				"Uint32Array": false,
				"Uint8Array": false,
				"Uint8ClampedArray": false,
				"undefined": false,
				"unescape": false,
				"URIError": false,
				"valueOf": false,
				"WeakMap": false,
				"WeakSet": false
			},
			"browser": {
				"addEventListener": false,
				"alert": false,
				"AnalyserNode": false,
				"AnimationEvent": false,
				"applicationCache": false,
				"ApplicationCache": false,
				"ApplicationCacheErrorEvent": false,
				"atob": false,
				"Attr": false,
				"Audio": false,
				"AudioBuffer": false,
				"AudioBufferSourceNode": false,
				"AudioContext": false,
				"AudioDestinationNode": false,
				"AudioListener": false,
				"AudioNode": false,
				"AudioParam": false,
				"AudioProcessingEvent": false,
				"AutocompleteErrorEvent": false,
				"BarProp": false,
				"BatteryManager": false,
				"BeforeUnloadEvent": false,
				"BiquadFilterNode": false,
				"Blob": false,
				"blur": false,
				"btoa": false,
				"Cache": false,
				"caches": false,
				"CacheStorage": false,
				"cancelAnimationFrame": false,
				"CanvasGradient": false,
				"CanvasPattern": false,
				"CanvasRenderingContext2D": false,
				"CDATASection": false,
				"ChannelMergerNode": false,
				"ChannelSplitterNode": false,
				"CharacterData": false,
				"clearInterval": false,
				"clearTimeout": false,
				"clientInformation": false,
				"ClientRect": false,
				"ClientRectList": false,
				"ClipboardEvent": false,
				"close": false,
				"closed": false,
				"CloseEvent": false,
				"Comment": false,
				"CompositionEvent": false,
				"confirm": false,
				"console": false,
				"ConvolverNode": false,
				"crypto": false,
				"Crypto": false,
				"CryptoKey": false,
				"CSS": false,
				"CSSFontFaceRule": false,
				"CSSImportRule": false,
				"CSSKeyframeRule": false,
				"CSSKeyframesRule": false,
				"CSSMediaRule": false,
				"CSSPageRule": false,
				"CSSRule": false,
				"CSSRuleList": false,
				"CSSStyleDeclaration": false,
				"CSSStyleRule": false,
				"CSSStyleSheet": false,
				"CSSSupportsRule": false,
				"CSSUnknownRule": false,
				"CSSViewportRule": false,
				"CustomEvent": false,
				"DataTransfer": false,
				"DataTransferItem": false,
				"DataTransferItemList": false,
				"Debug": false,
				"defaultStatus": false,
				"defaultstatus": false,
				"DelayNode": false,
				"DeviceMotionEvent": false,
				"DeviceOrientationEvent": false,
				"devicePixelRatio": false,
				"dispatchEvent": false,
				"document": false,
				"Document": false,
				"DocumentFragment": false,
				"DocumentType": false,
				"DOMError": false,
				"DOMException": false,
				"DOMImplementation": false,
				"DOMParser": false,
				"DOMSettableTokenList": false,
				"DOMStringList": false,
				"DOMStringMap": false,
				"DOMTokenList": false,
				"DragEvent": false,
				"DynamicsCompressorNode": false,
				"Element": false,
				"ElementTimeControl": false,
				"ErrorEvent": false,
				"event": false,
				"Event": false,
				"EventSource": false,
				"EventTarget": false,
				"external": false,
				"fetch": false,
				"File": false,
				"FileError": false,
				"FileList": false,
				"FileReader": false,
				"find": false,
				"focus": false,
				"FocusEvent": false,
				"FontFace": false,
				"FormData": false,
				"frameElement": false,
				"frames": false,
				"GainNode": false,
				"Gamepad": false,
				"GamepadButton": false,
				"GamepadEvent": false,
				"getComputedStyle": false,
				"getSelection": false,
				"HashChangeEvent": false,
				"Headers": false,
				"history": false,
				"History": false,
				"HTMLAllCollection": false,
				"HTMLAnchorElement": false,
				"HTMLAppletElement": false,
				"HTMLAreaElement": false,
				"HTMLAudioElement": false,
				"HTMLBaseElement": false,
				"HTMLBlockquoteElement": false,
				"HTMLBodyElement": false,
				"HTMLBRElement": false,
				"HTMLButtonElement": false,
				"HTMLCanvasElement": false,
				"HTMLCollection": false,
				"HTMLContentElement": false,
				"HTMLDataListElement": false,
				"HTMLDetailsElement": false,
				"HTMLDialogElement": false,
				"HTMLDirectoryElement": false,
				"HTMLDivElement": false,
				"HTMLDListElement": false,
				"HTMLDocument": false,
				"HTMLElement": false,
				"HTMLEmbedElement": false,
				"HTMLFieldSetElement": false,
				"HTMLFontElement": false,
				"HTMLFormControlsCollection": false,
				"HTMLFormElement": false,
				"HTMLFrameElement": false,
				"HTMLFrameSetElement": false,
				"HTMLHeadElement": false,
				"HTMLHeadingElement": false,
				"HTMLHRElement": false,
				"HTMLHtmlElement": false,
				"HTMLIFrameElement": false,
				"HTMLImageElement": false,
				"HTMLInputElement": false,
				"HTMLIsIndexElement": false,
				"HTMLKeygenElement": false,
				"HTMLLabelElement": false,
				"HTMLLayerElement": false,
				"HTMLLegendElement": false,
				"HTMLLIElement": false,
				"HTMLLinkElement": false,
				"HTMLMapElement": false,
				"HTMLMarqueeElement": false,
				"HTMLMediaElement": false,
				"HTMLMenuElement": false,
				"HTMLMetaElement": false,
				"HTMLMeterElement": false,
				"HTMLModElement": false,
				"HTMLObjectElement": false,
				"HTMLOListElement": false,
				"HTMLOptGroupElement": false,
				"HTMLOptionElement": false,
				"HTMLOptionsCollection": false,
				"HTMLOutputElement": false,
				"HTMLParagraphElement": false,
				"HTMLParamElement": false,
				"HTMLPictureElement": false,
				"HTMLPreElement": false,
				"HTMLProgressElement": false,
				"HTMLQuoteElement": false,
				"HTMLScriptElement": false,
				"HTMLSelectElement": false,
				"HTMLShadowElement": false,
				"HTMLSourceElement": false,
				"HTMLSpanElement": false,
				"HTMLStyleElement": false,
				"HTMLTableCaptionElement": false,
				"HTMLTableCellElement": false,
				"HTMLTableColElement": false,
				"HTMLTableElement": false,
				"HTMLTableRowElement": false,
				"HTMLTableSectionElement": false,
				"HTMLTemplateElement": false,
				"HTMLTextAreaElement": false,
				"HTMLTitleElement": false,
				"HTMLTrackElement": false,
				"HTMLUListElement": false,
				"HTMLUnknownElement": false,
				"HTMLVideoElement": false,
				"IDBCursor": false,
				"IDBCursorWithValue": false,
				"IDBDatabase": false,
				"IDBEnvironment": false,
				"IDBFactory": false,
				"IDBIndex": false,
				"IDBKeyRange": false,
				"IDBObjectStore": false,
				"IDBOpenDBRequest": false,
				"IDBRequest": false,
				"IDBTransaction": false,
				"IDBVersionChangeEvent": false,
				"Image": false,
				"ImageBitmap": false,
				"ImageData": false,
				"indexedDB": false,
				"innerHeight": false,
				"innerWidth": false,
				"InputEvent": false,
				"InputMethodContext": false,
				"Intl": false,
				"KeyboardEvent": false,
				"length": false,
				"localStorage": false,
				"location": false,
				"Location": false,
				"locationbar": false,
				"matchMedia": false,
				"MediaElementAudioSourceNode": false,
				"MediaEncryptedEvent": false,
				"MediaError": false,
				"MediaKeyError": false,
				"MediaKeyEvent": false,
				"MediaKeyMessageEvent": false,
				"MediaKeys": false,
				"MediaKeySession": false,
				"MediaKeyStatusMap": false,
				"MediaKeySystemAccess": false,
				"MediaList": false,
				"MediaQueryList": false,
				"MediaQueryListEvent": false,
				"MediaSource": false,
				"MediaStreamAudioDestinationNode": false,
				"MediaStreamAudioSourceNode": false,
				"MediaStreamEvent": false,
				"MediaStreamTrack": false,
				"menubar": false,
				"MessageChannel": false,
				"MessageEvent": false,
				"MessagePort": false,
				"MIDIAccess": false,
				"MIDIConnectionEvent": false,
				"MIDIInput": false,
				"MIDIInputMap": false,
				"MIDIMessageEvent": false,
				"MIDIOutput": false,
				"MIDIOutputMap": false,
				"MIDIPort": false,
				"MimeType": false,
				"MimeTypeArray": false,
				"MouseEvent": false,
				"moveBy": false,
				"moveTo": false,
				"MutationEvent": false,
				"MutationObserver": false,
				"MutationRecord": false,
				"name": false,
				"NamedNodeMap": false,
				"navigator": false,
				"Navigator": false,
				"Node": false,
				"NodeFilter": false,
				"NodeIterator": false,
				"NodeList": false,
				"Notification": false,
				"OfflineAudioCompletionEvent": false,
				"OfflineAudioContext": false,
				"offscreenBuffering": false,
				"onbeforeunload": true,
				"onblur": true,
				"onerror": true,
				"onfocus": true,
				"onload": true,
				"onresize": true,
				"onunload": true,
				"open": false,
				"openDatabase": false,
				"opener": false,
				"opera": false,
				"Option": false,
				"OscillatorNode": false,
				"outerHeight": false,
				"outerWidth": false,
				"PageTransitionEvent": false,
				"pageXOffset": false,
				"pageYOffset": false,
				"parent": false,
				"Path2D": false,
				"performance": false,
				"Performance": false,
				"PerformanceEntry": false,
				"PerformanceMark": false,
				"PerformanceMeasure": false,
				"PerformanceNavigation": false,
				"PerformanceResourceTiming": false,
				"PerformanceTiming": false,
				"PeriodicWave": false,
				"Permissions": false,
				"PermissionStatus": false,
				"personalbar": false,
				"Plugin": false,
				"PluginArray": false,
				"PopStateEvent": false,
				"postMessage": false,
				"print": false,
				"ProcessingInstruction": false,
				"ProgressEvent": false,
				"prompt": false,
				"PushManager": false,
				"PushSubscription": false,
				"RadioNodeList": false,
				"Range": false,
				"ReadableByteStream": false,
				"ReadableStream": false,
				"removeEventListener": false,
				"Request": false,
				"requestAnimationFrame": false,
				"resizeBy": false,
				"resizeTo": false,
				"Response": false,
				"RTCIceCandidate": false,
				"RTCSessionDescription": false,
				"screen": false,
				"Screen": false,
				"screenLeft": false,
				"ScreenOrientation": false,
				"screenTop": false,
				"screenX": false,
				"screenY": false,
				"ScriptProcessorNode": false,
				"scroll": false,
				"scrollbars": false,
				"scrollBy": false,
				"scrollTo": false,
				"scrollX": false,
				"scrollY": false,
				"SecurityPolicyViolationEvent": false,
				"Selection": false,
				"self": false,
				"ServiceWorker": false,
				"ServiceWorkerContainer": false,
				"ServiceWorkerRegistration": false,
				"sessionStorage": false,
				"setInterval": false,
				"setTimeout": false,
				"ShadowRoot": false,
				"SharedWorker": false,
				"showModalDialog": false,
				"speechSynthesis": false,
				"SpeechSynthesisEvent": false,
				"SpeechSynthesisUtterance": false,
				"status": false,
				"statusbar": false,
				"stop": false,
				"Storage": false,
				"StorageEvent": false,
				"styleMedia": false,
				"StyleSheet": false,
				"StyleSheetList": false,
				"SubtleCrypto": false,
				"SVGAElement": false,
				"SVGAltGlyphDefElement": false,
				"SVGAltGlyphElement": false,
				"SVGAltGlyphItemElement": false,
				"SVGAngle": false,
				"SVGAnimateColorElement": false,
				"SVGAnimatedAngle": false,
				"SVGAnimatedBoolean": false,
				"SVGAnimatedEnumeration": false,
				"SVGAnimatedInteger": false,
				"SVGAnimatedLength": false,
				"SVGAnimatedLengthList": false,
				"SVGAnimatedNumber": false,
				"SVGAnimatedNumberList": false,
				"SVGAnimatedPathData": false,
				"SVGAnimatedPoints": false,
				"SVGAnimatedPreserveAspectRatio": false,
				"SVGAnimatedRect": false,
				"SVGAnimatedString": false,
				"SVGAnimatedTransformList": false,
				"SVGAnimateElement": false,
				"SVGAnimateMotionElement": false,
				"SVGAnimateTransformElement": false,
				"SVGAnimationElement": false,
				"SVGCircleElement": false,
				"SVGClipPathElement": false,
				"SVGColor": false,
				"SVGColorProfileElement": false,
				"SVGColorProfileRule": false,
				"SVGComponentTransferFunctionElement": false,
				"SVGCSSRule": false,
				"SVGCursorElement": false,
				"SVGDefsElement": false,
				"SVGDescElement": false,
				"SVGDiscardElement": false,
				"SVGDocument": false,
				"SVGElement": false,
				"SVGElementInstance": false,
				"SVGElementInstanceList": false,
				"SVGEllipseElement": false,
				"SVGEvent": false,
				"SVGExternalResourcesRequired": false,
				"SVGFEBlendElement": false,
				"SVGFEColorMatrixElement": false,
				"SVGFEComponentTransferElement": false,
				"SVGFECompositeElement": false,
				"SVGFEConvolveMatrixElement": false,
				"SVGFEDiffuseLightingElement": false,
				"SVGFEDisplacementMapElement": false,
				"SVGFEDistantLightElement": false,
				"SVGFEDropShadowElement": false,
				"SVGFEFloodElement": false,
				"SVGFEFuncAElement": false,
				"SVGFEFuncBElement": false,
				"SVGFEFuncGElement": false,
				"SVGFEFuncRElement": false,
				"SVGFEGaussianBlurElement": false,
				"SVGFEImageElement": false,
				"SVGFEMergeElement": false,
				"SVGFEMergeNodeElement": false,
				"SVGFEMorphologyElement": false,
				"SVGFEOffsetElement": false,
				"SVGFEPointLightElement": false,
				"SVGFESpecularLightingElement": false,
				"SVGFESpotLightElement": false,
				"SVGFETileElement": false,
				"SVGFETurbulenceElement": false,
				"SVGFilterElement": false,
				"SVGFilterPrimitiveStandardAttributes": false,
				"SVGFitToViewBox": false,
				"SVGFontElement": false,
				"SVGFontFaceElement": false,
				"SVGFontFaceFormatElement": false,
				"SVGFontFaceNameElement": false,
				"SVGFontFaceSrcElement": false,
				"SVGFontFaceUriElement": false,
				"SVGForeignObjectElement": false,
				"SVGGElement": false,
				"SVGGeometryElement": false,
				"SVGGlyphElement": false,
				"SVGGlyphRefElement": false,
				"SVGGradientElement": false,
				"SVGGraphicsElement": false,
				"SVGHKernElement": false,
				"SVGICCColor": false,
				"SVGImageElement": false,
				"SVGLangSpace": false,
				"SVGLength": false,
				"SVGLengthList": false,
				"SVGLinearGradientElement": false,
				"SVGLineElement": false,
				"SVGLocatable": false,
				"SVGMarkerElement": false,
				"SVGMaskElement": false,
				"SVGMatrix": false,
				"SVGMetadataElement": false,
				"SVGMissingGlyphElement": false,
				"SVGMPathElement": false,
				"SVGNumber": false,
				"SVGNumberList": false,
				"SVGPaint": false,
				"SVGPathElement": false,
				"SVGPathSeg": false,
				"SVGPathSegArcAbs": false,
				"SVGPathSegArcRel": false,
				"SVGPathSegClosePath": false,
				"SVGPathSegCurvetoCubicAbs": false,
				"SVGPathSegCurvetoCubicRel": false,
				"SVGPathSegCurvetoCubicSmoothAbs": false,
				"SVGPathSegCurvetoCubicSmoothRel": false,
				"SVGPathSegCurvetoQuadraticAbs": false,
				"SVGPathSegCurvetoQuadraticRel": false,
				"SVGPathSegCurvetoQuadraticSmoothAbs": false,
				"SVGPathSegCurvetoQuadraticSmoothRel": false,
				"SVGPathSegLinetoAbs": false,
				"SVGPathSegLinetoHorizontalAbs": false,
				"SVGPathSegLinetoHorizontalRel": false,
				"SVGPathSegLinetoRel": false,
				"SVGPathSegLinetoVerticalAbs": false,
				"SVGPathSegLinetoVerticalRel": false,
				"SVGPathSegList": false,
				"SVGPathSegMovetoAbs": false,
				"SVGPathSegMovetoRel": false,
				"SVGPatternElement": false,
				"SVGPoint": false,
				"SVGPointList": false,
				"SVGPolygonElement": false,
				"SVGPolylineElement": false,
				"SVGPreserveAspectRatio": false,
				"SVGRadialGradientElement": false,
				"SVGRect": false,
				"SVGRectElement": false,
				"SVGRenderingIntent": false,
				"SVGScriptElement": false,
				"SVGSetElement": false,
				"SVGStopElement": false,
				"SVGStringList": false,
				"SVGStylable": false,
				"SVGStyleElement": false,
				"SVGSVGElement": false,
				"SVGSwitchElement": false,
				"SVGSymbolElement": false,
				"SVGTests": false,
				"SVGTextContentElement": false,
				"SVGTextElement": false,
				"SVGTextPathElement": false,
				"SVGTextPositioningElement": false,
				"SVGTitleElement": false,
				"SVGTransform": false,
				"SVGTransformable": false,
				"SVGTransformList": false,
				"SVGTRefElement": false,
				"SVGTSpanElement": false,
				"SVGUnitTypes": false,
				"SVGURIReference": false,
				"SVGUseElement": false,
				"SVGViewElement": false,
				"SVGViewSpec": false,
				"SVGVKernElement": false,
				"SVGZoomAndPan": false,
				"SVGZoomEvent": false,
				"Text": false,
				"TextDecoder": false,
				"TextEncoder": false,
				"TextEvent": false,
				"TextMetrics": false,
				"TextTrack": false,
				"TextTrackCue": false,
				"TextTrackCueList": false,
				"TextTrackList": false,
				"TimeEvent": false,
				"TimeRanges": false,
				"toolbar": false,
				"top": false,
				"Touch": false,
				"TouchEvent": false,
				"TouchList": false,
				"TrackEvent": false,
				"TransitionEvent": false,
				"TreeWalker": false,
				"UIEvent": false,
				"URL": false,
				"ValidityState": false,
				"VTTCue": false,
				"WaveShaperNode": false,
				"WebGLActiveInfo": false,
				"WebGLBuffer": false,
				"WebGLContextEvent": false,
				"WebGLFramebuffer": false,
				"WebGLProgram": false,
				"WebGLRenderbuffer": false,
				"WebGLRenderingContext": false,
				"WebGLShader": false,
				"WebGLShaderPrecisionFormat": false,
				"WebGLTexture": false,
				"WebGLUniformLocation": false,
				"WebSocket": false,
				"WheelEvent": false,
				"window": false,
				"Window": false,
				"Worker": false,
				"XDomainRequest": false,
				"XMLDocument": false,
				"XMLHttpRequest": false,
				"XMLHttpRequestEventTarget": false,
				"XMLHttpRequestProgressEvent": false,
				"XMLHttpRequestUpload": false,
				"XMLSerializer": false,
				"XPathEvaluator": false,
				"XPathException": false,
				"XPathExpression": false,
				"XPathNamespace": false,
				"XPathNSResolver": false,
				"XPathResult": false,
				"XSLTProcessor": false
			},
			"worker": {
				"applicationCache": false,
				"atob": false,
				"Blob": false,
				"BroadcastChannel": false,
				"btoa": false,
				"Cache": false,
				"caches": false,
				"clearInterval": false,
				"clearTimeout": false,
				"close": true,
				"console": false,
				"fetch": false,
				"FileReaderSync": false,
				"FormData": false,
				"Headers": false,
				"IDBCursor": false,
				"IDBCursorWithValue": false,
				"IDBDatabase": false,
				"IDBFactory": false,
				"IDBIndex": false,
				"IDBKeyRange": false,
				"IDBObjectStore": false,
				"IDBOpenDBRequest": false,
				"IDBRequest": false,
				"IDBTransaction": false,
				"IDBVersionChangeEvent": false,
				"ImageData": false,
				"importScripts": true,
				"indexedDB": false,
				"location": false,
				"MessageChannel": false,
				"MessagePort": false,
				"name": false,
				"navigator": false,
				"Notification": false,
				"onclose": true,
				"onconnect": true,
				"onerror": true,
				"onlanguagechange": true,
				"onmessage": true,
				"onoffline": true,
				"ononline": true,
				"onrejectionhandled": true,
				"onunhandledrejection": true,
				"performance": false,
				"Performance": false,
				"PerformanceEntry": false,
				"PerformanceMark": false,
				"PerformanceMeasure": false,
				"PerformanceNavigation": false,
				"PerformanceResourceTiming": false,
				"PerformanceTiming": false,
				"postMessage": true,
				"Promise": false,
				"Request": false,
				"Response": false,
				"self": true,
				"ServiceWorkerRegistration": false,
				"setInterval": false,
				"setTimeout": false,
				"TextDecoder": false,
				"TextEncoder": false,
				"URL": false,
				"WebSocket": false,
				"Worker": false,
				"XMLHttpRequest": false
			},
			"node": {
				"__dirname": false,
				"__filename": false,
				"arguments": false,
				"Buffer": false,
				"clearImmediate": false,
				"clearInterval": false,
				"clearTimeout": false,
				"console": false,
				"exports": true,
				"GLOBAL": false,
				"global": false,
				"module": false,
				"process": false,
				"require": false,
				"root": false,
				"setImmediate": false,
				"setInterval": false,
				"setTimeout": false
			},
			"commonjs": {
				"exports": true,
				"module": false,
				"require": false,
				"global": false
			},
			"amd": {
				"define": false,
				"require": false
			},
			"mocha": {
				"after": false,
				"afterEach": false,
				"before": false,
				"beforeEach": false,
				"context": false,
				"describe": false,
				"it": false,
				"mocha": false,
				"setup": false,
				"specify": false,
				"suite": false,
				"suiteSetup": false,
				"suiteTeardown": false,
				"teardown": false,
				"test": false,
				"xcontext": false,
				"xdescribe": false,
				"xit": false,
				"xspecify": false
			},
			"jasmine": {
				"afterAll": false,
				"afterEach": false,
				"beforeAll": false,
				"beforeEach": false,
				"describe": false,
				"expect": false,
				"fail": false,
				"fdescribe": false,
				"fit": false,
				"it": false,
				"jasmine": false,
				"pending": false,
				"runs": false,
				"spyOn": false,
				"waits": false,
				"waitsFor": false,
				"xdescribe": false,
				"xit": false
			},
			"jest": {
				"afterEach": false,
				"beforeEach": false,
				"describe": false,
				"expect": false,
				"it": false,
				"jest": false,
				"pit": false,
				"require": false,
				"xdescribe": false,
				"xit": false
			},
			"qunit": {
				"asyncTest": false,
				"deepEqual": false,
				"equal": false,
				"expect": false,
				"module": false,
				"notDeepEqual": false,
				"notEqual": false,
				"notOk": false,
				"notPropEqual": false,
				"notStrictEqual": false,
				"ok": false,
				"propEqual": false,
				"QUnit": false,
				"raises": false,
				"start": false,
				"stop": false,
				"strictEqual": false,
				"test": false,
				"throws": false
			},
			"phantomjs": {
				"console": true,
				"exports": true,
				"phantom": true,
				"require": true,
				"WebPage": true
			},
			"couch": {
				"emit": false,
				"exports": false,
				"getRow": false,
				"log": false,
				"module": false,
				"provides": false,
				"require": false,
				"respond": false,
				"send": false,
				"start": false,
				"sum": false
			},
			"rhino": {
				"defineClass": false,
				"deserialize": false,
				"gc": false,
				"help": false,
				"importClass": false,
				"importPackage": false,
				"java": false,
				"load": false,
				"loadClass": false,
				"Packages": false,
				"print": false,
				"quit": false,
				"readFile": false,
				"readUrl": false,
				"runCommand": false,
				"seal": false,
				"serialize": false,
				"spawn": false,
				"sync": false,
				"toint32": false,
				"version": false
			},
			"nashorn": {
				"__DIR__": false,
				"__FILE__": false,
				"__LINE__": false,
				"com": false,
				"edu": false,
				"exit": false,
				"Java": false,
				"java": false,
				"javafx": false,
				"JavaImporter": false,
				"javax": false,
				"JSAdapter": false,
				"load": false,
				"loadWithNewGlobal": false,
				"org": false,
				"Packages": false,
				"print": false,
				"quit": false
			},
			"wsh": {
				"ActiveXObject": true,
				"Enumerator": true,
				"GetObject": true,
				"ScriptEngine": true,
				"ScriptEngineBuildVersion": true,
				"ScriptEngineMajorVersion": true,
				"ScriptEngineMinorVersion": true,
				"VBArray": true,
				"WScript": true,
				"WSH": true,
				"XDomainRequest": true
			},
			"jquery": {
				"$": false,
				"jQuery": false
			},
			"yui": {
				"Y": false,
				"YUI": false,
				"YUI_config": false
			},
			"shelljs": {
				"cat": false,
				"cd": false,
				"chmod": false,
				"config": false,
				"cp": false,
				"dirs": false,
				"echo": false,
				"env": false,
				"error": false,
				"exec": false,
				"exit": false,
				"find": false,
				"grep": false,
				"ls": false,
				"ln": false,
				"mkdir": false,
				"mv": false,
				"popd": false,
				"pushd": false,
				"pwd": false,
				"rm": false,
				"sed": false,
				"target": false,
				"tempdir": false,
				"test": false,
				"which": false
			},
			"prototypejs": {
				"$": false,
				"$$": false,
				"$A": false,
				"$break": false,
				"$continue": false,
				"$F": false,
				"$H": false,
				"$R": false,
				"$w": false,
				"Abstract": false,
				"Ajax": false,
				"Autocompleter": false,
				"Builder": false,
				"Class": false,
				"Control": false,
				"Draggable": false,
				"Draggables": false,
				"Droppables": false,
				"Effect": false,
				"Element": false,
				"Enumerable": false,
				"Event": false,
				"Field": false,
				"Form": false,
				"Hash": false,
				"Insertion": false,
				"ObjectRange": false,
				"PeriodicalExecuter": false,
				"Position": false,
				"Prototype": false,
				"Scriptaculous": false,
				"Selector": false,
				"Sortable": false,
				"SortableObserver": false,
				"Sound": false,
				"Template": false,
				"Toggle": false,
				"Try": false
			},
			"meteor": {
				"$": false,
				"_": false,
				"Accounts": false,
				"App": false,
				"Assets": false,
				"Blaze": false,
				"check": false,
				"Cordova": false,
				"DDP": false,
				"DDPServer": false,
				"Deps": false,
				"EJSON": false,
				"Email": false,
				"HTTP": false,
				"Log": false,
				"Match": false,
				"Meteor": false,
				"Mongo": false,
				"MongoInternals": false,
				"Npm": false,
				"Package": false,
				"Plugin": false,
				"process": false,
				"Random": false,
				"ReactiveDict": false,
				"ReactiveVar": false,
				"Router": false,
				"Session": false,
				"share": false,
				"Spacebars": false,
				"Template": false,
				"Tinytest": false,
				"Tracker": false,
				"UI": false,
				"Utils": false,
				"WebApp": false,
				"WebAppInternals": false
			},
			"mongo": {
				"_isWindows": false,
				"_rand": false,
				"BulkWriteResult": false,
				"cat": false,
				"cd": false,
				"connect": false,
				"db": false,
				"getHostName": false,
				"getMemInfo": false,
				"hostname": false,
				"listFiles": false,
				"load": false,
				"ls": false,
				"md5sumFile": false,
				"mkdir": false,
				"Mongo": false,
				"ObjectId": false,
				"PlanCache": false,
				"print": false,
				"printjson": false,
				"pwd": false,
				"quit": false,
				"removeFile": false,
				"rs": false,
				"sh": false,
				"UUID": false,
				"version": false,
				"WriteResult": false
			},
			"applescript": {
				"$": false,
				"Application": false,
				"Automation": false,
				"console": false,
				"delay": false,
				"Library": false,
				"ObjC": false,
				"ObjectSpecifier": false,
				"Path": false,
				"Progress": false,
				"Ref": false
			},
			"serviceworker": {
				"caches": false,
				"Cache": false,
				"CacheStorage": false,
				"Client": false,
				"clients": false,
				"Clients": false,
				"ExtendableEvent": false,
				"ExtendableMessageEvent": false,
				"FetchEvent": false,
				"importScripts": false,
				"registration": false,
				"self": false,
				"ServiceWorker": false,
				"ServiceWorkerContainer": false,
				"ServiceWorkerGlobalScope": false,
				"ServiceWorkerMessageEvent": false,
				"ServiceWorkerRegistration": false,
				"skipWaiting": false,
				"WindowClient": false
			},
			"atomtest": {
				"advanceClock": false,
				"fakeClearInterval": false,
				"fakeClearTimeout": false,
				"fakeSetInterval": false,
				"fakeSetTimeout": false,
				"resetTimeouts": false,
				"waitsForPromise": false
			},
			"embertest": {
				"andThen": false,
				"click": false,
				"currentPath": false,
				"currentRouteName": false,
				"currentURL": false,
				"fillIn": false,
				"find": false,
				"findWithAssert": false,
				"keyEvent": false,
				"pauseTest": false,
				"triggerEvent": false,
				"visit": false
			},
			"protractor": {
				"$": false,
				"$$": false,
				"browser": false,
				"By": false,
				"by": false,
				"DartObject": false,
				"element": false,
				"protractor": false
			},
			"shared-node-browser": {
				"clearInterval": false,
				"clearTimeout": false,
				"console": false,
				"setInterval": false,
				"setTimeout": false
			},
			"webextensions": {
				"browser": false,
				"chrome": false,
				"opr": false
			},
			"greasemonkey": {
				"GM_addStyle": false,
				"GM_deleteValue": false,
				"GM_getResourceText": false,
				"GM_getResourceURL": false,
				"GM_getValue": false,
				"GM_info": false,
				"GM_listValues": false,
				"GM_log": false,
				"GM_openInTab": false,
				"GM_registerMenuCommand": false,
				"GM_setClipboard": false,
				"GM_setValue": false,
				"GM_xmlhttpRequest": false,
				"unsafeWindow": false
			}
		};
	}, function (module, exports) {

		module.exports = {
			"75": 8490,
			"83": 383,
			"107": 8490,
			"115": 383,
			"181": 924,
			"197": 8491,
			"383": 83,
			"452": 453,
			"453": 452,
			"455": 456,
			"456": 455,
			"458": 459,
			"459": 458,
			"497": 498,
			"498": 497,
			"837": 8126,
			"914": 976,
			"917": 1013,
			"920": 1012,
			"921": 8126,
			"922": 1008,
			"924": 181,
			"928": 982,
			"929": 1009,
			"931": 962,
			"934": 981,
			"937": 8486,
			"962": 931,
			"976": 914,
			"977": 1012,
			"981": 934,
			"982": 928,
			"1008": 922,
			"1009": 929,
			"1012": [920, 977],
			"1013": 917,
			"7776": 7835,
			"7835": 7776,
			"8126": [837, 921],
			"8486": 937,
			"8490": 75,
			"8491": 197,
			"66560": 66600,
			"66561": 66601,
			"66562": 66602,
			"66563": 66603,
			"66564": 66604,
			"66565": 66605,
			"66566": 66606,
			"66567": 66607,
			"66568": 66608,
			"66569": 66609,
			"66570": 66610,
			"66571": 66611,
			"66572": 66612,
			"66573": 66613,
			"66574": 66614,
			"66575": 66615,
			"66576": 66616,
			"66577": 66617,
			"66578": 66618,
			"66579": 66619,
			"66580": 66620,
			"66581": 66621,
			"66582": 66622,
			"66583": 66623,
			"66584": 66624,
			"66585": 66625,
			"66586": 66626,
			"66587": 66627,
			"66588": 66628,
			"66589": 66629,
			"66590": 66630,
			"66591": 66631,
			"66592": 66632,
			"66593": 66633,
			"66594": 66634,
			"66595": 66635,
			"66596": 66636,
			"66597": 66637,
			"66598": 66638,
			"66599": 66639,
			"66600": 66560,
			"66601": 66561,
			"66602": 66562,
			"66603": 66563,
			"66604": 66564,
			"66605": 66565,
			"66606": 66566,
			"66607": 66567,
			"66608": 66568,
			"66609": 66569,
			"66610": 66570,
			"66611": 66571,
			"66612": 66572,
			"66613": 66573,
			"66614": 66574,
			"66615": 66575,
			"66616": 66576,
			"66617": 66577,
			"66618": 66578,
			"66619": 66579,
			"66620": 66580,
			"66621": 66581,
			"66622": 66582,
			"66623": 66583,
			"66624": 66584,
			"66625": 66585,
			"66626": 66586,
			"66627": 66587,
			"66628": 66588,
			"66629": 66589,
			"66630": 66590,
			"66631": 66591,
			"66632": 66592,
			"66633": 66593,
			"66634": 66594,
			"66635": 66595,
			"66636": 66596,
			"66637": 66597,
			"66638": 66598,
			"66639": 66599,
			"68736": 68800,
			"68737": 68801,
			"68738": 68802,
			"68739": 68803,
			"68740": 68804,
			"68741": 68805,
			"68742": 68806,
			"68743": 68807,
			"68744": 68808,
			"68745": 68809,
			"68746": 68810,
			"68747": 68811,
			"68748": 68812,
			"68749": 68813,
			"68750": 68814,
			"68751": 68815,
			"68752": 68816,
			"68753": 68817,
			"68754": 68818,
			"68755": 68819,
			"68756": 68820,
			"68757": 68821,
			"68758": 68822,
			"68759": 68823,
			"68760": 68824,
			"68761": 68825,
			"68762": 68826,
			"68763": 68827,
			"68764": 68828,
			"68765": 68829,
			"68766": 68830,
			"68767": 68831,
			"68768": 68832,
			"68769": 68833,
			"68770": 68834,
			"68771": 68835,
			"68772": 68836,
			"68773": 68837,
			"68774": 68838,
			"68775": 68839,
			"68776": 68840,
			"68777": 68841,
			"68778": 68842,
			"68779": 68843,
			"68780": 68844,
			"68781": 68845,
			"68782": 68846,
			"68783": 68847,
			"68784": 68848,
			"68785": 68849,
			"68786": 68850,
			"68800": 68736,
			"68801": 68737,
			"68802": 68738,
			"68803": 68739,
			"68804": 68740,
			"68805": 68741,
			"68806": 68742,
			"68807": 68743,
			"68808": 68744,
			"68809": 68745,
			"68810": 68746,
			"68811": 68747,
			"68812": 68748,
			"68813": 68749,
			"68814": 68750,
			"68815": 68751,
			"68816": 68752,
			"68817": 68753,
			"68818": 68754,
			"68819": 68755,
			"68820": 68756,
			"68821": 68757,
			"68822": 68758,
			"68823": 68759,
			"68824": 68760,
			"68825": 68761,
			"68826": 68762,
			"68827": 68763,
			"68828": 68764,
			"68829": 68765,
			"68830": 68766,
			"68831": 68767,
			"68832": 68768,
			"68833": 68769,
			"68834": 68770,
			"68835": 68771,
			"68836": 68772,
			"68837": 68773,
			"68838": 68774,
			"68839": 68775,
			"68840": 68776,
			"68841": 68777,
			"68842": 68778,
			"68843": 68779,
			"68844": 68780,
			"68845": 68781,
			"68846": 68782,
			"68847": 68783,
			"68848": 68784,
			"68849": 68785,
			"68850": 68786,
			"71840": 71872,
			"71841": 71873,
			"71842": 71874,
			"71843": 71875,
			"71844": 71876,
			"71845": 71877,
			"71846": 71878,
			"71847": 71879,
			"71848": 71880,
			"71849": 71881,
			"71850": 71882,
			"71851": 71883,
			"71852": 71884,
			"71853": 71885,
			"71854": 71886,
			"71855": 71887,
			"71856": 71888,
			"71857": 71889,
			"71858": 71890,
			"71859": 71891,
			"71860": 71892,
			"71861": 71893,
			"71862": 71894,
			"71863": 71895,
			"71864": 71896,
			"71865": 71897,
			"71866": 71898,
			"71867": 71899,
			"71868": 71900,
			"71869": 71901,
			"71870": 71902,
			"71871": 71903,
			"71872": 71840,
			"71873": 71841,
			"71874": 71842,
			"71875": 71843,
			"71876": 71844,
			"71877": 71845,
			"71878": 71846,
			"71879": 71847,
			"71880": 71848,
			"71881": 71849,
			"71882": 71850,
			"71883": 71851,
			"71884": 71852,
			"71885": 71853,
			"71886": 71854,
			"71887": 71855,
			"71888": 71856,
			"71889": 71857,
			"71890": 71858,
			"71891": 71859,
			"71892": 71860,
			"71893": 71861,
			"71894": 71862,
			"71895": 71863,
			"71896": 71864,
			"71897": 71865,
			"71898": 71866,
			"71899": 71867,
			"71900": 71868,
			"71901": 71869,
			"71902": 71870,
			"71903": 71871
		};
	}, function (module, exports, __webpack_require__) {

		var JSON5 = true ? exports : {};

		JSON5.parse = function () {
			"use strict";

			var at,
			    ch,
			    escapee = {
				"'": "'",
				'"': '"',
				'\\': '\\',
				'/': '/',
				'\n': '',
				b: '\b',
				f: '\f',
				n: '\n',
				r: '\r',
				t: '\t'
			},
			    ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', '\uFEFF'],
			    text,
			    error = function error(m) {

				var error = new SyntaxError();
				error.message = m;
				error.at = at;
				error.text = text;
				throw error;
			},
			    next = function next(c) {

				if (c && c !== ch) {
					error("Expected '" + c + "' instead of '" + ch + "'");
				}

				ch = text.charAt(at);
				at += 1;
				return ch;
			},
			    peek = function peek() {

				return text.charAt(at);
			},
			    identifier = function identifier() {

				var key = ch;

				if (ch !== '_' && ch !== '$' && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
					error("Bad identifier");
				}

				while (next() && (ch === '_' || ch === '$' || ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z' || ch >= '0' && ch <= '9')) {
					key += ch;
				}

				return key;
			},
			    number = function number() {

				var number,
				    sign = '',
				    string = '',
				    base = 10;

				if (ch === '-' || ch === '+') {
					sign = ch;
					next(ch);
				}

				if (ch === 'I') {
					number = word();
					if (typeof number !== 'number' || isNaN(number)) {
						error('Unexpected word for number');
					}
					return sign === '-' ? -number : number;
				}

				if (ch === 'N') {
					number = word();
					if (!isNaN(number)) {
						error('expected word to be NaN');
					}

					return number;
				}

				if (ch === '0') {
					string += ch;
					next();
					if (ch === 'x' || ch === 'X') {
						string += ch;
						next();
						base = 16;
					} else if (ch >= '0' && ch <= '9') {
						error('Octal literal');
					}
				}

				switch (base) {
					case 10:
						while (ch >= '0' && ch <= '9') {
							string += ch;
							next();
						}
						if (ch === '.') {
							string += '.';
							while (next() && ch >= '0' && ch <= '9') {
								string += ch;
							}
						}
						if (ch === 'e' || ch === 'E') {
							string += ch;
							next();
							if (ch === '-' || ch === '+') {
								string += ch;
								next();
							}
							while (ch >= '0' && ch <= '9') {
								string += ch;
								next();
							}
						}
						break;
					case 16:
						while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
							string += ch;
							next();
						}
						break;
				}

				if (sign === '-') {
					number = -string;
				} else {
					number = +string;
				}

				if (!isFinite(number)) {
					error("Bad number");
				} else {
					return number;
				}
			},
			    string = function string() {

				var hex,
				    i,
				    string = '',
				    delim,
				    uffff;

				if (ch === '"' || ch === "'") {
					delim = ch;
					while (next()) {
						if (ch === delim) {
							next();
							return string;
						} else if (ch === '\\') {
							next();
							if (ch === 'u') {
								uffff = 0;
								for (i = 0; i < 4; i += 1) {
									hex = parseInt(next(), 16);
									if (!isFinite(hex)) {
										break;
									}
									uffff = uffff * 16 + hex;
								}
								string += String.fromCharCode(uffff);
							} else if (ch === '\r') {
								if (peek() === '\n') {
									next();
								}
							} else if (typeof escapee[ch] === 'string') {
								string += escapee[ch];
							} else {
								break;
							}
						} else if (ch === '\n') {
							break;
						} else {
							string += ch;
						}
					}
				}
				error("Bad string");
			},
			    inlineComment = function inlineComment() {

				if (ch !== '/') {
					error("Not an inline comment");
				}

				do {
					next();
					if (ch === '\n' || ch === '\r') {
						next();
						return;
					}
				} while (ch);
			},
			    blockComment = function blockComment() {

				if (ch !== '*') {
					error("Not a block comment");
				}

				do {
					next();
					while (ch === '*') {
						next('*');
						if (ch === '/') {
							next('/');
							return;
						}
					}
				} while (ch);

				error("Unterminated block comment");
			},
			    comment = function comment() {

				if (ch !== '/') {
					error("Not a comment");
				}

				next('/');

				if (ch === '/') {
					inlineComment();
				} else if (ch === '*') {
					blockComment();
				} else {
					error("Unrecognized comment");
				}
			},
			    white = function white() {

				while (ch) {
					if (ch === '/') {
						comment();
					} else if (ws.indexOf(ch) >= 0) {
						next();
					} else {
						return;
					}
				}
			},
			    word = function word() {

				switch (ch) {
					case 't':
						next('t');
						next('r');
						next('u');
						next('e');
						return true;
					case 'f':
						next('f');
						next('a');
						next('l');
						next('s');
						next('e');
						return false;
					case 'n':
						next('n');
						next('u');
						next('l');
						next('l');
						return null;
					case 'I':
						next('I');
						next('n');
						next('f');
						next('i');
						next('n');
						next('i');
						next('t');
						next('y');
						return Infinity;
					case 'N':
						next('N');
						next('a');
						next('N');
						return NaN;
				}
				error("Unexpected '" + ch + "'");
			},
			    value,
			    array = function array() {

				var array = [];

				if (ch === '[') {
					next('[');
					white();
					while (ch) {
						if (ch === ']') {
							next(']');
							return array;
						}

						if (ch === ',') {
							error("Missing array element");
						} else {
							array.push(value());
						}
						white();

						if (ch !== ',') {
							next(']');
							return array;
						}
						next(',');
						white();
					}
				}
				error("Bad array");
			},
			    object = function object() {

				var key,
				    object = {};

				if (ch === '{') {
					next('{');
					white();
					while (ch) {
						if (ch === '}') {
							next('}');
							return object;
						}

						if (ch === '"' || ch === "'") {
							key = string();
						} else {
							key = identifier();
						}

						white();
						next(':');
						object[key] = value();
						white();

						if (ch !== ',') {
							next('}');
							return object;
						}
						next(',');
						white();
					}
				}
				error("Bad object");
			};

			value = function value() {

				white();
				switch (ch) {
					case '{':
						return object();
					case '[':
						return array();
					case '"':
					case "'":
						return string();
					case '-':
					case '+':
					case '.':
						return number();
					default:
						return ch >= '0' && ch <= '9' ? number() : word();
				}
			};

			return function (source, reviver) {
				var result;

				text = String(source);
				at = 0;
				ch = ' ';
				result = value();
				white();
				if (ch) {
					error("Syntax error");
				}

				return typeof reviver === 'function' ? function walk(holder, key) {
					var k,
					    v,
					    value = holder[key];
					if (value && typeof value === 'object') {
						for (k in value) {
							if (Object.prototype.hasOwnProperty.call(value, k)) {
								v = walk(value, k);
								if (v !== undefined) {
									value[k] = v;
								} else {
									delete value[k];
								}
							}
						}
					}
					return reviver.call(holder, key, value);
				}({ '': result }, '') : result;
			};
		}();

		JSON5.stringify = function (obj, replacer, space) {
			if (replacer && typeof replacer !== "function" && !isArray(replacer)) {
				throw new Error('Replacer must be a function or an array');
			}
			var getReplacedValueOrUndefined = function getReplacedValueOrUndefined(holder, key, isTopLevel) {
				var value = holder[key];

				if (value && value.toJSON && typeof value.toJSON === "function") {
					value = value.toJSON();
				}

				if (typeof replacer === "function") {
					return replacer.call(holder, key, value);
				} else if (replacer) {
					if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
						return value;
					} else {
						return undefined;
					}
				} else {
					return value;
				}
			};

			function isWordChar(char) {
				return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char >= '0' && char <= '9' || char === '_' || char === '$';
			}

			function isWordStart(char) {
				return char >= 'a' && char <= 'z' || char >= 'A' && char <= 'Z' || char === '_' || char === '$';
			}

			function isWord(key) {
				if (typeof key !== 'string') {
					return false;
				}
				if (!isWordStart(key[0])) {
					return false;
				}
				var i = 1,
				    length = key.length;
				while (i < length) {
					if (!isWordChar(key[i])) {
						return false;
					}
					i++;
				}
				return true;
			}

			JSON5.isWord = isWord;

			function isArray(obj) {
				if (Array.isArray) {
					return Array.isArray(obj);
				} else {
					return Object.prototype.toString.call(obj) === '[object Array]';
				}
			}

			function isDate(obj) {
				return Object.prototype.toString.call(obj) === '[object Date]';
			}

			isNaN = isNaN || function (val) {
				return typeof val === 'number' && val !== val;
			};

			var objStack = [];
			function checkForCircular(obj) {
				for (var i = 0; i < objStack.length; i++) {
					if (objStack[i] === obj) {
						throw new TypeError("Converting circular structure to JSON");
					}
				}
			}

			function makeIndent(str, num, noNewLine) {
				if (!str) {
					return "";
				}

				if (str.length > 10) {
					str = str.substring(0, 10);
				}

				var indent = noNewLine ? "" : "\n";
				for (var i = 0; i < num; i++) {
					indent += str;
				}

				return indent;
			}

			var indentStr;
			if (space) {
				if (typeof space === "string") {
					indentStr = space;
				} else if (typeof space === "number" && space >= 0) {
					indentStr = makeIndent(" ", space, true);
				} else {}
			}

			var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
			    escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
			    meta = {
				'\b': '\\b',
				'\t': '\\t',
				'\n': '\\n',
				'\f': '\\f',
				'\r': '\\r',
				'"': '\\"',
				'\\': '\\\\'
			};
			function escapeString(string) {
				escapable.lastIndex = 0;
				return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
					var c = meta[a];
					return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
				}) + '"' : '"' + string + '"';
			}


			function internalStringify(holder, key, isTopLevel) {
				var buffer, res;

				var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

				if (obj_part && !isDate(obj_part)) {
					obj_part = obj_part.valueOf();
				}
				switch (typeof obj_part) {
					case "boolean":
						return obj_part.toString();

					case "number":
						if (isNaN(obj_part) || !isFinite(obj_part)) {
							return "null";
						}
						return obj_part.toString();

					case "string":
						return escapeString(obj_part.toString());

					case "object":
						if (obj_part === null) {
							return "null";
						} else if (isArray(obj_part)) {
							checkForCircular(obj_part);
							buffer = "[";
							objStack.push(obj_part);

							for (var i = 0; i < obj_part.length; i++) {
								res = internalStringify(obj_part, i, false);
								buffer += makeIndent(indentStr, objStack.length);
								if (res === null || typeof res === "undefined") {
									buffer += "null";
								} else {
									buffer += res;
								}
								if (i < obj_part.length - 1) {
									buffer += ",";
								} else if (indentStr) {
									buffer += "\n";
								}
							}
							objStack.pop();
							buffer += makeIndent(indentStr, objStack.length, true) + "]";
						} else {
							checkForCircular(obj_part);
							buffer = "{";
							var nonEmpty = false;
							objStack.push(obj_part);
							for (var prop in obj_part) {
								if (obj_part.hasOwnProperty(prop)) {
									var value = internalStringify(obj_part, prop, false);
									isTopLevel = false;
									if (typeof value !== "undefined" && value !== null) {
										buffer += makeIndent(indentStr, objStack.length);
										nonEmpty = true;
										var key = isWord(prop) ? prop : escapeString(prop);
										buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
									}
								}
							}
							objStack.pop();
							if (nonEmpty) {
								buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + "}";
							} else {
								buffer = '{}';
							}
						}
						return buffer;
					default:
						return undefined;
				}
			}

			var topLevelHolder = { "": obj };
			if (obj === undefined) {
				return getReplacedValueOrUndefined(topLevelHolder, '', true);
			}
			return internalStringify(topLevelHolder, '', true);
		};
	}, function (module, exports) {

		'use strict';

		var arr = [];
		var charCodeCache = [];

		module.exports = function (a, b) {
			if (a === b) {
				return 0;
			}

			var aLen = a.length;
			var bLen = b.length;

			if (aLen === 0) {
				return bLen;
			}

			if (bLen === 0) {
				return aLen;
			}

			var bCharCode;
			var ret;
			var tmp;
			var tmp2;
			var i = 0;
			var j = 0;

			while (i < aLen) {
				charCodeCache[i] = a.charCodeAt(i);
				arr[i] = ++i;
			}

			while (j < bLen) {
				bCharCode = b.charCodeAt(j);
				tmp = j++;
				ret = j;

				for (i = 0; i < aLen; i++) {
					tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
					tmp = arr[i];
					ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
				}
			}

			return ret;
		};
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36),
		    root = __webpack_require__(23);

		var DataView = getNative(root, 'DataView');

		module.exports = DataView;
	}, function (module, exports, __webpack_require__) {

		var hashClear = __webpack_require__(538),
		    hashDelete = __webpack_require__(539),
		    hashGet = __webpack_require__(540),
		    hashHas = __webpack_require__(541),
		    hashSet = __webpack_require__(542);

		function Hash(entries) {
			var index = -1,
			    length = entries ? entries.length : 0;

			this.clear();
			while (++index < length) {
				var entry = entries[index];
				this.set(entry[0], entry[1]);
			}
		}

		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		module.exports = Hash;
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36),
		    root = __webpack_require__(23);

		var Promise = getNative(root, 'Promise');

		module.exports = Promise;
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36),
		    root = __webpack_require__(23);

		var WeakMap = getNative(root, 'WeakMap');

		module.exports = WeakMap;
	}, function (module, exports) {
		function addMapEntry(map, pair) {
			map.set(pair[0], pair[1]);
			return map;
		}

		module.exports = addMapEntry;
	}, function (module, exports) {
		function addSetEntry(set, value) {
			set.add(value);
			return set;
		}

		module.exports = addSetEntry;
	}, function (module, exports, __webpack_require__) {

		var baseIndexOf = __webpack_require__(103);

		function arrayIncludes(array, value) {
			var length = array ? array.length : 0;
			return !!length && baseIndexOf(array, value, 0) > -1;
		}

		module.exports = arrayIncludes;
	}, function (module, exports) {
		function arrayIncludesWith(array, value, comparator) {
			var index = -1,
			    length = array ? array.length : 0;

			while (++index < length) {
				if (comparator(value, array[index])) {
					return true;
				}
			}
			return false;
		}

		module.exports = arrayIncludesWith;
	}, function (module, exports) {
		function arraySome(array, predicate) {
			var index = -1,
			    length = array ? array.length : 0;

			while (++index < length) {
				if (predicate(array[index], index, array)) {
					return true;
				}
			}
			return false;
		}

		module.exports = arraySome;
	}, function (module, exports) {
		function asciiToArray(string) {
			return string.split('');
		}

		module.exports = asciiToArray;
	}, function (module, exports, __webpack_require__) {

		var eq = __webpack_require__(44);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function assignInDefaults(objValue, srcValue, key, object) {
			if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
				return srcValue;
			}
			return objValue;
		}

		module.exports = assignInDefaults;
	}, function (module, exports, __webpack_require__) {

		var copyObject = __webpack_require__(43),
		    keys = __webpack_require__(25);

		function baseAssign(object, source) {
			return object && copyObject(source, keys(source), object);
		}

		module.exports = baseAssign;
	}, function (module, exports) {
		function baseClamp(number, lower, upper) {
			if (number === number) {
				if (upper !== undefined) {
					number = number <= upper ? number : upper;
				}
				if (lower !== undefined) {
					number = number >= lower ? number : lower;
				}
			}
			return number;
		}

		module.exports = baseClamp;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8);

		var objectCreate = Object.create;

		function baseCreate(proto) {
			return isObject(proto) ? objectCreate(proto) : {};
		}

		module.exports = baseCreate;
	}, function (module, exports, __webpack_require__) {

		var arrayPush = __webpack_require__(246),
		    isFlattenable = __webpack_require__(546);

		function baseFlatten(array, depth, predicate, isStrict, result) {
			var index = -1,
			    length = array.length;

			predicate || (predicate = isFlattenable);
			result || (result = []);

			while (++index < length) {
				var value = array[index];
				if (depth > 0 && predicate(value)) {
					if (depth > 1) {
						baseFlatten(value, depth - 1, predicate, isStrict, result);
					} else {
						arrayPush(result, value);
					}
				} else if (!isStrict) {
					result[result.length] = value;
				}
			}
			return result;
		}

		module.exports = baseFlatten;
	}, function (module, exports, __webpack_require__) {

		var createBaseFor = __webpack_require__(530);

		var baseFor = createBaseFor();

		module.exports = baseFor;
	}, function (module, exports, __webpack_require__) {

		var baseFor = __webpack_require__(487),
		    keys = __webpack_require__(25);

		function baseForOwn(object, iteratee) {
			return object && baseFor(object, iteratee, keys);
		}

		module.exports = baseForOwn;
	}, function (module, exports, __webpack_require__) {

		var arrayPush = __webpack_require__(246),
		    isArray = __webpack_require__(6);

		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
			var result = keysFunc(object);
			return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		}

		module.exports = baseGetAllKeys;
	}, function (module, exports) {
		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function baseGetTag(value) {
			return objectToString.call(value);
		}

		module.exports = baseGetTag;
	}, function (module, exports) {
		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function baseHas(object, key) {
			return object != null && hasOwnProperty.call(object, key);
		}

		module.exports = baseHas;
	}, function (module, exports) {
		function baseHasIn(object, key) {
			return object != null && key in Object(object);
		}

		module.exports = baseHasIn;
	}, function (module, exports) {
		function baseIndexOfWith(array, value, fromIndex, comparator) {
			var index = fromIndex - 1,
			    length = array.length;

			while (++index < length) {
				if (comparator(array[index], value)) {
					return index;
				}
			}
			return -1;
		}

		module.exports = baseIndexOfWith;
	}, function (module, exports, __webpack_require__) {

		var Stack = __webpack_require__(98),
		    equalArrays = __webpack_require__(257),
		    equalByTag = __webpack_require__(532),
		    equalObjects = __webpack_require__(533),
		    getTag = __webpack_require__(261),
		    isArray = __webpack_require__(6),
		    isTypedArray = __webpack_require__(182);

		var PARTIAL_COMPARE_FLAG = 2;

		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    objectTag = '[object Object]';

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
			var objIsArr = isArray(object),
			    othIsArr = isArray(other),
			    objTag = arrayTag,
			    othTag = arrayTag;

			if (!objIsArr) {
				objTag = getTag(object);
				objTag = objTag == argsTag ? objectTag : objTag;
			}
			if (!othIsArr) {
				othTag = getTag(other);
				othTag = othTag == argsTag ? objectTag : othTag;
			}
			var objIsObj = objTag == objectTag,
			    othIsObj = othTag == objectTag,
			    isSameTag = objTag == othTag;

			if (isSameTag && !objIsObj) {
				stack || (stack = new Stack());
				return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
			}
			if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
				var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
				    othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

				if (objIsWrapped || othIsWrapped) {
					var objUnwrapped = objIsWrapped ? object.value() : object,
					    othUnwrapped = othIsWrapped ? other.value() : other;

					stack || (stack = new Stack());
					return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
				}
			}
			if (!isSameTag) {
				return false;
			}
			stack || (stack = new Stack());
			return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
		}

		module.exports = baseIsEqualDeep;
	}, function (module, exports, __webpack_require__) {

		var Stack = __webpack_require__(98),
		    baseIsEqual = __webpack_require__(251);

		var UNORDERED_COMPARE_FLAG = 1,
		    PARTIAL_COMPARE_FLAG = 2;

		function baseIsMatch(object, source, matchData, customizer) {
			var index = matchData.length,
			    length = index,
			    noCustomizer = !customizer;

			if (object == null) {
				return !length;
			}
			object = Object(object);
			while (index--) {
				var data = matchData[index];
				if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
					return false;
				}
			}
			while (++index < length) {
				data = matchData[index];
				var key = data[0],
				    objValue = object[key],
				    srcValue = data[1];

				if (noCustomizer && data[2]) {
					if (objValue === undefined && !(key in object)) {
						return false;
					}
				} else {
					var stack = new Stack();
					if (customizer) {
						var result = customizer(objValue, srcValue, key, object, source, stack);
					}
					if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
						return false;
					}
				}
			}
			return true;
		}

		module.exports = baseIsMatch;
	}, function (module, exports) {
		function baseIsNaN(value) {
			return value !== value;
		}

		module.exports = baseIsNaN;
	}, function (module, exports, __webpack_require__) {

		var isFunction = __webpack_require__(118),
		    isMasked = __webpack_require__(548),
		    isObject = __webpack_require__(8),
		    toSource = __webpack_require__(267);

		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		var funcProto = Function.prototype,
		    objectProto = Object.prototype;

		var funcToString = funcProto.toString;

		var hasOwnProperty = objectProto.hasOwnProperty;

		var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

		function baseIsNative(value) {
			if (!isObject(value) || isMasked(value)) {
				return false;
			}
			var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
			return pattern.test(toSource(value));
		}

		module.exports = baseIsNative;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8);

		var regexpTag = '[object RegExp]';

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function baseIsRegExp(value) {
			return isObject(value) && objectToString.call(value) == regexpTag;
		}

		module.exports = baseIsRegExp;
	}, function (module, exports, __webpack_require__) {

		var isLength = __webpack_require__(180),
		    isObjectLike = __webpack_require__(32);

		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    objectTag = '[object Object]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

		var objectProto = Object.prototype;

		var objectToString = objectProto.toString;

		function baseIsTypedArray(value) {
			return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
		}

		module.exports = baseIsTypedArray;
	}, function (module, exports, __webpack_require__) {

		var isPrototype = __webpack_require__(109),
		    nativeKeys = __webpack_require__(561);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function baseKeys(object) {
			if (!isPrototype(object)) {
				return nativeKeys(object);
			}
			var result = [];
			for (var key in Object(object)) {
				if (hasOwnProperty.call(object, key) && key != 'constructor') {
					result.push(key);
				}
			}
			return result;
		}

		module.exports = baseKeys;
	}, function (module, exports, __webpack_require__) {

		var baseIsMatch = __webpack_require__(495),
		    getMatchData = __webpack_require__(535),
		    matchesStrictComparable = __webpack_require__(265);

		function baseMatches(source) {
			var matchData = getMatchData(source);
			if (matchData.length == 1 && matchData[0][2]) {
				return matchesStrictComparable(matchData[0][0], matchData[0][1]);
			}
			return function (object) {
				return object === source || baseIsMatch(object, source, matchData);
			};
		}

		module.exports = baseMatches;
	}, function (module, exports, __webpack_require__) {

		var baseIsEqual = __webpack_require__(251),
		    get = __webpack_require__(590),
		    hasIn = __webpack_require__(591),
		    isKey = __webpack_require__(108),
		    isStrictComparable = __webpack_require__(263),
		    matchesStrictComparable = __webpack_require__(265),
		    toKey = __webpack_require__(112);

		var UNORDERED_COMPARE_FLAG = 1,
		    PARTIAL_COMPARE_FLAG = 2;

		function baseMatchesProperty(path, srcValue) {
			if (isKey(path) && isStrictComparable(srcValue)) {
				return matchesStrictComparable(toKey(path), srcValue);
			}
			return function (object) {
				var objValue = get(object, path);
				return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
			};
		}

		module.exports = baseMatchesProperty;
	}, function (module, exports, __webpack_require__) {

		var Stack = __webpack_require__(98),
		    arrayEach = __webpack_require__(169),
		    assignMergeValue = __webpack_require__(248),
		    baseKeysIn = __webpack_require__(252),
		    baseMergeDeep = __webpack_require__(504),
		    isArray = __webpack_require__(6),
		    isObject = __webpack_require__(8),
		    isTypedArray = __webpack_require__(182);

		function baseMerge(object, source, srcIndex, customizer, stack) {
			if (object === source) {
				return;
			}
			if (!(isArray(source) || isTypedArray(source))) {
				var props = baseKeysIn(source);
			}
			arrayEach(props || source, function (srcValue, key) {
				if (props) {
					key = srcValue;
					srcValue = source[key];
				}
				if (isObject(srcValue)) {
					stack || (stack = new Stack());
					baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
				} else {
					var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

					if (newValue === undefined) {
						newValue = srcValue;
					}
					assignMergeValue(object, key, newValue);
				}
			});
		}

		module.exports = baseMerge;
	}, function (module, exports, __webpack_require__) {

		var assignMergeValue = __webpack_require__(248),
		    baseClone = __webpack_require__(102),
		    copyArray = __webpack_require__(175),
		    isArguments = __webpack_require__(117),
		    isArray = __webpack_require__(6),
		    isArrayLikeObject = __webpack_require__(270),
		    isFunction = __webpack_require__(118),
		    isObject = __webpack_require__(8),
		    isPlainObject = __webpack_require__(273),
		    isTypedArray = __webpack_require__(182),
		    toPlainObject = __webpack_require__(606);

		function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
			var objValue = object[key],
			    srcValue = source[key],
			    stacked = stack.get(srcValue);

			if (stacked) {
				assignMergeValue(object, key, stacked);
				return;
			}
			var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

			var isCommon = newValue === undefined;

			if (isCommon) {
				newValue = srcValue;
				if (isArray(srcValue) || isTypedArray(srcValue)) {
					if (isArray(objValue)) {
						newValue = objValue;
					} else if (isArrayLikeObject(objValue)) {
						newValue = copyArray(objValue);
					} else {
						isCommon = false;
						newValue = baseClone(srcValue, true);
					}
				} else if (isPlainObject(srcValue) || isArguments(srcValue)) {
					if (isArguments(objValue)) {
						newValue = toPlainObject(objValue);
					} else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
						isCommon = false;
						newValue = baseClone(srcValue, true);
					} else {
						newValue = objValue;
					}
				} else {
					isCommon = false;
				}
			}
			if (isCommon) {
				stack.set(srcValue, newValue);
				mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
				stack['delete'](srcValue);
			}
			assignMergeValue(object, key, newValue);
		}

		module.exports = baseMergeDeep;
	}, function (module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(100),
		    baseIteratee = __webpack_require__(42),
		    baseMap = __webpack_require__(253),
		    baseSortBy = __webpack_require__(512),
		    baseUnary = __webpack_require__(105),
		    compareMultiple = __webpack_require__(526),
		    identity = __webpack_require__(115);

		function baseOrderBy(collection, iteratees, orders) {
			var index = -1;
			iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

			var result = baseMap(collection, function (value, key, collection) {
				var criteria = arrayMap(iteratees, function (iteratee) {
					return iteratee(value);
				});
				return { 'criteria': criteria, 'index': ++index, 'value': value };
			});

			return baseSortBy(result, function (object, other) {
				return compareMultiple(object, other, orders);
			});
		}

		module.exports = baseOrderBy;
	}, function (module, exports) {
		function baseProperty(key) {
			return function (object) {
				return object == null ? undefined : object[key];
			};
		}

		module.exports = baseProperty;
	}, function (module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(250);

		function basePropertyDeep(path) {
			return function (object) {
				return baseGet(object, path);
			};
		}

		module.exports = basePropertyDeep;
	}, function (module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(100),
		    baseIndexOf = __webpack_require__(103),
		    baseIndexOfWith = __webpack_require__(493),
		    baseUnary = __webpack_require__(105),
		    copyArray = __webpack_require__(175);

		var arrayProto = Array.prototype;

		var splice = arrayProto.splice;

		function basePullAll(array, values, iteratee, comparator) {
			var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
			    index = -1,
			    length = values.length,
			    seen = array;

			if (array === values) {
				values = copyArray(values);
			}
			if (iteratee) {
				seen = arrayMap(array, baseUnary(iteratee));
			}
			while (++index < length) {
				var fromIndex = 0,
				    value = values[index],
				    computed = iteratee ? iteratee(value) : value;

				while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
					if (seen !== array) {
						splice.call(seen, fromIndex, 1);
					}
					splice.call(array, fromIndex, 1);
				}
			}
			return array;
		}

		module.exports = basePullAll;
	}, function (module, exports) {
		var MAX_SAFE_INTEGER = 9007199254740991;

		var nativeFloor = Math.floor;

		function baseRepeat(string, n) {
			var result = '';
			if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
				return result;
			}

			do {
				if (n % 2) {
					result += string;
				}
				n = nativeFloor(n / 2);
				if (n) {
					string += string;
				}
			} while (n);

			return result;
		}

		module.exports = baseRepeat;
	}, function (module, exports, __webpack_require__) {

		var constant = __webpack_require__(582),
		    identity = __webpack_require__(115),
		    nativeDefineProperty = __webpack_require__(560);

		var baseSetToString = !nativeDefineProperty ? identity : function (func, string) {
			return nativeDefineProperty(func, 'toString', {
				'configurable': true,
				'enumerable': false,
				'value': constant(string),
				'writable': true
			});
		};

		module.exports = baseSetToString;
	}, function (module, exports) {
		function baseSlice(array, start, end) {
			var index = -1,
			    length = array.length;

			if (start < 0) {
				start = -start > length ? 0 : length + start;
			}
			end = end > length ? length : end;
			if (end < 0) {
				end += length;
			}
			length = start > end ? 0 : end - start >>> 0;
			start >>>= 0;

			var result = Array(length);
			while (++index < length) {
				result[index] = array[index + start];
			}
			return result;
		}

		module.exports = baseSlice;
	}, function (module, exports) {
		function baseSortBy(array, comparer) {
			var length = array.length;

			array.sort(comparer);
			while (length--) {
				array[length] = array[length].value;
			}
			return array;
		}

		module.exports = baseSortBy;
	}, function (module, exports) {
		function baseTimes(n, iteratee) {
			var index = -1,
			    result = Array(n);

			while (++index < n) {
				result[index] = iteratee(index);
			}
			return result;
		}

		module.exports = baseTimes;
	}, function (module, exports, __webpack_require__) {

		var SetCache = __webpack_require__(242),
		    arrayIncludes = __webpack_require__(478),
		    arrayIncludesWith = __webpack_require__(479),
		    cacheHas = __webpack_require__(254),
		    createSet = __webpack_require__(531),
		    setToArray = __webpack_require__(111);

		var LARGE_ARRAY_SIZE = 200;

		function baseUniq(array, iteratee, comparator) {
			var index = -1,
			    includes = arrayIncludes,
			    length = array.length,
			    isCommon = true,
			    result = [],
			    seen = result;

			if (comparator) {
				isCommon = false;
				includes = arrayIncludesWith;
			} else if (length >= LARGE_ARRAY_SIZE) {
				var set = iteratee ? null : createSet(array);
				if (set) {
					return setToArray(set);
				}
				isCommon = false;
				includes = cacheHas;
				seen = new SetCache();
			} else {
				seen = iteratee ? [] : result;
			}
			outer: while (++index < length) {
				var value = array[index],
				    computed = iteratee ? iteratee(value) : value;

				value = comparator || value !== 0 ? value : 0;
				if (isCommon && computed === computed) {
					var seenIndex = seen.length;
					while (seenIndex--) {
						if (seen[seenIndex] === computed) {
							continue outer;
						}
					}
					if (iteratee) {
						seen.push(computed);
					}
					result.push(value);
				} else if (!includes(seen, computed, comparator)) {
					if (seen !== result) {
						seen.push(computed);
					}
					result.push(value);
				}
			}
			return result;
		}

		module.exports = baseUniq;
	}, function (module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(100);

		function baseValues(object, props) {
			return arrayMap(props, function (key) {
				return object[key];
			});
		}

		module.exports = baseValues;
	}, function (module, exports, __webpack_require__) {

		var baseSlice = __webpack_require__(511);

		function castSlice(array, start, end) {
			var length = array.length;
			end = end === undefined ? length : end;
			return !start && end >= length ? array : baseSlice(array, start, end);
		}

		module.exports = castSlice;
	}, function (module, exports, __webpack_require__) {

		var baseIndexOf = __webpack_require__(103);

		function charsEndIndex(strSymbols, chrSymbols) {
			var index = strSymbols.length;

			while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
			return index;
		}

		module.exports = charsEndIndex;
	}, function (module, exports) {
		function cloneBuffer(buffer, isDeep) {
			if (isDeep) {
				return buffer.slice();
			}
			var result = new buffer.constructor(buffer.length);
			buffer.copy(result);
			return result;
		}

		module.exports = cloneBuffer;
	}, function (module, exports, __webpack_require__) {

		var cloneArrayBuffer = __webpack_require__(174);

		function cloneDataView(dataView, isDeep) {
			var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
			return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
		}

		module.exports = cloneDataView;
	}, function (module, exports, __webpack_require__) {

		var addMapEntry = __webpack_require__(476),
		    arrayReduce = __webpack_require__(247),
		    mapToArray = __webpack_require__(264);

		function cloneMap(map, isDeep, cloneFunc) {
			var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
			return arrayReduce(array, addMapEntry, new map.constructor());
		}

		module.exports = cloneMap;
	}, function (module, exports) {
		var reFlags = /\w*$/;

		function cloneRegExp(regexp) {
			var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
			result.lastIndex = regexp.lastIndex;
			return result;
		}

		module.exports = cloneRegExp;
	}, function (module, exports, __webpack_require__) {

		var addSetEntry = __webpack_require__(477),
		    arrayReduce = __webpack_require__(247),
		    setToArray = __webpack_require__(111);

		function cloneSet(set, isDeep, cloneFunc) {
			var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
			return arrayReduce(array, addSetEntry, new set.constructor());
		}

		module.exports = cloneSet;
	}, function (module, exports, __webpack_require__) {

		var Symbol = __webpack_require__(99);

		var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
		    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

		function cloneSymbol(symbol) {
			return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
		}

		module.exports = cloneSymbol;
	}, function (module, exports, __webpack_require__) {

		var cloneArrayBuffer = __webpack_require__(174);

		function cloneTypedArray(typedArray, isDeep) {
			var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
			return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		}

		module.exports = cloneTypedArray;
	}, function (module, exports, __webpack_require__) {

		var isSymbol = __webpack_require__(71);

		function compareAscending(value, other) {
			if (value !== other) {
				var valIsDefined = value !== undefined,
				    valIsNull = value === null,
				    valIsReflexive = value === value,
				    valIsSymbol = isSymbol(value);

				var othIsDefined = other !== undefined,
				    othIsNull = other === null,
				    othIsReflexive = other === other,
				    othIsSymbol = isSymbol(other);

				if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
					return 1;
				}
				if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
					return -1;
				}
			}
			return 0;
		}

		module.exports = compareAscending;
	}, function (module, exports, __webpack_require__) {

		var compareAscending = __webpack_require__(525);

		function compareMultiple(object, other, orders) {
			var index = -1,
			    objCriteria = object.criteria,
			    othCriteria = other.criteria,
			    length = objCriteria.length,
			    ordersLength = orders.length;

			while (++index < length) {
				var result = compareAscending(objCriteria[index], othCriteria[index]);
				if (result) {
					if (index >= ordersLength) {
						return result;
					}
					var order = orders[index];
					return result * (order == 'desc' ? -1 : 1);
				}
			}

			return object.index - other.index;
		}

		module.exports = compareMultiple;
	}, function (module, exports, __webpack_require__) {

		var copyObject = __webpack_require__(43),
		    getSymbols = __webpack_require__(260);

		function copySymbols(source, object) {
			return copyObject(source, getSymbols(source), object);
		}

		module.exports = copySymbols;
	}, function (module, exports, __webpack_require__) {

		var root = __webpack_require__(23);

		var coreJsData = root['__core-js_shared__'];

		module.exports = coreJsData;
	}, function (module, exports, __webpack_require__) {

		var isArrayLike = __webpack_require__(24);

		function createBaseEach(eachFunc, fromRight) {
			return function (collection, iteratee) {
				if (collection == null) {
					return collection;
				}
				if (!isArrayLike(collection)) {
					return eachFunc(collection, iteratee);
				}
				var length = collection.length,
				    index = fromRight ? length : -1,
				    iterable = Object(collection);

				while (fromRight ? index-- : ++index < length) {
					if (iteratee(iterable[index], index, iterable) === false) {
						break;
					}
				}
				return collection;
			};
		}

		module.exports = createBaseEach;
	}, function (module, exports) {
		function createBaseFor(fromRight) {
			return function (object, iteratee, keysFunc) {
				var index = -1,
				    iterable = Object(object),
				    props = keysFunc(object),
				    length = props.length;

				while (length--) {
					var key = props[fromRight ? length : ++index];
					if (iteratee(iterable[key], key, iterable) === false) {
						break;
					}
				}
				return object;
			};
		}

		module.exports = createBaseFor;
	}, function (module, exports, __webpack_require__) {

		var Set = __webpack_require__(241),
		    noop = __webpack_require__(597),
		    setToArray = __webpack_require__(111);

		var INFINITY = 1 / 0;

		var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
			return new Set(values);
		};

		module.exports = createSet;
	}, function (module, exports, __webpack_require__) {

		var Symbol = __webpack_require__(99),
		    Uint8Array = __webpack_require__(243),
		    eq = __webpack_require__(44),
		    equalArrays = __webpack_require__(257),
		    mapToArray = __webpack_require__(264),
		    setToArray = __webpack_require__(111);

		var UNORDERED_COMPARE_FLAG = 1,
		    PARTIAL_COMPARE_FLAG = 2;

		var boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]';

		var symbolProto = Symbol ? typeof Symbol === 'function' ? Symbol.prototype : '@@prototype' : undefined,
		    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

		function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
			switch (tag) {
				case dataViewTag:
					if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
						return false;
					}
					object = object.buffer;
					other = other.buffer;

				case arrayBufferTag:
					if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
						return false;
					}
					return true;

				case boolTag:
				case dateTag:
				case numberTag:
					return eq(+object, +other);

				case errorTag:
					return object.name == other.name && object.message == other.message;

				case regexpTag:
				case stringTag:
					return object == other + '';

				case mapTag:
					var convert = mapToArray;

				case setTag:
					var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
					convert || (convert = setToArray);

					if (object.size != other.size && !isPartial) {
						return false;
					}

					var stacked = stack.get(object);
					if (stacked) {
						return stacked == other;
					}
					bitmask |= UNORDERED_COMPARE_FLAG;

					stack.set(object, other);
					var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
					stack['delete'](object);
					return result;

				case symbolTag:
					if (symbolValueOf) {
						return symbolValueOf.call(object) == symbolValueOf.call(other);
					}
			}
			return false;
		}

		module.exports = equalByTag;
	}, function (module, exports, __webpack_require__) {

		var keys = __webpack_require__(25);

		var PARTIAL_COMPARE_FLAG = 2;

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
			var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
			    objProps = keys(object),
			    objLength = objProps.length,
			    othProps = keys(other),
			    othLength = othProps.length;

			if (objLength != othLength && !isPartial) {
				return false;
			}
			var index = objLength;
			while (index--) {
				var key = objProps[index];
				if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
					return false;
				}
			}

			var stacked = stack.get(object);
			if (stacked && stack.get(other)) {
				return stacked == other;
			}
			var result = true;
			stack.set(object, other);
			stack.set(other, object);

			var skipCtor = isPartial;
			while (++index < objLength) {
				key = objProps[index];
				var objValue = object[key],
				    othValue = other[key];

				if (customizer) {
					var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
				}

				if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
					result = false;
					break;
				}
				skipCtor || (skipCtor = key == 'constructor');
			}
			if (result && !skipCtor) {
				var objCtor = object.constructor,
				    othCtor = other.constructor;

				if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
					result = false;
				}
			}
			stack['delete'](object);
			stack['delete'](other);
			return result;
		}

		module.exports = equalObjects;
	}, function (module, exports, __webpack_require__) {

		var baseGetAllKeys = __webpack_require__(489),
		    getSymbols = __webpack_require__(260),
		    keys = __webpack_require__(25);

		function getAllKeys(object) {
			return baseGetAllKeys(object, keys, getSymbols);
		}

		module.exports = getAllKeys;
	}, function (module, exports, __webpack_require__) {

		var isStrictComparable = __webpack_require__(263),
		    keys = __webpack_require__(25);

		function getMatchData(object) {
			var result = keys(object),
			    length = result.length;

			while (length--) {
				var key = result[length],
				    value = object[key];

				result[length] = [key, value, isStrictComparable(value)];
			}
			return result;
		}

		module.exports = getMatchData;
	}, function (module, exports) {
		function getValue(object, key) {
			return object == null ? undefined : object[key];
		}

		module.exports = getValue;
	}, function (module, exports) {
		var rsAstralRange = '\\ud800-\\udfff',
		    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
		    rsComboSymbolsRange = '\\u20d0-\\u20f0',
		    rsVarRange = '\\ufe0e\\ufe0f';

		var rsZWJ = '\\u200d';

		var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');

		function hasUnicode(string) {
			return reHasUnicode.test(string);
		}

		module.exports = hasUnicode;
	}, function (module, exports, __webpack_require__) {

		var nativeCreate = __webpack_require__(110);

		function hashClear() {
			this.__data__ = nativeCreate ? nativeCreate(null) : {};
			this.size = 0;
		}

		module.exports = hashClear;
	}, function (module, exports) {
		function hashDelete(key) {
			var result = this.has(key) && delete this.__data__[key];
			this.size -= result ? 1 : 0;
			return result;
		}

		module.exports = hashDelete;
	}, function (module, exports, __webpack_require__) {

		var nativeCreate = __webpack_require__(110);

		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function hashGet(key) {
			var data = this.__data__;
			if (nativeCreate) {
				var result = data[key];
				return result === HASH_UNDEFINED ? undefined : result;
			}
			return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		module.exports = hashGet;
	}, function (module, exports, __webpack_require__) {

		var nativeCreate = __webpack_require__(110);

		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function hashHas(key) {
			var data = this.__data__;
			return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
		}

		module.exports = hashHas;
	}, function (module, exports, __webpack_require__) {

		var nativeCreate = __webpack_require__(110);

		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		function hashSet(key, value) {
			var data = this.__data__;
			this.size += this.has(key) ? 0 : 1;
			data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
			return this;
		}

		module.exports = hashSet;
	}, function (module, exports) {
		var objectProto = Object.prototype;

		var hasOwnProperty = objectProto.hasOwnProperty;

		function initCloneArray(array) {
			var length = array.length,
			    result = array.constructor(length);

			if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
				result.index = array.index;
				result.input = array.input;
			}
			return result;
		}

		module.exports = initCloneArray;
	}, function (module, exports, __webpack_require__) {

		var cloneArrayBuffer = __webpack_require__(174),
		    cloneDataView = __webpack_require__(519),
		    cloneMap = __webpack_require__(520),
		    cloneRegExp = __webpack_require__(521),
		    cloneSet = __webpack_require__(522),
		    cloneSymbol = __webpack_require__(523),
		    cloneTypedArray = __webpack_require__(524);

		var boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    symbolTag = '[object Symbol]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		function initCloneByTag(object, tag, cloneFunc, isDeep) {
			var Ctor = object.constructor;
			switch (tag) {
				case arrayBufferTag:
					return cloneArrayBuffer(object);

				case boolTag:
				case dateTag:
					return new Ctor(+object);

				case dataViewTag:
					return cloneDataView(object, isDeep);

				case float32Tag:case float64Tag:
				case int8Tag:case int16Tag:case int32Tag:
				case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
					return cloneTypedArray(object, isDeep);

				case mapTag:
					return cloneMap(object, isDeep, cloneFunc);

				case numberTag:
				case stringTag:
					return new Ctor(object);

				case regexpTag:
					return cloneRegExp(object);

				case setTag:
					return cloneSet(object, isDeep, cloneFunc);

				case symbolTag:
					return cloneSymbol(object);
			}
		}

		module.exports = initCloneByTag;
	}, function (module, exports, __webpack_require__) {

		var baseCreate = __webpack_require__(485),
		    getPrototype = __webpack_require__(259),
		    isPrototype = __webpack_require__(109);

		function initCloneObject(object) {
			return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
		}

		module.exports = initCloneObject;
	}, function (module, exports, __webpack_require__) {

		var Symbol = __webpack_require__(99),
		    isArguments = __webpack_require__(117),
		    isArray = __webpack_require__(6);

		var spreadableSymbol = Symbol ? typeof Symbol === 'function' ? Symbol.isConcatSpreadable : '@@isConcatSpreadable' : undefined;

		function isFlattenable(value) {
			return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
		}

		module.exports = isFlattenable;
	}, function (module, exports) {
		function isKeyable(value) {
			var type = typeof value;
			return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
		}

		module.exports = isKeyable;
	}, function (module, exports, __webpack_require__) {

		var coreJsData = __webpack_require__(528);

		var maskSrcKey = function () {
			var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
			return uid ? 'Symbol(src)_1.' + uid : '';
		}();

		function isMasked(func) {
			return !!maskSrcKey && maskSrcKey in func;
		}

		module.exports = isMasked;
	}, function (module, exports) {
		function listCacheClear() {
			this.__data__ = [];
			this.size = 0;
		}

		module.exports = listCacheClear;
	}, function (module, exports, __webpack_require__) {

		var assocIndexOf = __webpack_require__(101);

		var arrayProto = Array.prototype;

		var splice = arrayProto.splice;

		function listCacheDelete(key) {
			var data = this.__data__,
			    index = assocIndexOf(data, key);

			if (index < 0) {
				return false;
			}
			var lastIndex = data.length - 1;
			if (index == lastIndex) {
				data.pop();
			} else {
				splice.call(data, index, 1);
			}
			--this.size;
			return true;
		}

		module.exports = listCacheDelete;
	}, function (module, exports, __webpack_require__) {

		var assocIndexOf = __webpack_require__(101);

		function listCacheGet(key) {
			var data = this.__data__,
			    index = assocIndexOf(data, key);

			return index < 0 ? undefined : data[index][1];
		}

		module.exports = listCacheGet;
	}, function (module, exports, __webpack_require__) {

		var assocIndexOf = __webpack_require__(101);

		function listCacheHas(key) {
			return assocIndexOf(this.__data__, key) > -1;
		}

		module.exports = listCacheHas;
	}, function (module, exports, __webpack_require__) {

		var assocIndexOf = __webpack_require__(101);

		function listCacheSet(key, value) {
			var data = this.__data__,
			    index = assocIndexOf(data, key);

			if (index < 0) {
				++this.size;
				data.push([key, value]);
			} else {
				data[index][1] = value;
			}
			return this;
		}

		module.exports = listCacheSet;
	}, function (module, exports, __webpack_require__) {

		var Hash = __webpack_require__(473),
		    ListCache = __webpack_require__(97),
		    Map = __webpack_require__(167);

		function mapCacheClear() {
			this.size = 0;
			this.__data__ = {
				'hash': new Hash(),
				'map': new (Map || ListCache)(),
				'string': new Hash()
			};
		}

		module.exports = mapCacheClear;
	}, function (module, exports, __webpack_require__) {

		var getMapData = __webpack_require__(107);

		function mapCacheDelete(key) {
			var result = getMapData(this, key)['delete'](key);
			this.size -= result ? 1 : 0;
			return result;
		}

		module.exports = mapCacheDelete;
	}, function (module, exports, __webpack_require__) {

		var getMapData = __webpack_require__(107);

		function mapCacheGet(key) {
			return getMapData(this, key).get(key);
		}

		module.exports = mapCacheGet;
	}, function (module, exports, __webpack_require__) {

		var getMapData = __webpack_require__(107);

		function mapCacheHas(key) {
			return getMapData(this, key).has(key);
		}

		module.exports = mapCacheHas;
	}, function (module, exports, __webpack_require__) {

		var getMapData = __webpack_require__(107);

		function mapCacheSet(key, value) {
			var data = getMapData(this, key),
			    size = data.size;

			data.set(key, value);
			this.size += data.size == size ? 0 : 1;
			return this;
		}

		module.exports = mapCacheSet;
	}, function (module, exports, __webpack_require__) {

		var memoize = __webpack_require__(595);

		var MAX_MEMOIZE_SIZE = 500;

		function memoizeCapped(func) {
			var result = memoize(func, function (key) {
				if (cache.size === MAX_MEMOIZE_SIZE) {
					cache.clear();
				}
				return key;
			});

			var cache = result.cache;
			return result;
		}

		module.exports = memoizeCapped;
	}, function (module, exports, __webpack_require__) {

		var getNative = __webpack_require__(36);

		var nativeDefineProperty = getNative(Object, 'defineProperty');

		module.exports = nativeDefineProperty;
	}, function (module, exports, __webpack_require__) {

		var overArg = __webpack_require__(178);

		var nativeKeys = overArg(Object.keys, Object);

		module.exports = nativeKeys;
	}, function (module, exports) {
		function nativeKeysIn(object) {
			var result = [];
			if (object != null) {
				for (var key in Object(object)) {
					result.push(key);
				}
			}
			return result;
		}

		module.exports = nativeKeysIn;
	}, function (module, exports, __webpack_require__) {

		var apply = __webpack_require__(244);

		var nativeMax = Math.max;

		function overRest(func, start, transform) {
			start = nativeMax(start === undefined ? func.length - 1 : start, 0);
			return function () {
				var args = arguments,
				    index = -1,
				    length = nativeMax(args.length - start, 0),
				    array = Array(length);

				while (++index < length) {
					array[index] = args[start + index];
				}
				index = -1;
				var otherArgs = Array(start + 1);
				while (++index < start) {
					otherArgs[index] = args[index];
				}
				otherArgs[start] = transform(array);
				return apply(func, this, otherArgs);
			};
		}

		module.exports = overRest;
	}, function (module, exports) {
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		function setCacheAdd(value) {
			this.__data__.set(value, HASH_UNDEFINED);
			return this;
		}

		module.exports = setCacheAdd;
	}, function (module, exports) {
		function setCacheHas(value) {
			return this.__data__.has(value);
		}

		module.exports = setCacheHas;
	}, function (module, exports, __webpack_require__) {

		var baseSetToString = __webpack_require__(510),
		    shortOut = __webpack_require__(567);

		var setToString = shortOut(baseSetToString);

		module.exports = setToString;
	}, function (module, exports) {
		var HOT_COUNT = 500,
		    HOT_SPAN = 16;

		var nativeNow = Date.now;

		function shortOut(func) {
			var count = 0,
			    lastCalled = 0;

			return function () {
				var stamp = nativeNow(),
				    remaining = HOT_SPAN - (stamp - lastCalled);

				lastCalled = stamp;
				if (remaining > 0) {
					if (++count >= HOT_COUNT) {
						return arguments[0];
					}
				} else {
					count = 0;
				}
				return func.apply(undefined, arguments);
			};
		}

		module.exports = shortOut;
	}, function (module, exports, __webpack_require__) {

		var ListCache = __webpack_require__(97);

		function stackClear() {
			this.__data__ = new ListCache();
			this.size = 0;
		}

		module.exports = stackClear;
	}, function (module, exports) {
		function stackDelete(key) {
			var data = this.__data__,
			    result = data['delete'](key);

			this.size = data.size;
			return result;
		}

		module.exports = stackDelete;
	}, function (module, exports) {
		function stackGet(key) {
			return this.__data__.get(key);
		}

		module.exports = stackGet;
	}, function (module, exports) {
		function stackHas(key) {
			return this.__data__.has(key);
		}

		module.exports = stackHas;
	}, function (module, exports, __webpack_require__) {

		var ListCache = __webpack_require__(97),
		    Map = __webpack_require__(167),
		    MapCache = __webpack_require__(168);

		var LARGE_ARRAY_SIZE = 200;

		function stackSet(key, value) {
			var data = this.__data__;
			if (data instanceof ListCache) {
				var pairs = data.__data__;
				if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
					pairs.push([key, value]);
					this.size = ++data.size;
					return this;
				}
				data = this.__data__ = new MapCache(pairs);
			}
			data.set(key, value);
			this.size = data.size;
			return this;
		}

		module.exports = stackSet;
	}, function (module, exports) {
		function strictIndexOf(array, value, fromIndex) {
			var index = fromIndex - 1,
			    length = array.length;

			while (++index < length) {
				if (array[index] === value) {
					return index;
				}
			}
			return -1;
		}

		module.exports = strictIndexOf;
	}, function (module, exports, __webpack_require__) {

		var asciiToArray = __webpack_require__(481),
		    hasUnicode = __webpack_require__(537),
		    unicodeToArray = __webpack_require__(576);

		function stringToArray(string) {
			return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
		}

		module.exports = stringToArray;
	}, function (module, exports, __webpack_require__) {

		var memoizeCapped = __webpack_require__(559),
		    toString = __webpack_require__(72);

		var reLeadingDot = /^\./,
		    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

		var reEscapeChar = /\\(\\)?/g;

		var stringToPath = memoizeCapped(function (string) {
			string = toString(string);

			var result = [];
			if (reLeadingDot.test(string)) {
				result.push('');
			}
			string.replace(rePropName, function (match, number, quote, string) {
				result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
			});
			return result;
		});

		module.exports = stringToPath;
	}, function (module, exports) {
		var rsAstralRange = '\\ud800-\\udfff',
		    rsComboMarksRange = '\\u0300-\\u036f\\ufe20-\\ufe23',
		    rsComboSymbolsRange = '\\u20d0-\\u20f0',
		    rsVarRange = '\\ufe0e\\ufe0f';

		var rsAstral = '[' + rsAstralRange + ']',
		    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',
		    rsFitz = '\\ud83c[\\udffb-\\udfff]',
		    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
		    rsNonAstral = '[^' + rsAstralRange + ']',
		    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
		    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
		    rsZWJ = '\\u200d';

		var reOptMod = rsModifier + '?',
		    rsOptVar = '[' + rsVarRange + ']?',
		    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
		    rsSeq = rsOptVar + reOptMod + rsOptJoin,
		    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

		var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

		function unicodeToArray(string) {
			return string.match(reUnicode) || [];
		}

		module.exports = unicodeToArray;
	}, function (module, exports, __webpack_require__) {

		var copyObject = __webpack_require__(43),
		    createAssigner = __webpack_require__(106),
		    keysIn = __webpack_require__(183);

		var assignIn = createAssigner(function (object, source) {
			copyObject(source, keysIn(source), object);
		});

		module.exports = assignIn;
	}, function (module, exports, __webpack_require__) {

		var copyObject = __webpack_require__(43),
		    createAssigner = __webpack_require__(106),
		    keysIn = __webpack_require__(183);

		var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
			copyObject(source, keysIn(source), object, customizer);
		});

		module.exports = assignInWith;
	}, function (module, exports, __webpack_require__) {

		var baseClone = __webpack_require__(102);

		function cloneDeep(value) {
			return baseClone(value, true, true);
		}

		module.exports = cloneDeep;
	}, function (module, exports, __webpack_require__) {

		var baseClone = __webpack_require__(102);

		function cloneDeepWith(value, customizer) {
			return baseClone(value, true, true, customizer);
		}

		module.exports = cloneDeepWith;
	}, function (module, exports) {
		function compact(array) {
			var index = -1,
			    length = array ? array.length : 0,
			    resIndex = 0,
			    result = [];

			while (++index < length) {
				var value = array[index];
				if (value) {
					result[resIndex++] = value;
				}
			}
			return result;
		}

		module.exports = compact;
	}, function (module, exports) {
		function constant(value) {
			return function () {
				return value;
			};
		}

		module.exports = constant;
	}, function (module, exports, __webpack_require__) {

		var toString = __webpack_require__(72);

		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
		    reHasRegExpChar = RegExp(reRegExpChar.source);

		function escapeRegExp(string) {
			string = toString(string);
			return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
		}

		module.exports = escapeRegExp;
	}, function (module, exports, __webpack_require__) {

		module.exports = __webpack_require__(577);
	}, function (module, exports, __webpack_require__) {

		var createFind = __webpack_require__(256),
		    findIndex = __webpack_require__(586);

		var find = createFind(findIndex);

		module.exports = find;
	}, function (module, exports, __webpack_require__) {

		var baseFindIndex = __webpack_require__(172),
		    baseIteratee = __webpack_require__(42),
		    toInteger = __webpack_require__(45);

		var nativeMax = Math.max;

		function findIndex(array, predicate, fromIndex) {
			var length = array ? array.length : 0;
			if (!length) {
				return -1;
			}
			var index = fromIndex == null ? 0 : toInteger(fromIndex);
			if (index < 0) {
				index = nativeMax(length + index, 0);
			}
			return baseFindIndex(array, baseIteratee(predicate, 3), index);
		}

		module.exports = findIndex;
	}, function (module, exports, __webpack_require__) {

		var createFind = __webpack_require__(256),
		    findLastIndex = __webpack_require__(588);

		var findLast = createFind(findLastIndex);

		module.exports = findLast;
	}, function (module, exports, __webpack_require__) {

		var baseFindIndex = __webpack_require__(172),
		    baseIteratee = __webpack_require__(42),
		    toInteger = __webpack_require__(45);

		var nativeMax = Math.max,
		    nativeMin = Math.min;

		function findLastIndex(array, predicate, fromIndex) {
			var length = array ? array.length : 0;
			if (!length) {
				return -1;
			}
			var index = length - 1;
			if (fromIndex !== undefined) {
				index = toInteger(fromIndex);
				index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
			}
			return baseFindIndex(array, baseIteratee(predicate, 3), index, true);
		}

		module.exports = findLastIndex;
	}, function (module, exports, __webpack_require__) {

		var arrayEach = __webpack_require__(169),
		    baseEach = __webpack_require__(249),
		    baseIteratee = __webpack_require__(42),
		    isArray = __webpack_require__(6);

		function forEach(collection, iteratee) {
			var func = isArray(collection) ? arrayEach : baseEach;
			return func(collection, baseIteratee(iteratee, 3));
		}

		module.exports = forEach;
	}, function (module, exports, __webpack_require__) {

		var baseGet = __webpack_require__(250);

		function get(object, path, defaultValue) {
			var result = object == null ? undefined : baseGet(object, path);
			return result === undefined ? defaultValue : result;
		}

		module.exports = get;
	}, function (module, exports, __webpack_require__) {

		var baseHasIn = __webpack_require__(492),
		    hasPath = __webpack_require__(262);

		function hasIn(object, path) {
			return object != null && hasPath(object, path, baseHasIn);
		}

		module.exports = hasIn;
	}, function (module, exports, __webpack_require__) {
		(function (module) {
			var root = __webpack_require__(23),
			    stubFalse = __webpack_require__(603);

			var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

			var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

			var moduleExports = freeModule && freeModule.exports === freeExports;

			var Buffer = moduleExports ? root.Buffer : undefined;

			var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

			var isBuffer = nativeIsBuffer || stubFalse;

			module.exports = isBuffer;
		}).call(exports, __webpack_require__(75)(module));
	}, function (module, exports, __webpack_require__) {

		var toInteger = __webpack_require__(45);

		function isInteger(value) {
			return typeof value == 'number' && value == toInteger(value);
		}

		module.exports = isInteger;
	}, function (module, exports, __webpack_require__) {

		var arrayMap = __webpack_require__(100),
		    baseIteratee = __webpack_require__(42),
		    baseMap = __webpack_require__(253),
		    isArray = __webpack_require__(6);

		function map(collection, iteratee) {
			var func = isArray(collection) ? arrayMap : baseMap;
			return func(collection, baseIteratee(iteratee, 3));
		}

		module.exports = map;
	}, function (module, exports, __webpack_require__) {

		var MapCache = __webpack_require__(168);

		var FUNC_ERROR_TEXT = 'Expected a function';

		function memoize(func, resolver) {
			if (typeof func != 'function' || resolver && typeof resolver != 'function') {
				throw new TypeError(FUNC_ERROR_TEXT);
			}
			var memoized = function memoized() {
				var args = arguments,
				    key = resolver ? resolver.apply(this, args) : args[0],
				    cache = memoized.cache;

				if (cache.has(key)) {
					return cache.get(key);
				}
				var result = func.apply(this, args);
				memoized.cache = cache.set(key, result) || cache;
				return result;
			};
			memoized.cache = new (memoize.Cache || MapCache)();
			return memoized;
		}

		memoize.Cache = MapCache;

		module.exports = memoize;
	}, function (module, exports, __webpack_require__) {

		var baseMerge = __webpack_require__(503),
		    createAssigner = __webpack_require__(106);

		var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
			baseMerge(object, source, srcIndex, customizer);
		});

		module.exports = mergeWith;
	}, function (module, exports) {
		function noop() {}

		module.exports = noop;
	}, function (module, exports, __webpack_require__) {

		var baseProperty = __webpack_require__(506),
		    basePropertyDeep = __webpack_require__(507),
		    isKey = __webpack_require__(108),
		    toKey = __webpack_require__(112);

		function property(path) {
			return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
		}

		module.exports = property;
	}, function (module, exports, __webpack_require__) {

		var basePullAll = __webpack_require__(508);

		function pullAll(array, values) {
			return array && array.length && values && values.length ? basePullAll(array, values) : array;
		}

		module.exports = pullAll;
	}, function (module, exports, __webpack_require__) {

		var baseFlatten = __webpack_require__(486),
		    baseOrderBy = __webpack_require__(505),
		    baseRest = __webpack_require__(104),
		    isIterateeCall = __webpack_require__(177);

		var sortBy = baseRest(function (collection, iteratees) {
			if (collection == null) {
				return [];
			}
			var length = iteratees.length;
			if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
				iteratees = [];
			} else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
				iteratees = [iteratees[0]];
			}
			return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
		});

		module.exports = sortBy;
	}, function (module, exports, __webpack_require__) {

		var baseClamp = __webpack_require__(484),
		    baseToString = __webpack_require__(173),
		    toInteger = __webpack_require__(45),
		    toString = __webpack_require__(72);

		function startsWith(string, target, position) {
			string = toString(string);
			position = baseClamp(toInteger(position), 0, string.length);
			target = baseToString(target);
			return string.slice(position, position + target.length) == target;
		}

		module.exports = startsWith;
	}, function (module, exports) {
		function stubArray() {
			return [];
		}

		module.exports = stubArray;
	}, function (module, exports) {
		function stubFalse() {
			return false;
		}

		module.exports = stubFalse;
	}, function (module, exports, __webpack_require__) {

		var toNumber = __webpack_require__(605);

		var INFINITY = 1 / 0,
		    MAX_INTEGER = 1.7976931348623157e+308;

		function toFinite(value) {
			if (!value) {
				return value === 0 ? value : 0;
			}
			value = toNumber(value);
			if (value === INFINITY || value === -INFINITY) {
				var sign = value < 0 ? -1 : 1;
				return sign * MAX_INTEGER;
			}
			return value === value ? value : 0;
		}

		module.exports = toFinite;
	}, function (module, exports, __webpack_require__) {

		var isObject = __webpack_require__(8),
		    isSymbol = __webpack_require__(71);

		var NAN = 0 / 0;

		var reTrim = /^\s+|\s+$/g;

		var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

		var reIsBinary = /^0b[01]+$/i;

		var reIsOctal = /^0o[0-7]+$/i;

		var freeParseInt = parseInt;

		function toNumber(value) {
			if (typeof value == 'number') {
				return value;
			}
			if (isSymbol(value)) {
				return NAN;
			}
			if (isObject(value)) {
				var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
				value = isObject(other) ? other + '' : other;
			}
			if (typeof value != 'string') {
				return value === 0 ? value : +value;
			}
			value = value.replace(reTrim, '');
			var isBinary = reIsBinary.test(value);
			return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
		}

		module.exports = toNumber;
	}, function (module, exports, __webpack_require__) {

		var copyObject = __webpack_require__(43),
		    keysIn = __webpack_require__(183);

		function toPlainObject(value) {
			return copyObject(value, keysIn(value));
		}

		module.exports = toPlainObject;
	}, function (module, exports, __webpack_require__) {

		var baseToString = __webpack_require__(173),
		    castSlice = __webpack_require__(516),
		    charsEndIndex = __webpack_require__(517),
		    stringToArray = __webpack_require__(574),
		    toString = __webpack_require__(72);

		var reTrimEnd = /\s+$/;

		function trimEnd(string, chars, guard) {
			string = toString(string);
			if (string && (guard || chars === undefined)) {
				return string.replace(reTrimEnd, '');
			}
			if (!string || !(chars = baseToString(chars))) {
				return string;
			}
			var strSymbols = stringToArray(string),
			    end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

			return castSlice(strSymbols, 0, end).join('');
		}

		module.exports = trimEnd;
	}, function (module, exports, __webpack_require__) {

		var baseUniq = __webpack_require__(514);

		function uniq(array) {
			return array && array.length ? baseUniq(array) : [];
		}

		module.exports = uniq;
	}, function (module, exports, __webpack_require__) {

		module.exports = minimatch;
		minimatch.Minimatch = Minimatch;

		var path = { sep: '/' };
		try {
			path = __webpack_require__(16);
		} catch (er) {}

		var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
		var expand = __webpack_require__(402);

		var plTypes = {
			'!': { open: '(?:(?!(?:', close: '))[^/]*?)' },
			'?': { open: '(?:', close: ')?' },
			'+': { open: '(?:', close: ')+' },
			'*': { open: '(?:', close: ')*' },
			'@': { open: '(?:', close: ')' }
		};

		var qmark = '[^/]';

		var star = qmark + '*?';

		var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';

		var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';

		var reSpecials = charSet('().*{}+?[]^$\\!');

		function charSet(s) {
			return s.split('').reduce(function (set, c) {
				set[c] = true;
				return set;
			}, {});
		}

		var slashSplit = /\/+/;

		minimatch.filter = filter;
		function filter(pattern, options) {
			options = options || {};
			return function (p, i, list) {
				return minimatch(p, pattern, options);
			};
		}

		function ext(a, b) {
			a = a || {};
			b = b || {};
			var t = {};
			Object.keys(b).forEach(function (k) {
				t[k] = b[k];
			});
			Object.keys(a).forEach(function (k) {
				t[k] = a[k];
			});
			return t;
		}

		minimatch.defaults = function (def) {
			if (!def || !Object.keys(def).length) return minimatch;

			var orig = minimatch;

			var m = function minimatch(p, pattern, options) {
				return orig.minimatch(p, pattern, ext(def, options));
			};

			m.Minimatch = function Minimatch(pattern, options) {
				return new orig.Minimatch(pattern, ext(def, options));
			};

			return m;
		};

		Minimatch.defaults = function (def) {
			if (!def || !Object.keys(def).length) return Minimatch;
			return minimatch.defaults(def).Minimatch;
		};

		function minimatch(p, pattern, options) {
			if (typeof pattern !== 'string') {
				throw new TypeError('glob pattern string required');
			}

			if (!options) options = {};

			if (!options.nocomment && pattern.charAt(0) === '#') {
				return false;
			}

			if (pattern.trim() === '') return p === '';

			return new Minimatch(pattern, options).match(p);
		}

		function Minimatch(pattern, options) {
			if (!(this instanceof Minimatch)) {
				return new Minimatch(pattern, options);
			}

			if (typeof pattern !== 'string') {
				throw new TypeError('glob pattern string required');
			}

			if (!options) options = {};
			pattern = pattern.trim();

			if (path.sep !== '/') {
				pattern = pattern.split(path.sep).join('/');
			}

			this.options = options;
			this.set = [];
			this.pattern = pattern;
			this.regexp = null;
			this.negate = false;
			this.comment = false;
			this.empty = false;

			this.make();
		}

		Minimatch.prototype.debug = function () {};

		Minimatch.prototype.make = make;
		function make() {
			if (this._made) return;

			var pattern = this.pattern;
			var options = this.options;

			if (!options.nocomment && pattern.charAt(0) === '#') {
				this.comment = true;
				return;
			}
			if (!pattern) {
				this.empty = true;
				return;
			}

			this.parseNegate();

			var set = this.globSet = this.braceExpand();

			if (options.debug) this.debug = console.error;

			this.debug(this.pattern, set);

			set = this.globParts = set.map(function (s) {
				return s.split(slashSplit);
			});

			this.debug(this.pattern, set);

			set = set.map(function (s, si, set) {
				return s.map(this.parse, this);
			}, this);

			this.debug(this.pattern, set);

			set = set.filter(function (s) {
				return s.indexOf(false) === -1;
			});

			this.debug(this.pattern, set);

			this.set = set;
		}

		Minimatch.prototype.parseNegate = parseNegate;
		function parseNegate() {
			var pattern = this.pattern;
			var negate = false;
			var options = this.options;
			var negateOffset = 0;

			if (options.nonegate) return;

			for (var i = 0, l = pattern.length; i < l && pattern.charAt(i) === '!'; i++) {
				negate = !negate;
				negateOffset++;
			}

			if (negateOffset) this.pattern = pattern.substr(negateOffset);
			this.negate = negate;
		}

		minimatch.braceExpand = function (pattern, options) {
			return braceExpand(pattern, options);
		};

		Minimatch.prototype.braceExpand = braceExpand;

		function braceExpand(pattern, options) {
			if (!options) {
				if (this instanceof Minimatch) {
					options = this.options;
				} else {
					options = {};
				}
			}

			pattern = typeof pattern === 'undefined' ? this.pattern : pattern;

			if (typeof pattern === 'undefined') {
				throw new TypeError('undefined pattern');
			}

			if (options.nobrace || !pattern.match(/\{.*\}/)) {
				return [pattern];
			}

			return expand(pattern);
		}

		Minimatch.prototype.parse = parse;
		var SUBPARSE = {};
		function parse(pattern, isSub) {
			if (pattern.length > 1024 * 64) {
				throw new TypeError('pattern is too long');
			}

			var options = this.options;

			if (!options.noglobstar && pattern === '**') return GLOBSTAR;
			if (pattern === '') return '';

			var re = '';
			var hasMagic = !!options.nocase;
			var escaping = false;

			var patternListStack = [];
			var negativeLists = [];
			var stateChar;
			var inClass = false;
			var reClassStart = -1;
			var classStart = -1;

			var patternStart = pattern.charAt(0) === '.' ? '' : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))' : '(?!\\.)';
			var self = this;

			function clearStateChar() {
				if (stateChar) {
					switch (stateChar) {
						case '*':
							re += star;
							hasMagic = true;
							break;
						case '?':
							re += qmark;
							hasMagic = true;
							break;
						default:
							re += '\\' + stateChar;
							break;
					}
					self.debug('clearStateChar %j %j', stateChar, re);
					stateChar = false;
				}
			}

			for (var i = 0, len = pattern.length, c; i < len && (c = pattern.charAt(i)); i++) {
				this.debug('%s\t%s %s %j', pattern, i, re, c);

				if (escaping && reSpecials[c]) {
					re += '\\' + c;
					escaping = false;
					continue;
				}

				switch (c) {
					case '/':
						return false;

					case '\\':
						clearStateChar();
						escaping = true;
						continue;

					case '?':
					case '*':
					case '+':
					case '@':
					case '!':
						this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);

						if (inClass) {
							this.debug('  in class');
							if (c === '!' && i === classStart + 1) c = '^';
							re += c;
							continue;
						}

						self.debug('call clearStateChar %j', stateChar);
						clearStateChar();
						stateChar = c;

						if (options.noext) clearStateChar();
						continue;

					case '(':
						if (inClass) {
							re += '(';
							continue;
						}

						if (!stateChar) {
							re += '\\(';
							continue;
						}

						patternListStack.push({
							type: stateChar,
							start: i - 1,
							reStart: re.length,
							open: plTypes[stateChar].open,
							close: plTypes[stateChar].close
						});

						re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
						this.debug('plType %j %j', stateChar, re);
						stateChar = false;
						continue;

					case ')':
						if (inClass || !patternListStack.length) {
							re += '\\)';
							continue;
						}

						clearStateChar();
						hasMagic = true;
						var pl = patternListStack.pop();

						re += pl.close;
						if (pl.type === '!') {
							negativeLists.push(pl);
						}
						pl.reEnd = re.length;
						continue;

					case '|':
						if (inClass || !patternListStack.length || escaping) {
							re += '\\|';
							escaping = false;
							continue;
						}

						clearStateChar();
						re += '|';
						continue;

					case '[':
						clearStateChar();

						if (inClass) {
							re += '\\' + c;
							continue;
						}

						inClass = true;
						classStart = i;
						reClassStart = re.length;
						re += c;
						continue;

					case ']':
						if (i === classStart + 1 || !inClass) {
							re += '\\' + c;
							escaping = false;
							continue;
						}

						if (inClass) {
							var cs = pattern.substring(classStart + 1, i);
							try {
								RegExp('[' + cs + ']');
							} catch (er) {
								var sp = this.parse(cs, SUBPARSE);
								re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
								hasMagic = hasMagic || sp[1];
								inClass = false;
								continue;
							}
						}

						hasMagic = true;
						inClass = false;
						re += c;
						continue;

					default:
						clearStateChar();

						if (escaping) {
							escaping = false;
						} else if (reSpecials[c] && !(c === '^' && inClass)) {
							re += '\\';
						}

						re += c;

				}
			}
			if (inClass) {
				cs = pattern.substr(classStart + 1);
				sp = this.parse(cs, SUBPARSE);
				re = re.substr(0, reClassStart) + '\\[' + sp[0];
				hasMagic = hasMagic || sp[1];
			}

			for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
				var tail = re.slice(pl.reStart + pl.open.length);
				this.debug('setting tail', re, pl);

				tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
					if (!$2) {
						$2 = '\\';
					}

					return $1 + $1 + $2 + '|';
				});

				this.debug('tail=%j\n   %s', tail, tail, pl, re);
				var t = pl.type === '*' ? star : pl.type === '?' ? qmark : '\\' + pl.type;

				hasMagic = true;
				re = re.slice(0, pl.reStart) + t + '\\(' + tail;
			}

			clearStateChar();
			if (escaping) {
				re += '\\\\';
			}

			var addPatternStart = false;
			switch (re.charAt(0)) {
				case '.':
				case '[':
				case '(':
					addPatternStart = true;
			}

			for (var n = negativeLists.length - 1; n > -1; n--) {
				var nl = negativeLists[n];

				var nlBefore = re.slice(0, nl.reStart);
				var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
				var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
				var nlAfter = re.slice(nl.reEnd);

				nlLast += nlAfter;

				var openParensBefore = nlBefore.split('(').length - 1;
				var cleanAfter = nlAfter;
				for (i = 0; i < openParensBefore; i++) {
					cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
				}
				nlAfter = cleanAfter;

				var dollar = '';
				if (nlAfter === '' && isSub !== SUBPARSE) {
					dollar = '$';
				}
				var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
				re = newRe;
			}

			if (re !== '' && hasMagic) {
				re = '(?=.)' + re;
			}

			if (addPatternStart) {
				re = patternStart + re;
			}

			if (isSub === SUBPARSE) {
				return [re, hasMagic];
			}

			if (!hasMagic) {
				return globUnescape(pattern);
			}

			var flags = options.nocase ? 'i' : '';
			try {
				var regExp = new RegExp('^' + re + '$', flags);
			} catch (er) {
				return new RegExp('$.');
			}

			regExp._glob = pattern;
			regExp._src = re;

			return regExp;
		}

		minimatch.makeRe = function (pattern, options) {
			return new Minimatch(pattern, options || {}).makeRe();
		};

		Minimatch.prototype.makeRe = makeRe;
		function makeRe() {
			if (this.regexp || this.regexp === false) return this.regexp;

			var set = this.set;

			if (!set.length) {
				this.regexp = false;
				return this.regexp;
			}
			var options = this.options;

			var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
			var flags = options.nocase ? 'i' : '';

			var re = set.map(function (pattern) {
				return pattern.map(function (p) {
					return p === GLOBSTAR ? twoStar : typeof p === 'string' ? regExpEscape(p) : p._src;
				}).join('\\\/');
			}).join('|');

			re = '^(?:' + re + ')$';

			if (this.negate) re = '^(?!' + re + ').*$';

			try {
				this.regexp = new RegExp(re, flags);
			} catch (ex) {
				this.regexp = false;
			}
			return this.regexp;
		}

		minimatch.match = function (list, pattern, options) {
			options = options || {};
			var mm = new Minimatch(pattern, options);
			list = list.filter(function (f) {
				return mm.match(f);
			});
			if (mm.options.nonull && !list.length) {
				list.push(pattern);
			}
			return list;
		};

		Minimatch.prototype.match = match;
		function match(f, partial) {
			this.debug('match', f, this.pattern);

			if (this.comment) return false;
			if (this.empty) return f === '';

			if (f === '/' && partial) return true;

			var options = this.options;

			if (path.sep !== '/') {
				f = f.split(path.sep).join('/');
			}

			f = f.split(slashSplit);
			this.debug(this.pattern, 'split', f);

			var set = this.set;
			this.debug(this.pattern, 'set', set);

			var filename;
			var i;
			for (i = f.length - 1; i >= 0; i--) {
				filename = f[i];
				if (filename) break;
			}

			for (i = 0; i < set.length; i++) {
				var pattern = set[i];
				var file = f;
				if (options.matchBase && pattern.length === 1) {
					file = [filename];
				}
				var hit = this.matchOne(file, pattern, partial);
				if (hit) {
					if (options.flipNegate) return true;
					return !this.negate;
				}
			}

			if (options.flipNegate) return false;
			return this.negate;
		}

		Minimatch.prototype.matchOne = function (file, pattern, partial) {
			var options = this.options;

			this.debug('matchOne', { 'this': this, file: file, pattern: pattern });

			this.debug('matchOne', file.length, pattern.length);

			for (var fi = 0, pi = 0, fl = file.length, pl = pattern.length; fi < fl && pi < pl; fi++, pi++) {
				this.debug('matchOne loop');
				var p = pattern[pi];
				var f = file[fi];

				this.debug(pattern, p, f);

				if (p === false) return false;

				if (p === GLOBSTAR) {
					this.debug('GLOBSTAR', [pattern, p, f]);

					var fr = fi;
					var pr = pi + 1;
					if (pr === pl) {
						this.debug('** at the end');

						for (; fi < fl; fi++) {
							if (file[fi] === '.' || file[fi] === '..' || !options.dot && file[fi].charAt(0) === '.') return false;
						}
						return true;
					}

					while (fr < fl) {
						var swallowee = file[fr];

						this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);

						if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
							this.debug('globstar found match!', fr, fl, swallowee);

							return true;
						} else {
							if (swallowee === '.' || swallowee === '..' || !options.dot && swallowee.charAt(0) === '.') {
								this.debug('dot detected!', file, fr, pattern, pr);
								break;
							}

							this.debug('globstar swallow a segment, and continue');
							fr++;
						}
					}

					if (partial) {
						this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
						if (fr === fl) return true;
					}
					return false;
				}

				var hit;
				if (typeof p === 'string') {
					if (options.nocase) {
						hit = f.toLowerCase() === p.toLowerCase();
					} else {
						hit = f === p;
					}
					this.debug('string match', p, f, hit);
				} else {
					hit = f.match(p);
					this.debug('pattern match', p, f, hit);
				}

				if (!hit) return false;
			}

			if (fi === fl && pi === pl) {
				return true;
			} else if (fi === fl) {
				return partial;
			} else if (pi === pl) {
				var emptyFileEnd = fi === fl - 1 && file[fi] === '';
				return emptyFileEnd;
			}

			throw new Error('wtf?');
		};

		function globUnescape(s) {
			return s.replace(/\\(.)/g, '$1');
		}

		function regExpEscape(s) {
			return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
		}
	}, function (module, exports) {

		var s = 1000;
		var m = s * 60;
		var h = m * 60;
		var d = h * 24;
		var y = d * 365.25;

		module.exports = function (val, options) {
			options = options || {};
			if ('string' == typeof val) return parse(val);
			return options.long ? long(val) : short(val);
		};

		function parse(str) {
			str = '' + str;
			if (str.length > 10000) return;
			var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
			if (!match) return;
			var n = parseFloat(match[1]);
			var type = (match[2] || 'ms').toLowerCase();
			switch (type) {
				case 'years':
				case 'year':
				case 'yrs':
				case 'yr':
				case 'y':
					return n * y;
				case 'days':
				case 'day':
				case 'd':
					return n * d;
				case 'hours':
				case 'hour':
				case 'hrs':
				case 'hr':
				case 'h':
					return n * h;
				case 'minutes':
				case 'minute':
				case 'mins':
				case 'min':
				case 'm':
					return n * m;
				case 'seconds':
				case 'second':
				case 'secs':
				case 'sec':
				case 's':
					return n * s;
				case 'milliseconds':
				case 'millisecond':
				case 'msecs':
				case 'msec':
				case 'ms':
					return n;
			}
		}

		function short(ms) {
			if (ms >= d) return Math.round(ms / d) + 'd';
			if (ms >= h) return Math.round(ms / h) + 'h';
			if (ms >= m) return Math.round(ms / m) + 'm';
			if (ms >= s) return Math.round(ms / s) + 's';
			return ms + 'ms';
		}

		function long(ms) {
			return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
		}

		function plural(ms, n, name) {
			if (ms < n) return;
			if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
			return Math.ceil(ms / n) + ' ' + name + 's';
		}
	}, function (module, exports) {

		'use strict';

		module.exports = Number.isNaN || function (x) {
			return x !== x;
		};
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var fs = __webpack_require__(73);

		module.exports = function (pth, cb) {
			var fn = typeof fs.access === 'function' ? fs.access : fs.stat;

			fn(pth, function (err) {
				cb(null, !err);
			});
		};

		module.exports.sync = function (pth) {
			var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

			try {
				fn(pth);
				return true;
			} catch (err) {
				return false;
			}
		};
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			'use strict';

			function posix(path) {
				return path.charAt(0) === '/';
			}

			function win32(path) {
				var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
				var result = splitDeviceRe.exec(path);
				var device = result[1] || '';
				var isUnc = !!device && device.charAt(1) !== ':';

				return !!result[2] || isUnc;
			}

			module.exports = process.platform === 'win32' ? win32 : posix;
			module.exports.posix = posix;
			module.exports.win32 = win32;
		}).call(exports, __webpack_require__(26));
	}, function (module, exports, __webpack_require__) {
		var regenerate = __webpack_require__(279);

		exports.REGULAR = {
			'd': regenerate().addRange(0x30, 0x39),
			'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF),
			's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
			'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0xFFFF),
			'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
			'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)
		};

		exports.UNICODE = {
			'd': regenerate().addRange(0x30, 0x39),
			'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
			's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
			'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
			'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
			'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
		};

		exports.UNICODE_IGNORE_CASE = {
			'd': regenerate().addRange(0x30, 0x39),
			'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
			's': regenerate(0x20, 0xA0, 0x1680, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
			'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
			'w': regenerate(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
			'W': regenerate(0x4B, 0x53, 0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
		};
	}, function (module, exports, __webpack_require__) {

		var generate = __webpack_require__(616).generate;
		var parse = __webpack_require__(617).parse;
		var regenerate = __webpack_require__(279);
		var iuMappings = __webpack_require__(469);
		var ESCAPE_SETS = __webpack_require__(614);

		function getCharacterClassEscapeSet(character) {
			if (unicode) {
				if (ignoreCase) {
					return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
				}
				return ESCAPE_SETS.UNICODE[character];
			}
			return ESCAPE_SETS.REGULAR[character];
		}

		var object = {};
		var hasOwnProperty = object.hasOwnProperty;
		function has(object, property) {
			return hasOwnProperty.call(object, property);
		}

		var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);

		var BMP_SET = regenerate().addRange(0x0, 0xFFFF);

		var DOT_SET_UNICODE = UNICODE_SET.clone().remove(0x000A, 0x000D, 0x2028, 0x2029);

		var DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);

		regenerate.prototype.iuAddRange = function (min, max) {
			var $this = this;
			do {
				var folded = caseFold(min);
				if (folded) {
					$this.add(folded);
				}
			} while (++min <= max);
			return $this;
		};

		function assign(target, source) {
			for (var key in source) {
				target[key] = source[key];
			}
		}

		function update(item, pattern) {
			if (!pattern) {
				return;
			}
			var tree = parse(pattern, '');
			switch (tree.type) {
				case 'characterClass':
				case 'group':
				case 'value':
					break;
				default:
					tree = wrap(tree, pattern);
			}
			assign(item, tree);
		}

		function wrap(tree, pattern) {
			return {
				'type': 'group',
				'behavior': 'ignore',
				'body': [tree],
				'raw': '(?:' + pattern + ')'
			};
		}

		function caseFold(codePoint) {
			return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
		}

		var ignoreCase = false;
		var unicode = false;
		function processCharacterClass(characterClassItem) {
			var set = regenerate();
			var body = characterClassItem.body.forEach(function (item) {
				switch (item.type) {
					case 'value':
						set.add(item.codePoint);
						if (ignoreCase && unicode) {
							var folded = caseFold(item.codePoint);
							if (folded) {
								set.add(folded);
							}
						}
						break;
					case 'characterClassRange':
						var min = item.min.codePoint;
						var max = item.max.codePoint;
						set.addRange(min, max);
						if (ignoreCase && unicode) {
							set.iuAddRange(min, max);
						}
						break;
					case 'characterClassEscape':
						set.add(getCharacterClassEscapeSet(item.value));
						break;

					default:
						throw Error('Unknown term type: ' + item.type);
				}
			});
			if (characterClassItem.negative) {
				set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
			}
			update(characterClassItem, set.toString());
			return characterClassItem;
		}

		function processTerm(item) {
			switch (item.type) {
				case 'dot':
					update(item, (unicode ? DOT_SET_UNICODE : DOT_SET).toString());
					break;
				case 'characterClass':
					item = processCharacterClass(item);
					break;
				case 'characterClassEscape':
					update(item, getCharacterClassEscapeSet(item.value).toString());
					break;
				case 'alternative':
				case 'disjunction':
				case 'group':
				case 'quantifier':
					item.body = item.body.map(processTerm);
					break;
				case 'value':
					var codePoint = item.codePoint;
					var set = regenerate(codePoint);
					if (ignoreCase && unicode) {
						var folded = caseFold(codePoint);
						if (folded) {
							set.add(folded);
						}
					}
					update(item, set.toString());
					break;
				case 'anchor':
				case 'empty':
				case 'group':
				case 'reference':
					break;

				default:
					throw Error('Unknown term type: ' + item.type);
			}
			return item;
		}

		module.exports = function (pattern, flags) {
			var tree = parse(pattern, flags);
			ignoreCase = flags ? flags.indexOf('i') > -1 : false;
			unicode = flags ? flags.indexOf('u') > -1 : false;
			assign(tree, processTerm(tree));
			return generate(tree);
		};
	}, function (module, exports, __webpack_require__) {

		var __WEBPACK_AMD_DEFINE_RESULT__;(function (module, global) {
			(function () {
				'use strict';

				var objectTypes = {
					'function': true,
					'object': true
				};

				var root = objectTypes[typeof window] && window || this;

				var oldRoot = root;

				var freeExports = objectTypes[typeof exports] && exports;

				var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

				var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
				if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
					root = freeGlobal;
				}

				var stringFromCharCode = String.fromCharCode;
				var floor = Math.floor;
				function fromCodePoint() {
					var MAX_SIZE = 0x4000;
					var codeUnits = [];
					var highSurrogate;
					var lowSurrogate;
					var index = -1;
					var length = arguments.length;
					if (!length) {
						return '';
					}
					var result = '';
					while (++index < length) {
						var codePoint = Number(arguments[index]);
						if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
								throw RangeError('Invalid code point: ' + codePoint);
							}
						if (codePoint <= 0xFFFF) {
							codeUnits.push(codePoint);
						} else {
							codePoint -= 0x10000;
							highSurrogate = (codePoint >> 10) + 0xD800;
							lowSurrogate = codePoint % 0x400 + 0xDC00;
							codeUnits.push(highSurrogate, lowSurrogate);
						}
						if (index + 1 == length || codeUnits.length > MAX_SIZE) {
							result += stringFromCharCode.apply(null, codeUnits);
							codeUnits.length = 0;
						}
					}
					return result;
				}

				function assertType(type, expected) {
					if (expected.indexOf('|') == -1) {
						if (type == expected) {
							return;
						}

						throw Error('Invalid node type: ' + type);
					}

					expected = assertType.hasOwnProperty(expected) ? assertType[expected] : assertType[expected] = RegExp('^(?:' + expected + ')$');

					if (expected.test(type)) {
						return;
					}

					throw Error('Invalid node type: ' + type);
				}

				function generate(node) {
					var type = node.type;

					if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
						return generate[type](node);
					}

					throw Error('Invalid node type: ' + type);
				}

				function generateAlternative(node) {
					assertType(node.type, 'alternative');

					var terms = node.body,
					    length = terms ? terms.length : 0;

					if (length == 1) {
						return generateTerm(terms[0]);
					} else {
						var i = -1,
						    result = '';

						while (++i < length) {
							result += generateTerm(terms[i]);
						}

						return result;
					}
				}

				function generateAnchor(node) {
					assertType(node.type, 'anchor');

					switch (node.kind) {
						case 'start':
							return '^';
						case 'end':
							return '$';
						case 'boundary':
							return '\\b';
						case 'not-boundary':
							return '\\B';
						default:
							throw Error('Invalid assertion');
					}
				}

				function generateAtom(node) {
					assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');

					return generate(node);
				}

				function generateCharacterClass(node) {
					assertType(node.type, 'characterClass');

					var classRanges = node.body,
					    length = classRanges ? classRanges.length : 0;

					var i = -1,
					    result = '[';

					if (node.negative) {
						result += '^';
					}

					while (++i < length) {
						result += generateClassAtom(classRanges[i]);
					}

					result += ']';

					return result;
				}

				function generateCharacterClassEscape(node) {
					assertType(node.type, 'characterClassEscape');

					return '\\' + node.value;
				}

				function generateCharacterClassRange(node) {
					assertType(node.type, 'characterClassRange');

					var min = node.min,
					    max = node.max;

					if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
						throw Error('Invalid character class range');
					}

					return generateClassAtom(min) + '-' + generateClassAtom(max);
				}

				function generateClassAtom(node) {
					assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');

					return generate(node);
				}

				function generateDisjunction(node) {
					assertType(node.type, 'disjunction');

					var body = node.body,
					    length = body ? body.length : 0;

					if (length == 0) {
						throw Error('No body');
					} else if (length == 1) {
						return generate(body[0]);
					} else {
						var i = -1,
						    result = '';

						while (++i < length) {
							if (i != 0) {
								result += '|';
							}
							result += generate(body[i]);
						}

						return result;
					}
				}

				function generateDot(node) {
					assertType(node.type, 'dot');

					return '.';
				}

				function generateGroup(node) {
					assertType(node.type, 'group');

					var result = '(';

					switch (node.behavior) {
						case 'normal':
							break;
						case 'ignore':
							result += '?:';
							break;
						case 'lookahead':
							result += '?=';
							break;
						case 'negativeLookahead':
							result += '?!';
							break;
						default:
							throw Error('Invalid behaviour: ' + node.behaviour);
					}

					var body = node.body,
					    length = body ? body.length : 0;

					if (length == 1) {
						result += generate(body[0]);
					} else {
						var i = -1;

						while (++i < length) {
							result += generate(body[i]);
						}
					}

					result += ')';

					return result;
				}

				function generateQuantifier(node) {
					assertType(node.type, 'quantifier');

					var quantifier = '',
					    min = node.min,
					    max = node.max;

					switch (max) {
						case undefined:
						case null:
							switch (min) {
								case 0:
									quantifier = '*';
									break;
								case 1:
									quantifier = '+';
									break;
								default:
									quantifier = '{' + min + ',}';
									break;
							}
							break;
						default:
							if (min == max) {
								quantifier = '{' + min + '}';
							} else if (min == 0 && max == 1) {
								quantifier = '?';
							} else {
								quantifier = '{' + min + ',' + max + '}';
							}
							break;
					}

					if (!node.greedy) {
						quantifier += '?';
					}

					return generateAtom(node.body[0]) + quantifier;
				}

				function generateReference(node) {
					assertType(node.type, 'reference');

					return '\\' + node.matchIndex;
				}

				function generateTerm(node) {
					assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');

					return generate(node);
				}

				function generateValue(node) {
					assertType(node.type, 'value');

					var kind = node.kind,
					    codePoint = node.codePoint;

					switch (kind) {
						case 'controlLetter':
							return '\\c' + fromCodePoint(codePoint + 64);
						case 'hexadecimalEscape':
							return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
						case 'identifier':
							return '\\' + fromCodePoint(codePoint);
						case 'null':
							return '\\' + codePoint;
						case 'octal':
							return '\\' + codePoint.toString(8);
						case 'singleEscape':
							switch (codePoint) {
								case 0x0008:
									return '\\b';
								case 0x009:
									return '\\t';
								case 0x00A:
									return '\\n';
								case 0x00B:
									return '\\v';
								case 0x00C:
									return '\\f';
								case 0x00D:
									return '\\r';
								default:
									throw Error('Invalid codepoint: ' + codePoint);
							}
						case 'symbol':
							return fromCodePoint(codePoint);
						case 'unicodeEscape':
							return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
						case 'unicodeCodePointEscape':
							return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
						default:
							throw Error('Unsupported node kind: ' + kind);
					}
				}

				generate.alternative = generateAlternative;
				generate.anchor = generateAnchor;
				generate.characterClass = generateCharacterClass;
				generate.characterClassEscape = generateCharacterClassEscape;
				generate.characterClassRange = generateCharacterClassRange;
				generate.disjunction = generateDisjunction;
				generate.dot = generateDot;
				generate.group = generateGroup;
				generate.quantifier = generateQuantifier;
				generate.reference = generateReference;
				generate.value = generateValue;

				if (true) {
					!(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
						return {
							'generate': generate
						};
					}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
				} else if (freeExports && freeModule) {
						freeExports.generate = generate;
					} else {
							root.regjsgen = {
								'generate': generate
							};
						}
			}).call(this);
		}).call(exports, __webpack_require__(75)(module), function () {
			return this;
		}());
	}, function (module, exports) {

		(function () {

			function parse(str, flags) {
				function addRaw(node) {
					node.raw = str.substring(node.range[0], node.range[1]);
					return node;
				}

				function updateRawStart(node, start) {
					node.range[0] = start;
					return addRaw(node);
				}

				function createAnchor(kind, rawLength) {
					return addRaw({
						type: 'anchor',
						kind: kind,
						range: [pos - rawLength, pos]
					});
				}

				function createValue(kind, codePoint, from, to) {
					return addRaw({
						type: 'value',
						kind: kind,
						codePoint: codePoint,
						range: [from, to]
					});
				}

				function createEscaped(kind, codePoint, value, fromOffset) {
					fromOffset = fromOffset || 0;
					return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
				}

				function createCharacter(matches) {
					var _char = matches[0];
					var first = _char.charCodeAt(0);
					if (hasUnicodeFlag) {
						var second;
						if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
							second = lookahead().charCodeAt(0);
							if (second >= 0xDC00 && second <= 0xDFFF) {
								pos++;
								return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
							}
						}
					}
					return createValue('symbol', first, pos - 1, pos);
				}

				function createDisjunction(alternatives, from, to) {
					return addRaw({
						type: 'disjunction',
						body: alternatives,
						range: [from, to]
					});
				}

				function createDot() {
					return addRaw({
						type: 'dot',
						range: [pos - 1, pos]
					});
				}

				function createCharacterClassEscape(value) {
					return addRaw({
						type: 'characterClassEscape',
						value: value,
						range: [pos - 2, pos]
					});
				}

				function createReference(matchIndex) {
					return addRaw({
						type: 'reference',
						matchIndex: parseInt(matchIndex, 10),
						range: [pos - 1 - matchIndex.length, pos]
					});
				}

				function createGroup(behavior, disjunction, from, to) {
					return addRaw({
						type: 'group',
						behavior: behavior,
						body: disjunction,
						range: [from, to]
					});
				}

				function createQuantifier(min, max, from, to) {
					if (to == null) {
						from = pos - 1;
						to = pos;
					}

					return addRaw({
						type: 'quantifier',
						min: min,
						max: max,
						greedy: true,
						body: null,
						range: [from, to]
					});
				}

				function createAlternative(terms, from, to) {
					return addRaw({
						type: 'alternative',
						body: terms,
						range: [from, to]
					});
				}

				function createCharacterClass(classRanges, negative, from, to) {
					return addRaw({
						type: 'characterClass',
						body: classRanges,
						negative: negative,
						range: [from, to]
					});
				}

				function createClassRange(min, max, from, to) {
					if (min.codePoint > max.codePoint) {
						bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
					}

					return addRaw({
						type: 'characterClassRange',
						min: min,
						max: max,
						range: [from, to]
					});
				}

				function flattenBody(body) {
					if (body.type === 'alternative') {
						return body.body;
					} else {
						return [body];
					}
				}

				function isEmpty(obj) {
					return obj.type === 'empty';
				}

				function incr(amount) {
					amount = amount || 1;
					var res = str.substring(pos, pos + amount);
					pos += amount || 1;
					return res;
				}

				function skip(value) {
					if (!match(value)) {
						bail('character', value);
					}
				}

				function match(value) {
					if (str.indexOf(value, pos) === pos) {
						return incr(value.length);
					}
				}

				function lookahead() {
					return str[pos];
				}

				function current(value) {
					return str.indexOf(value, pos) === pos;
				}

				function next(value) {
					return str[pos + 1] === value;
				}

				function matchReg(regExp) {
					var subStr = str.substring(pos);
					var res = subStr.match(regExp);
					if (res) {
						res.range = [];
						res.range[0] = pos;
						incr(res[0].length);
						res.range[1] = pos;
					}
					return res;
				}

				function parseDisjunction() {
					var res = [],
					    from = pos;
					res.push(parseAlternative());

					while (match('|')) {
						res.push(parseAlternative());
					}

					if (res.length === 1) {
						return res[0];
					}

					return createDisjunction(res, from, pos);
				}

				function parseAlternative() {
					var res = [],
					    from = pos;
					var term;

					while (term = parseTerm()) {
						res.push(term);
					}

					if (res.length === 1) {
						return res[0];
					}

					return createAlternative(res, from, pos);
				}

				function parseTerm() {

					if (pos >= str.length || current('|') || current(')')) {
						return null;
					}

					var anchor = parseAnchor();

					if (anchor) {
						return anchor;
					}

					var atom = parseAtom();
					if (!atom) {
						bail('Expected atom');
					}
					var quantifier = parseQuantifier() || false;
					if (quantifier) {
						quantifier.body = flattenBody(atom);

						updateRawStart(quantifier, atom.range[0]);
						return quantifier;
					}
					return atom;
				}

				function parseGroup(matchA, typeA, matchB, typeB) {
					var type = null,
					    from = pos;

					if (match(matchA)) {
						type = typeA;
					} else if (match(matchB)) {
						type = typeB;
					} else {
						return false;
					}

					var body = parseDisjunction();
					if (!body) {
						bail('Expected disjunction');
					}
					skip(')');
					var group = createGroup(type, flattenBody(body), from, pos);

					if (type == 'normal') {
						if (firstIteration) {
							closedCaptureCounter++;
						}
					}
					return group;
				}

				function parseAnchor() {
					var res,
					    from = pos;

					if (match('^')) {
						return createAnchor('start', 1);
					} else if (match('$')) {
						return createAnchor('end', 1);
					} else if (match('\\b')) {
						return createAnchor('boundary', 2);
					} else if (match('\\B')) {
						return createAnchor('not-boundary', 2);
					} else {
						return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
					}
				}

				function parseQuantifier() {

					var res,
					    from = pos;
					var quantifier;
					var min, max;

					if (match('*')) {
						quantifier = createQuantifier(0);
					} else if (match('+')) {
						quantifier = createQuantifier(1);
					} else if (match('?')) {
						quantifier = createQuantifier(0, 1);
					} else if (res = matchReg(/^\{([0-9]+)\}/)) {
						min = parseInt(res[1], 10);
						quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
					} else if (res = matchReg(/^\{([0-9]+),\}/)) {
						min = parseInt(res[1], 10);
						quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
					} else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
						min = parseInt(res[1], 10);
						max = parseInt(res[2], 10);
						if (min > max) {
							bail('numbers out of order in {} quantifier', '', from, pos);
						}
						quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
					}

					if (quantifier) {
						if (match('?')) {
							quantifier.greedy = false;
							quantifier.range[1] += 1;
						}
					}

					return quantifier;
				}

				function parseAtom() {

					var res;

					if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
						return createCharacter(res);
					} else if (match('.')) {
						return createDot();
					} else if (match('\\')) {
						res = parseAtomEscape();
						if (!res) {
							bail('atomEscape');
						}
						return res;
					} else if (res = parseCharacterClass()) {
						return res;
					} else {
						return parseGroup('(?:', 'ignore', '(', 'normal');
					}
				}

				function parseUnicodeSurrogatePairEscape(firstEscape) {
					if (hasUnicodeFlag) {
						var first, second;
						if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\') && next('u')) {
							var prevPos = pos;
							pos++;
							var secondEscape = parseClassEscape();
							if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
								firstEscape.range[1] = secondEscape.range[1];
								firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
								firstEscape.type = 'value';
								firstEscape.kind = 'unicodeCodePointEscape';
								addRaw(firstEscape);
							} else {
								pos = prevPos;
							}
						}
					}
					return firstEscape;
				}

				function parseClassEscape() {
					return parseAtomEscape(true);
				}

				function parseAtomEscape(insideCharacterClass) {

					var res,
					    from = pos;

					res = parseDecimalEscape();
					if (res) {
						return res;
					}

					if (insideCharacterClass) {
						if (match('b')) {
							return createEscaped('singleEscape', 0x0008, '\\b');
						} else if (match('B')) {
							bail('\\B not possible inside of CharacterClass', '', from);
						}
					}

					res = parseCharacterEscape();

					return res;
				}

				function parseDecimalEscape() {

					var res, match;

					if (res = matchReg(/^(?!0)\d+/)) {
						match = res[0];
						var refIdx = parseInt(res[0], 10);
						if (refIdx <= closedCaptureCounter) {
							return createReference(res[0]);
						} else {
							backrefDenied.push(refIdx);

							incr(-res[0].length);
							if (res = matchReg(/^[0-7]{1,3}/)) {
								return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
							} else {
								res = createCharacter(matchReg(/^[89]/));
								return updateRawStart(res, res.range[0] - 1);
							}
						}
					} else if (res = matchReg(/^[0-7]{1,3}/)) {
							match = res[0];
							if (/^0{1,3}$/.test(match)) {
								return createEscaped('null', 0x0000, '0', match.length + 1);
							} else {
								return createEscaped('octal', parseInt(match, 8), match, 1);
							}
						} else if (res = matchReg(/^[dDsSwW]/)) {
							return createCharacterClassEscape(res[0]);
						}
					return false;
				}

				function parseCharacterEscape() {

					var res;
					if (res = matchReg(/^[fnrtv]/)) {
						var codePoint = 0;
						switch (res[0]) {
							case 't':
								codePoint = 0x009;break;
							case 'n':
								codePoint = 0x00A;break;
							case 'v':
								codePoint = 0x00B;break;
							case 'f':
								codePoint = 0x00C;break;
							case 'r':
								codePoint = 0x00D;break;
						}
						return createEscaped('singleEscape', codePoint, '\\' + res[0]);
					} else if (res = matchReg(/^c([a-zA-Z])/)) {
						return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
					} else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
						return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
					} else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
						return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));
					} else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
						return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
					} else {
						return parseIdentityEscape();
					}
				}

				function isIdentifierPart(ch) {
					var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');

					return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57 || ch === 92 || ch >= 0x80 && NonAsciiIdentifierPart.test(String.fromCharCode(ch));
				}

				function parseIdentityEscape() {

					var ZWJ = '\u200C';
					var ZWNJ = '\u200D';

					var tmp;

					if (!isIdentifierPart(lookahead())) {
						tmp = incr();
						return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
					}

					if (match(ZWJ)) {
						return createEscaped('identifier', 0x200C, ZWJ);
					} else if (match(ZWNJ)) {
						return createEscaped('identifier', 0x200D, ZWNJ);
					}

					return null;
				}

				function parseCharacterClass() {

					var res,
					    from = pos;
					if (res = matchReg(/^\[\^/)) {
						res = parseClassRanges();
						skip(']');
						return createCharacterClass(res, true, from, pos);
					} else if (match('[')) {
						res = parseClassRanges();
						skip(']');
						return createCharacterClass(res, false, from, pos);
					}

					return null;
				}

				function parseClassRanges() {

					var res;
					if (current(']')) {
						return [];
					} else {
						res = parseNonemptyClassRanges();
						if (!res) {
							bail('nonEmptyClassRanges');
						}
						return res;
					}
				}

				function parseHelperClassRanges(atom) {
					var from, to, res;
					if (current('-') && !next(']')) {
						skip('-');

						res = parseClassAtom();
						if (!res) {
							bail('classAtom');
						}
						to = pos;
						var classRanges = parseClassRanges();
						if (!classRanges) {
							bail('classRanges');
						}
						from = atom.range[0];
						if (classRanges.type === 'empty') {
							return [createClassRange(atom, res, from, to)];
						}
						return [createClassRange(atom, res, from, to)].concat(classRanges);
					}

					res = parseNonemptyClassRangesNoDash();
					if (!res) {
						bail('nonEmptyClassRangesNoDash');
					}

					return [atom].concat(res);
				}

				function parseNonemptyClassRanges() {

					var atom = parseClassAtom();
					if (!atom) {
						bail('classAtom');
					}

					if (current(']')) {
						return [atom];
					}

					return parseHelperClassRanges(atom);
				}

				function parseNonemptyClassRangesNoDash() {

					var res = parseClassAtom();
					if (!res) {
						bail('classAtom');
					}
					if (current(']')) {
						return res;
					}

					return parseHelperClassRanges(res);
				}

				function parseClassAtom() {
					if (match('-')) {
						return createCharacter('-');
					} else {
						return parseClassAtomNoDash();
					}
				}

				function parseClassAtomNoDash() {

					var res;
					if (res = matchReg(/^[^\\\]-]/)) {
						return createCharacter(res[0]);
					} else if (match('\\')) {
						res = parseClassEscape();
						if (!res) {
							bail('classEscape');
						}

						return parseUnicodeSurrogatePairEscape(res);
					}
				}

				function bail(message, details, from, to) {
					from = from == null ? pos : from;
					to = to == null ? from : to;

					var contextStart = Math.max(0, from - 10);
					var contextEnd = Math.min(to + 10, str.length);

					var context = '    ' + str.substring(contextStart, contextEnd);
					var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';

					throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
				}

				var backrefDenied = [];
				var closedCaptureCounter = 0;
				var firstIteration = true;
				var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
				var pos = 0;

				str = String(str);
				if (str === '') {
					str = '(?:)';
				}

				var result = parseDisjunction();

				if (result.range[1] !== str.length) {
					bail('Could not parse entire input - got stuck', '', result.range[1]);
				}

				for (var i = 0; i < backrefDenied.length; i++) {
					if (backrefDenied[i] <= closedCaptureCounter) {
						pos = 0;
						firstIteration = false;
						return parseDisjunction();
					}
				}

				return result;
			}

			var regjsparser = {
				parse: parse
			};

			if (typeof module !== 'undefined' && module.exports) {
				module.exports = regjsparser;
			} else {
				window.regjsparser = regjsparser;
			}
		})();
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var isFinite = __webpack_require__(465);

		module.exports = function (str, n) {
			if (typeof str !== 'string') {
				throw new TypeError('Expected a string as the first argument');
			}

			if (n < 0 || !isFinite(n)) {
				throw new TypeError('Expected a finite positive number');
			}

			var ret = '';

			do {
				if (n & 1) {
					ret += str;
				}

				str += str;
			} while (n = n >> 1);

			return ret;
		};
	}, function (module, exports) {

		'use strict';

		module.exports = /^#!.*/;
	}, function (module, exports) {

		var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

		exports.encode = function (number) {
			if (0 <= number && number < intToCharMap.length) {
				return intToCharMap[number];
			}
			throw new TypeError("Must be between 0 and 63: " + number);
		};

		exports.decode = function (charCode) {
			var bigA = 65;
			var bigZ = 90;

			var littleA = 97;
			var littleZ = 122;

			var zero = 48;
			var nine = 57;

			var plus = 43;
			var slash = 47;

			var littleOffset = 26;
			var numberOffset = 52;

			if (bigA <= charCode && charCode <= bigZ) {
				return charCode - bigA;
			}

			if (littleA <= charCode && charCode <= littleZ) {
				return charCode - littleA + littleOffset;
			}

			if (zero <= charCode && charCode <= nine) {
				return charCode - zero + numberOffset;
			}

			if (charCode == plus) {
				return 62;
			}

			if (charCode == slash) {
				return 63;
			}

			return -1;
		};
	}, function (module, exports) {

		exports.GREATEST_LOWER_BOUND = 1;
		exports.LEAST_UPPER_BOUND = 2;

		function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
			var mid = Math.floor((aHigh - aLow) / 2) + aLow;
			var cmp = aCompare(aNeedle, aHaystack[mid], true);
			if (cmp === 0) {
				return mid;
			} else if (cmp > 0) {
				if (aHigh - mid > 1) {
					return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
				}

				if (aBias == exports.LEAST_UPPER_BOUND) {
					return aHigh < aHaystack.length ? aHigh : -1;
				} else {
					return mid;
				}
			} else {
				if (mid - aLow > 1) {
					return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
				}

				if (aBias == exports.LEAST_UPPER_BOUND) {
					return mid;
				} else {
					return aLow < 0 ? -1 : aLow;
				}
			}
		}

		exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
			if (aHaystack.length === 0) {
				return -1;
			}

			var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
			if (index < 0) {
				return -1;
			}

			while (index - 1 >= 0) {
				if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
					break;
				}
				--index;
			}

			return index;
		};
	}, function (module, exports, __webpack_require__) {

		var util = __webpack_require__(74);

		function generatedPositionAfter(mappingA, mappingB) {
			var lineA = mappingA.generatedLine;
			var lineB = mappingB.generatedLine;
			var columnA = mappingA.generatedColumn;
			var columnB = mappingB.generatedColumn;
			return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
		}

		function MappingList() {
			this._array = [];
			this._sorted = true;

			this._last = { generatedLine: -1, generatedColumn: 0 };
		}

		MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
			this._array.forEach(aCallback, aThisArg);
		};

		MappingList.prototype.add = function MappingList_add(aMapping) {
			if (generatedPositionAfter(this._last, aMapping)) {
				this._last = aMapping;
				this._array.push(aMapping);
			} else {
				this._sorted = false;
				this._array.push(aMapping);
			}
		};

		MappingList.prototype.toArray = function MappingList_toArray() {
			if (!this._sorted) {
				this._array.sort(util.compareByGeneratedPositionsInflated);
				this._sorted = true;
			}
			return this._array;
		};

		exports.MappingList = MappingList;
	}, function (module, exports) {
		function swap(ary, x, y) {
			var temp = ary[x];
			ary[x] = ary[y];
			ary[y] = temp;
		}

		function randomIntInRange(low, high) {
			return Math.round(low + Math.random() * (high - low));
		}

		function doQuickSort(ary, comparator, p, r) {

			if (p < r) {
				var pivotIndex = randomIntInRange(p, r);
				var i = p - 1;

				swap(ary, pivotIndex, r);
				var pivot = ary[r];

				for (var j = p; j < r; j++) {
					if (comparator(ary[j], pivot) <= 0) {
						i += 1;
						swap(ary, i, j);
					}
				}

				swap(ary, i + 1, j);
				var q = i + 1;

				doQuickSort(ary, comparator, p, q - 1);
				doQuickSort(ary, comparator, q + 1, r);
			}
		}

		exports.quickSort = function (ary, comparator) {
			doQuickSort(ary, comparator, 0, ary.length - 1);
		};
	}, function (module, exports, __webpack_require__) {

		var util = __webpack_require__(74);
		var binarySearch = __webpack_require__(621);
		var ArraySet = __webpack_require__(281).ArraySet;
		var base64VLQ = __webpack_require__(282);
		var quickSort = __webpack_require__(623).quickSort;

		function SourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
		}

		SourceMapConsumer.fromSourceMap = function (aSourceMap) {
			return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
		};

		SourceMapConsumer.prototype._version = 3;

		SourceMapConsumer.prototype.__generatedMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
			get: function get() {
				if (!this.__generatedMappings) {
					this._parseMappings(this._mappings, this.sourceRoot);
				}

				return this.__generatedMappings;
			}
		});

		SourceMapConsumer.prototype.__originalMappings = null;
		Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
			get: function get() {
				if (!this.__originalMappings) {
					this._parseMappings(this._mappings, this.sourceRoot);
				}

				return this.__originalMappings;
			}
		});

		SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
			var c = aStr.charAt(index);
			return c === ";" || c === ",";
		};

		SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
			throw new Error("Subclasses must implement _parseMappings");
		};

		SourceMapConsumer.GENERATED_ORDER = 1;
		SourceMapConsumer.ORIGINAL_ORDER = 2;

		SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
		SourceMapConsumer.LEAST_UPPER_BOUND = 2;

		SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
			var context = aContext || null;
			var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

			var mappings;
			switch (order) {
				case SourceMapConsumer.GENERATED_ORDER:
					mappings = this._generatedMappings;
					break;
				case SourceMapConsumer.ORIGINAL_ORDER:
					mappings = this._originalMappings;
					break;
				default:
					throw new Error("Unknown order of iteration.");
			}

			var sourceRoot = this.sourceRoot;
			mappings.map(function (mapping) {
				var source = mapping.source === null ? null : this._sources.at(mapping.source);
				if (source != null && sourceRoot != null) {
					source = util.join(sourceRoot, source);
				}
				return {
					source: source,
					generatedLine: mapping.generatedLine,
					generatedColumn: mapping.generatedColumn,
					originalLine: mapping.originalLine,
					originalColumn: mapping.originalColumn,
					name: mapping.name === null ? null : this._names.at(mapping.name)
				};
			}, this).forEach(aCallback, context);
		};

		SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
			var line = util.getArg(aArgs, 'line');

			var needle = {
				source: util.getArg(aArgs, 'source'),
				originalLine: line,
				originalColumn: util.getArg(aArgs, 'column', 0)
			};

			if (this.sourceRoot != null) {
				needle.source = util.relative(this.sourceRoot, needle.source);
			}
			if (!this._sources.has(needle.source)) {
				return [];
			}
			needle.source = this._sources.indexOf(needle.source);

			var mappings = [];

			var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
			if (index >= 0) {
				var mapping = this._originalMappings[index];

				if (aArgs.column === undefined) {
					var originalLine = mapping.originalLine;

					while (mapping && mapping.originalLine === originalLine) {
						mappings.push({
							line: util.getArg(mapping, 'generatedLine', null),
							column: util.getArg(mapping, 'generatedColumn', null),
							lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
						});

						mapping = this._originalMappings[++index];
					}
				} else {
					var originalColumn = mapping.originalColumn;

					while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
						mappings.push({
							line: util.getArg(mapping, 'generatedLine', null),
							column: util.getArg(mapping, 'generatedColumn', null),
							lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
						});

						mapping = this._originalMappings[++index];
					}
				}
			}

			return mappings;
		};

		exports.SourceMapConsumer = SourceMapConsumer;

		function BasicSourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			var version = util.getArg(sourceMap, 'version');
			var sources = util.getArg(sourceMap, 'sources');

			var names = util.getArg(sourceMap, 'names', []);
			var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
			var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
			var mappings = util.getArg(sourceMap, 'mappings');
			var file = util.getArg(sourceMap, 'file', null);

			if (version != this._version) {
				throw new Error('Unsupported version: ' + version);
			}

			sources = sources.map(String).map(util.normalize).map(function (source) {
				return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
			});

			this._names = ArraySet.fromArray(names.map(String), true);
			this._sources = ArraySet.fromArray(sources, true);

			this.sourceRoot = sourceRoot;
			this.sourcesContent = sourcesContent;
			this._mappings = mappings;
			this.file = file;
		}

		BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

		BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
			var smc = Object.create(BasicSourceMapConsumer.prototype);

			var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
			var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
			smc.sourceRoot = aSourceMap._sourceRoot;
			smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
			smc.file = aSourceMap._file;

			var generatedMappings = aSourceMap._mappings.toArray().slice();
			var destGeneratedMappings = smc.__generatedMappings = [];
			var destOriginalMappings = smc.__originalMappings = [];

			for (var i = 0, length = generatedMappings.length; i < length; i++) {
				var srcMapping = generatedMappings[i];
				var destMapping = new Mapping();
				destMapping.generatedLine = srcMapping.generatedLine;
				destMapping.generatedColumn = srcMapping.generatedColumn;

				if (srcMapping.source) {
					destMapping.source = sources.indexOf(srcMapping.source);
					destMapping.originalLine = srcMapping.originalLine;
					destMapping.originalColumn = srcMapping.originalColumn;

					if (srcMapping.name) {
						destMapping.name = names.indexOf(srcMapping.name);
					}

					destOriginalMappings.push(destMapping);
				}

				destGeneratedMappings.push(destMapping);
			}

			quickSort(smc.__originalMappings, util.compareByOriginalPositions);

			return smc;
		};

		BasicSourceMapConsumer.prototype._version = 3;

		Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
			get: function get() {
				return this._sources.toArray().map(function (s) {
					return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
				}, this);
			}
		});

		function Mapping() {
			this.generatedLine = 0;
			this.generatedColumn = 0;
			this.source = null;
			this.originalLine = null;
			this.originalColumn = null;
			this.name = null;
		}

		BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
			var generatedLine = 1;
			var previousGeneratedColumn = 0;
			var previousOriginalLine = 0;
			var previousOriginalColumn = 0;
			var previousSource = 0;
			var previousName = 0;
			var length = aStr.length;
			var index = 0;
			var cachedSegments = {};
			var temp = {};
			var originalMappings = [];
			var generatedMappings = [];
			var mapping, str, segment, end, value;

			while (index < length) {
				if (aStr.charAt(index) === ';') {
					generatedLine++;
					index++;
					previousGeneratedColumn = 0;
				} else if (aStr.charAt(index) === ',') {
					index++;
				} else {
					mapping = new Mapping();
					mapping.generatedLine = generatedLine;

					for (end = index; end < length; end++) {
						if (this._charIsMappingSeparator(aStr, end)) {
							break;
						}
					}
					str = aStr.slice(index, end);

					segment = cachedSegments[str];
					if (segment) {
						index += str.length;
					} else {
						segment = [];
						while (index < end) {
							base64VLQ.decode(aStr, index, temp);
							value = temp.value;
							index = temp.rest;
							segment.push(value);
						}

						if (segment.length === 2) {
							throw new Error('Found a source, but no line and column');
						}

						if (segment.length === 3) {
							throw new Error('Found a source and line, but no column');
						}

						cachedSegments[str] = segment;
					}

					mapping.generatedColumn = previousGeneratedColumn + segment[0];
					previousGeneratedColumn = mapping.generatedColumn;

					if (segment.length > 1) {
						mapping.source = previousSource + segment[1];
						previousSource += segment[1];

						mapping.originalLine = previousOriginalLine + segment[2];
						previousOriginalLine = mapping.originalLine;

						mapping.originalLine += 1;

						mapping.originalColumn = previousOriginalColumn + segment[3];
						previousOriginalColumn = mapping.originalColumn;

						if (segment.length > 4) {
							mapping.name = previousName + segment[4];
							previousName += segment[4];
						}
					}

					generatedMappings.push(mapping);
					if (typeof mapping.originalLine === 'number') {
						originalMappings.push(mapping);
					}
				}
			}

			quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
			this.__generatedMappings = generatedMappings;

			quickSort(originalMappings, util.compareByOriginalPositions);
			this.__originalMappings = originalMappings;
		};

		BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {

			if (aNeedle[aLineName] <= 0) {
				throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
			}
			if (aNeedle[aColumnName] < 0) {
				throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
			}

			return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
		};

		BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
			for (var index = 0; index < this._generatedMappings.length; ++index) {
				var mapping = this._generatedMappings[index];

				if (index + 1 < this._generatedMappings.length) {
					var nextMapping = this._generatedMappings[index + 1];

					if (mapping.generatedLine === nextMapping.generatedLine) {
						mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
						continue;
					}
				}

				mapping.lastGeneratedColumn = Infinity;
			}
		};

		BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
			var needle = {
				generatedLine: util.getArg(aArgs, 'line'),
				generatedColumn: util.getArg(aArgs, 'column')
			};

			var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));

			if (index >= 0) {
				var mapping = this._generatedMappings[index];

				if (mapping.generatedLine === needle.generatedLine) {
					var source = util.getArg(mapping, 'source', null);
					if (source !== null) {
						source = this._sources.at(source);
						if (this.sourceRoot != null) {
							source = util.join(this.sourceRoot, source);
						}
					}
					var name = util.getArg(mapping, 'name', null);
					if (name !== null) {
						name = this._names.at(name);
					}
					return {
						source: source,
						line: util.getArg(mapping, 'originalLine', null),
						column: util.getArg(mapping, 'originalColumn', null),
						name: name
					};
				}
			}

			return {
				source: null,
				line: null,
				column: null,
				name: null
			};
		};

		BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
			if (!this.sourcesContent) {
				return false;
			}
			return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
				return sc == null;
			});
		};

		BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
			if (!this.sourcesContent) {
				return null;
			}

			if (this.sourceRoot != null) {
				aSource = util.relative(this.sourceRoot, aSource);
			}

			if (this._sources.has(aSource)) {
				return this.sourcesContent[this._sources.indexOf(aSource)];
			}

			var url;
			if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
				var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
				if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
					return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
				}

				if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
					return this.sourcesContent[this._sources.indexOf("/" + aSource)];
				}
			}

			if (nullOnMissing) {
				return null;
			} else {
				throw new Error('"' + aSource + '" is not in the SourceMap.');
			}
		};

		BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
			var source = util.getArg(aArgs, 'source');
			if (this.sourceRoot != null) {
				source = util.relative(this.sourceRoot, source);
			}
			if (!this._sources.has(source)) {
				return {
					line: null,
					column: null,
					lastColumn: null
				};
			}
			source = this._sources.indexOf(source);

			var needle = {
				source: source,
				originalLine: util.getArg(aArgs, 'line'),
				originalColumn: util.getArg(aArgs, 'column')
			};

			var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));

			if (index >= 0) {
				var mapping = this._originalMappings[index];

				if (mapping.source === needle.source) {
					return {
						line: util.getArg(mapping, 'generatedLine', null),
						column: util.getArg(mapping, 'generatedColumn', null),
						lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
					};
				}
			}

			return {
				line: null,
				column: null,
				lastColumn: null
			};
		};

		exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

		function IndexedSourceMapConsumer(aSourceMap) {
			var sourceMap = aSourceMap;
			if (typeof aSourceMap === 'string') {
				sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
			}

			var version = util.getArg(sourceMap, 'version');
			var sections = util.getArg(sourceMap, 'sections');

			if (version != this._version) {
				throw new Error('Unsupported version: ' + version);
			}

			this._sources = new ArraySet();
			this._names = new ArraySet();

			var lastOffset = {
				line: -1,
				column: 0
			};
			this._sections = sections.map(function (s) {
				if (s.url) {
					throw new Error('Support for url field in sections not implemented.');
				}
				var offset = util.getArg(s, 'offset');
				var offsetLine = util.getArg(offset, 'line');
				var offsetColumn = util.getArg(offset, 'column');

				if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
					throw new Error('Section offsets must be ordered and non-overlapping.');
				}
				lastOffset = offset;

				return {
					generatedOffset: {
						generatedLine: offsetLine + 1,
						generatedColumn: offsetColumn + 1
					},
					consumer: new SourceMapConsumer(util.getArg(s, 'map'))
				};
			});
		}

		IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
		IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

		IndexedSourceMapConsumer.prototype._version = 3;

		Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
			get: function get() {
				var sources = [];
				for (var i = 0; i < this._sections.length; i++) {
					for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
						sources.push(this._sections[i].consumer.sources[j]);
					}
				}
				return sources;
			}
		});

		IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
			var needle = {
				generatedLine: util.getArg(aArgs, 'line'),
				generatedColumn: util.getArg(aArgs, 'column')
			};

			var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {
				var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
				if (cmp) {
					return cmp;
				}

				return needle.generatedColumn - section.generatedOffset.generatedColumn;
			});
			var section = this._sections[sectionIndex];

			if (!section) {
				return {
					source: null,
					line: null,
					column: null,
					name: null
				};
			}

			return section.consumer.originalPositionFor({
				line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
				column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
				bias: aArgs.bias
			});
		};

		IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
			return this._sections.every(function (s) {
				return s.consumer.hasContentsOfAllSources();
			});
		};

		IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
			for (var i = 0; i < this._sections.length; i++) {
				var section = this._sections[i];

				var content = section.consumer.sourceContentFor(aSource, true);
				if (content) {
					return content;
				}
			}
			if (nullOnMissing) {
				return null;
			} else {
				throw new Error('"' + aSource + '" is not in the SourceMap.');
			}
		};

		IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
			for (var i = 0; i < this._sections.length; i++) {
				var section = this._sections[i];

				if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
					continue;
				}
				var generatedPosition = section.consumer.generatedPositionFor(aArgs);
				if (generatedPosition) {
					var ret = {
						line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
						column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
					};
					return ret;
				}
			}

			return {
				line: null,
				column: null
			};
		};

		IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
			this.__generatedMappings = [];
			this.__originalMappings = [];
			for (var i = 0; i < this._sections.length; i++) {
				var section = this._sections[i];
				var sectionMappings = section.consumer._generatedMappings;
				for (var j = 0; j < sectionMappings.length; j++) {
					var mapping = sectionMappings[j];

					var source = section.consumer._sources.at(mapping.source);
					if (section.consumer.sourceRoot !== null) {
						source = util.join(section.consumer.sourceRoot, source);
					}
					this._sources.add(source);
					source = this._sources.indexOf(source);

					var name = section.consumer._names.at(mapping.name);
					this._names.add(name);
					name = this._names.indexOf(name);

					var adjustedMapping = {
						source: source,
						generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
						generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
						originalLine: mapping.originalLine,
						originalColumn: mapping.originalColumn,
						name: name
					};

					this.__generatedMappings.push(adjustedMapping);
					if (typeof adjustedMapping.originalLine === 'number') {
						this.__originalMappings.push(adjustedMapping);
					}
				}
			}

			quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
			quickSort(this.__originalMappings, util.compareByOriginalPositions);
		};

		exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	}, function (module, exports, __webpack_require__) {

		var SourceMapGenerator = __webpack_require__(283).SourceMapGenerator;
		var util = __webpack_require__(74);

		var REGEX_NEWLINE = /(\r?\n)/;

		var NEWLINE_CODE = 10;

		var isSourceNode = "$$$isSourceNode$$$";

		function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
			this.children = [];
			this.sourceContents = {};
			this.line = aLine == null ? null : aLine;
			this.column = aColumn == null ? null : aColumn;
			this.source = aSource == null ? null : aSource;
			this.name = aName == null ? null : aName;
			this[isSourceNode] = true;
			if (aChunks != null) this.add(aChunks);
		}

		SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
			var node = new SourceNode();

			var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
			var shiftNextLine = function shiftNextLine() {
				var lineContents = remainingLines.shift();

				var newLine = remainingLines.shift() || "";
				return lineContents + newLine;
			};

			var lastGeneratedLine = 1,
			    lastGeneratedColumn = 0;

			var lastMapping = null;

			aSourceMapConsumer.eachMapping(function (mapping) {
				if (lastMapping !== null) {
					if (lastGeneratedLine < mapping.generatedLine) {
						addMappingWithCode(lastMapping, shiftNextLine());
						lastGeneratedLine++;
						lastGeneratedColumn = 0;
					} else {
						var nextLine = remainingLines[0];
						var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
						remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
						lastGeneratedColumn = mapping.generatedColumn;
						addMappingWithCode(lastMapping, code);

						lastMapping = mapping;
						return;
					}
				}

				while (lastGeneratedLine < mapping.generatedLine) {
					node.add(shiftNextLine());
					lastGeneratedLine++;
				}
				if (lastGeneratedColumn < mapping.generatedColumn) {
					var nextLine = remainingLines[0];
					node.add(nextLine.substr(0, mapping.generatedColumn));
					remainingLines[0] = nextLine.substr(mapping.generatedColumn);
					lastGeneratedColumn = mapping.generatedColumn;
				}
				lastMapping = mapping;
			}, this);

			if (remainingLines.length > 0) {
				if (lastMapping) {
					addMappingWithCode(lastMapping, shiftNextLine());
				}

				node.add(remainingLines.join(""));
			}

			aSourceMapConsumer.sources.forEach(function (sourceFile) {
				var content = aSourceMapConsumer.sourceContentFor(sourceFile);
				if (content != null) {
					if (aRelativePath != null) {
						sourceFile = util.join(aRelativePath, sourceFile);
					}
					node.setSourceContent(sourceFile, content);
				}
			});

			return node;

			function addMappingWithCode(mapping, code) {
				if (mapping === null || mapping.source === undefined) {
					node.add(code);
				} else {
					var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
					node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
				}
			}
		};

		SourceNode.prototype.add = function SourceNode_add(aChunk) {
			if (Array.isArray(aChunk)) {
				aChunk.forEach(function (chunk) {
					this.add(chunk);
				}, this);
			} else if (aChunk[isSourceNode] || typeof aChunk === "string") {
				if (aChunk) {
					this.children.push(aChunk);
				}
			} else {
				throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
			}
			return this;
		};

		SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
			if (Array.isArray(aChunk)) {
				for (var i = aChunk.length - 1; i >= 0; i--) {
					this.prepend(aChunk[i]);
				}
			} else if (aChunk[isSourceNode] || typeof aChunk === "string") {
				this.children.unshift(aChunk);
			} else {
				throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
			}
			return this;
		};

		SourceNode.prototype.walk = function SourceNode_walk(aFn) {
			var chunk;
			for (var i = 0, len = this.children.length; i < len; i++) {
				chunk = this.children[i];
				if (chunk[isSourceNode]) {
					chunk.walk(aFn);
				} else {
					if (chunk !== '') {
						aFn(chunk, { source: this.source,
							line: this.line,
							column: this.column,
							name: this.name });
					}
				}
			}
		};

		SourceNode.prototype.join = function SourceNode_join(aSep) {
			var newChildren;
			var i;
			var len = this.children.length;
			if (len > 0) {
				newChildren = [];
				for (i = 0; i < len - 1; i++) {
					newChildren.push(this.children[i]);
					newChildren.push(aSep);
				}
				newChildren.push(this.children[i]);
				this.children = newChildren;
			}
			return this;
		};

		SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
			var lastChild = this.children[this.children.length - 1];
			if (lastChild[isSourceNode]) {
				lastChild.replaceRight(aPattern, aReplacement);
			} else if (typeof lastChild === 'string') {
				this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
			} else {
				this.children.push(''.replace(aPattern, aReplacement));
			}
			return this;
		};

		SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
			this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
		};

		SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
			for (var i = 0, len = this.children.length; i < len; i++) {
				if (this.children[i][isSourceNode]) {
					this.children[i].walkSourceContents(aFn);
				}
			}

			var sources = Object.keys(this.sourceContents);
			for (var i = 0, len = sources.length; i < len; i++) {
				aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
			}
		};

		SourceNode.prototype.toString = function SourceNode_toString() {
			var str = "";
			this.walk(function (chunk) {
				str += chunk;
			});
			return str;
		};

		SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
			var generated = {
				code: "",
				line: 1,
				column: 0
			};
			var map = new SourceMapGenerator(aArgs);
			var sourceMappingActive = false;
			var lastOriginalSource = null;
			var lastOriginalLine = null;
			var lastOriginalColumn = null;
			var lastOriginalName = null;
			this.walk(function (chunk, original) {
				generated.code += chunk;
				if (original.source !== null && original.line !== null && original.column !== null) {
					if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
						map.addMapping({
							source: original.source,
							original: {
								line: original.line,
								column: original.column
							},
							generated: {
								line: generated.line,
								column: generated.column
							},
							name: original.name
						});
					}
					lastOriginalSource = original.source;
					lastOriginalLine = original.line;
					lastOriginalColumn = original.column;
					lastOriginalName = original.name;
					sourceMappingActive = true;
				} else if (sourceMappingActive) {
					map.addMapping({
						generated: {
							line: generated.line,
							column: generated.column
						}
					});
					lastOriginalSource = null;
					sourceMappingActive = false;
				}
				for (var idx = 0, length = chunk.length; idx < length; idx++) {
					if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
						generated.line++;
						generated.column = 0;

						if (idx + 1 === length) {
							lastOriginalSource = null;
							sourceMappingActive = false;
						} else if (sourceMappingActive) {
							map.addMapping({
								source: original.source,
								original: {
									line: original.line,
									column: original.column
								},
								generated: {
									line: generated.line,
									column: generated.column
								},
								name: original.name
							});
						}
					} else {
						generated.column++;
					}
				}
			});
			this.walkSourceContents(function (sourceFile, sourceContent) {
				map.setSourceContent(sourceFile, sourceContent);
			});

			return { code: generated.code, map: map };
		};

		exports.SourceNode = SourceNode;
	}, function (module, exports, __webpack_require__) {

		'use strict';

		var ansiRegex = __webpack_require__(184)();

		module.exports = function (str) {
			return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
		};
	}, function (module, exports, __webpack_require__) {
		(function (process) {
			'use strict';

			var argv = process.argv;

			var terminator = argv.indexOf('--');
			var hasFlag = function hasFlag(flag) {
				flag = '--' + flag;
				var pos = argv.indexOf(flag);
				return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
			};

			module.exports = function () {
				if ('FORCE_COLOR' in process.env) {
					return true;
				}

				if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
					return false;
				}

				if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
					return true;
				}

				if (process.stdout && !process.stdout.isTTY) {
					return false;
				}

				if (process.platform === 'win32') {
					return true;
				}

				if ('COLORTERM' in process.env) {
					return true;
				}

				if (process.env.TERM === 'dumb') {
					return false;
				}

				if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
					return true;
				}

				return false;
			}();
		}).call(exports, __webpack_require__(26));
	}, function (module, exports) {

		'use strict';

		module.exports = function toFastProperties(obj) {
			function f() {}
			f.prototype = obj;
			new f();
			return;
			eval(obj);
		};
	}, function (module, exports) {

		if (typeof Object.create === 'function') {
			module.exports = function inherits(ctor, superCtor) {
				ctor.super_ = superCtor;
				ctor.prototype = Object.create(superCtor.prototype, {
					constructor: {
						value: ctor,
						enumerable: false,
						writable: true,
						configurable: true
					}
				});
			};
		} else {
			module.exports = function inherits(ctor, superCtor) {
				ctor.super_ = superCtor;
				var TempCtor = function TempCtor() {};
				TempCtor.prototype = superCtor.prototype;
				ctor.prototype = new TempCtor();
				ctor.prototype.constructor = ctor;
			};
		}
	}, function (module, exports) {

		module.exports = function isBuffer(arg) {
			return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
		};
	}]));
});
}, 328, null, "poctest/babel-standalone.js");
;require(73);
;require(0);
//# sourceMappingURL=index.ios.map